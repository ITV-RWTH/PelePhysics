#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  He
1  Ar
2  N
3  O
4  H
*/

// Species
#define N2_ID 0
#define H2_ID 1
#define H_ID 2
#define O2_ID 3
#define O_ID 4
#define OH_ID 5
#define H2O2_ID 6
#define HO2_ID 7
#define H2O_ID 8
#define NO_ID 9
#define NO2_ID 10
#define N2O_ID 11
#define N2H2_ID 12
#define NH3_ID 13
#define N2H4_ID 14
#define NH_ID 15
#define NH2_ID 16
#define HONO_ID 17
#define HNO_ID 18
#define H2NN_ID 19
#define N_ID 20
#define NNH_ID 21
#define H2NO_ID 22
#define N2H3_ID 23

#define NUM_GAS_ELEMENTS 5    // Elements in the homogeneous phase
#define NUM_GAS_SPECIES 24    // Species in the homogeneous phase
#define NUM_GAS_REACTIONS 150 // Reactions in the homogeneous phase

#define SITE_DENSITY 0.000000E+00 // mol/cm^2

#define NUM_SURFACE_ELEMENTS 0  // Additional elements in heterogeneous phase
#define NUM_SURFACE_SPECIES 0   // Species in the heterogeneous phase
#define NUM_SURFACE_REACTIONS 0 // Reactions in the heterogeneous phase

#define NUM_ELEMENTS (NUM_GAS_ELEMENTS + NUM_SURFACE_ELEMENTS)
#define NUM_SPECIES (NUM_GAS_SPECIES + NUM_SURFACE_SPECIES)
#define NUM_REACTIONS (NUM_GAS_REACTIONS + NUM_SURFACE_REACTIONS)

#define NUM_IONS 0

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 5;
  kk = 24;
  ii = 150;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[24] = {
  0.0356964374955379, // N2
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0293996589639560, // H2O2
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0333266679997334, // NO
  0.0217367677426367, // NO2
  0.0227205598345943, // N2O
  0.0333000333000333, // N2H2
  0.0587164582232400, // NH3
  0.0312051426075017, // N2H4
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0212707123561568, // HONO
  0.0322435029341588, // HNO
  0.0333000333000333, // H2NN
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312285303853601, // H2NO
  0.0322185707842000, // N2H3
};
#endif
const amrex::Real h_global_imw[24] = {
  0.0356964374955379, // N2
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0293996589639560, // H2O2
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0333266679997334, // NO
  0.0217367677426367, // NO2
  0.0227205598345943, // N2O
  0.0333000333000333, // N2H2
  0.0587164582232400, // NH3
  0.0312051426075017, // N2H4
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0212707123561568, // HONO
  0.0322435029341588, // HNO
  0.0333000333000333, // H2NN
  0.0713928749910759, // N
  0.0344566191165323, // NNH
  0.0312285303853601, // H2NO
  0.0322185707842000, // N2H3
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[24] = {
  28.014000, // N2
  2.016000,  // H2
  1.008000,  // H
  31.998000, // O2
  15.999000, // O
  17.007000, // OH
  34.014000, // H2O2
  33.006000, // HO2
  18.015000, // H2O
  30.006000, // NO
  46.005000, // NO2
  44.013000, // N2O
  30.030000, // N2H2
  17.031000, // NH3
  32.046000, // N2H4
  15.015000, // NH
  16.023000, // NH2
  47.013000, // HONO
  31.014000, // HNO
  30.030000, // H2NN
  14.007000, // N
  29.022000, // NNH
  32.022000, // H2NO
  31.038000, // N2H3
};
#endif
const amrex::Real h_global_mw[24] = {
  28.014000, // N2
  2.016000,  // H2
  1.008000,  // H
  31.998000, // O2
  15.999000, // O
  17.007000, // OH
  34.014000, // H2O2
  33.006000, // HO2
  18.015000, // H2O
  30.006000, // NO
  46.005000, // NO2
  44.013000, // N2O
  30.030000, // N2H2
  17.031000, // NH3
  32.046000, // N2H4
  15.015000, // NH
  16.023000, // NH2
  47.013000, // HONO
  31.014000, // HNO
  30.030000, // H2NN
  14.007000, // N
  29.022000, // NNH
  32.022000, // H2NO
  31.038000, // N2H3
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.0356964374955379;  // N2
  imw_new[1] = 0.4960317460317460;  // H2
  imw_new[2] = 0.9920634920634921;  // H
  imw_new[3] = 0.0312519532470779;  // O2
  imw_new[4] = 0.0625039064941559;  // O
  imw_new[5] = 0.0587993179279120;  // OH
  imw_new[6] = 0.0293996589639560;  // H2O2
  imw_new[7] = 0.0302975216627280;  // HO2
  imw_new[8] = 0.0555092978073827;  // H2O
  imw_new[9] = 0.0333266679997334;  // NO
  imw_new[10] = 0.0217367677426367; // NO2
  imw_new[11] = 0.0227205598345943; // N2O
  imw_new[12] = 0.0333000333000333; // N2H2
  imw_new[13] = 0.0587164582232400; // NH3
  imw_new[14] = 0.0312051426075017; // N2H4
  imw_new[15] = 0.0666000666000666; // NH
  imw_new[16] = 0.0624102852150034; // NH2
  imw_new[17] = 0.0212707123561568; // HONO
  imw_new[18] = 0.0322435029341588; // HNO
  imw_new[19] = 0.0333000333000333; // H2NN
  imw_new[20] = 0.0713928749910759; // N
  imw_new[21] = 0.0344566191165323; // NNH
  imw_new[22] = 0.0312285303853601; // H2NO
  imw_new[23] = 0.0322185707842000; // N2H3
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 28.014000;  // N2
  mw_new[1] = 2.016000;   // H2
  mw_new[2] = 1.008000;   // H
  mw_new[3] = 31.998000;  // O2
  mw_new[4] = 15.999000;  // O
  mw_new[5] = 17.007000;  // OH
  mw_new[6] = 34.014000;  // H2O2
  mw_new[7] = 33.006000;  // HO2
  mw_new[8] = 18.015000;  // H2O
  mw_new[9] = 30.006000;  // NO
  mw_new[10] = 46.005000; // NO2
  mw_new[11] = 44.013000; // N2O
  mw_new[12] = 30.030000; // N2H2
  mw_new[13] = 17.031000; // NH3
  mw_new[14] = 32.046000; // N2H4
  mw_new[15] = 15.015000; // NH
  mw_new[16] = 16.023000; // NH2
  mw_new[17] = 47.013000; // HONO
  mw_new[18] = 31.014000; // HNO
  mw_new[19] = 30.030000; // H2NN
  mw_new[20] = 14.007000; // N
  mw_new[21] = 29.022000; // NNH
  mw_new[22] = 32.022000; // H2NO
  mw_new[23] = 31.038000; // N2H3
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
                 2.37542590e-09 * T3 - 1.39708206e-12 * T4;
    // species 1: H2
    species[1] = +1.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
                 1.95517114e-08 * T3 - 7.17095663e-12 * T4;
    // species 2: H
    species[2] = +1.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
                 3.70192126e-12 * T3 + 2.14233822e-15 * T4;
    // species 3: O2
    species[3] = +2.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
                 9.77840434e-09 * T3 + 3.28877702e-12 * T4;
    // species 4: O
    species[4] = +2.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
                 5.98755115e-09 * T3 + 2.06876117e-12 * T4;
    // species 5: OH
    species[5] = +2.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
                 3.59926640e-09 * T3 + 1.26706930e-12 * T4;
    // species 6: H2O2
    species[6] = +3.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
                 2.06919945e-08 * T3 + 8.29766320e-12 * T4;
    // species 7: HO2
    species[7] = +3.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
                 2.35794011e-08 * T3 + 9.05614257e-12 * T4;
    // species 8: H2O
    species[8] = +3.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
                 5.52906960e-09 * T3 + 1.78282605e-12 * T4;
    // species 9: NO
    species[9] = +3.21859896e+00 - 4.63988124e-03 * T + 1.10443049e-05 * T2 -
                 9.34055507e-09 * T3 + 2.80554874e-12 * T4;
    // species 10: NO2
    species[10] = +2.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
                  2.04754260e-08 * T3 + 7.83505640e-12 * T4;
    // species 11: N2O
    species[11] = +1.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
                  9.68198030e-09 * T3 - 2.93071820e-12 * T4;
    // species 13: NH3
    species[13] = +3.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
                  1.98833970e-08 * T3 + 7.15267961e-12 * T4;
    // species 14: N2H4
    species[14] = +2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 15: NH
    species[15] = +2.49295037e+00 + 3.11795720e-04 * T - 1.48906628e-06 * T2 +
                  2.48167402e-09 * T3 - 1.03570916e-12 * T4;
    // species 16: NH2
    species[16] = +3.19198016e+00 - 2.04602827e-03 * T + 6.67756134e-06 * T2 -
                  5.24907235e-09 * T3 + 1.55589948e-12 * T4;
    // species 17: HONO
    species[17] = +2.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
                  8.27656474e-09 * T3 + 4.39957151e-12 * T4;
    // species 18: HNO
    species[18] = +3.53525574e+00 - 5.68543377e-03 * T + 1.85198540e-05 * T2 -
                  1.71881225e-08 * T3 + 5.55818157e-12 * T4;
    // species 19: H2NN
    species[19] = +3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 20: N
    species[20] = +1.50000000e+00;
    // species 21: NNH
    species[21] = +3.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
                  1.33263744e-08 * T3 + 4.41023397e-12 * T4;
    // species 22: H2NO
    species[22] = +2.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
                  1.62747853e-08 * T3 + 6.00352834e-12 * T4;
    // species 23: N2H3
    species[23] = +2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
  } else {
    // species 0: N2
    species[0] = +1.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
                 8.07555464e-11 * T3 - 4.76064275e-15 * T4;
    // species 1: H2
    species[1] = +1.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
                 1.90851899e-11 * T3 - 9.31121789e-16 * T4;
    // species 2: H
    species[2] = +1.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
                 2.25708298e-14 * T3 - 1.52992005e-18 * T4;
    // species 3: O2
    species[3] = +2.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
                 2.14656037e-11 * T3 - 1.36503784e-15 * T4;
    // species 4: O
    species[4] = +1.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
                 4.01267136e-12 * T3 - 4.17476574e-16 * T4;
    // species 5: OH
    species[5] = +1.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
                 4.09099910e-11 * T3 - 2.31382258e-15 * T4;
    // species 6: H2O2
    species[6] = +3.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
                 2.00823615e-10 * T3 - 1.15509243e-14 * T4;
    // species 7: HO2
    species[7] = +3.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
                 1.85973044e-11 * T3 + 4.98818315e-16 * T4;
    // species 8: H2O
    species[8] = +1.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
                 1.26088593e-10 * T3 - 8.40531676e-15 * T4;
    // species 9: NO
    species[9] = +2.26071234e+00 + 1.19101135e-03 * T - 4.29122646e-07 * T2 +
                 6.94481463e-11 * T3 - 4.03295681e-15 * T4;
    // species 10: NO2
    species[10] = +3.88475400e+00 + 2.17239550e-03 * T - 8.28069090e-07 * T2 +
                  1.57475100e-10 * T3 - 1.05108950e-14 * T4;
    // species 11: N2O
    species[11] = +3.82307290e+00 + 2.62702510e-03 * T - 9.58508720e-07 * T2 +
                  1.60007120e-10 * T3 - 9.77523020e-15 * T4;
    // species 13: NH3
    species[13] = +1.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
                  4.11767411e-10 * T3 - 2.90836787e-14 * T4;
    // species 14: N2H4
    species[14] = +3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 15: NH
    species[15] = +1.78372644e+00 + 1.32985888e-03 * T - 4.24785573e-07 * T2 +
                  7.83494442e-11 * T3 - 5.50451310e-15 * T4;
    // species 16: NH2
    species[16] = +1.59263049e+00 + 3.47683597e-03 * T - 1.08271624e-06 * T2 +
                  1.49342558e-10 * T3 - 5.75241187e-15 * T4;
    // species 17: HONO
    species[17] = +4.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
                  2.06498233e-10 * T3 - 1.22138679e-14 * T4;
    // species 18: HNO
    species[18] = +2.16598124e+00 + 2.99958892e-03 * T - 3.94376786e-07 * T2 -
                  3.85344089e-11 * T3 + 7.07602668e-15 * T4;
    // species 19: H2NN
    species[19] = +2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 20: N
    species[20] = +1.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
                  3.02262440e-11 * T3 - 2.03609830e-15 * T4;
    // species 21: NNH
    species[21] = +2.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
                  1.90508356e-10 * T3 - 1.14491506e-14 * T4;
    // species 22: H2NO
    species[22] = +2.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
                  2.75052692e-10 * T3 - 1.60643143e-14 * T4;
    // species 23: N2H3
    species[23] = +3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +1.55589425e+00 + 6.54339081e-03 * T - 8.81947855e-07 * T2 -
                  1.15971304e-09 * T3 + 3.97442230e-13 * T4;
  } else {
    // species 12: N2H2
    species[12] = +3.14686796e+00 + 4.81612315e-03 * T - 1.62748817e-06 * T2 +
                  2.50556098e-10 * T3 - 1.44494188e-14 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
                 2.37542590e-09 * T3 - 1.39708206e-12 * T4;
    // species 1: H2
    species[1] = +2.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
                 1.95517114e-08 * T3 - 7.17095663e-12 * T4;
    // species 2: H
    species[2] = +2.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
                 3.70192126e-12 * T3 + 2.14233822e-15 * T4;
    // species 3: O2
    species[3] = +3.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
                 9.77840434e-09 * T3 + 3.28877702e-12 * T4;
    // species 4: O
    species[4] = +3.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
                 5.98755115e-09 * T3 + 2.06876117e-12 * T4;
    // species 5: OH
    species[5] = +3.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
                 3.59926640e-09 * T3 + 1.26706930e-12 * T4;
    // species 6: H2O2
    species[6] = +4.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
                 2.06919945e-08 * T3 + 8.29766320e-12 * T4;
    // species 7: HO2
    species[7] = +4.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
                 2.35794011e-08 * T3 + 9.05614257e-12 * T4;
    // species 8: H2O
    species[8] = +4.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
                 5.52906960e-09 * T3 + 1.78282605e-12 * T4;
    // species 9: NO
    species[9] = +4.21859896e+00 - 4.63988124e-03 * T + 1.10443049e-05 * T2 -
                 9.34055507e-09 * T3 + 2.80554874e-12 * T4;
    // species 10: NO2
    species[10] = +3.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
                  2.04754260e-08 * T3 + 7.83505640e-12 * T4;
    // species 11: N2O
    species[11] = +2.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
                  9.68198030e-09 * T3 - 2.93071820e-12 * T4;
    // species 13: NH3
    species[13] = +4.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
                  1.98833970e-08 * T3 + 7.15267961e-12 * T4;
    // species 14: N2H4
    species[14] = +3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 15: NH
    species[15] = +3.49295037e+00 + 3.11795720e-04 * T - 1.48906628e-06 * T2 +
                  2.48167402e-09 * T3 - 1.03570916e-12 * T4;
    // species 16: NH2
    species[16] = +4.19198016e+00 - 2.04602827e-03 * T + 6.67756134e-06 * T2 -
                  5.24907235e-09 * T3 + 1.55589948e-12 * T4;
    // species 17: HONO
    species[17] = +3.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
                  8.27656474e-09 * T3 + 4.39957151e-12 * T4;
    // species 18: HNO
    species[18] = +4.53525574e+00 - 5.68543377e-03 * T + 1.85198540e-05 * T2 -
                  1.71881225e-08 * T3 + 5.55818157e-12 * T4;
    // species 19: H2NN
    species[19] = +4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 20: N
    species[20] = +2.50000000e+00;
    // species 21: NNH
    species[21] = +4.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
                  1.33263744e-08 * T3 + 4.41023397e-12 * T4;
    // species 22: H2NO
    species[22] = +3.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
                  1.62747853e-08 * T3 + 6.00352834e-12 * T4;
    // species 23: N2H3
    species[23] = +3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
  } else {
    // species 0: N2
    species[0] = +2.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
                 8.07555464e-11 * T3 - 4.76064275e-15 * T4;
    // species 1: H2
    species[1] = +2.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
                 1.90851899e-11 * T3 - 9.31121789e-16 * T4;
    // species 2: H
    species[2] = +2.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
                 2.25708298e-14 * T3 - 1.52992005e-18 * T4;
    // species 3: O2
    species[3] = +3.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
                 2.14656037e-11 * T3 - 1.36503784e-15 * T4;
    // species 4: O
    species[4] = +2.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
                 4.01267136e-12 * T3 - 4.17476574e-16 * T4;
    // species 5: OH
    species[5] = +2.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
                 4.09099910e-11 * T3 - 2.31382258e-15 * T4;
    // species 6: H2O2
    species[6] = +4.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
                 2.00823615e-10 * T3 - 1.15509243e-14 * T4;
    // species 7: HO2
    species[7] = +4.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
                 1.85973044e-11 * T3 + 4.98818315e-16 * T4;
    // species 8: H2O
    species[8] = +2.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
                 1.26088593e-10 * T3 - 8.40531676e-15 * T4;
    // species 9: NO
    species[9] = +3.26071234e+00 + 1.19101135e-03 * T - 4.29122646e-07 * T2 +
                 6.94481463e-11 * T3 - 4.03295681e-15 * T4;
    // species 10: NO2
    species[10] = +4.88475400e+00 + 2.17239550e-03 * T - 8.28069090e-07 * T2 +
                  1.57475100e-10 * T3 - 1.05108950e-14 * T4;
    // species 11: N2O
    species[11] = +4.82307290e+00 + 2.62702510e-03 * T - 9.58508720e-07 * T2 +
                  1.60007120e-10 * T3 - 9.77523020e-15 * T4;
    // species 13: NH3
    species[13] = +2.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
                  4.11767411e-10 * T3 - 2.90836787e-14 * T4;
    // species 14: N2H4
    species[14] = +4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 15: NH
    species[15] = +2.78372644e+00 + 1.32985888e-03 * T - 4.24785573e-07 * T2 +
                  7.83494442e-11 * T3 - 5.50451310e-15 * T4;
    // species 16: NH2
    species[16] = +2.59263049e+00 + 3.47683597e-03 * T - 1.08271624e-06 * T2 +
                  1.49342558e-10 * T3 - 5.75241187e-15 * T4;
    // species 17: HONO
    species[17] = +5.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
                  2.06498233e-10 * T3 - 1.22138679e-14 * T4;
    // species 18: HNO
    species[18] = +3.16598124e+00 + 2.99958892e-03 * T - 3.94376786e-07 * T2 -
                  3.85344089e-11 * T3 + 7.07602668e-15 * T4;
    // species 19: H2NN
    species[19] = +3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 20: N
    species[20] = +2.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
                  3.02262440e-11 * T3 - 2.03609830e-15 * T4;
    // species 21: NNH
    species[21] = +3.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
                  1.90508356e-10 * T3 - 1.14491506e-14 * T4;
    // species 22: H2NO
    species[22] = +3.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
                  2.75052692e-10 * T3 - 1.60643143e-14 * T4;
    // species 23: N2H3
    species[23] = +4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +2.55589425e+00 + 6.54339081e-03 * T - 8.81947855e-07 * T2 -
                  1.15971304e-09 * T3 + 3.97442230e-13 * T4;
  } else {
    // species 12: N2H2
    species[12] = +4.14686796e+00 + 4.81612315e-03 * T - 1.62748817e-06 * T2 +
                  2.50556098e-10 * T3 - 1.44494188e-14 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.047496450000000e+03 * invT + 5.899979700000002e-01 -
                 3.536035210000000e+00 * logT + 7.913547200000000e-05 * T +
                 7.116404183333333e-08 * T2 - 1.979521583333333e-10 * T3 +
                 6.985410300000000e-14 * T4;
    // species 1: H2
    species[1] = -9.211730810000000e+02 * invT + 1.829757304000000e+00 -
                 2.376942040000000e+00 * logT - 3.869584610000000e-03 * T +
                 3.145584550000000e-06 * T2 - 1.629309283333333e-09 * T3 +
                 3.585478315000000e-13 * T4;
    // species 2: H
    species[2] = +2.547376650000000e+04 * invT + 2.945333259000000e+00 -
                 2.499759250000000e+00 * logT - 3.369122495000000e-07 * T -
                 1.863454350000000e-10 * T2 + 3.084934383333333e-13 * T3 -
                 1.071169110000000e-16 * T4;
    // species 3: O2
    species[3] = -1.064135890000000e+03 * invT + 1.371754899999997e-01 -
                 3.784982580000000e+00 * logT + 1.510011165000000e-03 * T -
                 1.653381951666667e-06 * T2 + 8.148670283333334e-10 * T3 -
                 1.644388510000000e-13 * T4;
    // species 4: O
    species[4] = +2.912984530000000e+04 * invT + 1.068281820000000e+00 -
                 3.159065260000000e+00 * logT + 1.607549995000000e-03 * T -
                 1.082092571666667e-06 * T2 + 4.989625958333333e-10 * T3 -
                 1.034380585000000e-13 * T4;
    // species 5: OH
    species[5] = +3.393411370000000e+03 * invT + 4.011391376200000e+00 -
                 3.975851650000000e+00 * logT + 1.142776455000000e-03 * T -
                 7.224048033333334e-07 * T2 + 2.999388666666666e-10 * T3 -
                 6.335346500000000e-14 * T4;
    // species 6: H2O2
    species[6] = -1.764860030000000e+04 * invT + 6.500406299999995e-01 -
                 4.238541600000000e+00 * logT + 1.248054555000000e-04 * T -
                 2.664298350000000e-06 * T2 + 1.724332875000000e-09 * T3 -
                 4.148831600000000e-13 * T4;
    // species 7: HO2
    species[7] = +2.624423560000000e+02 * invT + 3.802756599999997e-01 -
                 4.262512500000000e+00 * logT + 2.228210160000000e-03 * T -
                 3.419415566666667e-06 * T2 + 1.964950091666666e-09 * T3 -
                 4.528071285000000e-13 * T4;
    // species 8: H2O
    species[8] = -3.029500660000000e+04 * invT + 5.062086416000000e+00 -
                 4.201475510000000e+00 * logT + 1.027917730000000e-03 * T -
                 1.094245345000000e-06 * T2 + 4.607558000000000e-10 * T3 -
                 8.914130250000000e-14 * T4;
    // species 9: NO
    species[9] = +9.845099640000000e+03 * invT + 1.937988949999999e+00 -
                 4.218598960000000e+00 * logT + 2.319940620000000e-03 * T -
                 1.840717483333334e-06 * T2 + 7.783795891666667e-10 * T3 -
                 1.402774370000000e-13 * T4;
    // species 10: NO2
    species[10] = +2.896618000000000e+03 * invT - 2.367960700000000e+00 -
                  3.944031200000000e+00 * logT + 7.927145000000000e-04 * T -
                  2.776302000000000e-06 * T2 + 1.706285500000000e-09 * T3 -
                  3.917528200000000e-13 * T4;
    // species 11: N2O
    species[11] = +8.741774600000001e+03 * invT - 8.500841800000000e+00 -
                  2.257150200000000e+00 * logT - 5.652364000000000e-03 * T +
                  2.278553166666666e-06 * T2 - 8.068316916666668e-10 * T3 +
                  1.465359100000000e-13 * T4;
    // species 13: NH3
    species[13] = -6.685451580000000e+03 * invT + 4.156954198299999e+00 -
                  4.140278710000000e+00 * logT + 1.792445710000000e-03 * T -
                  3.157931733333333e-06 * T2 + 1.656949750000000e-09 * T3 -
                  3.576339805000000e-13 * T4;
    // species 14: N2H4
    species[14] = +1.008939250000000e+04 * invT - 1.917998810000000e+00 -
                  3.834721490000000e+00 * logT + 3.245647775000000e-04 * T -
                  6.280807716666667e-06 * T2 + 4.172576516666667e-09 * T3 -
                  1.016810320000000e-12 * T4;
    // species 15: NH
    species[15] = +4.210597220000000e+04 * invT + 1.644600640000000e+00 -
                  3.492950370000000e+00 * logT - 1.558978600000000e-04 * T +
                  2.481777133333333e-07 * T2 - 2.068061683333333e-10 * T3 +
                  5.178545800000000e-14 * T4;
    // species 16: NH2
    species[16] = +2.118632860000000e+04 * invT + 4.282458684400000e+00 -
                  4.191980160000000e+00 * logT + 1.023014135000000e-03 * T -
                  1.112926890000000e-06 * T2 + 4.374226958333334e-10 * T3 -
                  7.779497400000000e-14 * T4;
    // species 17: HONO
    species[17] = -1.077440860000000e+04 * invT - 6.859029720000000e+00 -
                  3.164164380000000e+00 * logT - 4.252588865000000e-03 * T -
                  9.142692883333333e-08 * T2 + 6.897137283333333e-10 * T3 -
                  2.199785755000000e-13 * T4;
    // species 18: HNO
    species[18] = +1.161830030000000e+04 * invT + 2.792096880000000e+00 -
                  4.535255740000000e+00 * logT + 2.842716885000000e-03 * T -
                  3.086642333333333e-06 * T2 + 1.432343541666667e-09 * T3 -
                  2.779090785000000e-13 * T4;
    // species 19: H2NN
    species[19] = +3.495800030000000e+04 * invT + 3.021298060000000e+00 -
                  4.532040010000000e+00 * logT + 3.662092890000000e-03 * T -
                  5.013395216666666e-06 * T2 + 2.533337925000000e-09 * T3 -
                  5.235031950000000e-13 * T4;
    // species 20: N
    species[20] = +5.610463800000000e+04 * invT - 1.693908800000000e+00 -
                  2.500000000000000e+00 * logT;
    // species 21: NNH
    species[21] = +2.879320800000000e+04 * invT + 9.692286999999999e-01 -
                  4.254746320000000e+00 * logT + 1.725491490000000e-03 * T -
                  2.296478316666667e-06 * T2 + 1.110531200000000e-09 * T3 -
                  2.205116985000000e-13 * T4;
    // species 22: H2NO
    species[22] = +6.711789750000000e+03 * invT - 6.563589899999998e-01 -
                  3.932011390000000e+00 * logT + 8.201408250000000e-05 * T -
                  2.319356816666666e-06 * T2 + 1.356232108333334e-09 * T3 -
                  3.001764170000000e-13 * T4;
    // species 23: N2H3
    species[23] = +2.581989560000000e+04 * invT - 4.410508040000000e+00 -
                  3.421255050000000e+00 * logT - 6.745079500000000e-04 * T -
                  3.724317850000000e-06 * T2 + 2.497731100000000e-09 * T3 -
                  6.048948500000000e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.171809900000000e+02 * invT - 3.017190150000000e+00 -
                 2.938029700000000e+00 * logT - 7.091901500000000e-04 * T +
                 8.388017416666667e-08 * T2 - 6.729628866666667e-12 * T3 +
                 2.380321375000000e-16 * T4;
    // species 1: H2
    species[1] = -7.979487260000000e+02 * invT + 3.747667810000000e+00 -
                 2.902076490000000e+00 * logT - 4.344962905000000e-04 * T +
                 2.764407166666667e-08 * T2 - 1.590432491666667e-12 * T3 +
                 4.655608945000000e-17 * T4;
    // species 2: H
    species[2] = +2.547380240000000e+04 * invT + 2.945716755000000e+00 -
                 2.499852110000000e+00 * logT - 1.172912740000000e-07 * T +
                 1.936194016666667e-11 * T2 - 1.880902483333334e-15 * T3 +
                 7.649600250000000e-20 * T4;
    // species 3: O2
    species[3] = -1.216030480000000e+03 * invT + 2.390634000000000e-01 -
                 3.659804880000000e+00 * logT - 3.299386860000000e-04 * T +
                 2.402636200000000e-08 * T2 - 1.788800308333333e-12 * T3 +
                 6.825189199999999e-17 * T4;
    // species 4: O
    species[4] = +2.922876280000000e+04 * invT - 2.324569270000000e+00 -
                 2.551600870000000e+00 * logT + 1.915427285000000e-05 * T -
                 1.405329130000000e-10 * T2 - 3.343892800000000e-13 * T3 +
                 2.087382870000000e-17 * T4;
    // species 5: OH
    species[5] = +3.717066100000000e+03 * invT - 2.957581940000000e+00 -
                 2.845817210000000e+00 * logT - 5.486190900000000e-04 * T +
                 4.818685016666667e-08 * T2 - 3.409165916666666e-12 * T3 +
                 1.156911290000000e-16 * T4;
    // species 6: H2O2
    species[6] = -1.795140290000000e+04 * invT + 3.684293055000000e+00 -
                 4.540174800000000e+00 * logT - 2.079854855000000e-03 * T +
                 2.181279616666667e-07 * T2 - 1.673530125000000e-11 * T3 +
                 5.775462150000000e-16 * T4;
    // species 7: HO2
    species[7] = +4.328987690000000e+01 * invT + 7.975588399999998e-01 -
                 4.105640100000000e+00 * logT - 1.020234180000000e-03 * T +
                 6.097959366666666e-08 * T2 - 1.549775366666667e-12 * T3 -
                 2.494091575000000e-17 * T4;
    // species 8: H2O
    species[8] = -2.991690820000000e+04 * invT - 3.820654880000000e+00 -
                 2.731175120000000e+00 * logT - 1.475684975000000e-03 * T +
                 1.392266308333333e-07 * T2 - 1.050738275000000e-11 * T3 +
                 4.202658380000000e-16 * T4;
    // species 9: NO
    species[9] = +9.921431320000000e+03 * invT - 3.108292840000000e+00 -
                 3.260712340000000e+00 * logT - 5.955056750000000e-04 * T +
                 7.152044099999999e-08 * T2 - 5.787345524999999e-12 * T3 +
                 2.016478405000000e-16 * T4;
    // species 10: NO2
    species[10] = +2.316498200000000e+03 * invT + 5.002170950000000e+00 -
                  4.884754000000000e+00 * logT - 1.086197750000000e-03 * T +
                  1.380115150000000e-07 * T2 - 1.312292500000000e-11 * T3 +
                  5.255447500000000e-16 * T4;
    // species 11: N2O
    species[11] = +8.073404700000000e+03 * invT + 7.024793700000000e+00 -
                  4.823072900000000e+00 * logT - 1.313512550000000e-03 * T +
                  1.597514533333333e-07 * T2 - 1.333392666666667e-11 * T3 +
                  4.887615100000000e-16 * T4;
    // species 13: NH3
    species[13] = -6.415964730000000e+03 * invT - 5.660800180000001e+00 -
                  2.360743110000000e+00 * logT - 3.159250730000000e-03 * T +
                  3.816113433333333e-07 * T2 - 3.431395091666667e-11 * T3 +
                  1.454183935000000e-15 * T4;
    // species 14: N2H4
    species[14] = +9.282655479999999e+03 * invT + 7.633971290000000e+00 -
                  4.939573570000000e+00 * logT - 4.375085935000000e-03 * T +
                  4.989984300000000e-07 * T2 - 3.893986816666666e-11 * T3 +
                  1.365342995000000e-15 * T4;
    // species 15: NH
    species[15] = +4.234619450000000e+04 * invT - 2.957122190000000e+00 -
                  2.783726440000000e+00 * logT - 6.649294400000000e-04 * T +
                  7.079759550000000e-08 * T2 - 6.529120350000000e-12 * T3 +
                  2.752256550000000e-16 * T4;
    // species 16: NH2
    species[16] = +2.157373200000000e+04 * invT - 5.313023019999999e+00 -
                  2.592630490000000e+00 * logT - 1.738417985000000e-03 * T +
                  1.804527066666667e-07 * T2 - 1.244521316666667e-11 * T3 +
                  2.876205935000000e-16 * T4;
    // species 17: HONO
    species[17] = -1.159743430000000e+04 * invT + 9.862899899999999e+00 -
                  5.791446410000000e+00 * logT - 1.823153660000000e-03 * T +
                  2.151879416666667e-07 * T2 - 1.720818608333333e-11 * T3 +
                  6.106933950000000e-16 * T4;
    // species 18: HNO
    species[18] = +1.177263110000000e+04 * invT - 4.479130480000000e+00 -
                  3.165981240000000e+00 * logT - 1.499794460000000e-03 * T +
                  6.572946433333333e-08 * T2 + 3.211200741666667e-12 * T3 -
                  3.538013340000000e-16 * T4;
    // species 19: H2NN
    species[19] = +3.485301490000000e+04 * invT - 3.639898450000000e+00 -
                  3.059036700000000e+00 * logT - 3.091911735000000e-03 * T +
                  3.702852750000000e-07 * T2 - 2.987826716666667e-11 * T3 +
                  1.072664525000000e-15 * T4;
    // species 20: N
    species[20] = +5.613377500000000e+04 * invT - 2.233666600000000e+00 -
                  2.415942900000000e+00 * logT - 8.744532500000000e-05 * T +
                  1.983728166666667e-08 * T2 - 2.518853666666667e-12 * T3 +
                  1.018049150000000e-16 * T4;
    // species 21: NNH
    species[21] = +2.876760260000000e+04 * invT - 2.964648100000000e+00 -
                  3.427444230000000e+00 * logT - 1.616476170000000e-03 * T +
                  1.954938316666667e-07 * T2 - 1.587569633333333e-11 * T3 +
                  5.724575300000000e-16 * T4;
    // species 22: H2NO
    species[22] = +6.518261770000000e+03 * invT - 5.537713900000005e-01 -
                  3.755559140000000e+00 * logT - 2.581096770000000e-03 * T +
                  2.939789783333333e-07 * T2 - 2.292105766666667e-11 * T3 +
                  8.032157149999999e-16 * T4;
    // species 23: N2H3
    species[23] = +2.532414200000000e+04 * invT + 1.160601740000001e+00 -
                  4.044835660000000e+00 * logT - 3.655650930000000e-03 * T +
                  4.127096650000000e-07 * T2 - 3.197775175000000e-11 * T3 +
                  1.115537865000000e-15 * T4;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +2.410850810000000e+04 * invT - 7.249152800000001e+00 -
                  2.555894250000000e+00 * logT - 3.271695405000000e-03 * T +
                  1.469913091666667e-07 * T2 + 9.664275333333333e-11 * T3 -
                  1.987211150000000e-14 * T4;
  } else {
    // species 12: N2H2
    species[12] = +2.334440550000000e+04 * invT + 3.612745220000000e+00 -
                  4.146867960000000e+00 * logT - 2.408061575000000e-03 * T +
                  2.712480283333333e-07 * T2 - 2.087967483333334e-11 * T3 +
                  7.224709400000001e-16 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.04749645e+03 * invT - 4.10002030e-01 -
                 3.53603521e+00 * logT + 7.91354720e-05 * T +
                 7.11640418e-08 * T2 - 1.97952158e-10 * T3 +
                 6.98541030e-14 * T4;
    // species 1: H2
    species[1] = -9.21173081e+02 * invT + 8.29757304e-01 -
                 2.37694204e+00 * logT - 3.86958461e-03 * T +
                 3.14558455e-06 * T2 - 1.62930928e-09 * T3 +
                 3.58547831e-13 * T4;
    // species 2: H
    species[2] = +2.54737665e+04 * invT + 1.94533326e+00 -
                 2.49975925e+00 * logT - 3.36912250e-07 * T -
                 1.86345435e-10 * T2 + 3.08493438e-13 * T3 -
                 1.07116911e-16 * T4;
    // species 3: O2
    species[3] = -1.06413589e+03 * invT - 8.62824510e-01 -
                 3.78498258e+00 * logT + 1.51001116e-03 * T -
                 1.65338195e-06 * T2 + 8.14867028e-10 * T3 -
                 1.64438851e-13 * T4;
    // species 4: O
    species[4] = +2.91298453e+04 * invT + 6.82818200e-02 -
                 3.15906526e+00 * logT + 1.60754999e-03 * T -
                 1.08209257e-06 * T2 + 4.98962596e-10 * T3 -
                 1.03438059e-13 * T4;
    // species 5: OH
    species[5] = +3.39341137e+03 * invT + 3.01139138e+00 -
                 3.97585165e+00 * logT + 1.14277645e-03 * T -
                 7.22404803e-07 * T2 + 2.99938867e-10 * T3 -
                 6.33534650e-14 * T4;
    // species 6: H2O2
    species[6] = -1.76486003e+04 * invT - 3.49959370e-01 -
                 4.23854160e+00 * logT + 1.24805455e-04 * T -
                 2.66429835e-06 * T2 + 1.72433288e-09 * T3 -
                 4.14883160e-13 * T4;
    // species 7: HO2
    species[7] = +2.62442356e+02 * invT - 6.19724340e-01 -
                 4.26251250e+00 * logT + 2.22821016e-03 * T -
                 3.41941557e-06 * T2 + 1.96495009e-09 * T3 -
                 4.52807128e-13 * T4;
    // species 8: H2O
    species[8] = -3.02950066e+04 * invT + 4.06208642e+00 -
                 4.20147551e+00 * logT + 1.02791773e-03 * T -
                 1.09424534e-06 * T2 + 4.60755800e-10 * T3 -
                 8.91413025e-14 * T4;
    // species 9: NO
    species[9] = +9.84509964e+03 * invT + 9.37988950e-01 -
                 4.21859896e+00 * logT + 2.31994062e-03 * T -
                 1.84071748e-06 * T2 + 7.78379589e-10 * T3 -
                 1.40277437e-13 * T4;
    // species 10: NO2
    species[10] = +2.89661800e+03 * invT - 3.36796070e+00 -
                  3.94403120e+00 * logT + 7.92714500e-04 * T -
                  2.77630200e-06 * T2 + 1.70628550e-09 * T3 -
                  3.91752820e-13 * T4;
    // species 11: N2O
    species[11] = +8.74177460e+03 * invT - 9.50084180e+00 -
                  2.25715020e+00 * logT - 5.65236400e-03 * T +
                  2.27855317e-06 * T2 - 8.06831692e-10 * T3 +
                  1.46535910e-13 * T4;
    // species 13: NH3
    species[13] = -6.68545158e+03 * invT + 3.15695420e+00 -
                  4.14027871e+00 * logT + 1.79244571e-03 * T -
                  3.15793173e-06 * T2 + 1.65694975e-09 * T3 -
                  3.57633980e-13 * T4;
    // species 14: N2H4
    species[14] = +1.00893925e+04 * invT - 2.91799881e+00 -
                  3.83472149e+00 * logT + 3.24564777e-04 * T -
                  6.28080772e-06 * T2 + 4.17257652e-09 * T3 -
                  1.01681032e-12 * T4;
    // species 15: NH
    species[15] = +4.21059722e+04 * invT + 6.44600640e-01 -
                  3.49295037e+00 * logT - 1.55897860e-04 * T +
                  2.48177713e-07 * T2 - 2.06806168e-10 * T3 +
                  5.17854580e-14 * T4;
    // species 16: NH2
    species[16] = +2.11863286e+04 * invT + 3.28245868e+00 -
                  4.19198016e+00 * logT + 1.02301413e-03 * T -
                  1.11292689e-06 * T2 + 4.37422696e-10 * T3 -
                  7.77949740e-14 * T4;
    // species 17: HONO
    species[17] = -1.07744086e+04 * invT - 7.85902972e+00 -
                  3.16416438e+00 * logT - 4.25258887e-03 * T -
                  9.14269288e-08 * T2 + 6.89713728e-10 * T3 -
                  2.19978576e-13 * T4;
    // species 18: HNO
    species[18] = +1.16183003e+04 * invT + 1.79209688e+00 -
                  4.53525574e+00 * logT + 2.84271688e-03 * T -
                  3.08664233e-06 * T2 + 1.43234354e-09 * T3 -
                  2.77909079e-13 * T4;
    // species 19: H2NN
    species[19] = +3.49580003e+04 * invT + 2.02129806e+00 -
                  4.53204001e+00 * logT + 3.66209289e-03 * T -
                  5.01339522e-06 * T2 + 2.53333792e-09 * T3 -
                  5.23503195e-13 * T4;
    // species 20: N
    species[20] =
      +5.61046380e+04 * invT - 2.69390880e+00 - 2.50000000e+00 * logT;
    // species 21: NNH
    species[21] = +2.87932080e+04 * invT - 3.07713000e-02 -
                  4.25474632e+00 * logT + 1.72549149e-03 * T -
                  2.29647832e-06 * T2 + 1.11053120e-09 * T3 -
                  2.20511699e-13 * T4;
    // species 22: H2NO
    species[22] = +6.71178975e+03 * invT - 1.65635899e+00 -
                  3.93201139e+00 * logT + 8.20140825e-05 * T -
                  2.31935682e-06 * T2 + 1.35623211e-09 * T3 -
                  3.00176417e-13 * T4;
    // species 23: N2H3
    species[23] = +2.58198956e+04 * invT - 5.41050804e+00 -
                  3.42125505e+00 * logT - 6.74507950e-04 * T -
                  3.72431785e-06 * T2 + 2.49773110e-09 * T3 -
                  6.04894850e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.17180990e+02 * invT - 4.01719015e+00 -
                 2.93802970e+00 * logT - 7.09190150e-04 * T +
                 8.38801742e-08 * T2 - 6.72962887e-12 * T3 +
                 2.38032138e-16 * T4;
    // species 1: H2
    species[1] = -7.97948726e+02 * invT + 2.74766781e+00 -
                 2.90207649e+00 * logT - 4.34496291e-04 * T +
                 2.76440717e-08 * T2 - 1.59043249e-12 * T3 +
                 4.65560895e-17 * T4;
    // species 2: H
    species[2] = +2.54738024e+04 * invT + 1.94571675e+00 -
                 2.49985211e+00 * logT - 1.17291274e-07 * T +
                 1.93619402e-11 * T2 - 1.88090248e-15 * T3 +
                 7.64960025e-20 * T4;
    // species 3: O2
    species[3] = -1.21603048e+03 * invT - 7.60936600e-01 -
                 3.65980488e+00 * logT - 3.29938686e-04 * T +
                 2.40263620e-08 * T2 - 1.78880031e-12 * T3 +
                 6.82518920e-17 * T4;
    // species 4: O
    species[4] = +2.92287628e+04 * invT - 3.32456927e+00 -
                 2.55160087e+00 * logT + 1.91542728e-05 * T -
                 1.40532913e-10 * T2 - 3.34389280e-13 * T3 +
                 2.08738287e-17 * T4;
    // species 5: OH
    species[5] = +3.71706610e+03 * invT - 3.95758194e+00 -
                 2.84581721e+00 * logT - 5.48619090e-04 * T +
                 4.81868502e-08 * T2 - 3.40916592e-12 * T3 +
                 1.15691129e-16 * T4;
    // species 6: H2O2
    species[6] = -1.79514029e+04 * invT + 2.68429305e+00 -
                 4.54017480e+00 * logT - 2.07985485e-03 * T +
                 2.18127962e-07 * T2 - 1.67353013e-11 * T3 +
                 5.77546215e-16 * T4;
    // species 7: HO2
    species[7] = +4.32898769e+01 * invT - 2.02441160e-01 -
                 4.10564010e+00 * logT - 1.02023418e-03 * T +
                 6.09795937e-08 * T2 - 1.54977537e-12 * T3 -
                 2.49409157e-17 * T4;
    // species 8: H2O
    species[8] = -2.99169082e+04 * invT - 4.82065488e+00 -
                 2.73117512e+00 * logT - 1.47568497e-03 * T +
                 1.39226631e-07 * T2 - 1.05073828e-11 * T3 +
                 4.20265838e-16 * T4;
    // species 9: NO
    species[9] = +9.92143132e+03 * invT - 4.10829284e+00 -
                 3.26071234e+00 * logT - 5.95505675e-04 * T +
                 7.15204410e-08 * T2 - 5.78734552e-12 * T3 +
                 2.01647840e-16 * T4;
    // species 10: NO2
    species[10] = +2.31649820e+03 * invT + 4.00217095e+00 -
                  4.88475400e+00 * logT - 1.08619775e-03 * T +
                  1.38011515e-07 * T2 - 1.31229250e-11 * T3 +
                  5.25544750e-16 * T4;
    // species 11: N2O
    species[11] = +8.07340470e+03 * invT + 6.02479370e+00 -
                  4.82307290e+00 * logT - 1.31351255e-03 * T +
                  1.59751453e-07 * T2 - 1.33339267e-11 * T3 +
                  4.88761510e-16 * T4;
    // species 13: NH3
    species[13] = -6.41596473e+03 * invT - 6.66080018e+00 -
                  2.36074311e+00 * logT - 3.15925073e-03 * T +
                  3.81611343e-07 * T2 - 3.43139509e-11 * T3 +
                  1.45418393e-15 * T4;
    // species 14: N2H4
    species[14] = +9.28265548e+03 * invT + 6.63397129e+00 -
                  4.93957357e+00 * logT - 4.37508594e-03 * T +
                  4.98998430e-07 * T2 - 3.89398682e-11 * T3 +
                  1.36534300e-15 * T4;
    // species 15: NH
    species[15] = +4.23461945e+04 * invT - 3.95712219e+00 -
                  2.78372644e+00 * logT - 6.64929440e-04 * T +
                  7.07975955e-08 * T2 - 6.52912035e-12 * T3 +
                  2.75225655e-16 * T4;
    // species 16: NH2
    species[16] = +2.15737320e+04 * invT - 6.31302302e+00 -
                  2.59263049e+00 * logT - 1.73841799e-03 * T +
                  1.80452707e-07 * T2 - 1.24452132e-11 * T3 +
                  2.87620594e-16 * T4;
    // species 17: HONO
    species[17] = -1.15974343e+04 * invT + 8.86289990e+00 -
                  5.79144641e+00 * logT - 1.82315366e-03 * T +
                  2.15187942e-07 * T2 - 1.72081861e-11 * T3 +
                  6.10693395e-16 * T4;
    // species 18: HNO
    species[18] = +1.17726311e+04 * invT - 5.47913048e+00 -
                  3.16598124e+00 * logT - 1.49979446e-03 * T +
                  6.57294643e-08 * T2 + 3.21120074e-12 * T3 -
                  3.53801334e-16 * T4;
    // species 19: H2NN
    species[19] = +3.48530149e+04 * invT - 4.63989845e+00 -
                  3.05903670e+00 * logT - 3.09191173e-03 * T +
                  3.70285275e-07 * T2 - 2.98782672e-11 * T3 +
                  1.07266452e-15 * T4;
    // species 20: N
    species[20] = +5.61337750e+04 * invT - 3.23366660e+00 -
                  2.41594290e+00 * logT - 8.74453250e-05 * T +
                  1.98372817e-08 * T2 - 2.51885367e-12 * T3 +
                  1.01804915e-16 * T4;
    // species 21: NNH
    species[21] = +2.87676026e+04 * invT - 3.96464810e+00 -
                  3.42744423e+00 * logT - 1.61647617e-03 * T +
                  1.95493832e-07 * T2 - 1.58756963e-11 * T3 +
                  5.72457530e-16 * T4;
    // species 22: H2NO
    species[22] = +6.51826177e+03 * invT - 1.55377139e+00 -
                  3.75555914e+00 * logT - 2.58109677e-03 * T +
                  2.93978978e-07 * T2 - 2.29210577e-11 * T3 +
                  8.03215715e-16 * T4;
    // species 23: N2H3
    species[23] = +2.53241420e+04 * invT + 1.60601740e-01 -
                  4.04483566e+00 * logT - 3.65565093e-03 * T +
                  4.12709665e-07 * T2 - 3.19777517e-11 * T3 +
                  1.11553786e-15 * T4;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +2.41085081e+04 * invT - 8.24915280e+00 -
                  2.55589425e+00 * logT - 3.27169540e-03 * T +
                  1.46991309e-07 * T2 + 9.66427533e-11 * T3 -
                  1.98721115e-14 * T4;
  } else {
    // species 12: N2H2
    species[12] = +2.33444055e+04 * invT + 2.61274522e+00 -
                  4.14686796e+00 * logT - 2.40806157e-03 * T +
                  2.71248028e-07 * T2 - 2.08796748e-11 * T3 +
                  7.22470940e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
                 5.93856475e-10 * T3 - 2.79416412e-13 * T4 -
                 1.04749645e+03 * invT;
    // species 1: H2
    species[1] = +1.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
                 4.88792785e-09 * T3 - 1.43419133e-12 * T4 -
                 9.21173081e+02 * invT;
    // species 2: H
    species[2] = +1.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
                 9.25480315e-13 * T3 + 4.28467644e-16 * T4 +
                 2.54737665e+04 * invT;
    // species 3: O2
    species[3] = +2.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
                 2.44460109e-09 * T3 + 6.57755404e-13 * T4 -
                 1.06413589e+03 * invT;
    // species 4: O
    species[4] = +2.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
                 1.49688779e-09 * T3 + 4.13752234e-13 * T4 +
                 2.91298453e+04 * invT;
    // species 5: OH
    species[5] = +2.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
                 8.99816600e-10 * T3 + 2.53413860e-13 * T4 +
                 3.39341137e+03 * invT;
    // species 6: H2O2
    species[6] = +3.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
                 5.17299863e-09 * T3 + 1.65953264e-12 * T4 -
                 1.76486003e+04 * invT;
    // species 7: HO2
    species[7] = +3.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
                 5.89485027e-09 * T3 + 1.81122851e-12 * T4 +
                 2.62442356e+02 * invT;
    // species 8: H2O
    species[8] = +3.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
                 1.38226740e-09 * T3 + 3.56565210e-13 * T4 -
                 3.02950066e+04 * invT;
    // species 9: NO
    species[9] = +3.21859896e+00 - 2.31994062e-03 * T + 3.68143497e-06 * T2 -
                 2.33513877e-09 * T3 + 5.61109748e-13 * T4 +
                 9.84509964e+03 * invT;
    // species 10: NO2
    species[10] = +2.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
                  5.11885650e-09 * T3 + 1.56701128e-12 * T4 +
                  2.89661800e+03 * invT;
    // species 11: N2O
    species[11] = +1.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
                  2.42049508e-09 * T3 - 5.86143640e-13 * T4 +
                  8.74177460e+03 * invT;
    // species 13: NH3
    species[13] = +3.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
                  4.97084925e-09 * T3 + 1.43053592e-12 * T4 -
                  6.68545158e+03 * invT;
    // species 14: N2H4
    species[14] = +2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 15: NH
    species[15] = +2.49295037e+00 + 1.55897860e-04 * T - 4.96355427e-07 * T2 +
                  6.20418505e-10 * T3 - 2.07141832e-13 * T4 +
                  4.21059722e+04 * invT;
    // species 16: NH2
    species[16] = +3.19198016e+00 - 1.02301413e-03 * T + 2.22585378e-06 * T2 -
                  1.31226809e-09 * T3 + 3.11179896e-13 * T4 +
                  2.11863286e+04 * invT;
    // species 17: HONO
    species[17] = +2.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
                  2.06914118e-09 * T3 + 8.79914302e-13 * T4 -
                  1.07744086e+04 * invT;
    // species 18: HNO
    species[18] = +3.53525574e+00 - 2.84271688e-03 * T + 6.17328467e-06 * T2 -
                  4.29703062e-09 * T3 + 1.11163631e-12 * T4 +
                  1.16183003e+04 * invT;
    // species 19: H2NN
    species[19] = +3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 20: N
    species[20] = +1.50000000e+00 + 5.61046380e+04 * invT;
    // species 21: NNH
    species[21] = +3.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
                  3.33159360e-09 * T3 + 8.82046794e-13 * T4 +
                  2.87932080e+04 * invT;
    // species 22: H2NO
    species[22] = +2.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
                  4.06869633e-09 * T3 + 1.20070567e-12 * T4 +
                  6.71178975e+03 * invT;
    // species 23: N2H3
    species[23] = +2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.58198956e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +1.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
                 2.01888866e-11 * T3 - 9.52128550e-16 * T4 -
                 9.17180990e+02 * invT;
    // species 1: H2
    species[1] = +1.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
                 4.77129748e-12 * T3 - 1.86224358e-16 * T4 -
                 7.97948726e+02 * invT;
    // species 2: H
    species[2] = +1.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
                 5.64270745e-15 * T3 - 3.05984010e-19 * T4 +
                 2.54738024e+04 * invT;
    // species 3: O2
    species[3] = +2.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
                 5.36640092e-12 * T3 - 2.73007568e-16 * T4 -
                 1.21603048e+03 * invT;
    // species 4: O
    species[4] = +1.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
                 1.00316784e-12 * T3 - 8.34953148e-17 * T4 +
                 2.92287628e+04 * invT;
    // species 5: OH
    species[5] = +1.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
                 1.02274977e-11 * T3 - 4.62764516e-16 * T4 +
                 3.71706610e+03 * invT;
    // species 6: H2O2
    species[6] = +3.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
                 5.02059038e-11 * T3 - 2.31018486e-15 * T4 -
                 1.79514029e+04 * invT;
    // species 7: HO2
    species[7] = +3.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
                 4.64932610e-12 * T3 + 9.97636630e-17 * T4 +
                 4.32898769e+01 * invT;
    // species 8: H2O
    species[8] = +1.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
                 3.15221483e-11 * T3 - 1.68106335e-15 * T4 -
                 2.99169082e+04 * invT;
    // species 9: NO
    species[9] = +2.26071234e+00 + 5.95505675e-04 * T - 1.43040882e-07 * T2 +
                 1.73620366e-11 * T3 - 8.06591362e-16 * T4 +
                 9.92143132e+03 * invT;
    // species 10: NO2
    species[10] = +3.88475400e+00 + 1.08619775e-03 * T - 2.76023030e-07 * T2 +
                  3.93687750e-11 * T3 - 2.10217900e-15 * T4 +
                  2.31649820e+03 * invT;
    // species 11: N2O
    species[11] = +3.82307290e+00 + 1.31351255e-03 * T - 3.19502907e-07 * T2 +
                  4.00017800e-11 * T3 - 1.95504604e-15 * T4 +
                  8.07340470e+03 * invT;
    // species 13: NH3
    species[13] = +1.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
                  1.02941853e-10 * T3 - 5.81673574e-15 * T4 -
                  6.41596473e+03 * invT;
    // species 14: N2H4
    species[14] = +3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 15: NH
    species[15] = +1.78372644e+00 + 6.64929440e-04 * T - 1.41595191e-07 * T2 +
                  1.95873611e-11 * T3 - 1.10090262e-15 * T4 +
                  4.23461945e+04 * invT;
    // species 16: NH2
    species[16] = +1.59263049e+00 + 1.73841799e-03 * T - 3.60905413e-07 * T2 +
                  3.73356395e-11 * T3 - 1.15048237e-15 * T4 +
                  2.15737320e+04 * invT;
    // species 17: HONO
    species[17] = +4.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
                  5.16245582e-11 * T3 - 2.44277358e-15 * T4 -
                  1.15974343e+04 * invT;
    // species 18: HNO
    species[18] = +2.16598124e+00 + 1.49979446e-03 * T - 1.31458929e-07 * T2 -
                  9.63360222e-12 * T3 + 1.41520534e-15 * T4 +
                  1.17726311e+04 * invT;
    // species 19: H2NN
    species[19] = +2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 20: N
    species[20] = +1.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
                  7.55656100e-12 * T3 - 4.07219660e-16 * T4 +
                  5.61337750e+04 * invT;
    // species 21: NNH
    species[21] = +2.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
                  4.76270890e-11 * T3 - 2.28983012e-15 * T4 +
                  2.87676026e+04 * invT;
    // species 22: H2NO
    species[22] = +2.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
                  6.87631730e-11 * T3 - 3.21286286e-15 * T4 +
                  6.51826177e+03 * invT;
    // species 23: N2H3
    species[23] = +3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.53241420e+04 * invT;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +1.55589425e+00 + 3.27169540e-03 * T - 2.93982618e-07 * T2 -
                  2.89928260e-10 * T3 + 7.94884460e-14 * T4 +
                  2.41085081e+04 * invT;
  } else {
    // species 12: N2H2
    species[12] = +3.14686796e+00 + 2.40806157e-03 * T - 5.42496057e-07 * T2 +
                  6.26390245e-11 * T3 - 2.88988376e-15 * T4 +
                  2.33444055e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
                 5.93856475e-10 * T3 - 2.79416412e-13 * T4 -
                 1.04749645e+03 * invT;
    // species 1: H2
    species[1] = +2.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
                 4.88792785e-09 * T3 - 1.43419133e-12 * T4 -
                 9.21173081e+02 * invT;
    // species 2: H
    species[2] = +2.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
                 9.25480315e-13 * T3 + 4.28467644e-16 * T4 +
                 2.54737665e+04 * invT;
    // species 3: O2
    species[3] = +3.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
                 2.44460109e-09 * T3 + 6.57755404e-13 * T4 -
                 1.06413589e+03 * invT;
    // species 4: O
    species[4] = +3.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
                 1.49688779e-09 * T3 + 4.13752234e-13 * T4 +
                 2.91298453e+04 * invT;
    // species 5: OH
    species[5] = +3.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
                 8.99816600e-10 * T3 + 2.53413860e-13 * T4 +
                 3.39341137e+03 * invT;
    // species 6: H2O2
    species[6] = +4.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
                 5.17299863e-09 * T3 + 1.65953264e-12 * T4 -
                 1.76486003e+04 * invT;
    // species 7: HO2
    species[7] = +4.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
                 5.89485027e-09 * T3 + 1.81122851e-12 * T4 +
                 2.62442356e+02 * invT;
    // species 8: H2O
    species[8] = +4.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
                 1.38226740e-09 * T3 + 3.56565210e-13 * T4 -
                 3.02950066e+04 * invT;
    // species 9: NO
    species[9] = +4.21859896e+00 - 2.31994062e-03 * T + 3.68143497e-06 * T2 -
                 2.33513877e-09 * T3 + 5.61109748e-13 * T4 +
                 9.84509964e+03 * invT;
    // species 10: NO2
    species[10] = +3.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
                  5.11885650e-09 * T3 + 1.56701128e-12 * T4 +
                  2.89661800e+03 * invT;
    // species 11: N2O
    species[11] = +2.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
                  2.42049508e-09 * T3 - 5.86143640e-13 * T4 +
                  8.74177460e+03 * invT;
    // species 13: NH3
    species[13] = +4.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
                  4.97084925e-09 * T3 + 1.43053592e-12 * T4 -
                  6.68545158e+03 * invT;
    // species 14: N2H4
    species[14] = +3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 15: NH
    species[15] = +3.49295037e+00 + 1.55897860e-04 * T - 4.96355427e-07 * T2 +
                  6.20418505e-10 * T3 - 2.07141832e-13 * T4 +
                  4.21059722e+04 * invT;
    // species 16: NH2
    species[16] = +4.19198016e+00 - 1.02301413e-03 * T + 2.22585378e-06 * T2 -
                  1.31226809e-09 * T3 + 3.11179896e-13 * T4 +
                  2.11863286e+04 * invT;
    // species 17: HONO
    species[17] = +3.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
                  2.06914118e-09 * T3 + 8.79914302e-13 * T4 -
                  1.07744086e+04 * invT;
    // species 18: HNO
    species[18] = +4.53525574e+00 - 2.84271688e-03 * T + 6.17328467e-06 * T2 -
                  4.29703062e-09 * T3 + 1.11163631e-12 * T4 +
                  1.16183003e+04 * invT;
    // species 19: H2NN
    species[19] = +4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 20: N
    species[20] = +2.50000000e+00 + 5.61046380e+04 * invT;
    // species 21: NNH
    species[21] = +4.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
                  3.33159360e-09 * T3 + 8.82046794e-13 * T4 +
                  2.87932080e+04 * invT;
    // species 22: H2NO
    species[22] = +3.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
                  4.06869633e-09 * T3 + 1.20070567e-12 * T4 +
                  6.71178975e+03 * invT;
    // species 23: N2H3
    species[23] = +3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.58198956e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +2.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
                 2.01888866e-11 * T3 - 9.52128550e-16 * T4 -
                 9.17180990e+02 * invT;
    // species 1: H2
    species[1] = +2.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
                 4.77129748e-12 * T3 - 1.86224358e-16 * T4 -
                 7.97948726e+02 * invT;
    // species 2: H
    species[2] = +2.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
                 5.64270745e-15 * T3 - 3.05984010e-19 * T4 +
                 2.54738024e+04 * invT;
    // species 3: O2
    species[3] = +3.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
                 5.36640092e-12 * T3 - 2.73007568e-16 * T4 -
                 1.21603048e+03 * invT;
    // species 4: O
    species[4] = +2.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
                 1.00316784e-12 * T3 - 8.34953148e-17 * T4 +
                 2.92287628e+04 * invT;
    // species 5: OH
    species[5] = +2.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
                 1.02274977e-11 * T3 - 4.62764516e-16 * T4 +
                 3.71706610e+03 * invT;
    // species 6: H2O2
    species[6] = +4.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
                 5.02059038e-11 * T3 - 2.31018486e-15 * T4 -
                 1.79514029e+04 * invT;
    // species 7: HO2
    species[7] = +4.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
                 4.64932610e-12 * T3 + 9.97636630e-17 * T4 +
                 4.32898769e+01 * invT;
    // species 8: H2O
    species[8] = +2.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
                 3.15221483e-11 * T3 - 1.68106335e-15 * T4 -
                 2.99169082e+04 * invT;
    // species 9: NO
    species[9] = +3.26071234e+00 + 5.95505675e-04 * T - 1.43040882e-07 * T2 +
                 1.73620366e-11 * T3 - 8.06591362e-16 * T4 +
                 9.92143132e+03 * invT;
    // species 10: NO2
    species[10] = +4.88475400e+00 + 1.08619775e-03 * T - 2.76023030e-07 * T2 +
                  3.93687750e-11 * T3 - 2.10217900e-15 * T4 +
                  2.31649820e+03 * invT;
    // species 11: N2O
    species[11] = +4.82307290e+00 + 1.31351255e-03 * T - 3.19502907e-07 * T2 +
                  4.00017800e-11 * T3 - 1.95504604e-15 * T4 +
                  8.07340470e+03 * invT;
    // species 13: NH3
    species[13] = +2.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
                  1.02941853e-10 * T3 - 5.81673574e-15 * T4 -
                  6.41596473e+03 * invT;
    // species 14: N2H4
    species[14] = +4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 15: NH
    species[15] = +2.78372644e+00 + 6.64929440e-04 * T - 1.41595191e-07 * T2 +
                  1.95873611e-11 * T3 - 1.10090262e-15 * T4 +
                  4.23461945e+04 * invT;
    // species 16: NH2
    species[16] = +2.59263049e+00 + 1.73841799e-03 * T - 3.60905413e-07 * T2 +
                  3.73356395e-11 * T3 - 1.15048237e-15 * T4 +
                  2.15737320e+04 * invT;
    // species 17: HONO
    species[17] = +5.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
                  5.16245582e-11 * T3 - 2.44277358e-15 * T4 -
                  1.15974343e+04 * invT;
    // species 18: HNO
    species[18] = +3.16598124e+00 + 1.49979446e-03 * T - 1.31458929e-07 * T2 -
                  9.63360222e-12 * T3 + 1.41520534e-15 * T4 +
                  1.17726311e+04 * invT;
    // species 19: H2NN
    species[19] = +3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 20: N
    species[20] = +2.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
                  7.55656100e-12 * T3 - 4.07219660e-16 * T4 +
                  5.61337750e+04 * invT;
    // species 21: NNH
    species[21] = +3.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
                  4.76270890e-11 * T3 - 2.28983012e-15 * T4 +
                  2.87676026e+04 * invT;
    // species 22: H2NO
    species[22] = +3.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
                  6.87631730e-11 * T3 - 3.21286286e-15 * T4 +
                  6.51826177e+03 * invT;
    // species 23: N2H3
    species[23] = +4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.53241420e+04 * invT;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +2.55589425e+00 + 3.27169540e-03 * T - 2.93982618e-07 * T2 -
                  2.89928260e-10 * T3 + 7.94884460e-14 * T4 +
                  2.41085081e+04 * invT;
  } else {
    // species 12: N2H2
    species[12] = +4.14686796e+00 + 2.40806157e-03 * T - 5.42496057e-07 * T2 +
                  6.26390245e-11 * T3 - 2.88988376e-15 * T4 +
                  2.33444055e+04 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.53603521e+00 * logT - 1.58270944e-04 * T -
                 2.13492125e-07 * T2 + 7.91808633e-10 * T3 -
                 3.49270515e-13 * T4 + 2.94603724e+00;
    // species 1: H2
    species[1] = +2.37694204e+00 * logT + 7.73916922e-03 * T -
                 9.43675365e-06 * T2 + 6.51723713e-09 * T3 -
                 1.79273916e-12 * T4 + 5.47184736e-01;
    // species 2: H
    species[2] = +2.49975925e+00 * logT + 6.73824499e-07 * T +
                 5.59036305e-10 * T2 - 1.23397375e-12 * T3 +
                 5.35584555e-16 * T4 - 4.45574009e-01;
    // species 3: O2
    species[3] = +3.78498258e+00 * logT - 3.02002233e-03 * T +
                 4.96014586e-06 * T2 - 3.25946811e-09 * T3 +
                 8.22194255e-13 * T4 + 3.64780709e+00;
    // species 4: O
    species[4] = +3.15906526e+00 * logT - 3.21509999e-03 * T +
                 3.24627771e-06 * T2 - 1.99585038e-09 * T3 +
                 5.17190293e-13 * T4 + 2.09078344e+00;
    // species 5: OH
    species[5] = +3.97585165e+00 * logT - 2.28555291e-03 * T +
                 2.16721441e-06 * T2 - 1.19975547e-09 * T3 +
                 3.16767325e-13 * T4 - 3.55397262e-02;
    // species 6: H2O2
    species[6] = +4.23854160e+00 * logT - 2.49610911e-04 * T +
                 7.99289505e-06 * T2 - 6.89733150e-09 * T3 +
                 2.07441580e-12 * T4 + 3.58850097e+00;
    // species 7: HO2
    species[7] = +4.26251250e+00 * logT - 4.45642032e-03 * T +
                 1.02582467e-05 * T2 - 7.85980037e-09 * T3 +
                 2.26403564e-12 * T4 + 3.88223684e+00;
    // species 8: H2O
    species[8] = +4.20147551e+00 * logT - 2.05583546e-03 * T +
                 3.28273603e-06 * T2 - 1.84302320e-09 * T3 +
                 4.45706512e-13 * T4 - 8.60610906e-01;
    // species 9: NO
    species[9] = +4.21859896e+00 * logT - 4.63988124e-03 * T +
                 5.52215245e-06 * T2 - 3.11351836e-09 * T3 +
                 7.01387185e-13 * T4 + 2.28061001e+00;
    // species 10: NO2
    species[10] = +3.94403120e+00 * logT - 1.58542900e-03 * T +
                  8.32890600e-06 * T2 - 6.82514200e-09 * T3 +
                  1.95876410e-12 * T4 + 6.31199190e+00;
    // species 11: N2O
    species[11] = +2.25715020e+00 * logT + 1.13047280e-02 * T -
                  6.83565950e-06 * T2 + 3.22732677e-09 * T3 -
                  7.32679550e-13 * T4 + 1.07579920e+01;
    // species 13: NH3
    species[13] = +4.14027871e+00 * logT - 3.58489142e-03 * T +
                  9.47379520e-06 * T2 - 6.62779900e-09 * T3 +
                  1.78816990e-12 * T4 - 1.66754883e-02;
    // species 14: N2H4
    species[14] = +3.83472149e+00 * logT - 6.49129555e-04 * T +
                  1.88424232e-05 * T2 - 1.66903061e-08 * T3 +
                  5.08405160e-12 * T4 + 5.75272030e+00;
    // species 15: NH
    species[15] = +3.49295037e+00 * logT + 3.11795720e-04 * T -
                  7.44533140e-07 * T2 + 8.27224673e-10 * T3 -
                  2.58927290e-13 * T4 + 1.84834973e+00;
    // species 16: NH2
    species[16] = +4.19198016e+00 * logT - 2.04602827e-03 * T +
                  3.33878067e-06 * T2 - 1.74969078e-09 * T3 +
                  3.88974870e-13 * T4 - 9.04785244e-02;
    // species 17: HONO
    species[17] = +3.16416438e+00 * logT + 8.50517773e-03 * T +
                  2.74280786e-07 * T2 - 2.75885491e-09 * T3 +
                  1.09989288e-12 * T4 + 1.00231941e+01;
    // species 18: HNO
    species[18] = +4.53525574e+00 * logT - 5.68543377e-03 * T +
                  9.25992700e-06 * T2 - 5.72937417e-09 * T3 +
                  1.38954539e-12 * T4 + 1.74315886e+00;
    // species 19: H2NN
    species[19] = +4.53204001e+00 * logT - 7.32418578e-03 * T +
                  1.50401856e-05 * T2 - 1.01333517e-08 * T3 +
                  2.61751598e-12 * T4 + 1.51074195e+00;
    // species 20: N
    species[20] = +2.50000000e+00 * logT + 4.19390880e+00;
    // species 21: NNH
    species[21] = +4.25474632e+00 * logT - 3.45098298e-03 * T +
                  6.88943495e-06 * T2 - 4.44212480e-09 * T3 +
                  1.10255849e-12 * T4 + 3.28551762e+00;
    // species 22: H2NO
    species[22] = +3.93201139e+00 * logT - 1.64028165e-04 * T +
                  6.95807045e-06 * T2 - 5.42492843e-09 * T3 +
                  1.50088209e-12 * T4 + 4.58837038e+00;
    // species 23: N2H3
    species[23] = +3.42125505e+00 * logT + 1.34901590e-03 * T +
                  1.11729535e-05 * T2 - 9.99092440e-09 * T3 +
                  3.02447425e-12 * T4 + 7.83176309e+00;
  } else {
    // species 0: N2
    species[0] = +2.93802970e+00 * logT + 1.41838030e-03 * T -
                 2.51640522e-07 * T2 + 2.69185155e-11 * T3 -
                 1.19016069e-15 * T4 + 5.95521985e+00;
    // species 1: H2
    species[1] = +2.90207649e+00 * logT + 8.68992581e-04 * T -
                 8.29322150e-08 * T2 + 6.36172997e-12 * T3 -
                 2.32780447e-16 * T4 - 8.45591320e-01;
    // species 2: H
    species[2] = +2.49985211e+00 * logT + 2.34582548e-07 * T -
                 5.80858205e-11 * T2 + 7.52360993e-15 * T3 -
                 3.82480012e-19 * T4 - 4.45864645e-01;
    // species 3: O2
    species[3] = +3.65980488e+00 * logT + 6.59877372e-04 * T -
                 7.20790860e-08 * T2 + 7.15520123e-12 * T3 -
                 3.41259460e-16 * T4 + 3.42074148e+00;
    // species 4: O
    species[4] = +2.55160087e+00 * logT - 3.83085457e-05 * T +
                 4.21598739e-10 * T2 + 1.33755712e-12 * T3 -
                 1.04369143e-16 * T4 + 4.87617014e+00;
    // species 5: OH
    species[5] = +2.84581721e+00 * logT + 1.09723818e-03 * T -
                 1.44560551e-07 * T2 + 1.36366637e-11 * T3 -
                 5.78455645e-16 * T4 + 5.80339915e+00;
    // species 6: H2O2
    species[6] = +4.54017480e+00 * logT + 4.15970971e-03 * T -
                 6.54383885e-07 * T2 + 6.69412050e-11 * T3 -
                 2.88773107e-15 * T4 + 8.55881745e-01;
    // species 7: HO2
    species[7] = +4.10564010e+00 * logT + 2.04046836e-03 * T -
                 1.82938781e-07 * T2 + 6.19910147e-12 * T3 +
                 1.24704579e-16 * T4 + 3.30808126e+00;
    // species 8: H2O
    species[8] = +2.73117512e+00 * logT + 2.95136995e-03 * T -
                 4.17679892e-07 * T2 + 4.20295310e-11 * T3 -
                 2.10132919e-15 * T4 + 6.55183000e+00;
    // species 9: NO
    species[9] = +3.26071234e+00 * logT + 1.19101135e-03 * T -
                 2.14561323e-07 * T2 + 2.31493821e-11 * T3 -
                 1.00823920e-15 * T4 + 6.36900518e+00;
    // species 10: NO2
    species[10] = +4.88475400e+00 * logT + 2.17239550e-03 * T -
                  4.14034545e-07 * T2 + 5.24917000e-11 * T3 -
                  2.62772375e-15 * T4 - 1.17416950e-01;
    // species 11: N2O
    species[11] = +4.82307290e+00 * logT + 2.62702510e-03 * T -
                  4.79254360e-07 * T2 + 5.33357067e-11 * T3 -
                  2.44380755e-15 * T4 - 2.20172080e+00;
    // species 13: NH3
    species[13] = +2.36074311e+00 * logT + 6.31850146e-03 * T -
                  1.14483403e-06 * T2 + 1.37255804e-10 * T3 -
                  7.27091967e-15 * T4 + 8.02154329e+00;
    // species 14: N2H4
    species[14] = +4.93957357e+00 * logT + 8.75017187e-03 * T -
                  1.49699529e-06 * T2 + 1.55759473e-10 * T3 -
                  6.82671497e-15 * T4 - 2.69439772e+00;
    // species 15: NH
    species[15] = +2.78372644e+00 * logT + 1.32985888e-03 * T -
                  2.12392787e-07 * T2 + 2.61164814e-11 * T3 -
                  1.37612828e-15 * T4 + 5.74084863e+00;
    // species 16: NH2
    species[16] = +2.59263049e+00 * logT + 3.47683597e-03 * T -
                  5.41358120e-07 * T2 + 4.97808527e-11 * T3 -
                  1.43810297e-15 * T4 + 7.90565351e+00;
    // species 17: HONO
    species[17] = +5.79144641e+00 * logT + 3.64630732e-03 * T -
                  6.45563825e-07 * T2 + 6.88327443e-11 * T3 -
                  3.05346698e-15 * T4 - 4.07145349e+00;
    // species 18: HNO
    species[18] = +3.16598124e+00 * logT + 2.99958892e-03 * T -
                  1.97188393e-07 * T2 - 1.28448030e-11 * T3 +
                  1.76900667e-15 * T4 + 7.64511172e+00;
    // species 19: H2NN
    species[19] = +3.05903670e+00 * logT + 6.18382347e-03 * T -
                  1.11085582e-06 * T2 + 1.19513069e-10 * T3 -
                  5.36332263e-15 * T4 + 6.69893515e+00;
    // species 20: N
    species[20] = +2.41594290e+00 * logT + 1.74890650e-04 * T -
                  5.95118450e-08 * T2 + 1.00754147e-11 * T3 -
                  5.09024575e-16 * T4 + 4.64960950e+00;
    // species 21: NNH
    species[21] = +3.42744423e+00 * logT + 3.23295234e-03 * T -
                  5.86481495e-07 * T2 + 6.35027853e-11 * T3 -
                  2.86228765e-15 * T4 + 6.39209233e+00;
    // species 22: H2NO
    species[22] = +3.75555914e+00 * logT + 5.16219354e-03 * T -
                  8.81936935e-07 * T2 + 9.16842307e-11 * T3 -
                  4.01607857e-15 * T4 + 4.30933053e+00;
    // species 23: N2H3
    species[23] = +4.04483566e+00 * logT + 7.31130186e-03 * T -
                  1.23812900e-06 * T2 + 1.27911007e-10 * T3 -
                  5.57768933e-15 * T4 + 2.88423392e+00;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +2.55589425e+00 * logT + 6.54339081e-03 * T -
                  4.40973928e-07 * T2 - 3.86571013e-10 * T3 +
                  9.93605575e-14 * T4 + 9.80504705e+00;
  } else {
    // species 12: N2H2
    species[12] = +4.14686796e+00 * logT + 4.81612315e-03 * T -
                  8.13744085e-07 * T2 + 8.35186993e-11 * T3 -
                  3.61235470e-15 * T4 + 5.34122740e-01;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.58270944e-04 - 8.53968502e-07 * T + 7.12627770e-09 * T2 -
                 5.58832824e-12 * T3;
    // species 1: H2
    species[1] = +7.73916922e-03 - 3.77470146e-05 * T + 5.86551342e-08 * T2 -
                 2.86838265e-11 * T3;
    // species 2: H
    species[2] = +6.73824499e-07 + 2.23614522e-09 * T - 1.11057638e-11 * T2 +
                 8.56935288e-15 * T3;
    // species 3: O2
    species[3] = -3.02002233e-03 + 1.98405834e-05 * T - 2.93352130e-08 * T2 +
                 1.31551081e-11 * T3;
    // species 4: O
    species[4] = -3.21509999e-03 + 1.29851109e-05 * T - 1.79626534e-08 * T2 +
                 8.27504468e-12 * T3;
    // species 5: OH
    species[5] = -2.28555291e-03 + 8.66885764e-06 * T - 1.07977992e-08 * T2 +
                 5.06827720e-12 * T3;
    // species 6: H2O2
    species[6] = -2.49610911e-04 + 3.19715802e-05 * T - 6.20759835e-08 * T2 +
                 3.31906528e-11 * T3;
    // species 7: HO2
    species[7] = -4.45642032e-03 + 4.10329868e-05 * T - 7.07382033e-08 * T2 +
                 3.62245703e-11 * T3;
    // species 8: H2O
    species[8] = -2.05583546e-03 + 1.31309441e-05 * T - 1.65872088e-08 * T2 +
                 7.13130420e-12 * T3;
    // species 9: NO
    species[9] = -4.63988124e-03 + 2.20886098e-05 * T - 2.80216652e-08 * T2 +
                 1.12221950e-11 * T3;
    // species 10: NO2
    species[10] = -1.58542900e-03 + 3.33156240e-05 * T - 6.14262780e-08 * T2 +
                  3.13402256e-11 * T3;
    // species 11: N2O
    species[11] = +1.13047280e-02 - 2.73426380e-05 * T + 2.90459409e-08 * T2 -
                  1.17228728e-11 * T3;
    // species 13: NH3
    species[13] = -3.58489142e-03 + 3.78951808e-05 * T - 5.96501910e-08 * T2 +
                  2.86107184e-11 * T3;
    // species 14: N2H4
    species[14] = -6.49129555e-04 + 7.53696926e-05 * T - 1.50212755e-07 * T2 +
                  8.13448256e-11 * T3;
    // species 15: NH
    species[15] = +3.11795720e-04 - 2.97813256e-06 * T + 7.44502206e-09 * T2 -
                  4.14283664e-12 * T3;
    // species 16: NH2
    species[16] = -2.04602827e-03 + 1.33551227e-05 * T - 1.57472170e-08 * T2 +
                  6.22359792e-12 * T3;
    // species 17: HONO
    species[17] = +8.50517773e-03 + 1.09712315e-06 * T - 2.48296942e-08 * T2 +
                  1.75982860e-11 * T3;
    // species 18: HNO
    species[18] = -5.68543377e-03 + 3.70397080e-05 * T - 5.15643675e-08 * T2 +
                  2.22327263e-11 * T3;
    // species 19: H2NN
    species[19] = -7.32418578e-03 + 6.01607426e-05 * T - 9.12001653e-08 * T2 +
                  4.18802556e-11 * T3;
    // species 20: N
    species[20] = 0.0;
    // species 21: NNH
    species[21] = -3.45098298e-03 + 2.75577398e-05 * T - 3.99791232e-08 * T2 +
                  1.76409359e-11 * T3;
    // species 22: H2NO
    species[22] = -1.64028165e-04 + 2.78322818e-05 * T - 4.88243559e-08 * T2 +
                  2.40141134e-11 * T3;
    // species 23: N2H3
    species[23] = +1.34901590e-03 + 4.46918142e-05 * T - 8.99183196e-08 * T2 +
                  4.83915880e-11 * T3;
  } else {
    // species 0: N2
    species[0] = +1.41838030e-03 - 1.00656209e-06 * T + 2.42266639e-10 * T2 -
                 1.90425710e-14 * T3;
    // species 1: H2
    species[1] = +8.68992581e-04 - 3.31728860e-07 * T + 5.72555697e-11 * T2 -
                 3.72448716e-15 * T3;
    // species 2: H
    species[2] = +2.34582548e-07 - 2.32343282e-10 * T + 6.77124894e-14 * T2 -
                 6.11968020e-18 * T3;
    // species 3: O2
    species[3] = +6.59877372e-04 - 2.88316344e-07 * T + 6.43968111e-11 * T2 -
                 5.46015136e-15 * T3;
    // species 4: O
    species[4] = -3.83085457e-05 + 1.68639496e-09 * T + 1.20380141e-11 * T2 -
                 1.66990630e-15 * T3;
    // species 5: OH
    species[5] = +1.09723818e-03 - 5.78242202e-07 * T + 1.22729973e-10 * T2 -
                 9.25529032e-15 * T3;
    // species 6: H2O2
    species[6] = +4.15970971e-03 - 2.61753554e-06 * T + 6.02470845e-10 * T2 -
                 4.62036972e-14 * T3;
    // species 7: HO2
    species[7] = +2.04046836e-03 - 7.31755124e-07 * T + 5.57919132e-11 * T2 +
                 1.99527326e-15 * T3;
    // species 8: H2O
    species[8] = +2.95136995e-03 - 1.67071957e-06 * T + 3.78265779e-10 * T2 -
                 3.36212670e-14 * T3;
    // species 9: NO
    species[9] = +1.19101135e-03 - 8.58245292e-07 * T + 2.08344439e-10 * T2 -
                 1.61318272e-14 * T3;
    // species 10: NO2
    species[10] = +2.17239550e-03 - 1.65613818e-06 * T + 4.72425300e-10 * T2 -
                  4.20435800e-14 * T3;
    // species 11: N2O
    species[11] = +2.62702510e-03 - 1.91701744e-06 * T + 4.80021360e-10 * T2 -
                  3.91009208e-14 * T3;
    // species 13: NH3
    species[13] = +6.31850146e-03 - 4.57933612e-06 * T + 1.23530223e-09 * T2 -
                  1.16334715e-13 * T3;
    // species 14: N2H4
    species[14] = +8.75017187e-03 - 5.98798116e-06 * T + 1.40183525e-09 * T2 -
                  1.09227440e-13 * T3;
    // species 15: NH
    species[15] = +1.32985888e-03 - 8.49571146e-07 * T + 2.35048333e-10 * T2 -
                  2.20180524e-14 * T3;
    // species 16: NH2
    species[16] = +3.47683597e-03 - 2.16543248e-06 * T + 4.48027674e-10 * T2 -
                  2.30096475e-14 * T3;
    // species 17: HONO
    species[17] = +3.64630732e-03 - 2.58225530e-06 * T + 6.19494699e-10 * T2 -
                  4.88554716e-14 * T3;
    // species 18: HNO
    species[18] = +2.99958892e-03 - 7.88753572e-07 * T - 1.15603227e-10 * T2 +
                  2.83041067e-14 * T3;
    // species 19: H2NN
    species[19] = +6.18382347e-03 - 4.44342330e-06 * T + 1.07561762e-09 * T2 -
                  8.58131620e-14 * T3;
    // species 20: N
    species[20] = +1.74890650e-04 - 2.38047380e-07 * T + 9.06787320e-11 * T2 -
                  8.14439320e-15 * T3;
    // species 21: NNH
    species[21] = +3.23295234e-03 - 2.34592598e-06 * T + 5.71525068e-10 * T2 -
                  4.57966024e-14 * T3;
    // species 22: H2NO
    species[22] = +5.16219354e-03 - 3.52774774e-06 * T + 8.25158076e-10 * T2 -
                  6.42572572e-14 * T3;
    // species 23: N2H3
    species[23] = +7.31130186e-03 - 4.95251598e-06 * T + 1.15119906e-09 * T2 -
                  8.92430292e-14 * T3;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    species[12] = +6.54339081e-03 - 1.76389571e-06 * T - 3.47913912e-09 * T2 +
                  1.58976892e-12 * T3;
  } else {
    // species 12: N2H2
    species[12] = +4.81612315e-03 - 3.25497634e-06 * T + 7.51668294e-10 * T2 -
                  5.77976752e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[24]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 24; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+3.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
               2.37542590e-09 * T3 - 1.39708206e-12 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+2.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
               1.95517114e-08 * T3 - 7.17095663e-12 * T4) *
              0.4960317460317460;
    // species 2: H
    result += y[2] *
              (+2.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
               3.70192126e-12 * T3 + 2.14233822e-15 * T4) *
              0.9920634920634921;
    // species 3: O2
    result += y[3] *
              (+3.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
               9.77840434e-09 * T3 + 3.28877702e-12 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+3.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
               5.98755115e-09 * T3 + 2.06876117e-12 * T4) *
              0.0625039064941559;
    // species 5: OH
    result += y[5] *
              (+3.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
               3.59926640e-09 * T3 + 1.26706930e-12 * T4) *
              0.0587993179279120;
    // species 6: H2O2
    result += y[6] *
              (+4.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
               2.06919945e-08 * T3 + 8.29766320e-12 * T4) *
              0.0293996589639560;
    // species 7: HO2
    result += y[7] *
              (+4.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
               2.35794011e-08 * T3 + 9.05614257e-12 * T4) *
              0.0302975216627280;
    // species 8: H2O
    result += y[8] *
              (+4.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
               5.52906960e-09 * T3 + 1.78282605e-12 * T4) *
              0.0555092978073827;
    // species 9: NO
    result += y[9] *
              (+4.21859896e+00 - 4.63988124e-03 * T + 1.10443049e-05 * T2 -
               9.34055507e-09 * T3 + 2.80554874e-12 * T4) *
              0.0333266679997334;
    // species 10: NO2
    result += y[10] *
              (+3.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
               2.04754260e-08 * T3 + 7.83505640e-12 * T4) *
              0.0217367677426367;
    // species 11: N2O
    result += y[11] *
              (+2.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
               9.68198030e-09 * T3 - 2.93071820e-12 * T4) *
              0.0227205598345943;
    // species 13: NH3
    result += y[13] *
              (+4.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
               1.98833970e-08 * T3 + 7.15267961e-12 * T4) *
              0.0587164582232400;
    // species 14: N2H4
    result += y[14] *
              (+3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 15: NH
    result += y[15] *
              (+3.49295037e+00 + 3.11795720e-04 * T - 1.48906628e-06 * T2 +
               2.48167402e-09 * T3 - 1.03570916e-12 * T4) *
              0.0666000666000666;
    // species 16: NH2
    result += y[16] *
              (+4.19198016e+00 - 2.04602827e-03 * T + 6.67756134e-06 * T2 -
               5.24907235e-09 * T3 + 1.55589948e-12 * T4) *
              0.0624102852150034;
    // species 17: HONO
    result += y[17] *
              (+3.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
               8.27656474e-09 * T3 + 4.39957151e-12 * T4) *
              0.0212707123561568;
    // species 18: HNO
    result += y[18] *
              (+4.53525574e+00 - 5.68543377e-03 * T + 1.85198540e-05 * T2 -
               1.71881225e-08 * T3 + 5.55818157e-12 * T4) *
              0.0322435029341588;
    // species 19: H2NN
    result += y[19] *
              (+4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 20: N
    result += y[20] * (+2.50000000e+00) * 0.0713928749910759;
    // species 21: NNH
    result += y[21] *
              (+4.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
               1.33263744e-08 * T3 + 4.41023397e-12 * T4) *
              0.0344566191165323;
    // species 22: H2NO
    result += y[22] *
              (+3.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
               1.62747853e-08 * T3 + 6.00352834e-12 * T4) *
              0.0312285303853601;
    // species 23: N2H3
    result += y[23] *
              (+3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
  } else {
    // species 0: N2
    result += y[0] *
              (+2.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
               8.07555464e-11 * T3 - 4.76064275e-15 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+2.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
               1.90851899e-11 * T3 - 9.31121789e-16 * T4) *
              0.4960317460317460;
    // species 2: H
    result += y[2] *
              (+2.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
               2.25708298e-14 * T3 - 1.52992005e-18 * T4) *
              0.9920634920634921;
    // species 3: O2
    result += y[3] *
              (+3.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
               2.14656037e-11 * T3 - 1.36503784e-15 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+2.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
               4.01267136e-12 * T3 - 4.17476574e-16 * T4) *
              0.0625039064941559;
    // species 5: OH
    result += y[5] *
              (+2.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
               4.09099910e-11 * T3 - 2.31382258e-15 * T4) *
              0.0587993179279120;
    // species 6: H2O2
    result += y[6] *
              (+4.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
               2.00823615e-10 * T3 - 1.15509243e-14 * T4) *
              0.0293996589639560;
    // species 7: HO2
    result += y[7] *
              (+4.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
               1.85973044e-11 * T3 + 4.98818315e-16 * T4) *
              0.0302975216627280;
    // species 8: H2O
    result += y[8] *
              (+2.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
               1.26088593e-10 * T3 - 8.40531676e-15 * T4) *
              0.0555092978073827;
    // species 9: NO
    result += y[9] *
              (+3.26071234e+00 + 1.19101135e-03 * T - 4.29122646e-07 * T2 +
               6.94481463e-11 * T3 - 4.03295681e-15 * T4) *
              0.0333266679997334;
    // species 10: NO2
    result += y[10] *
              (+4.88475400e+00 + 2.17239550e-03 * T - 8.28069090e-07 * T2 +
               1.57475100e-10 * T3 - 1.05108950e-14 * T4) *
              0.0217367677426367;
    // species 11: N2O
    result += y[11] *
              (+4.82307290e+00 + 2.62702510e-03 * T - 9.58508720e-07 * T2 +
               1.60007120e-10 * T3 - 9.77523020e-15 * T4) *
              0.0227205598345943;
    // species 13: NH3
    result += y[13] *
              (+2.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
               4.11767411e-10 * T3 - 2.90836787e-14 * T4) *
              0.0587164582232400;
    // species 14: N2H4
    result += y[14] *
              (+4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 15: NH
    result += y[15] *
              (+2.78372644e+00 + 1.32985888e-03 * T - 4.24785573e-07 * T2 +
               7.83494442e-11 * T3 - 5.50451310e-15 * T4) *
              0.0666000666000666;
    // species 16: NH2
    result += y[16] *
              (+2.59263049e+00 + 3.47683597e-03 * T - 1.08271624e-06 * T2 +
               1.49342558e-10 * T3 - 5.75241187e-15 * T4) *
              0.0624102852150034;
    // species 17: HONO
    result += y[17] *
              (+5.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
               2.06498233e-10 * T3 - 1.22138679e-14 * T4) *
              0.0212707123561568;
    // species 18: HNO
    result += y[18] *
              (+3.16598124e+00 + 2.99958892e-03 * T - 3.94376786e-07 * T2 -
               3.85344089e-11 * T3 + 7.07602668e-15 * T4) *
              0.0322435029341588;
    // species 19: H2NN
    result += y[19] *
              (+3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 20: N
    result += y[20] *
              (+2.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
               3.02262440e-11 * T3 - 2.03609830e-15 * T4) *
              0.0713928749910759;
    // species 21: NNH
    result += y[21] *
              (+3.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
               1.90508356e-10 * T3 - 1.14491506e-14 * T4) *
              0.0344566191165323;
    // species 22: H2NO
    result += y[22] *
              (+3.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
               2.75052692e-10 * T3 - 1.60643143e-14 * T4) *
              0.0312285303853601;
    // species 23: N2H3
    result += y[23] *
              (+4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    result += y[12] *
              (+2.55589425e+00 + 6.54339081e-03 * T - 8.81947855e-07 * T2 -
               1.15971304e-09 * T3 + 3.97442230e-13 * T4) *
              0.0333000333000333;
  } else {
    // species 12: N2H2
    result += y[12] *
              (+4.14686796e+00 + 4.81612315e-03 * T - 1.62748817e-06 * T2 +
               2.50556098e-10 * T3 - 1.44494188e-14 * T4) *
              0.0333000333000333;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[24]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 24; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+2.53603521e+00 - 1.58270944e-04 * T - 4.26984251e-07 * T2 +
               2.37542590e-09 * T3 - 1.39708206e-12 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+1.37694204e+00 + 7.73916922e-03 * T - 1.88735073e-05 * T2 +
               1.95517114e-08 * T3 - 7.17095663e-12 * T4) *
              0.4960317460317460;
    // species 2: H
    result += y[2] *
              (+1.49975925e+00 + 6.73824499e-07 * T + 1.11807261e-09 * T2 -
               3.70192126e-12 * T3 + 2.14233822e-15 * T4) *
              0.9920634920634921;
    // species 3: O2
    result += y[3] *
              (+2.78498258e+00 - 3.02002233e-03 * T + 9.92029171e-06 * T2 -
               9.77840434e-09 * T3 + 3.28877702e-12 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+2.15906526e+00 - 3.21509999e-03 * T + 6.49255543e-06 * T2 -
               5.98755115e-09 * T3 + 2.06876117e-12 * T4) *
              0.0625039064941559;
    // species 5: OH
    result += y[5] *
              (+2.97585165e+00 - 2.28555291e-03 * T + 4.33442882e-06 * T2 -
               3.59926640e-09 * T3 + 1.26706930e-12 * T4) *
              0.0587993179279120;
    // species 6: H2O2
    result += y[6] *
              (+3.23854160e+00 - 2.49610911e-04 * T + 1.59857901e-05 * T2 -
               2.06919945e-08 * T3 + 8.29766320e-12 * T4) *
              0.0293996589639560;
    // species 7: HO2
    result += y[7] *
              (+3.26251250e+00 - 4.45642032e-03 * T + 2.05164934e-05 * T2 -
               2.35794011e-08 * T3 + 9.05614257e-12 * T4) *
              0.0302975216627280;
    // species 8: H2O
    result += y[8] *
              (+3.20147551e+00 - 2.05583546e-03 * T + 6.56547207e-06 * T2 -
               5.52906960e-09 * T3 + 1.78282605e-12 * T4) *
              0.0555092978073827;
    // species 9: NO
    result += y[9] *
              (+3.21859896e+00 - 4.63988124e-03 * T + 1.10443049e-05 * T2 -
               9.34055507e-09 * T3 + 2.80554874e-12 * T4) *
              0.0333266679997334;
    // species 10: NO2
    result += y[10] *
              (+2.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
               2.04754260e-08 * T3 + 7.83505640e-12 * T4) *
              0.0217367677426367;
    // species 11: N2O
    result += y[11] *
              (+1.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
               9.68198030e-09 * T3 - 2.93071820e-12 * T4) *
              0.0227205598345943;
    // species 13: NH3
    result += y[13] *
              (+3.14027871e+00 - 3.58489142e-03 * T + 1.89475904e-05 * T2 -
               1.98833970e-08 * T3 + 7.15267961e-12 * T4) *
              0.0587164582232400;
    // species 14: N2H4
    result += y[14] *
              (+2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 15: NH
    result += y[15] *
              (+2.49295037e+00 + 3.11795720e-04 * T - 1.48906628e-06 * T2 +
               2.48167402e-09 * T3 - 1.03570916e-12 * T4) *
              0.0666000666000666;
    // species 16: NH2
    result += y[16] *
              (+3.19198016e+00 - 2.04602827e-03 * T + 6.67756134e-06 * T2 -
               5.24907235e-09 * T3 + 1.55589948e-12 * T4) *
              0.0624102852150034;
    // species 17: HONO
    result += y[17] *
              (+2.16416438e+00 + 8.50517773e-03 * T + 5.48561573e-07 * T2 -
               8.27656474e-09 * T3 + 4.39957151e-12 * T4) *
              0.0212707123561568;
    // species 18: HNO
    result += y[18] *
              (+3.53525574e+00 - 5.68543377e-03 * T + 1.85198540e-05 * T2 -
               1.71881225e-08 * T3 + 5.55818157e-12 * T4) *
              0.0322435029341588;
    // species 19: H2NN
    result += y[19] *
              (+3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 20: N
    result += y[20] * (+1.50000000e+00) * 0.0713928749910759;
    // species 21: NNH
    result += y[21] *
              (+3.25474632e+00 - 3.45098298e-03 * T + 1.37788699e-05 * T2 -
               1.33263744e-08 * T3 + 4.41023397e-12 * T4) *
              0.0344566191165323;
    // species 22: H2NO
    result += y[22] *
              (+2.93201139e+00 - 1.64028165e-04 * T + 1.39161409e-05 * T2 -
               1.62747853e-08 * T3 + 6.00352834e-12 * T4) *
              0.0312285303853601;
    // species 23: N2H3
    result += y[23] *
              (+2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
  } else {
    // species 0: N2
    result += y[0] *
              (+1.93802970e+00 + 1.41838030e-03 * T - 5.03281045e-07 * T2 +
               8.07555464e-11 * T3 - 4.76064275e-15 * T4) *
              0.0356964374955379;
    // species 1: H2
    result += y[1] *
              (+1.90207649e+00 + 8.68992581e-04 * T - 1.65864430e-07 * T2 +
               1.90851899e-11 * T3 - 9.31121789e-16 * T4) *
              0.4960317460317460;
    // species 2: H
    result += y[2] *
              (+1.49985211e+00 + 2.34582548e-07 * T - 1.16171641e-10 * T2 +
               2.25708298e-14 * T3 - 1.52992005e-18 * T4) *
              0.9920634920634921;
    // species 3: O2
    result += y[3] *
              (+2.65980488e+00 + 6.59877372e-04 * T - 1.44158172e-07 * T2 +
               2.14656037e-11 * T3 - 1.36503784e-15 * T4) *
              0.0312519532470779;
    // species 4: O
    result += y[4] *
              (+1.55160087e+00 - 3.83085457e-05 * T + 8.43197478e-10 * T2 +
               4.01267136e-12 * T3 - 4.17476574e-16 * T4) *
              0.0625039064941559;
    // species 5: OH
    result += y[5] *
              (+1.84581721e+00 + 1.09723818e-03 * T - 2.89121101e-07 * T2 +
               4.09099910e-11 * T3 - 2.31382258e-15 * T4) *
              0.0587993179279120;
    // species 6: H2O2
    result += y[6] *
              (+3.54017480e+00 + 4.15970971e-03 * T - 1.30876777e-06 * T2 +
               2.00823615e-10 * T3 - 1.15509243e-14 * T4) *
              0.0293996589639560;
    // species 7: HO2
    result += y[7] *
              (+3.10564010e+00 + 2.04046836e-03 * T - 3.65877562e-07 * T2 +
               1.85973044e-11 * T3 + 4.98818315e-16 * T4) *
              0.0302975216627280;
    // species 8: H2O
    result += y[8] *
              (+1.73117512e+00 + 2.95136995e-03 * T - 8.35359785e-07 * T2 +
               1.26088593e-10 * T3 - 8.40531676e-15 * T4) *
              0.0555092978073827;
    // species 9: NO
    result += y[9] *
              (+2.26071234e+00 + 1.19101135e-03 * T - 4.29122646e-07 * T2 +
               6.94481463e-11 * T3 - 4.03295681e-15 * T4) *
              0.0333266679997334;
    // species 10: NO2
    result += y[10] *
              (+3.88475400e+00 + 2.17239550e-03 * T - 8.28069090e-07 * T2 +
               1.57475100e-10 * T3 - 1.05108950e-14 * T4) *
              0.0217367677426367;
    // species 11: N2O
    result += y[11] *
              (+3.82307290e+00 + 2.62702510e-03 * T - 9.58508720e-07 * T2 +
               1.60007120e-10 * T3 - 9.77523020e-15 * T4) *
              0.0227205598345943;
    // species 13: NH3
    result += y[13] *
              (+1.36074311e+00 + 6.31850146e-03 * T - 2.28966806e-06 * T2 +
               4.11767411e-10 * T3 - 2.90836787e-14 * T4) *
              0.0587164582232400;
    // species 14: N2H4
    result += y[14] *
              (+3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 15: NH
    result += y[15] *
              (+1.78372644e+00 + 1.32985888e-03 * T - 4.24785573e-07 * T2 +
               7.83494442e-11 * T3 - 5.50451310e-15 * T4) *
              0.0666000666000666;
    // species 16: NH2
    result += y[16] *
              (+1.59263049e+00 + 3.47683597e-03 * T - 1.08271624e-06 * T2 +
               1.49342558e-10 * T3 - 5.75241187e-15 * T4) *
              0.0624102852150034;
    // species 17: HONO
    result += y[17] *
              (+4.79144641e+00 + 3.64630732e-03 * T - 1.29112765e-06 * T2 +
               2.06498233e-10 * T3 - 1.22138679e-14 * T4) *
              0.0212707123561568;
    // species 18: HNO
    result += y[18] *
              (+2.16598124e+00 + 2.99958892e-03 * T - 3.94376786e-07 * T2 -
               3.85344089e-11 * T3 + 7.07602668e-15 * T4) *
              0.0322435029341588;
    // species 19: H2NN
    result += y[19] *
              (+2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 20: N
    result += y[20] *
              (+1.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
               3.02262440e-11 * T3 - 2.03609830e-15 * T4) *
              0.0713928749910759;
    // species 21: NNH
    result += y[21] *
              (+2.42744423e+00 + 3.23295234e-03 * T - 1.17296299e-06 * T2 +
               1.90508356e-10 * T3 - 1.14491506e-14 * T4) *
              0.0344566191165323;
    // species 22: H2NO
    result += y[22] *
              (+2.75555914e+00 + 5.16219354e-03 * T - 1.76387387e-06 * T2 +
               2.75052692e-10 * T3 - 1.60643143e-14 * T4) *
              0.0312285303853601;
    // species 23: N2H3
    result += y[23] *
              (+3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    result += y[12] *
              (+1.55589425e+00 + 6.54339081e-03 * T - 8.81947855e-07 * T2 -
               1.15971304e-09 * T3 + 3.97442230e-13 * T4) *
              0.0333000333000333;
  } else {
    // species 12: N2H2
    result += y[12] *
              (+3.14686796e+00 + 4.81612315e-03 * T - 1.62748817e-06 * T2 +
               2.50556098e-10 * T3 - 1.44494188e-14 * T4) *
              0.0333000333000333;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[24];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 24; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+3.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
       5.93856475e-10 * T3 - 2.79416412e-13 * T4 - 1.04749645e+03 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+2.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
       4.88792785e-09 * T3 - 1.43419133e-12 * T4 - 9.21173081e+02 * invT) *
      0.4960317460317460;
    // species 2: H
    result +=
      y[2] *
      (+2.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
       9.25480315e-13 * T3 + 4.28467644e-16 * T4 + 2.54737665e+04 * invT) *
      0.9920634920634921;
    // species 3: O2
    result +=
      y[3] *
      (+3.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
       2.44460109e-09 * T3 + 6.57755404e-13 * T4 - 1.06413589e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+3.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
       1.49688779e-09 * T3 + 4.13752234e-13 * T4 + 2.91298453e+04 * invT) *
      0.0625039064941559;
    // species 5: OH
    result +=
      y[5] *
      (+3.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
       8.99816600e-10 * T3 + 2.53413860e-13 * T4 + 3.39341137e+03 * invT) *
      0.0587993179279120;
    // species 6: H2O2
    result +=
      y[6] *
      (+4.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
       5.17299863e-09 * T3 + 1.65953264e-12 * T4 - 1.76486003e+04 * invT) *
      0.0293996589639560;
    // species 7: HO2
    result +=
      y[7] *
      (+4.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
       5.89485027e-09 * T3 + 1.81122851e-12 * T4 + 2.62442356e+02 * invT) *
      0.0302975216627280;
    // species 8: H2O
    result +=
      y[8] *
      (+4.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
       1.38226740e-09 * T3 + 3.56565210e-13 * T4 - 3.02950066e+04 * invT) *
      0.0555092978073827;
    // species 9: NO
    result +=
      y[9] *
      (+4.21859896e+00 - 2.31994062e-03 * T + 3.68143497e-06 * T2 -
       2.33513877e-09 * T3 + 5.61109748e-13 * T4 + 9.84509964e+03 * invT) *
      0.0333266679997334;
    // species 10: NO2
    result +=
      y[10] *
      (+3.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
       5.11885650e-09 * T3 + 1.56701128e-12 * T4 + 2.89661800e+03 * invT) *
      0.0217367677426367;
    // species 11: N2O
    result +=
      y[11] *
      (+2.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
       2.42049508e-09 * T3 - 5.86143640e-13 * T4 + 8.74177460e+03 * invT) *
      0.0227205598345943;
    // species 13: NH3
    result +=
      y[13] *
      (+4.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
       4.97084925e-09 * T3 + 1.43053592e-12 * T4 - 6.68545158e+03 * invT) *
      0.0587164582232400;
    // species 14: N2H4
    result +=
      y[14] *
      (+3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 15: NH
    result +=
      y[15] *
      (+3.49295037e+00 + 1.55897860e-04 * T - 4.96355427e-07 * T2 +
       6.20418505e-10 * T3 - 2.07141832e-13 * T4 + 4.21059722e+04 * invT) *
      0.0666000666000666;
    // species 16: NH2
    result +=
      y[16] *
      (+4.19198016e+00 - 1.02301413e-03 * T + 2.22585378e-06 * T2 -
       1.31226809e-09 * T3 + 3.11179896e-13 * T4 + 2.11863286e+04 * invT) *
      0.0624102852150034;
    // species 17: HONO
    result +=
      y[17] *
      (+3.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
       2.06914118e-09 * T3 + 8.79914302e-13 * T4 - 1.07744086e+04 * invT) *
      0.0212707123561568;
    // species 18: HNO
    result +=
      y[18] *
      (+4.53525574e+00 - 2.84271688e-03 * T + 6.17328467e-06 * T2 -
       4.29703062e-09 * T3 + 1.11163631e-12 * T4 + 1.16183003e+04 * invT) *
      0.0322435029341588;
    // species 19: H2NN
    result +=
      y[19] *
      (+4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 20: N
    result +=
      y[20] * (+2.50000000e+00 + 5.61046380e+04 * invT) * 0.0713928749910759;
    // species 21: NNH
    result +=
      y[21] *
      (+4.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
       3.33159360e-09 * T3 + 8.82046794e-13 * T4 + 2.87932080e+04 * invT) *
      0.0344566191165323;
    // species 22: H2NO
    result +=
      y[22] *
      (+3.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
       4.06869633e-09 * T3 + 1.20070567e-12 * T4 + 6.71178975e+03 * invT) *
      0.0312285303853601;
    // species 23: N2H3
    result +=
      y[23] *
      (+3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.58198956e+04 * invT) *
      0.0322185707842000;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+2.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
       2.01888866e-11 * T3 - 9.52128550e-16 * T4 - 9.17180990e+02 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+2.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
       4.77129748e-12 * T3 - 1.86224358e-16 * T4 - 7.97948726e+02 * invT) *
      0.4960317460317460;
    // species 2: H
    result +=
      y[2] *
      (+2.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
       5.64270745e-15 * T3 - 3.05984010e-19 * T4 + 2.54738024e+04 * invT) *
      0.9920634920634921;
    // species 3: O2
    result +=
      y[3] *
      (+3.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
       5.36640092e-12 * T3 - 2.73007568e-16 * T4 - 1.21603048e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+2.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
       1.00316784e-12 * T3 - 8.34953148e-17 * T4 + 2.92287628e+04 * invT) *
      0.0625039064941559;
    // species 5: OH
    result +=
      y[5] *
      (+2.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
       1.02274977e-11 * T3 - 4.62764516e-16 * T4 + 3.71706610e+03 * invT) *
      0.0587993179279120;
    // species 6: H2O2
    result +=
      y[6] *
      (+4.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
       5.02059038e-11 * T3 - 2.31018486e-15 * T4 - 1.79514029e+04 * invT) *
      0.0293996589639560;
    // species 7: HO2
    result +=
      y[7] *
      (+4.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
       4.64932610e-12 * T3 + 9.97636630e-17 * T4 + 4.32898769e+01 * invT) *
      0.0302975216627280;
    // species 8: H2O
    result +=
      y[8] *
      (+2.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
       3.15221483e-11 * T3 - 1.68106335e-15 * T4 - 2.99169082e+04 * invT) *
      0.0555092978073827;
    // species 9: NO
    result +=
      y[9] *
      (+3.26071234e+00 + 5.95505675e-04 * T - 1.43040882e-07 * T2 +
       1.73620366e-11 * T3 - 8.06591362e-16 * T4 + 9.92143132e+03 * invT) *
      0.0333266679997334;
    // species 10: NO2
    result +=
      y[10] *
      (+4.88475400e+00 + 1.08619775e-03 * T - 2.76023030e-07 * T2 +
       3.93687750e-11 * T3 - 2.10217900e-15 * T4 + 2.31649820e+03 * invT) *
      0.0217367677426367;
    // species 11: N2O
    result +=
      y[11] *
      (+4.82307290e+00 + 1.31351255e-03 * T - 3.19502907e-07 * T2 +
       4.00017800e-11 * T3 - 1.95504604e-15 * T4 + 8.07340470e+03 * invT) *
      0.0227205598345943;
    // species 13: NH3
    result +=
      y[13] *
      (+2.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
       1.02941853e-10 * T3 - 5.81673574e-15 * T4 - 6.41596473e+03 * invT) *
      0.0587164582232400;
    // species 14: N2H4
    result +=
      y[14] *
      (+4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 15: NH
    result +=
      y[15] *
      (+2.78372644e+00 + 6.64929440e-04 * T - 1.41595191e-07 * T2 +
       1.95873611e-11 * T3 - 1.10090262e-15 * T4 + 4.23461945e+04 * invT) *
      0.0666000666000666;
    // species 16: NH2
    result +=
      y[16] *
      (+2.59263049e+00 + 1.73841799e-03 * T - 3.60905413e-07 * T2 +
       3.73356395e-11 * T3 - 1.15048237e-15 * T4 + 2.15737320e+04 * invT) *
      0.0624102852150034;
    // species 17: HONO
    result +=
      y[17] *
      (+5.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
       5.16245582e-11 * T3 - 2.44277358e-15 * T4 - 1.15974343e+04 * invT) *
      0.0212707123561568;
    // species 18: HNO
    result +=
      y[18] *
      (+3.16598124e+00 + 1.49979446e-03 * T - 1.31458929e-07 * T2 -
       9.63360222e-12 * T3 + 1.41520534e-15 * T4 + 1.17726311e+04 * invT) *
      0.0322435029341588;
    // species 19: H2NN
    result +=
      y[19] *
      (+3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 20: N
    result +=
      y[20] *
      (+2.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
       7.55656100e-12 * T3 - 4.07219660e-16 * T4 + 5.61337750e+04 * invT) *
      0.0713928749910759;
    // species 21: NNH
    result +=
      y[21] *
      (+3.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
       4.76270890e-11 * T3 - 2.28983012e-15 * T4 + 2.87676026e+04 * invT) *
      0.0344566191165323;
    // species 22: H2NO
    result +=
      y[22] *
      (+3.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
       6.87631730e-11 * T3 - 3.21286286e-15 * T4 + 6.51826177e+03 * invT) *
      0.0312285303853601;
    // species 23: N2H3
    result +=
      y[23] *
      (+4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.53241420e+04 * invT) *
      0.0322185707842000;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    result +=
      y[12] *
      (+2.55589425e+00 + 3.27169540e-03 * T - 2.93982618e-07 * T2 -
       2.89928260e-10 * T3 + 7.94884460e-14 * T4 + 2.41085081e+04 * invT) *
      0.0333000333000333;
  } else {
    // species 12: N2H2
    result +=
      y[12] *
      (+4.14686796e+00 + 2.40806157e-03 * T - 5.42496057e-07 * T2 +
       6.26390245e-11 * T3 - 2.88988376e-15 * T4 + 2.33444055e+04 * invT) *
      0.0333000333000333;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[24];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 24; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+2.53603521e+00 - 7.91354720e-05 * T - 1.42328084e-07 * T2 +
       5.93856475e-10 * T3 - 2.79416412e-13 * T4 - 1.04749645e+03 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+1.37694204e+00 + 3.86958461e-03 * T - 6.29116910e-06 * T2 +
       4.88792785e-09 * T3 - 1.43419133e-12 * T4 - 9.21173081e+02 * invT) *
      0.4960317460317460;
    // species 2: H
    result +=
      y[2] *
      (+1.49975925e+00 + 3.36912250e-07 * T + 3.72690870e-10 * T2 -
       9.25480315e-13 * T3 + 4.28467644e-16 * T4 + 2.54737665e+04 * invT) *
      0.9920634920634921;
    // species 3: O2
    result +=
      y[3] *
      (+2.78498258e+00 - 1.51001116e-03 * T + 3.30676390e-06 * T2 -
       2.44460109e-09 * T3 + 6.57755404e-13 * T4 - 1.06413589e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+2.15906526e+00 - 1.60754999e-03 * T + 2.16418514e-06 * T2 -
       1.49688779e-09 * T3 + 4.13752234e-13 * T4 + 2.91298453e+04 * invT) *
      0.0625039064941559;
    // species 5: OH
    result +=
      y[5] *
      (+2.97585165e+00 - 1.14277645e-03 * T + 1.44480961e-06 * T2 -
       8.99816600e-10 * T3 + 2.53413860e-13 * T4 + 3.39341137e+03 * invT) *
      0.0587993179279120;
    // species 6: H2O2
    result +=
      y[6] *
      (+3.23854160e+00 - 1.24805455e-04 * T + 5.32859670e-06 * T2 -
       5.17299863e-09 * T3 + 1.65953264e-12 * T4 - 1.76486003e+04 * invT) *
      0.0293996589639560;
    // species 7: HO2
    result +=
      y[7] *
      (+3.26251250e+00 - 2.22821016e-03 * T + 6.83883113e-06 * T2 -
       5.89485027e-09 * T3 + 1.81122851e-12 * T4 + 2.62442356e+02 * invT) *
      0.0302975216627280;
    // species 8: H2O
    result +=
      y[8] *
      (+3.20147551e+00 - 1.02791773e-03 * T + 2.18849069e-06 * T2 -
       1.38226740e-09 * T3 + 3.56565210e-13 * T4 - 3.02950066e+04 * invT) *
      0.0555092978073827;
    // species 9: NO
    result +=
      y[9] *
      (+3.21859896e+00 - 2.31994062e-03 * T + 3.68143497e-06 * T2 -
       2.33513877e-09 * T3 + 5.61109748e-13 * T4 + 9.84509964e+03 * invT) *
      0.0333266679997334;
    // species 10: NO2
    result +=
      y[10] *
      (+2.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
       5.11885650e-09 * T3 + 1.56701128e-12 * T4 + 2.89661800e+03 * invT) *
      0.0217367677426367;
    // species 11: N2O
    result +=
      y[11] *
      (+1.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
       2.42049508e-09 * T3 - 5.86143640e-13 * T4 + 8.74177460e+03 * invT) *
      0.0227205598345943;
    // species 13: NH3
    result +=
      y[13] *
      (+3.14027871e+00 - 1.79244571e-03 * T + 6.31586347e-06 * T2 -
       4.97084925e-09 * T3 + 1.43053592e-12 * T4 - 6.68545158e+03 * invT) *
      0.0587164582232400;
    // species 14: N2H4
    result +=
      y[14] *
      (+2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 15: NH
    result +=
      y[15] *
      (+2.49295037e+00 + 1.55897860e-04 * T - 4.96355427e-07 * T2 +
       6.20418505e-10 * T3 - 2.07141832e-13 * T4 + 4.21059722e+04 * invT) *
      0.0666000666000666;
    // species 16: NH2
    result +=
      y[16] *
      (+3.19198016e+00 - 1.02301413e-03 * T + 2.22585378e-06 * T2 -
       1.31226809e-09 * T3 + 3.11179896e-13 * T4 + 2.11863286e+04 * invT) *
      0.0624102852150034;
    // species 17: HONO
    result +=
      y[17] *
      (+2.16416438e+00 + 4.25258887e-03 * T + 1.82853858e-07 * T2 -
       2.06914118e-09 * T3 + 8.79914302e-13 * T4 - 1.07744086e+04 * invT) *
      0.0212707123561568;
    // species 18: HNO
    result +=
      y[18] *
      (+3.53525574e+00 - 2.84271688e-03 * T + 6.17328467e-06 * T2 -
       4.29703062e-09 * T3 + 1.11163631e-12 * T4 + 1.16183003e+04 * invT) *
      0.0322435029341588;
    // species 19: H2NN
    result +=
      y[19] *
      (+3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 20: N
    result +=
      y[20] * (+1.50000000e+00 + 5.61046380e+04 * invT) * 0.0713928749910759;
    // species 21: NNH
    result +=
      y[21] *
      (+3.25474632e+00 - 1.72549149e-03 * T + 4.59295663e-06 * T2 -
       3.33159360e-09 * T3 + 8.82046794e-13 * T4 + 2.87932080e+04 * invT) *
      0.0344566191165323;
    // species 22: H2NO
    result +=
      y[22] *
      (+2.93201139e+00 - 8.20140825e-05 * T + 4.63871363e-06 * T2 -
       4.06869633e-09 * T3 + 1.20070567e-12 * T4 + 6.71178975e+03 * invT) *
      0.0312285303853601;
    // species 23: N2H3
    result +=
      y[23] *
      (+2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.58198956e+04 * invT) *
      0.0322185707842000;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+1.93802970e+00 + 7.09190150e-04 * T - 1.67760348e-07 * T2 +
       2.01888866e-11 * T3 - 9.52128550e-16 * T4 - 9.17180990e+02 * invT) *
      0.0356964374955379;
    // species 1: H2
    result +=
      y[1] *
      (+1.90207649e+00 + 4.34496291e-04 * T - 5.52881433e-08 * T2 +
       4.77129748e-12 * T3 - 1.86224358e-16 * T4 - 7.97948726e+02 * invT) *
      0.4960317460317460;
    // species 2: H
    result +=
      y[2] *
      (+1.49985211e+00 + 1.17291274e-07 * T - 3.87238803e-11 * T2 +
       5.64270745e-15 * T3 - 3.05984010e-19 * T4 + 2.54738024e+04 * invT) *
      0.9920634920634921;
    // species 3: O2
    result +=
      y[3] *
      (+2.65980488e+00 + 3.29938686e-04 * T - 4.80527240e-08 * T2 +
       5.36640092e-12 * T3 - 2.73007568e-16 * T4 - 1.21603048e+03 * invT) *
      0.0312519532470779;
    // species 4: O
    result +=
      y[4] *
      (+1.55160087e+00 - 1.91542728e-05 * T + 2.81065826e-10 * T2 +
       1.00316784e-12 * T3 - 8.34953148e-17 * T4 + 2.92287628e+04 * invT) *
      0.0625039064941559;
    // species 5: OH
    result +=
      y[5] *
      (+1.84581721e+00 + 5.48619090e-04 * T - 9.63737003e-08 * T2 +
       1.02274977e-11 * T3 - 4.62764516e-16 * T4 + 3.71706610e+03 * invT) *
      0.0587993179279120;
    // species 6: H2O2
    result +=
      y[6] *
      (+3.54017480e+00 + 2.07985485e-03 * T - 4.36255923e-07 * T2 +
       5.02059038e-11 * T3 - 2.31018486e-15 * T4 - 1.79514029e+04 * invT) *
      0.0293996589639560;
    // species 7: HO2
    result +=
      y[7] *
      (+3.10564010e+00 + 1.02023418e-03 * T - 1.21959187e-07 * T2 +
       4.64932610e-12 * T3 + 9.97636630e-17 * T4 + 4.32898769e+01 * invT) *
      0.0302975216627280;
    // species 8: H2O
    result +=
      y[8] *
      (+1.73117512e+00 + 1.47568497e-03 * T - 2.78453262e-07 * T2 +
       3.15221483e-11 * T3 - 1.68106335e-15 * T4 - 2.99169082e+04 * invT) *
      0.0555092978073827;
    // species 9: NO
    result +=
      y[9] *
      (+2.26071234e+00 + 5.95505675e-04 * T - 1.43040882e-07 * T2 +
       1.73620366e-11 * T3 - 8.06591362e-16 * T4 + 9.92143132e+03 * invT) *
      0.0333266679997334;
    // species 10: NO2
    result +=
      y[10] *
      (+3.88475400e+00 + 1.08619775e-03 * T - 2.76023030e-07 * T2 +
       3.93687750e-11 * T3 - 2.10217900e-15 * T4 + 2.31649820e+03 * invT) *
      0.0217367677426367;
    // species 11: N2O
    result +=
      y[11] *
      (+3.82307290e+00 + 1.31351255e-03 * T - 3.19502907e-07 * T2 +
       4.00017800e-11 * T3 - 1.95504604e-15 * T4 + 8.07340470e+03 * invT) *
      0.0227205598345943;
    // species 13: NH3
    result +=
      y[13] *
      (+1.36074311e+00 + 3.15925073e-03 * T - 7.63222687e-07 * T2 +
       1.02941853e-10 * T3 - 5.81673574e-15 * T4 - 6.41596473e+03 * invT) *
      0.0587164582232400;
    // species 14: N2H4
    result +=
      y[14] *
      (+3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 15: NH
    result +=
      y[15] *
      (+1.78372644e+00 + 6.64929440e-04 * T - 1.41595191e-07 * T2 +
       1.95873611e-11 * T3 - 1.10090262e-15 * T4 + 4.23461945e+04 * invT) *
      0.0666000666000666;
    // species 16: NH2
    result +=
      y[16] *
      (+1.59263049e+00 + 1.73841799e-03 * T - 3.60905413e-07 * T2 +
       3.73356395e-11 * T3 - 1.15048237e-15 * T4 + 2.15737320e+04 * invT) *
      0.0624102852150034;
    // species 17: HONO
    result +=
      y[17] *
      (+4.79144641e+00 + 1.82315366e-03 * T - 4.30375883e-07 * T2 +
       5.16245582e-11 * T3 - 2.44277358e-15 * T4 - 1.15974343e+04 * invT) *
      0.0212707123561568;
    // species 18: HNO
    result +=
      y[18] *
      (+2.16598124e+00 + 1.49979446e-03 * T - 1.31458929e-07 * T2 -
       9.63360222e-12 * T3 + 1.41520534e-15 * T4 + 1.17726311e+04 * invT) *
      0.0322435029341588;
    // species 19: H2NN
    result +=
      y[19] *
      (+2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 20: N
    result +=
      y[20] *
      (+1.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
       7.55656100e-12 * T3 - 4.07219660e-16 * T4 + 5.61337750e+04 * invT) *
      0.0713928749910759;
    // species 21: NNH
    result +=
      y[21] *
      (+2.42744423e+00 + 1.61647617e-03 * T - 3.90987663e-07 * T2 +
       4.76270890e-11 * T3 - 2.28983012e-15 * T4 + 2.87676026e+04 * invT) *
      0.0344566191165323;
    // species 22: H2NO
    result +=
      y[22] *
      (+2.75555914e+00 + 2.58109677e-03 * T - 5.87957957e-07 * T2 +
       6.87631730e-11 * T3 - 3.21286286e-15 * T4 + 6.51826177e+03 * invT) *
      0.0312285303853601;
    // species 23: N2H3
    result +=
      y[23] *
      (+3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.53241420e+04 * invT) *
      0.0322185707842000;
  }

  // species with midpoint at T=1380 kelvin
  if (T < 1380) {
    // species 12: N2H2
    result +=
      y[12] *
      (+1.55589425e+00 + 3.27169540e-03 * T - 2.93982618e-07 * T2 -
       2.89928260e-10 * T3 + 7.94884460e-14 * T4 + 2.41085081e+04 * invT) *
      0.0333000333000333;
  } else {
    // species 12: N2H2
    result +=
      y[12] *
      (+3.14686796e+00 + 2.40806157e-03 * T - 5.42496057e-07 * T2 +
       6.26390245e-11 * T3 - 2.88988376e-15 * T4 + 2.33444055e+04 * invT) *
      0.0333000333000333;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[24]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 24; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[24]; //  temporary storage
  amrex::Real x[24];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (28.014000 * YOW);
  x[1] = y[1] / (2.016000 * YOW);
  x[2] = y[2] / (1.008000 * YOW);
  x[3] = y[3] / (31.998000 * YOW);
  x[4] = y[4] / (15.999000 * YOW);
  x[5] = y[5] / (17.007000 * YOW);
  x[6] = y[6] / (34.014000 * YOW);
  x[7] = y[7] / (33.006000 * YOW);
  x[8] = y[8] / (18.015000 * YOW);
  x[9] = y[9] / (30.006000 * YOW);
  x[10] = y[10] / (46.005000 * YOW);
  x[11] = y[11] / (44.013000 * YOW);
  x[12] = y[12] / (30.030000 * YOW);
  x[13] = y[13] / (17.031000 * YOW);
  x[14] = y[14] / (32.046000 * YOW);
  x[15] = y[15] / (15.015000 * YOW);
  x[16] = y[16] / (16.023000 * YOW);
  x[17] = y[17] / (47.013000 * YOW);
  x[18] = y[18] / (31.014000 * YOW);
  x[19] = y[19] / (30.030000 * YOW);
  x[20] = y[20] / (14.007000 * YOW);
  x[21] = y[21] / (29.022000 * YOW);
  x[22] = y[22] / (32.022000 * YOW);
  x[23] = y[23] / (31.038000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 24; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 28.014000;                  // N2
  XW += x[1] * 2.016000;                   // H2
  XW += x[2] * 1.008000;                   // H
  XW += x[3] * 31.998000;                  // O2
  XW += x[4] * 15.999000;                  // O
  XW += x[5] * 17.007000;                  // OH
  XW += x[6] * 34.014000;                  // H2O2
  XW += x[7] * 33.006000;                  // HO2
  XW += x[8] * 18.015000;                  // H2O
  XW += x[9] * 30.006000;                  // NO
  XW += x[10] * 46.005000;                 // NO2
  XW += x[11] * 44.013000;                 // N2O
  XW += x[12] * 30.030000;                 // N2H2
  XW += x[13] * 17.031000;                 // NH3
  XW += x[14] * 32.046000;                 // N2H4
  XW += x[15] * 15.015000;                 // NH
  XW += x[16] * 16.023000;                 // NH2
  XW += x[17] * 47.013000;                 // HONO
  XW += x[18] * 31.014000;                 // HNO
  XW += x[19] * 30.030000;                 // H2NN
  XW += x[20] * 14.007000;                 // N
  XW += x[21] * 29.022000;                 // NNH
  XW += x[22] * 32.022000;                 // H2NO
  XW += x[23] * 31.038000;                 // N2H3
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 17.007000;  // OH
  W += c[6] * 34.014000;  // H2O2
  W += c[7] * 33.006000;  // HO2
  W += c[8] * 18.015000;  // H2O
  W += c[9] * 30.006000;  // NO
  W += c[10] * 46.005000; // NO2
  W += c[11] * 44.013000; // N2O
  W += c[12] * 30.030000; // N2H2
  W += c[13] * 17.031000; // NH3
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 15.015000; // NH
  W += c[16] * 16.023000; // NH2
  W += c[17] * 47.013000; // HONO
  W += c[18] * 31.014000; // HNO
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 14.007000; // N
  W += c[21] * 29.022000; // NNH
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 31.038000; // N2H3

  for (int id = 0; id < 24; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 28.014000;                    // N2
  XW += x[1] * 2.016000;                     // H2
  XW += x[2] * 1.008000;                     // H
  XW += x[3] * 31.998000;                    // O2
  XW += x[4] * 15.999000;                    // O
  XW += x[5] * 17.007000;                    // OH
  XW += x[6] * 34.014000;                    // H2O2
  XW += x[7] * 33.006000;                    // HO2
  XW += x[8] * 18.015000;                    // H2O
  XW += x[9] * 30.006000;                    // NO
  XW += x[10] * 46.005000;                   // NO2
  XW += x[11] * 44.013000;                   // N2O
  XW += x[12] * 30.030000;                   // N2H2
  XW += x[13] * 17.031000;                   // NH3
  XW += x[14] * 32.046000;                   // N2H4
  XW += x[15] * 15.015000;                   // NH
  XW += x[16] * 16.023000;                   // NH2
  XW += x[17] * 47.013000;                   // HONO
  XW += x[18] * 31.014000;                   // HNO
  XW += x[19] * 30.030000;                   // H2NN
  XW += x[20] * 14.007000;                   // N
  XW += x[21] * 29.022000;                   // NNH
  XW += x[22] * 32.022000;                   // H2NO
  XW += x[23] * 31.038000;                   // N2H3
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 17.007000;  // OH
  W += c[6] * 34.014000;  // H2O2
  W += c[7] * 33.006000;  // HO2
  W += c[8] * 18.015000;  // H2O
  W += c[9] * 30.006000;  // NO
  W += c[10] * 46.005000; // NO2
  W += c[11] * 44.013000; // N2O
  W += c[12] * 30.030000; // N2H2
  W += c[13] * 17.031000; // NH3
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 15.015000; // NH
  W += c[16] * 16.023000; // NH2
  W += c[17] * 47.013000; // HONO
  W += c[18] * 31.014000; // HNO
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 14.007000; // N
  W += c[21] * 29.022000; // NNH
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 31.038000; // N2H3

  for (int id = 0; id < 24; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 17.007000;  // OH
  XW += x[6] * 34.014000;  // H2O2
  XW += x[7] * 33.006000;  // HO2
  XW += x[8] * 18.015000;  // H2O
  XW += x[9] * 30.006000;  // NO
  XW += x[10] * 46.005000; // NO2
  XW += x[11] * 44.013000; // N2O
  XW += x[12] * 30.030000; // N2H2
  XW += x[13] * 17.031000; // NH3
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 15.015000; // NH
  XW += x[16] * 16.023000; // NH2
  XW += x[17] * 47.013000; // HONO
  XW += x[18] * 31.014000; // HNO
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 14.007000; // N
  XW += x[21] * 29.022000; // NNH
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 31.038000; // N2H3
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 2.016000;   // H2
  W += c[2] * 1.008000;   // H
  W += c[3] * 31.998000;  // O2
  W += c[4] * 15.999000;  // O
  W += c[5] * 17.007000;  // OH
  W += c[6] * 34.014000;  // H2O2
  W += c[7] * 33.006000;  // HO2
  W += c[8] * 18.015000;  // H2O
  W += c[9] * 30.006000;  // NO
  W += c[10] * 46.005000; // NO2
  W += c[11] * 44.013000; // N2O
  W += c[12] * 30.030000; // N2H2
  W += c[13] * 17.031000; // NH3
  W += c[14] * 32.046000; // N2H4
  W += c[15] * 15.015000; // NH
  W += c[16] * 16.023000; // NH2
  W += c[17] * 47.013000; // HONO
  W += c[18] * 31.014000; // HNO
  W += c[19] * 30.030000; // H2NN
  W += c[20] * 14.007000; // N
  W += c[21] * 29.022000; // NNH
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 31.038000; // N2H3

  for (int id = 0; id < 24; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 24; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 24; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 24; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 24; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 24; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 17.007000;  // OH
  XW += x[6] * 34.014000;  // H2O2
  XW += x[7] * 33.006000;  // HO2
  XW += x[8] * 18.015000;  // H2O
  XW += x[9] * 30.006000;  // NO
  XW += x[10] * 46.005000; // NO2
  XW += x[11] * 44.013000; // N2O
  XW += x[12] * 30.030000; // N2H2
  XW += x[13] * 17.031000; // NH3
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 15.015000; // NH
  XW += x[16] * 16.023000; // NH2
  XW += x[17] * 47.013000; // HONO
  XW += x[18] * 31.014000; // HNO
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 14.007000; // N
  XW += x[21] * 29.022000; // NNH
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 31.038000; // N2H3
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 28.014000 * XWinv;
  y[1] = x[1] * 2.016000 * XWinv;
  y[2] = x[2] * 1.008000 * XWinv;
  y[3] = x[3] * 31.998000 * XWinv;
  y[4] = x[4] * 15.999000 * XWinv;
  y[5] = x[5] * 17.007000 * XWinv;
  y[6] = x[6] * 34.014000 * XWinv;
  y[7] = x[7] * 33.006000 * XWinv;
  y[8] = x[8] * 18.015000 * XWinv;
  y[9] = x[9] * 30.006000 * XWinv;
  y[10] = x[10] * 46.005000 * XWinv;
  y[11] = x[11] * 44.013000 * XWinv;
  y[12] = x[12] * 30.030000 * XWinv;
  y[13] = x[13] * 17.031000 * XWinv;
  y[14] = x[14] * 32.046000 * XWinv;
  y[15] = x[15] * 15.015000 * XWinv;
  y[16] = x[16] * 16.023000 * XWinv;
  y[17] = x[17] * 47.013000 * XWinv;
  y[18] = x[18] * 31.014000 * XWinv;
  y[19] = x[19] * 30.030000 * XWinv;
  y[20] = x[20] * 14.007000 * XWinv;
  y[21] = x[21] * 29.022000 * XWinv;
  y[22] = x[22] * 32.022000 * XWinv;
  y[23] = x[23] * 31.038000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 24; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 17.007000;  // OH
  XW += x[6] * 34.014000;  // H2O2
  XW += x[7] * 33.006000;  // HO2
  XW += x[8] * 18.015000;  // H2O
  XW += x[9] * 30.006000;  // NO
  XW += x[10] * 46.005000; // NO2
  XW += x[11] * 44.013000; // N2O
  XW += x[12] * 30.030000; // N2H2
  XW += x[13] * 17.031000; // NH3
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 15.015000; // NH
  XW += x[16] * 16.023000; // NH2
  XW += x[17] * 47.013000; // HONO
  XW += x[18] * 31.014000; // HNO
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 14.007000; // N
  XW += x[21] * 29.022000; // NNH
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 31.038000; // N2H3
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 24; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 24; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 24; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 28.014000;  // N2
  CW += c[1] * 2.016000;   // H2
  CW += c[2] * 1.008000;   // H
  CW += c[3] * 31.998000;  // O2
  CW += c[4] * 15.999000;  // O
  CW += c[5] * 17.007000;  // OH
  CW += c[6] * 34.014000;  // H2O2
  CW += c[7] * 33.006000;  // HO2
  CW += c[8] * 18.015000;  // H2O
  CW += c[9] * 30.006000;  // NO
  CW += c[10] * 46.005000; // NO2
  CW += c[11] * 44.013000; // N2O
  CW += c[12] * 30.030000; // N2H2
  CW += c[13] * 17.031000; // NH3
  CW += c[14] * 32.046000; // N2H4
  CW += c[15] * 15.015000; // NH
  CW += c[16] * 16.023000; // NH2
  CW += c[17] * 47.013000; // HONO
  CW += c[18] * 31.014000; // HNO
  CW += c[19] * 30.030000; // H2NN
  CW += c[20] * 14.007000; // N
  CW += c[21] * 29.022000; // NNH
  CW += c[22] * 32.022000; // H2NO
  CW += c[23] * 31.038000; // N2H3
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 28.014000 * CWinv;
  y[1] = c[1] * 2.016000 * CWinv;
  y[2] = c[2] * 1.008000 * CWinv;
  y[3] = c[3] * 31.998000 * CWinv;
  y[4] = c[4] * 15.999000 * CWinv;
  y[5] = c[5] * 17.007000 * CWinv;
  y[6] = c[6] * 34.014000 * CWinv;
  y[7] = c[7] * 33.006000 * CWinv;
  y[8] = c[8] * 18.015000 * CWinv;
  y[9] = c[9] * 30.006000 * CWinv;
  y[10] = c[10] * 46.005000 * CWinv;
  y[11] = c[11] * 44.013000 * CWinv;
  y[12] = c[12] * 30.030000 * CWinv;
  y[13] = c[13] * 17.031000 * CWinv;
  y[14] = c[14] * 32.046000 * CWinv;
  y[15] = c[15] * 15.015000 * CWinv;
  y[16] = c[16] * 16.023000 * CWinv;
  y[17] = c[17] * 47.013000 * CWinv;
  y[18] = c[18] * 31.014000 * CWinv;
  y[19] = c[19] * 30.030000 * CWinv;
  y[20] = c[20] * 14.007000 * CWinv;
  y[21] = c[21] * 29.022000 * CWinv;
  y[22] = c[22] * 32.022000 * CWinv;
  y[23] = c[23] * 31.038000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 2.967966951578939e+06;  // N2
  cvms[1] *= 4.124237409798234e+07;  // H2
  cvms[2] *= 8.248474819596468e+07;  // H
  cvms[3] *= 2.598431970171023e+06;  // O2
  cvms[4] *= 5.196863940342046e+06;  // O
  cvms[5] *= 4.888847308845322e+06;  // OH
  cvms[6] *= 2.444423654422661e+06;  // H2O2
  cvms[7] *= 2.519076112874398e+06;  // HO2
  cvms[8] *= 4.615299815794193e+06;  // H2O
  cvms[9] *= 2.770933352713870e+06;  // NO
  cvms[10] *= 1.807295428356318e+06; // NO2
  cvms[11] *= 1.889092454082485e+06; // N2O
  cvms[12] *= 2.768718820563850e+06; // N2H2
  cvms[13] *= 4.881957969674852e+06; // NH3
  cvms[14] *= 2.594539917042139e+06; // N2H4
  cvms[15] *= 5.537437641127699e+06; // NH
  cvms[16] *= 5.189079834084279e+06; // NH2
  cvms[17] *= 1.768545427467560e+06; // HONO
  cvms[18] *= 2.680873998243773e+06; // HNO
  cvms[19] *= 2.768718820563850e+06; // H2NN
  cvms[20] *= 5.935933903157878e+06; // N
  cvms[21] *= 2.864882715923520e+06; // NNH
  cvms[22] *= 2.596484485089389e+06; // H2NO
  cvms[23] *= 2.678801023955551e+06; // N2H3
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 2.967966951578939e+06;  // N2
  cpms[1] *= 4.124237409798234e+07;  // H2
  cpms[2] *= 8.248474819596468e+07;  // H
  cpms[3] *= 2.598431970171023e+06;  // O2
  cpms[4] *= 5.196863940342046e+06;  // O
  cpms[5] *= 4.888847308845322e+06;  // OH
  cpms[6] *= 2.444423654422661e+06;  // H2O2
  cpms[7] *= 2.519076112874398e+06;  // HO2
  cpms[8] *= 4.615299815794193e+06;  // H2O
  cpms[9] *= 2.770933352713870e+06;  // NO
  cpms[10] *= 1.807295428356318e+06; // NO2
  cpms[11] *= 1.889092454082485e+06; // N2O
  cpms[12] *= 2.768718820563850e+06; // N2H2
  cpms[13] *= 4.881957969674852e+06; // NH3
  cpms[14] *= 2.594539917042139e+06; // N2H4
  cpms[15] *= 5.537437641127699e+06; // NH
  cpms[16] *= 5.189079834084279e+06; // NH2
  cpms[17] *= 1.768545427467560e+06; // HONO
  cpms[18] *= 2.680873998243773e+06; // HNO
  cpms[19] *= 2.768718820563850e+06; // H2NN
  cpms[20] *= 5.935933903157878e+06; // N
  cpms[21] *= 2.864882715923520e+06; // NNH
  cpms[22] *= 2.596484485089389e+06; // H2NO
  cpms[23] *= 2.678801023955551e+06; // N2H3
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 24; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 24; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 2.967966951578939e+06;  // N2
  sms[1] *= 4.124237409798234e+07;  // H2
  sms[2] *= 8.248474819596468e+07;  // H
  sms[3] *= 2.598431970171023e+06;  // O2
  sms[4] *= 5.196863940342046e+06;  // O
  sms[5] *= 4.888847308845322e+06;  // OH
  sms[6] *= 2.444423654422661e+06;  // H2O2
  sms[7] *= 2.519076112874398e+06;  // HO2
  sms[8] *= 4.615299815794193e+06;  // H2O
  sms[9] *= 2.770933352713870e+06;  // NO
  sms[10] *= 1.807295428356318e+06; // NO2
  sms[11] *= 1.889092454082485e+06; // N2O
  sms[12] *= 2.768718820563850e+06; // N2H2
  sms[13] *= 4.881957969674852e+06; // NH3
  sms[14] *= 2.594539917042139e+06; // N2H4
  sms[15] *= 5.537437641127699e+06; // NH
  sms[16] *= 5.189079834084279e+06; // NH2
  sms[17] *= 1.768545427467560e+06; // HONO
  sms[18] *= 2.680873998243773e+06; // HNO
  sms[19] *= 2.768718820563850e+06; // H2NN
  sms[20] *= 5.935933903157878e+06; // N
  sms[21] *= 2.864882715923520e+06; // NNH
  sms[22] *= 2.596484485089389e+06; // H2NO
  sms[23] *= 2.678801023955551e+06; // N2H3
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 8: H2O2 (+M) <=> 2 OH (+M)
  qf[0] = sc[6];
  qr[0] = (sc[5] * sc[5]);

  // reaction 21: H + O2 (+M) <=> HO2 (+M)
  qf[1] = sc[2] * sc[3];
  qr[1] = sc[7];

  // reaction 112: NO + O (+M) <=> NO2 (+M)
  qf[2] = sc[4] * sc[9];
  qr[2] = sc[10];

  // reaction 143: N2O (+M) <=> N2 + O (+M)
  qf[3] = sc[11];
  qr[3] = sc[0] * sc[4];

  // reaction 0: H2 + M <=> 2 H + M
  qf[4] = sc[1];
  qr[4] = (sc[2] * sc[2]);

  // reaction 3: 2 O + M <=> O2 + M
  qf[5] = (sc[4] * sc[4]);
  qr[5] = sc[3];

  // reaction 5: H + OH + M <=> H2O + M
  qf[6] = sc[2] * sc[5];
  qr[6] = sc[8];

  // reaction 7: H + O + M <=> OH + M
  qf[7] = sc[2] * sc[4];
  qr[7] = sc[5];

  // reaction 22: O + OH + M <=> HO2 + M
  qf[8] = sc[4] * sc[5];
  qr[8] = sc[7];

  // reaction 130: H2NO + M <=> H + HNO + M
  qf[9] = sc[22];
  qr[9] = sc[2] * sc[18];

  // reaction 1: H2 + O <=> H + OH
  qf[10] = sc[1] * sc[4];
  qr[10] = sc[2] * sc[5];

  // reaction 2: H2 + OH <=> H + H2O
  qf[11] = sc[1] * sc[5];
  qr[11] = sc[2] * sc[8];

  // reaction 4: H + O2 <=> O + OH
  qf[12] = sc[2] * sc[3];
  qr[12] = sc[4] * sc[5];

  // reaction 6: H2O + O <=> 2 OH
  qf[13] = sc[4] * sc[8];
  qr[13] = (sc[5] * sc[5]);

  // reaction 9: H + H2O2 <=> H2O + OH
  qf[14] = sc[2] * sc[6];
  qr[14] = sc[5] * sc[8];

  // reaction 10: H + H2O2 <=> H2 + HO2
  qf[15] = sc[2] * sc[6];
  qr[15] = sc[1] * sc[7];

  // reaction 11: H2O2 + O <=> HO2 + OH
  qf[16] = sc[4] * sc[6];
  qr[16] = sc[5] * sc[7];

  // reaction 12: H2O2 + OH <=> H2O + HO2
  qf[17] = sc[5] * sc[6];
  qr[17] = sc[7] * sc[8];

  // reaction 13: H2O2 + OH <=> H2O + HO2
  qf[18] = sc[5] * sc[6];
  qr[18] = sc[7] * sc[8];

  // reaction 14: H + HO2 <=> 2 OH
  qf[19] = sc[2] * sc[7];
  qr[19] = (sc[5] * sc[5]);

  // reaction 15: H + HO2 <=> H2 + O2
  qf[20] = sc[2] * sc[7];
  qr[20] = sc[1] * sc[3];

  // reaction 16: HO2 + O <=> O2 + OH
  qf[21] = sc[4] * sc[7];
  qr[21] = sc[3] * sc[5];

  // reaction 17: HO2 + OH <=> H2O + O2
  qf[22] = sc[5] * sc[7];
  qr[22] = sc[3] * sc[8];

  // reaction 18: HO2 + OH <=> H2O + O2
  qf[23] = sc[5] * sc[7];
  qr[23] = sc[3] * sc[8];

  // reaction 19: 2 HO2 <=> H2O2 + O2
  qf[24] = (sc[7] * sc[7]);
  qr[24] = sc[3] * sc[6];

  // reaction 20: 2 HO2 <=> H2O2 + O2
  qf[25] = (sc[7] * sc[7]);
  qr[25] = sc[3] * sc[6];

  // reaction 23: NH3 <=> H + NH2
  qf[26] = sc[13];
  qr[26] = sc[2] * sc[16];

  // reaction 24: H + NH2 <=> H2 + NH
  qf[27] = sc[2] * sc[16];
  qr[27] = sc[1] * sc[15];

  // reaction 25: H + NH3 <=> H2 + NH2
  qf[28] = sc[2] * sc[13];
  qr[28] = sc[1] * sc[16];

  // reaction 26: NH3 + OH <=> H2O + NH2
  qf[29] = sc[5] * sc[13];
  qr[29] = sc[8] * sc[16];

  // reaction 27: NH3 + O <=> NH2 + OH
  qf[30] = sc[4] * sc[13];
  qr[30] = sc[5] * sc[16];

  // reaction 28: HO2 + NH3 <=> H2O2 + NH2
  qf[31] = sc[7] * sc[13];
  qr[31] = sc[6] * sc[16];

  // reaction 29: NH3 + O2 <=> HO2 + NH2
  qf[32] = sc[3] * sc[13];
  qr[32] = sc[7] * sc[16];

  // reaction 30: NH2 + O <=> H + HNO
  qf[33] = sc[4] * sc[16];
  qr[33] = sc[2] * sc[18];

  // reaction 31: NH2 + O <=> H + HNO
  qf[34] = sc[4] * sc[16];
  qr[34] = sc[2] * sc[18];

  // reaction 32: NH2 + O <=> NH + OH
  qf[35] = sc[4] * sc[16];
  qr[35] = sc[5] * sc[15];

  // reaction 33: NH2 + O <=> NH + OH
  qf[36] = sc[4] * sc[16];
  qr[36] = sc[5] * sc[15];

  // reaction 34: NH2 + OH <=> H2O + NH
  qf[37] = sc[5] * sc[16];
  qr[37] = sc[8] * sc[15];

  // reaction 35: NH2 + O2 <=> HNO + OH
  qf[38] = sc[3] * sc[16];
  qr[38] = sc[5] * sc[18];

  // reaction 36: NH2 + O2 <=> H2NO + O
  qf[39] = sc[3] * sc[16];
  qr[39] = sc[4] * sc[22];

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  qf[40] = sc[7] * sc[16];
  qr[40] = sc[5] * sc[22];

  // reaction 38: NH + NH2 <=> H + N2H2
  qf[41] = sc[15] * sc[16];
  qr[41] = sc[2] * sc[12];

  // reaction 39: NH + NH2 <=> N + NH3
  qf[42] = sc[15] * sc[16];
  qr[42] = sc[13] * sc[20];

  // reaction 40: 2 NH <=> N + NH2
  qf[43] = (sc[15] * sc[15]);
  qr[43] = sc[16] * sc[20];

  // reaction 41: 2 NH => H2 + N2
  qf[44] = (sc[15] * sc[15]);
  qr[44] = 0.0;

  // reaction 42: 2 NH => 2 H + N2
  qf[45] = (sc[15] * sc[15]);
  qr[45] = 0.0;

  // reaction 43: 2 NH2 <=> NH + NH3
  qf[46] = (sc[16] * sc[16]);
  qr[46] = sc[13] * sc[15];

  // reaction 44: 2 NH2 <=> N2H4
  qf[47] = (sc[16] * sc[16]);
  qr[47] = sc[14];

  // reaction 45: 2 NH2 <=> H + N2H3
  qf[48] = (sc[16] * sc[16]);
  qr[48] = sc[2] * sc[23];

  // reaction 46: 2 NH2 <=> H2 + H2NN
  qf[49] = (sc[16] * sc[16]);
  qr[49] = sc[1] * sc[19];

  // reaction 47: NH2 + NO2 <=> H2NO + NO
  qf[50] = sc[10] * sc[16];
  qr[50] = sc[9] * sc[22];

  // reaction 48: NH2 + NO2 <=> H2O + N2O
  qf[51] = sc[10] * sc[16];
  qr[51] = sc[8] * sc[11];

  // reaction 49: NH2 + NO <=> H2O + N2
  qf[52] = sc[9] * sc[16];
  qr[52] = sc[0] * sc[8];

  // reaction 50: NH2 + NO <=> NNH + OH
  qf[53] = sc[9] * sc[16];
  qr[53] = sc[5] * sc[21];

  // reaction 51: H + NH <=> H2 + N
  qf[54] = sc[2] * sc[15];
  qr[54] = sc[1] * sc[20];

  // reaction 52: NH + O <=> H + NO
  qf[55] = sc[4] * sc[15];
  qr[55] = sc[2] * sc[9];

  // reaction 53: NH + OH <=> H + HNO
  qf[56] = sc[5] * sc[15];
  qr[56] = sc[2] * sc[18];

  // reaction 54: NH + OH <=> H2O + N
  qf[57] = sc[5] * sc[15];
  qr[57] = sc[8] * sc[20];

  // reaction 55: NH + O2 <=> HNO + O
  qf[58] = sc[3] * sc[15];
  qr[58] = sc[4] * sc[18];

  // reaction 56: NH + O2 <=> NO + OH
  qf[59] = sc[3] * sc[15];
  qr[59] = sc[5] * sc[9];

  // reaction 57: N + NH <=> H + N2
  qf[60] = sc[15] * sc[20];
  qr[60] = sc[0] * sc[2];

  // reaction 58: NH + NO <=> H + N2O
  qf[61] = sc[9] * sc[15];
  qr[61] = sc[2] * sc[11];

  // reaction 59: NH + NO <=> N2 + OH
  qf[62] = sc[9] * sc[15];
  qr[62] = sc[0] * sc[5];

  // reaction 60: NH + NO2 <=> N2O + OH
  qf[63] = sc[10] * sc[15];
  qr[63] = sc[5] * sc[11];

  // reaction 61: NH + NO2 <=> HNO + NO
  qf[64] = sc[10] * sc[15];
  qr[64] = sc[9] * sc[18];

  // reaction 62: N + OH <=> H + NO
  qf[65] = sc[5] * sc[20];
  qr[65] = sc[2] * sc[9];

  // reaction 63: N + O2 <=> NO + O
  qf[66] = sc[3] * sc[20];
  qr[66] = sc[4] * sc[9];

  // reaction 64: N + NO <=> N2 + O
  qf[67] = sc[9] * sc[20];
  qr[67] = sc[0] * sc[4];

  // reaction 65: N2H4 <=> H2 + H2NN
  qf[68] = sc[14];
  qr[68] = sc[1] * sc[19];

  // reaction 66: H + N2H4 <=> H2 + N2H3
  qf[69] = sc[2] * sc[14];
  qr[69] = sc[1] * sc[23];

  // reaction 67: N2H4 + O <=> N2H3 + OH
  qf[70] = sc[4] * sc[14];
  qr[70] = sc[5] * sc[23];

  // reaction 68: N2H4 + O <=> H2O + N2H2
  qf[71] = sc[4] * sc[14];
  qr[71] = sc[8] * sc[12];

  // reaction 69: N2H4 + OH <=> H2O + N2H3
  qf[72] = sc[5] * sc[14];
  qr[72] = sc[8] * sc[23];

  // reaction 70: N2H4 + NH2 <=> N2H3 + NH3
  qf[73] = sc[14] * sc[16];
  qr[73] = sc[13] * sc[23];

  // reaction 71: N2H4 + NO2 <=> HONO + N2H3
  qf[74] = sc[10] * sc[14];
  qr[74] = sc[17] * sc[23];

  // reaction 72: N2H3 <=> H + N2H2
  qf[75] = sc[23];
  qr[75] = sc[2] * sc[12];

  // reaction 73: H + N2H3 <=> H2 + N2H2
  qf[76] = sc[2] * sc[23];
  qr[76] = sc[1] * sc[12];

  // reaction 74: N2H3 + O <=> HNO + NH2
  qf[77] = sc[4] * sc[23];
  qr[77] = sc[16] * sc[18];

  // reaction 75: N2H3 + O <=> N2H2 + OH
  qf[78] = sc[4] * sc[23];
  qr[78] = sc[5] * sc[12];

  // reaction 76: N2H3 + OH <=> H2O + N2H2
  qf[79] = sc[5] * sc[23];
  qr[79] = sc[8] * sc[12];

  // reaction 77: N2H3 + OH <=> H2NN + H2O
  qf[80] = sc[5] * sc[23];
  qr[80] = sc[8] * sc[19];

  // reaction 78: N2H3 + NH2 <=> N2H2 + NH3
  qf[81] = sc[16] * sc[23];
  qr[81] = sc[12] * sc[13];

  // reaction 79: N2H3 + NH2 <=> H2NN + NH3
  qf[82] = sc[16] * sc[23];
  qr[82] = sc[13] * sc[19];

  // reaction 80: HO2 + N2H3 <=> H2O2 + N2H2
  qf[83] = sc[7] * sc[23];
  qr[83] = sc[6] * sc[12];

  // reaction 81: HO2 + N2H3 <=> N2H4 + O2
  qf[84] = sc[7] * sc[23];
  qr[84] = sc[3] * sc[14];

  // reaction 82: N2H2 <=> H + NNH
  qf[85] = sc[12];
  qr[85] = sc[2] * sc[21];

  // reaction 83: N2H2 <=> H + NNH
  qf[86] = sc[12];
  qr[86] = sc[2] * sc[21];

  // reaction 84: H + N2H2 <=> H2 + NNH
  qf[87] = sc[2] * sc[12];
  qr[87] = sc[1] * sc[21];

  // reaction 85: N2H2 + O <=> NNH + OH
  qf[88] = sc[4] * sc[12];
  qr[88] = sc[5] * sc[21];

  // reaction 86: N2H2 + OH <=> H2O + NNH
  qf[89] = sc[5] * sc[12];
  qr[89] = sc[8] * sc[21];

  // reaction 87: N2H2 + NO <=> N2O + NH2
  qf[90] = sc[9] * sc[12];
  qr[90] = sc[11] * sc[16];

  // reaction 88: N2H2 + NH <=> NH2 + NNH
  qf[91] = sc[12] * sc[15];
  qr[91] = sc[16] * sc[21];

  // reaction 89: N2H2 + NH2 <=> NH3 + NNH
  qf[92] = sc[12] * sc[16];
  qr[92] = sc[13] * sc[21];

  // reaction 90: N2H2 <=> H2NN
  qf[93] = sc[12];
  qr[93] = sc[19];

  // reaction 91: H2NN <=> H + NNH
  qf[94] = sc[19];
  qr[94] = sc[2] * sc[21];

  // reaction 92: H2NN <=> H + NNH
  qf[95] = sc[19];
  qr[95] = sc[2] * sc[21];

  // reaction 93: H2NN + O2 <=> NH2 + NO2
  qf[96] = sc[3] * sc[19];
  qr[96] = sc[10] * sc[16];

  // reaction 94: H + H2NN <=> H + N2H2
  qf[97] = sc[2] * sc[19];
  qr[97] = sc[2] * sc[12];

  // reaction 95: H + H2NN <=> H2 + NNH
  qf[98] = sc[2] * sc[19];
  qr[98] = sc[1] * sc[21];

  // reaction 96: H2NN + O <=> NH2 + NO
  qf[99] = sc[4] * sc[19];
  qr[99] = sc[9] * sc[16];

  // reaction 97: H2NN + O <=> NNH + OH
  qf[100] = sc[4] * sc[19];
  qr[100] = sc[5] * sc[21];

  // reaction 98: H2NN + OH <=> H2O + NNH
  qf[101] = sc[5] * sc[19];
  qr[101] = sc[8] * sc[21];

  // reaction 99: H2NN + NH2 <=> NH3 + NNH
  qf[102] = sc[16] * sc[19];
  qr[102] = sc[13] * sc[21];

  // reaction 100: H2NN + HO2 <=> H2O2 + NNH
  qf[103] = sc[7] * sc[19];
  qr[103] = sc[6] * sc[21];

  // reaction 101: NNH <=> H + N2
  qf[104] = sc[21];
  qr[104] = sc[0] * sc[2];

  // reaction 102: H + NNH <=> H2 + N2
  qf[105] = sc[2] * sc[21];
  qr[105] = sc[0] * sc[1];

  // reaction 103: NNH + O <=> H + N2O
  qf[106] = sc[4] * sc[21];
  qr[106] = sc[2] * sc[11];

  // reaction 104: NNH + O <=> NH + NO
  qf[107] = sc[4] * sc[21];
  qr[107] = sc[9] * sc[15];

  // reaction 105: NNH + O <=> N2 + OH
  qf[108] = sc[4] * sc[21];
  qr[108] = sc[0] * sc[5];

  // reaction 106: NNH + OH <=> H2O + N2
  qf[109] = sc[5] * sc[21];
  qr[109] = sc[0] * sc[8];

  // reaction 107: NNH + O2 <=> HO2 + N2
  qf[110] = sc[3] * sc[21];
  qr[110] = sc[0] * sc[7];

  // reaction 108: NH2 + NNH <=> N2 + NH3
  qf[111] = sc[16] * sc[21];
  qr[111] = sc[0] * sc[13];

  // reaction 109: HO2 + NNH <=> H2O2 + N2
  qf[112] = sc[7] * sc[21];
  qr[112] = sc[0] * sc[6];

  // reaction 110: NNH + NO <=> HNO + N2
  qf[113] = sc[9] * sc[21];
  qr[113] = sc[0] * sc[18];

  // reaction 111: HO2 + NO <=> NO2 + OH
  qf[114] = sc[7] * sc[9];
  qr[114] = sc[5] * sc[10];

  // reaction 113: NO + OH <=> HONO
  qf[115] = sc[5] * sc[9];
  qr[115] = sc[17];

  // reaction 114: HNO <=> H + NO
  qf[116] = sc[18];
  qr[116] = sc[2] * sc[9];

  // reaction 115: H + HNO <=> H2 + NO
  qf[117] = sc[2] * sc[18];
  qr[117] = sc[1] * sc[9];

  // reaction 116: HNO + O <=> NO + OH
  qf[118] = sc[4] * sc[18];
  qr[118] = sc[5] * sc[9];

  // reaction 117: HNO + OH <=> H + HONO
  qf[119] = sc[5] * sc[18];
  qr[119] = sc[2] * sc[17];

  // reaction 118: HNO + OH <=> H2O + NO
  qf[120] = sc[5] * sc[18];
  qr[120] = sc[8] * sc[9];

  // reaction 119: HNO + O2 <=> HO2 + NO
  qf[121] = sc[3] * sc[18];
  qr[121] = sc[7] * sc[9];

  // reaction 120: HNO + NH2 <=> NH3 + NO
  qf[122] = sc[16] * sc[18];
  qr[122] = sc[9] * sc[13];

  // reaction 121: HNO + NO <=> N2O + OH
  qf[123] = sc[9] * sc[18];
  qr[123] = sc[5] * sc[11];

  // reaction 122: HNO + NO2 <=> HONO + NO
  qf[124] = sc[10] * sc[18];
  qr[124] = sc[9] * sc[17];

  // reaction 123: H + HONO <=> H2 + NO2
  qf[125] = sc[2] * sc[17];
  qr[125] = sc[1] * sc[10];

  // reaction 124: H + HONO <=> H2O + NO
  qf[126] = sc[2] * sc[17];
  qr[126] = sc[8] * sc[9];

  // reaction 125: HONO + O <=> NO2 + OH
  qf[127] = sc[4] * sc[17];
  qr[127] = sc[5] * sc[10];

  // reaction 126: HONO + OH <=> H2O + NO2
  qf[128] = sc[5] * sc[17];
  qr[128] = sc[8] * sc[10];

  // reaction 127: HONO + NH <=> NH2 + NO2
  qf[129] = sc[15] * sc[17];
  qr[129] = sc[10] * sc[16];

  // reaction 128: HONO + NH2 <=> NH3 + NO2
  qf[130] = sc[16] * sc[17];
  qr[130] = sc[10] * sc[13];

  // reaction 129: 2 HONO => H2O + NO + NO2
  qf[131] = (sc[17] * sc[17]);
  qr[131] = 0.0;

  // reaction 131: H + H2NO <=> H2 + HNO
  qf[132] = sc[2] * sc[22];
  qr[132] = sc[1] * sc[18];

  // reaction 132: H + H2NO <=> NH2 + OH
  qf[133] = sc[2] * sc[22];
  qr[133] = sc[5] * sc[16];

  // reaction 133: H2NO + O <=> HNO + OH
  qf[134] = sc[4] * sc[22];
  qr[134] = sc[5] * sc[18];

  // reaction 134: H2NO + OH <=> H2O + HNO
  qf[135] = sc[5] * sc[22];
  qr[135] = sc[8] * sc[18];

  // reaction 135: H2NO + NO2 <=> HNO + HONO
  qf[136] = sc[10] * sc[22];
  qr[136] = sc[17] * sc[18];

  // reaction 136: H2NO + NH2 <=> HNO + NH3
  qf[137] = sc[16] * sc[22];
  qr[137] = sc[13] * sc[18];

  // reaction 137: H2NO + O2 <=> HNO + HO2
  qf[138] = sc[3] * sc[22];
  qr[138] = sc[7] * sc[18];

  // reaction 138: H2NO + HO2 <=> H2O2 + HNO
  qf[139] = sc[7] * sc[22];
  qr[139] = sc[6] * sc[18];

  // reaction 139: H + NO2 <=> NO + OH
  qf[140] = sc[2] * sc[10];
  qr[140] = sc[5] * sc[9];

  // reaction 140: NO2 + O <=> NO + O2
  qf[141] = sc[4] * sc[10];
  qr[141] = sc[3] * sc[9];

  // reaction 141: HO2 + NO2 <=> HONO + O2
  qf[142] = sc[7] * sc[10];
  qr[142] = sc[3] * sc[17];

  // reaction 142: 2 NO2 => 2 NO + O2
  qf[143] = (sc[10] * sc[10]);
  qr[143] = 0.0;

  // reaction 144: H + N2O <=> N2 + OH
  qf[144] = sc[2] * sc[11];
  qr[144] = sc[0] * sc[5];

  // reaction 145: H + N2O <=> N2 + OH
  qf[145] = sc[2] * sc[11];
  qr[145] = sc[0] * sc[5];

  // reaction 146: N2O + O <=> 2 NO
  qf[146] = sc[4] * sc[11];
  qr[146] = (sc[9] * sc[9]);

  // reaction 147: N2O + O <=> N2 + O2
  qf[147] = sc[4] * sc[11];
  qr[147] = sc[0] * sc[3];

  // reaction 148: N2O + OH <=> HO2 + N2
  qf[148] = sc[5] * sc[11];
  qr[148] = sc[0] * sc[7];

  // reaction 149: N2O + NO <=> N2 + NO2
  qf[149] = sc[9] * sc[11];
  qr[149] = sc[0] * sc[10];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 24; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[24];
  gibbs(g_RT, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H2 + M <=> 2 H + M
  k_f = 45770000000000 * exp((-1.4) * logT - (52535.8702316793) * invT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[1] - 2.000000 * g_RT[2])) * (refCinv);
  // reaction 1:  H2 + O <=> H + OH
  k_f = 0.0508 * exp((2.67) * logT - (3166.24429340995) * invT);
  qf[10] *= k_f;
  qr[10] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[5]));
  // reaction 2:  H2 + OH <=> H + H2O
  k_f = 43800000 * exp(-(3517.48952614165) * invT);
  qf[11] *= k_f;
  qr[11] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[5] - g_RT[8]));
  // reaction 3:  2 O + M <=> O2 + M
  k_f = 6165 * exp((-0.5) * logT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4])) * (refC);
  // reaction 4:  H + O2 <=> O + OH
  k_f = 114000000 * exp(-(7692.18001782426) * invT);
  qf[12] *= k_f;
  qr[12] *= k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[5]));
  // reaction 5:  H + OH + M <=> H2O + M
  k_f = 35000000000 * exp((-2) * logT);
  Corr = mixture + (-0.27) * sc[1] + (2.65) * sc[8];
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC);
  // reaction 6:  H2O + O <=> 2 OH
  k_f = 67 * exp((1.704) * logT - (7541.61759141549) * invT);
  qf[13] *= k_f;
  qr[13] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[5] + g_RT[8]));
  // reaction 7:  H + O + M <=> OH + M
  k_f = 4714000 * exp((-1) * logT);
  Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[5])) * (refC);
  // reaction 8:  H2O2 (+M) <=> 2 OH (+M)
  k_f = 2000000000000 * exp((0.9) * logT - (24531.3344021476) * invT);
  Corr = mixture + (0.5) * sc[0] + (2.7) * sc[1] + (0.2) * sc[3] +
         (6.7) * sc[6] + (6.65) * sc[8];
  redP = Corr / k_f * 2.49e+18 * exp(-2.3 * logT - (24531.3344021476) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 1e-07) + exp(-10000000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(-2.000000 * g_RT[5] + g_RT[6])) * (refCinv);
  // reaction 9:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[14] *= k_f;
  qr[14] *= k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6] - g_RT[8]));
  // reaction 10:  H + H2O2 <=> H2 + HO2
  k_f = 21500 * exp((1) * logT - (3019.30502699498) * invT);
  qf[15] *= k_f;
  qr[15] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[6] - g_RT[7]));
  // reaction 11:  H2O2 + O <=> HO2 + OH
  k_f = 9.55 * exp((2) * logT - (1997.77016324474) * invT);
  qf[16] *= k_f;
  qr[16] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[7]));
  // reaction 12:  H2O2 + OH <=> H2O + HO2
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  qf[17] *= k_f;
  qr[17] *= k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]));
  // reaction 13:  H2O2 + OH <=> H2O + HO2
  k_f = 75900000 * exp(-(3657.88697590116) * invT);
  qf[18] *= k_f;
  qr[18] *= k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]));
  // reaction 14:  H + HO2 <=> 2 OH
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  qf[19] *= k_f;
  qr[19] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[5] + g_RT[7]));
  // reaction 15:  H + HO2 <=> H2 + O2
  k_f = 11400 * exp((1.083) * logT - (278.671325189338) * invT);
  qf[20] *= k_f;
  qr[20] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[7]));
  // reaction 16:  HO2 + O <=> O2 + OH
  k_f = 32500000;
  qf[21] *= k_f;
  qr[21] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 17:  HO2 + OH <=> H2O + O2
  k_f = 7000000 * exp(-(-549.995687057926) * invT);
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]));
  // reaction 18:  HO2 + OH <=> H2O + O2
  k_f = 450000000 * exp(-(5499.96190274592) * invT);
  qf[23] *= k_f;
  qr[23] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]));
  // reaction 19:  2 HO2 <=> H2O2 + O2
  k_f = 100000000 * exp(-(5555.95985331667) * invT);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]));
  // reaction 20:  2 HO2 <=> H2O2 + O2
  k_f = 190000 * exp(-(-708.997056952244) * invT);
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]));
  // reaction 21:  H + O2 (+M) <=> HO2 (+M)
  k_f = 4650000 * exp((0.44) * logT);
  Corr = mixture + (0.3) * sc[1] + (9) * sc[8];
  redP = Corr / k_f * 17370000 * exp(-1.23 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 1e-07) + exp(-10000000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[7])) * (refC);
  // reaction 22:  O + OH + M <=> HO2 + M
  k_f = 10000;
  Corr = mixture;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7])) * (refC);
  // reaction 23:  NH3 <=> H + NH2
  k_f = 3.497e+30 * exp((-5.224) * logT - (55939.2755075164) * invT);
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[16])) * (refCinv);
  // reaction 24:  H + NH2 <=> H2 + NH
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]));
  // reaction 25:  H + NH3 <=> H2 + NH2
  k_f = 0.01963 * exp((2.854) * logT - (4287.51166815603) * invT);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[16]));
  // reaction 26:  NH3 + OH <=> H2O + NH2
  k_f = 0.1559 * exp((2.372) * logT - (59.8324615641812) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[13] - g_RT[16]));
  // reaction 27:  NH3 + O <=> NH2 + OH
  k_f = 0.000443 * exp((3.18) * logT - (3391.63503802389) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[13] - g_RT[16]));
  // reaction 28:  HO2 + NH3 <=> H2O2 + NH2
  k_f = 1.173e-06 * exp((3.839) * logT - (8685.52971612278) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[13] - g_RT[16]));
  // reaction 29:  NH3 + O2 <=> HO2 + NH2
  k_f = 14150 * exp((1.285) * logT - (27789.6673453998) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(g_RT[3] - g_RT[7] + g_RT[13] - g_RT[16]));
  // reaction 30:  NH2 + O <=> H + HNO
  k_f = 1500000000 * exp((-0.547) * logT - (421.041384278809) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]));
  // reaction 31:  NH2 + O <=> H + HNO
  k_f = 77300000 * exp((-0.277) * logT - (325.279252776171) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]));
  // reaction 32:  NH2 + O <=> NH + OH
  k_f = 7000000;
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]));
  // reaction 33:  NH2 + O <=> NH + OH
  k_f = 330 * exp((1.5) * logT - (2554.73540112406) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]));
  // reaction 34:  NH2 + OH <=> H2O + NH
  k_f = 9.6 * exp((1.97) * logT - (337.155166089162) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[15] + g_RT[16]));
  // reaction 35:  NH2 + O2 <=> HNO + OH
  k_f = 2.9e-08 * exp((3.764) * logT - (9151.00513199214) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[16] - g_RT[18]));
  // reaction 36:  NH2 + O2 <=> H2NO + O
  k_f = 260000 * exp((0.487) * logT - (14618.4592381271) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[16] - g_RT[22]));
  // reaction 37:  HO2 + NH2 <=> H2NO + OH
  k_f = 15660000;
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-g_RT[5] + g_RT[7] + g_RT[16] - g_RT[22]));
  // reaction 38:  NH + NH2 <=> H + N2H2
  k_f = 1500000000 * exp((-0.5) * logT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[2] - g_RT[12] + g_RT[15] + g_RT[16]));
  // reaction 39:  NH + NH2 <=> N + NH3
  k_f = 0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[20]));
  // reaction 40:  2 NH <=> N + NH2
  k_f = 5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(2.000000 * g_RT[15] - g_RT[16] - g_RT[20]));
  // reaction 41:  2 NH => H2 + N2
  k_f = 6260000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(-g_RT[0] - g_RT[1] + 2.000000 * g_RT[15]));
  // reaction 42:  2 NH => 2 H + N2
  k_f = 56340000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[2] + 2.000000 * g_RT[15])) *
            (refCinv);
  // reaction 43:  2 NH2 <=> NH + NH3
  k_f = 5.64e-06 * exp((3.53) * logT - (276.769166192596) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(-g_RT[13] - g_RT[15] + 2.000000 * g_RT[16]));
  // reaction 44:  2 NH2 <=> N2H4
  k_f = 5.6e+42 * exp((-11.3) * logT - (5979.37642025808) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(-g_RT[14] + 2.000000 * g_RT[16])) * (refC);
  // reaction 45:  2 NH2 <=> H + N2H3
  k_f = 1200000 * exp((-0.03) * logT - (5074.44189014145) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[16] - g_RT[23]));
  // reaction 46:  2 NH2 <=> H2 + H2NN
  k_f = 1.2e+15 * exp((-3.08) * logT - (1694.8337304303) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[16] - g_RT[19]));
  // reaction 47:  NH2 + NO2 <=> H2NO + NO
  k_f = 860000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[22]));
  // reaction 48:  NH2 + NO2 <=> H2O + N2O
  k_f = 220000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(-g_RT[8] + g_RT[10] - g_RT[11] + g_RT[16]));
  // reaction 49:  NH2 + NO <=> H2O + N2
  k_f = 26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[0] - g_RT[8] + g_RT[9] + g_RT[16]));
  // reaction 50:  NH2 + NO <=> NNH + OH
  k_f = 43000 * exp((0.294) * logT - (-435.785632586887) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[16] - g_RT[21]));
  // reaction 51:  H + NH <=> H2 + N
  k_f = 30100000;
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[15] - g_RT[20]));
  // reaction 52:  NH + O <=> H + NO
  k_f = 30000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[9] + g_RT[15]));
  // reaction 53:  NH + OH <=> H + HNO
  k_f = 20000000;
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(-g_RT[2] + g_RT[5] + g_RT[15] - g_RT[18]));
  // reaction 54:  NH + OH <=> H2O + N
  k_f = 2000 * exp((1.2) * logT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[15] - g_RT[20]));
  // reaction 55:  NH + O2 <=> HNO + O
  k_f = 405000 * exp((0.09) * logT - (5369.32685630302) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[18]));
  // reaction 56:  NH + O2 <=> NO + OH
  k_f = 2010000000 * exp((-1.38) * logT - (2853.24352727942) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT[15]));
  // reaction 57:  N + NH <=> H + N2
  k_f = 641000 * exp((0.51) * logT - (10.0643333160944) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[15] + g_RT[20]));
  // reaction 58:  NH + NO <=> H + N2O
  k_f = 5328000 * exp((0.026) * logT - (-1456.25870917228) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[2] + g_RT[9] - g_RT[11] + g_RT[15]));
  // reaction 59:  NH + NO <=> N2 + OH
  k_f = 36350 * exp((0.361) * logT - (-1431.29916254836) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[9] + g_RT[15]));
  // reaction 60:  NH + NO2 <=> N2O + OH
  k_f = 4100000;
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[5] + g_RT[10] - g_RT[11] + g_RT[15]));
  // reaction 61:  NH + NO2 <=> HNO + NO
  k_f = 5900000;
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[18]));
  // reaction 62:  N + OH <=> H + NO
  k_f = 28300000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[2] + g_RT[5] - g_RT[9] + g_RT[20]));
  // reaction 63:  N + O2 <=> NO + O
  k_f = 9027 * exp((1) * logT - (3270.91335989734) * invT);
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[20]));
  // reaction 64:  N + NO <=> N2 + O
  k_f = 42800000 * exp(-(790.05016531341) * invT);
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[9] + g_RT[20]));
  // reaction 65:  N2H4 <=> H2 + H2NN
  k_f = 5.3e+39 * exp((-8.35) * logT - (34876.271395428) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[1] + g_RT[14] - g_RT[19])) * (refCinv);
  // reaction 66:  H + N2H4 <=> H2 + N2H3
  k_f = 960 * exp((1.5) * logT - (2434.71822632963) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[14] - g_RT[23]));
  // reaction 67:  N2H4 + O <=> N2H3 + OH
  k_f = 670 * exp((1.5) * logT - (1434.821679209) * invT);
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[14] - g_RT[23]));
  // reaction 68:  N2H4 + O <=> H2O + N2H2
  k_f = 84900000 * exp(-(603.859998965664) * invT);
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(g_RT[4] - g_RT[8] - g_RT[12] + g_RT[14]));
  // reaction 69:  N2H4 + OH <=> H2O + N2H3
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[14] - g_RT[23]));
  // reaction 70:  N2H4 + NH2 <=> N2H3 + NH3
  k_f = 3.7 * exp((1.94) * logT - (820.243165261693) * invT);
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[13] + g_RT[14] + g_RT[16] - g_RT[23]));
  // reaction 71:  N2H4 + NO2 <=> HONO + N2H3
  k_f = 8.2e-05 * exp((3.13) * logT - (4458.50469119647) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[17] - g_RT[23]));
  // reaction 72:  N2H3 <=> H + N2H2
  k_f = 3.6e+47 * exp((-10.38) * logT - (34708.8059212148) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[2] - g_RT[12] + g_RT[23])) * (refCinv);
  // reaction 73:  H + N2H3 <=> H2 + N2H2
  k_f = 240 * exp((1.5) * logT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[12] + g_RT[23]));
  // reaction 74:  N2H3 + O <=> HNO + NH2
  k_f = 30000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[23]));
  // reaction 75:  N2H3 + O <=> N2H2 + OH
  k_f = 170 * exp((1.5) * logT - (-324.826357776947) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[23]));
  // reaction 76:  N2H3 + OH <=> H2O + N2H2
  k_f = 1.2 * exp((2) * logT - (-599.632978972904) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[23]));
  // reaction 77:  N2H3 + OH <=> H2NN + H2O
  k_f = 30000000;
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[19] + g_RT[23]));
  // reaction 78:  N2H3 + NH2 <=> N2H2 + NH3
  k_f = 0.92 * exp((1.94) * logT - (-579.957207339939) * invT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[12] - g_RT[13] + g_RT[16] + g_RT[23]));
  // reaction 79:  N2H3 + NH2 <=> H2NN + NH3
  k_f = 30000000;
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[13] + g_RT[16] - g_RT[19] + g_RT[23]));
  // reaction 80:  HO2 + N2H3 <=> H2O2 + N2H2
  k_f = 0.014 * exp((2.69) * logT - (-804.895056954649) * invT);
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[12] + g_RT[23]));
  // reaction 81:  HO2 + N2H3 <=> N2H4 + O2
  k_f = 0.92 * exp((1.94) * logT - (1069.88895316741) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[3] + g_RT[7] - g_RT[14] + g_RT[23]));
  // reaction 82:  N2H2 <=> H + NNH
  k_f = 1.8e+40 * exp((-8.41) * logT - (36912.4973762735) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[21])) * (refCinv);
  // reaction 83:  N2H2 <=> H + NNH
  k_f = 2.6e+40 * exp((-8.53) * logT - (36677.5958366759) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[21])) * (refCinv);
  // reaction 84:  H + N2H2 <=> H2 + NNH
  k_f = 4121 * exp((1.289) * logT - (-112.770854806838) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[21]));
  // reaction 85:  N2H2 + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (249.847074572043) * invT);
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[12] - g_RT[21]));
  // reaction 86:  N2H2 + OH <=> H2O + NNH
  k_f = 5.923e-05 * exp((3.4) * logT - (-686.236567157896) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[12] - g_RT[21]));
  // reaction 87:  N2H2 + NO <=> N2O + NH2
  k_f = 4000000 * exp(-(5996.3348218957) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(g_RT[9] - g_RT[11] + g_RT[12] - g_RT[16]));
  // reaction 88:  N2H2 + NH <=> NH2 + NNH
  k_f = 2.4 * exp((2) * logT - (-599.632978972904) * invT);
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[16] - g_RT[21]));
  // reaction 89:  N2H2 + NH2 <=> NH3 + NNH
  k_f = 8.8e-08 * exp((4.05) * logT - (-810.178831945599) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[16] - g_RT[21]));
  // reaction 90:  N2H2 <=> H2NN
  k_f = 2e+41 * exp((-9.38) * logT - (34446.3230761644) * invT);
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(g_RT[12] - g_RT[19]));
  // reaction 91:  H2NN <=> H + NNH
  k_f = 9.6e+35 * exp((-7.57) * logT - (27597.0410378964) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) * (refCinv);
  // reaction 92:  H2NN <=> H + NNH
  k_f = 3.2e+31 * exp((-6.22) * logT - (26327.1737817382) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) * (refCinv);
  // reaction 93:  H2NN + O2 <=> NH2 + NO2
  k_f = 1500000 * exp(-(2999.67957702859) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19]));
  // reaction 94:  H + H2NN <=> H + N2H2
  k_f = 18000 * exp((0.97) * logT - (2249.7861016464) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[12] + g_RT[19]));
  // reaction 95:  H + H2NN <=> H2 + NNH
  k_f = 480 * exp((1.5) * logT - (-449.97634256258) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[19] - g_RT[21]));
  // reaction 96:  H2NN + O <=> NH2 + NO
  k_f = 3200 * exp((1.03) * logT - (1359.84239600409) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[16] + g_RT[19]));
  // reaction 97:  H2NN + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (-449.97634256258) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[19] - g_RT[21]));
  // reaction 98:  H2NN + OH <=> H2O + NNH
  k_f = 2.4 * exp((2) * logT - (-599.934908972387) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[19] - g_RT[21]));
  // reaction 99:  H2NN + NH2 <=> NH3 + NNH
  k_f = 1.8 * exp((1.94) * logT - (-579.957207339939) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(-g_RT[13] + g_RT[16] + g_RT[19] - g_RT[21]));
  // reaction 100:  H2NN + HO2 <=> H2O2 + NNH
  k_f = 0.029 * exp((2.69) * logT - (-804.895056954649) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT[21]));
  // reaction 101:  NNH <=> H + N2
  k_f = 1000000000;
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[21])) * (refCinv);
  // reaction 102:  H + NNH <=> H2 + N2
  k_f = 240 * exp((1.5) * logT - (-449.724734229678) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[21]));
  // reaction 103:  NNH + O <=> H + N2O
  k_f = 190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[11] + g_RT[21]));
  // reaction 104:  NNH + O <=> NH + NO
  k_f = 520000 * exp((0.388) * logT - (-205.81561631413) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[21]));
  // reaction 105:  NNH + O <=> N2 + OH
  k_f = 12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[21]));
  // reaction 106:  NNH + OH <=> H2O + N2
  k_f = 50000000;
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[8] + g_RT[21]));
  // reaction 107:  NNH + O2 <=> HO2 + N2
  k_f = 560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[7] + g_RT[21]));
  // reaction 108:  NH2 + NNH <=> N2 + NH3
  k_f = 0.92 * exp((1.94) * logT - (-579.655277340457) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(-g_RT[0] - g_RT[13] + g_RT[16] + g_RT[21]));
  // reaction 109:  HO2 + NNH <=> H2O2 + N2
  k_f = 0.014 * exp((2.69) * logT - (-804.895056954649) * invT);
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[7] + g_RT[21]));
  // reaction 110:  NNH + NO <=> HNO + N2
  k_f = 50000000;
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[21]));
  // reaction 111:  HO2 + NO <=> NO2 + OH
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[5] + g_RT[7] + g_RT[9] - g_RT[10]));
  // reaction 112:  NO + O (+M) <=> NO2 (+M)
  k_f = 1300000000 * exp((-0.75) * logT);
  Corr = mixture + (0.7) * sc[0] + (0.5) * sc[3] + (9) * sc[8];
  redP =
    Corr / k_f * 4720000000000 * exp(-2.87 * logT - (779.985831997315) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 1e-07) + exp(-10000000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[4] + g_RT[9] - g_RT[10])) * (refC);
  // reaction 113:  NO + OH <=> HONO
  k_f = 3.09e+17 * exp((-4.17) * logT - (815.714215269451) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[5] + g_RT[9] - g_RT[17])) * (refC);
  // reaction 114:  HNO <=> H + NO
  k_f = 1.826e+20 * exp((-3.008) * logT - (24094.0391195633) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(-g_RT[2] - g_RT[9] + g_RT[18])) * (refCinv);
  // reaction 115:  H + HNO <=> H2 + NO
  k_f = 968000 * exp((0.62) * logT - (181.157999689699) * invT);
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[9] + g_RT[18]));
  // reaction 116:  HNO + O <=> NO + OH
  k_f = 22900000;
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[18]));
  // reaction 117:  HNO + OH <=> H + HONO
  k_f = 0.00148 * exp((2.72) * logT - (2291.65372824135) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[2] + g_RT[5] - g_RT[17] + g_RT[18]));
  // reaction 118:  HNO + OH <=> H2O + NO
  k_f = 63000 * exp((0.39) * logT - (1903.17046224011) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[9] + g_RT[18]));
  // reaction 119:  HNO + O2 <=> HO2 + NO
  k_f = 20000000 * exp(-(7495.92551816042) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[18]));
  // reaction 120:  HNO + NH2 <=> NH3 + NO
  k_f = 36.7 * exp((1.63) * logT - (-629.0208322559) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT[18]));
  // reaction 121:  HNO + NO <=> N2O + OH
  k_f = 8510000 * exp(-(14900.2555388111) * invT);
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[11] + g_RT[18]));
  // reaction 122:  HNO + NO2 <=> HONO + NO
  k_f = 0.0442 * exp((2.64) * logT - (2033.80047651635) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[17] + g_RT[18]));
  // reaction 123:  H + HONO <=> H2 + NO2
  k_f = 0.00189 * exp((2.83) * logT - (715.926350440375) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[17]));
  // reaction 124:  H + HONO <=> H2O + NO
  k_f = 4300 * exp((0.98) * logT - (2048.09182982521) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[9] + g_RT[17]));
  // reaction 125:  HONO + O <=> NO2 + OH
  k_f = 12100000 * exp(-(2999.17636036279) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[17]));
  // reaction 126:  HONO + OH <=> H2O + NO2
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[10] + g_RT[17]));
  // reaction 127:  HONO + NH <=> NH2 + NO2
  k_f = 10000000;
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[10] + g_RT[15] - g_RT[16] + g_RT[17]));
  // reaction 128:  HONO + NH2 <=> NH3 + NO2
  k_f = 0.000317 * exp((2.83) * logT - (-1796.48349692285) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-g_RT[10] - g_RT[13] + g_RT[16] + g_RT[17]));
  // reaction 129:  2 HONO => H2O + NO + NO2
  k_f = 3.49e-07 * exp((3.64) * logT - (6108.35085170383) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-g_RT[8] - g_RT[9] - g_RT[10] + 2.000000 * g_RT[17])) *
             (refCinv);
  // reaction 130:  H2NO + M <=> H + HNO + M
  k_f = 2.8e+18 * exp((-2.83) * logT - (32696.4927963283) * invT);
  Corr = mixture;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT[22])) * (refCinv);
  // reaction 131:  H + H2NO <=> H2 + HNO
  k_f = 480 * exp((1.5) * logT - (784.917355322202) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[18] + g_RT[22]));
  // reaction 132:  H + H2NO <=> NH2 + OH
  k_f = 40000000;
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[16] + g_RT[22]));
  // reaction 133:  H2NO + O <=> HNO + OH
  k_f = 330 * exp((1.5) * logT - (244.965872913738) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[22]));
  // reaction 134:  H2NO + OH <=> H2O + HNO
  k_f = 2.4 * exp((2) * logT - (599.934908972387) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[18] + g_RT[22]));
  // reaction 135:  H2NO + NO2 <=> HNO + HONO
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[10] - g_RT[17] - g_RT[18] + g_RT[22]));
  // reaction 136:  H2NO + NH2 <=> HNO + NH3
  k_f = 1.8 * exp((1.94) * logT - (-291.865666166737) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(-g_RT[13] + g_RT[16] - g_RT[18] + g_RT[22]));
  // reaction 137:  H2NO + O2 <=> HNO + HO2
  k_f = 0.00023 * exp((2.994) * logT - (8303.08505011119) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[18] + g_RT[22]));
  // reaction 138:  H2NO + HO2 <=> H2O2 + HNO
  k_f = 0.336 * exp((2) * logT - (-721.612698763968) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[18] + g_RT[22]));
  // reaction 139:  H + NO2 <=> NO + OH
  k_f = 88500000;
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 140:  NO2 + O <=> NO + O2
  k_f = 3920000 * exp(-(-119.765566461523) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[9] + g_RT[10]));
  // reaction 141:  HO2 + NO2 <=> HONO + O2
  k_f = 1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(-g_RT[3] + g_RT[7] + g_RT[10] - g_RT[17]));
  // reaction 142:  2 NO2 => 2 NO + O2
  k_f = 1630000 * exp(-(13098.7398752302) * invT);
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[3] - 2.000000 * g_RT[9] + 2.000000 * g_RT[10])) *
             (refCinv);
  // reaction 143:  N2O (+M) <=> N2 + O (+M)
  k_f = 99000000000 * exp(-(29136.7833919257) * invT);
  Corr = mixture + (0.7) * sc[0] + (0.4) * sc[3] + (11) * sc[8];
  redP = Corr / k_f * 602000000 * exp(-(28906.8083434863) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 1e-07) + exp(-10000000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[11])) * (refCinv);
  // reaction 144:  H + N2O <=> N2 + OH
  k_f = 25300 * exp(-(2289.64086157813) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]));
  // reaction 145:  H + N2O <=> N2 + OH
  k_f = 500000000 * exp(-(9108.23171539874) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]));
  // reaction 146:  N2O + O <=> 2 NO
  k_f = 66200000 * exp(-(13400.669874713) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[9] + g_RT[11]));
  // reaction 147:  N2O + O <=> N2 + O2
  k_f = 102000000 * exp(-(14100.1511045149) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[11]));
  // reaction 148:  N2O + OH <=> HO2 + N2
  k_f = 1e-08 * exp((4.72) * logT - (18397.6163983205) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]));
  // reaction 149:  N2O + NO <=> N2 + NO2
  k_f = 0.525 * exp((2.23) * logT - (23298.9567875918) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[10] + g_RT[11]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 24; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 24; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[24];
  gibbs(g_RT, T);

  {
    // reaction 8:  H2O2 (+M) <=> 2 OH (+M)
    const amrex::Real k_f =
      2000000000000 * exp((0.9) * logT - (24531.3344021476) * invT);
    amrex::Real Corr = mixture + (0.5) * sc[0] + (2.7) * sc[1] + (0.2) * sc[3] +
                       (6.7) * sc[6] + (6.65) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 2.49e+18 * exp(-2.3 * logT - 24531.3344021476 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 1e-07) + exp(-10000000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6]);
    const amrex::Real qr = Corr * k_f * exp(-(-2.000000 * g_RT[5] + g_RT[6])) *
                           (refCinv) * ((sc[5] * sc[5]));
    const amrex::Real qdot = qf - qr;
    wdot[5] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 21:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 4650000 * exp((0.44) * logT);
    amrex::Real Corr = mixture + (0.3) * sc[1] + (9) * sc[8];
    const amrex::Real redP = Corr / k_f * 17370000 * exp(-1.23 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 1e-07) + exp(-10000000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 112:  NO + O (+M) <=> NO2 (+M)
    const amrex::Real k_f = 1300000000 * exp((-0.75) * logT);
    amrex::Real Corr = mixture + (0.7) * sc[0] + (0.5) * sc[3] + (9) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 4720000000000 * exp(-2.87 * logT - 779.985831997315 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 1e-07) + exp(-10000000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[9] - g_RT[10])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 143:  N2O (+M) <=> N2 + O (+M)
    const amrex::Real k_f = 99000000000 * exp(-(29136.7833919257) * invT);
    amrex::Real Corr = mixture + (0.7) * sc[0] + (0.4) * sc[3] + (11) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 602000000 * exp(-28906.8083434863 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 1e-07) + exp(-10000000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[11]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[11])) *
                           (refCinv) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 0:  H2 + M <=> 2 H + M
    const amrex::Real k_f =
      45770000000000 * exp((-1.4) * logT - (52535.8702316793) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
    const amrex::Real qf = Corr * k_f * (sc[1]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[1] - 2.000000 * g_RT[2])) *
                           (refCinv) * ((sc[2] * sc[2]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += 2.000000 * qdot;
  }

  {
    // reaction 3:  2 O + M <=> O2 + M
    const amrex::Real k_f = 6165 * exp((-0.5) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
  }

  {
    // reaction 5:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 35000000000 * exp((-2) * logT);
    const amrex::Real Corr = mixture + (-0.27) * sc[1] + (2.65) * sc[8];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 7:  H + O + M <=> OH + M
    const amrex::Real k_f = 4714000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[1] + (11) * sc[8];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 22:  O + OH + M <=> HO2 + M
    const amrex::Real k_f = 10000;
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 130:  H2NO + M <=> H + HNO + M
    const amrex::Real k_f =
      2.8e+18 * exp((-2.83) * logT - (32696.4927963283) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[22]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT[22])) *
                           (refCinv) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 1:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.0508 * exp((2.67) * logT - (3166.24429340995) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[5])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 2:  H2 + OH <=> H + H2O
    const amrex::Real k_f = 43800000 * exp(-(3517.48952614165) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[5] - g_RT[8])) * (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 4:  H + O2 <=> O + OH
    const amrex::Real k_f = 114000000 * exp(-(7692.18001782426) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[5])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 6:  H2O + O <=> 2 OH
    const amrex::Real k_f =
      67 * exp((1.704) * logT - (7541.61759141549) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - 2.000000 * g_RT[5] + g_RT[8])) * ((sc[5] * sc[5]));
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 9:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[6] - g_RT[8])) * (sc[5] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 10:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 21500 * exp((1) * logT - (3019.30502699498) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[6] - g_RT[7])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 11:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.55 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[7])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 12:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1740000 * exp(-(160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 13:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 75900000 * exp(-(3657.88697590116) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 14:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 70790000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - 2.000000 * g_RT[5] + g_RT[7])) * ((sc[5] * sc[5]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += 2.000000 * qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 15:  H + HO2 <=> H2 + O2
    const amrex::Real k_f =
      11400 * exp((1.083) * logT - (278.671325189338) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[7])) * (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 16:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 32500000;
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[7])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 17:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 7000000 * exp(-(-549.995687057926) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 18:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 450000000 * exp(-(5499.96190274592) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 19:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 100000000 * exp(-(5555.95985331667) * invT);
    const amrex::Real qf = k_f * ((sc[7] * sc[7]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[7] -= 2.000000 * qdot;
  }

  {
    // reaction 20:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 190000 * exp(-(-708.997056952244) * invT);
    const amrex::Real qf = k_f * ((sc[7] * sc[7]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[7] -= 2.000000 * qdot;
  }

  {
    // reaction 23:  NH3 <=> H + NH2
    const amrex::Real k_f =
      3.497e+30 * exp((-5.224) * logT - (55939.2755075164) * invT);
    const amrex::Real qf = k_f * (sc[13]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[16])) *
                           (refCinv) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 24:  H + NH2 <=> H2 + NH
    const amrex::Real k_f = 40000000 * exp(-(1836.74083018723) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 25:  H + NH3 <=> H2 + NH2
    const amrex::Real k_f =
      0.01963 * exp((2.854) * logT - (4287.51166815603) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 26:  NH3 + OH <=> H2O + NH2
    const amrex::Real k_f =
      0.1559 * exp((2.372) * logT - (59.8324615641812) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[13] - g_RT[16])) * (sc[8] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 27:  NH3 + O <=> NH2 + OH
    const amrex::Real k_f =
      0.000443 * exp((3.18) * logT - (3391.63503802389) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[13] - g_RT[16])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 28:  HO2 + NH3 <=> H2O2 + NH2
    const amrex::Real k_f =
      1.173e-06 * exp((3.839) * logT - (8685.52971612278) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[13] - g_RT[16])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 29:  NH3 + O2 <=> HO2 + NH2
    const amrex::Real k_f =
      14150 * exp((1.285) * logT - (27789.6673453998) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[7] + g_RT[13] - g_RT[16])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[7] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 30:  NH2 + O <=> H + HNO
    const amrex::Real k_f =
      1500000000 * exp((-0.547) * logT - (421.041384278809) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18])) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 31:  NH2 + O <=> H + HNO
    const amrex::Real k_f =
      77300000 * exp((-0.277) * logT - (325.279252776171) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18])) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 32:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16])) * (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 33:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (2554.73540112406) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16])) * (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 34:  NH2 + OH <=> H2O + NH
    const amrex::Real k_f =
      9.6 * exp((1.97) * logT - (337.155166089162) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[15] + g_RT[16])) * (sc[8] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 35:  NH2 + O2 <=> HNO + OH
    const amrex::Real k_f =
      2.9e-08 * exp((3.764) * logT - (9151.00513199214) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[16] - g_RT[18])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 36:  NH2 + O2 <=> H2NO + O
    const amrex::Real k_f =
      260000 * exp((0.487) * logT - (14618.4592381271) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[16] - g_RT[22])) * (sc[4] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[16] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 37:  HO2 + NH2 <=> H2NO + OH
    const amrex::Real k_f = 15660000;
    const amrex::Real qf = k_f * (sc[7] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[7] + g_RT[16] - g_RT[22])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[7] -= qdot;
    wdot[16] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 38:  NH + NH2 <=> H + N2H2
    const amrex::Real k_f = 1500000000 * exp((-0.5) * logT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] - g_RT[12] + g_RT[15] + g_RT[16])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 39:  NH + NH2 <=> N + NH3
    const amrex::Real k_f =
      0.0096 * exp((2.46) * logT - (53.844183241105) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[20])) *
                           (sc[13] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 40:  2 NH <=> N + NH2
    const amrex::Real k_f =
      5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr = k_f *
                           exp(-(2.000000 * g_RT[15] - g_RT[16] - g_RT[20])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= 2.000000 * qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 41:  2 NH => H2 + N2
    const amrex::Real k_f =
      6260000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[15] -= 2.000000 * qdot;
  }

  {
    // reaction 42:  2 NH => 2 H + N2
    const amrex::Real k_f =
      56340000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += 2.000000 * qdot;
    wdot[15] -= 2.000000 * qdot;
  }

  {
    // reaction 43:  2 NH2 <=> NH + NH3
    const amrex::Real k_f =
      5.64e-06 * exp((3.53) * logT - (276.769166192596) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] - g_RT[15] + 2.000000 * g_RT[16])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] += qdot;
    wdot[16] -= 2.000000 * qdot;
  }

  {
    // reaction 44:  2 NH2 <=> N2H4
    const amrex::Real k_f =
      5.6e+42 * exp((-11.3) * logT - (5979.37642025808) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[14] + 2.000000 * g_RT[16])) * (refC) * (sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= 2.000000 * qdot;
  }

  {
    // reaction 45:  2 NH2 <=> H + N2H3
    const amrex::Real k_f =
      1200000 * exp((-0.03) * logT - (5074.44189014145) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + 2.000000 * g_RT[16] - g_RT[23])) *
                           (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 46:  2 NH2 <=> H2 + H2NN
    const amrex::Real k_f =
      1.2e+15 * exp((-3.08) * logT - (1694.8337304303) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[16] - g_RT[19])) *
                           (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 47:  NH2 + NO2 <=> H2NO + NO
    const amrex::Real k_f =
      860000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[22])) *
                           (sc[9] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[16] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 48:  NH2 + NO2 <=> H2O + N2O
    const amrex::Real k_f =
      220000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[10] - g_RT[11] + g_RT[16])) *
                           (sc[8] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 49:  NH2 + NO <=> H2O + N2
    const amrex::Real k_f =
      26000000000000 * exp((-2.369) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[8] + g_RT[9] + g_RT[16])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 50:  NH2 + NO <=> NNH + OH
    const amrex::Real k_f =
      43000 * exp((0.294) * logT - (-435.785632586887) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[16] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[16] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 51:  H + NH <=> H2 + N
    const amrex::Real k_f = 30100000;
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[15] - g_RT[20])) * (sc[1] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 52:  NH + O <=> H + NO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[9] + g_RT[15])) * (sc[2] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 53:  NH + OH <=> H + HNO
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[5] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[5] + g_RT[15] - g_RT[18])) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[5] -= qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 54:  NH + OH <=> H2O + N
    const amrex::Real k_f = 2000 * exp((1.2) * logT);
    const amrex::Real qf = k_f * (sc[5] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[15] - g_RT[20])) * (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[15] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 55:  NH + O2 <=> HNO + O
    const amrex::Real k_f =
      405000 * exp((0.09) * logT - (5369.32685630302) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[18])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 56:  NH + O2 <=> NO + OH
    const amrex::Real k_f =
      2010000000 * exp((-1.38) * logT - (2853.24352727942) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT[15])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 57:  N + NH <=> H + N2
    const amrex::Real k_f =
      641000 * exp((0.51) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[15] + g_RT[20])) * (sc[0] * sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += qdot;
    wdot[15] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 58:  NH + NO <=> H + N2O
    const amrex::Real k_f =
      5328000 * exp((0.026) * logT - (-1456.25870917228) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[9] - g_RT[11] + g_RT[15])) * (sc[2] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 59:  NH + NO <=> N2 + OH
    const amrex::Real k_f =
      36350 * exp((0.361) * logT - (-1431.29916254836) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[9] + g_RT[15])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 60:  NH + NO2 <=> N2O + OH
    const amrex::Real k_f = 4100000;
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[10] - g_RT[11] + g_RT[15])) *
                           (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 61:  NH + NO2 <=> HNO + NO
    const amrex::Real k_f = 5900000;
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[18])) *
                           (sc[9] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 62:  N + OH <=> H + NO
    const amrex::Real k_f = 28300000;
    const amrex::Real qf = k_f * (sc[5] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[5] - g_RT[9] + g_RT[20])) * (sc[2] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 63:  N + O2 <=> NO + O
    const amrex::Real k_f = 9027 * exp((1) * logT - (3270.91335989734) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[20])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 64:  N + NO <=> N2 + O
    const amrex::Real k_f = 42800000 * exp(-(790.05016531341) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[9] + g_RT[20])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 65:  N2H4 <=> H2 + H2NN
    const amrex::Real k_f =
      5.3e+39 * exp((-8.35) * logT - (34876.271395428) * invT);
    const amrex::Real qf = k_f * (sc[14]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] + g_RT[14] - g_RT[19])) *
                           (refCinv) * (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 66:  H + N2H4 <=> H2 + N2H3
    const amrex::Real k_f = 960 * exp((1.5) * logT - (2434.71822632963) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[14] - g_RT[23])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 67:  N2H4 + O <=> N2H3 + OH
    const amrex::Real k_f = 670 * exp((1.5) * logT - (1434.821679209) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[14] - g_RT[23])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[14] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 68:  N2H4 + O <=> H2O + N2H2
    const amrex::Real k_f = 84900000 * exp(-(603.859998965664) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] - g_RT[12] + g_RT[14])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 69:  N2H4 + OH <=> H2O + N2H3
    const amrex::Real k_f = 13000000 * exp(-(-160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[14] - g_RT[23])) * (sc[8] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 70:  N2H4 + NH2 <=> N2H3 + NH3
    const amrex::Real k_f =
      3.7 * exp((1.94) * logT - (820.243165261693) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[14] + g_RT[16] - g_RT[23])) *
                           (sc[13] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= qdot;
    wdot[16] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 71:  N2H4 + NO2 <=> HONO + N2H3
    const amrex::Real k_f =
      8.2e-05 * exp((3.13) * logT - (4458.50469119647) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] + g_RT[14] - g_RT[17] - g_RT[23])) *
                           (sc[17] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[17] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 72:  N2H3 <=> H + N2H2
    const amrex::Real k_f =
      3.6e+47 * exp((-10.38) * logT - (34708.8059212148) * invT);
    const amrex::Real qf = k_f * (sc[23]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[12] + g_RT[23])) *
                           (refCinv) * (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 73:  H + N2H3 <=> H2 + N2H2
    const amrex::Real k_f = 240 * exp((1.5) * logT);
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[12] + g_RT[23])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 74:  N2H3 + O <=> HNO + NH2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[23])) *
                           (sc[16] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[18] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 75:  N2H3 + O <=> N2H2 + OH
    const amrex::Real k_f =
      170 * exp((1.5) * logT - (-324.826357776947) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[23])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 76:  N2H3 + OH <=> H2O + N2H2
    const amrex::Real k_f = 1.2 * exp((2) * logT - (-599.632978972904) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[23])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 77:  N2H3 + OH <=> H2NN + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[19] + g_RT[23])) * (sc[8] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 78:  N2H3 + NH2 <=> N2H2 + NH3
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (-579.957207339939) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] - g_RT[13] + g_RT[16] + g_RT[23])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 79:  N2H3 + NH2 <=> H2NN + NH3
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[16] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[16] - g_RT[19] + g_RT[23])) *
                           (sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 80:  HO2 + N2H3 <=> H2O2 + N2H2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (-804.895056954649) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[12] + g_RT[23])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[12] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 81:  HO2 + N2H3 <=> N2H4 + O2
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (1069.88895316741) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[7] - g_RT[14] + g_RT[23])) * (sc[3] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[7] -= qdot;
    wdot[14] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 82:  N2H2 <=> H + NNH
    const amrex::Real k_f =
      1.8e+40 * exp((-8.41) * logT - (36912.4973762735) * invT);
    const amrex::Real qf = k_f * (sc[12]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 83:  N2H2 <=> H + NNH
    const amrex::Real k_f =
      2.6e+40 * exp((-8.53) * logT - (36677.5958366759) * invT);
    const amrex::Real qf = k_f * (sc[12]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 84:  H + N2H2 <=> H2 + NNH
    const amrex::Real k_f =
      4121 * exp((1.289) * logT - (-112.770854806838) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 85:  N2H2 + O <=> NNH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (249.847074572043) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[12] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 86:  N2H2 + OH <=> H2O + NNH
    const amrex::Real k_f =
      5.923e-05 * exp((3.4) * logT - (-686.236567157896) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[12] - g_RT[21])) * (sc[8] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 87:  N2H2 + NO <=> N2O + NH2
    const amrex::Real k_f = 4000000 * exp(-(5996.3348218957) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[11] + g_RT[12] - g_RT[16])) *
                           (sc[11] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 88:  N2H2 + NH <=> NH2 + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.632978972904) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] + g_RT[15] - g_RT[16] - g_RT[21])) *
                           (sc[16] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 89:  N2H2 + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      8.8e-08 * exp((4.05) * logT - (-810.178831945599) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[16] - g_RT[21])) *
                           (sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 90:  N2H2 <=> H2NN
    const amrex::Real k_f =
      2e+41 * exp((-9.38) * logT - (34446.3230761644) * invT);
    const amrex::Real qf = k_f * (sc[12]);
    const amrex::Real qr = k_f * exp(-(g_RT[12] - g_RT[19])) * (sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 91:  H2NN <=> H + NNH
    const amrex::Real k_f =
      9.6e+35 * exp((-7.57) * logT - (27597.0410378964) * invT);
    const amrex::Real qf = k_f * (sc[19]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 92:  H2NN <=> H + NNH
    const amrex::Real k_f =
      3.2e+31 * exp((-6.22) * logT - (26327.1737817382) * invT);
    const amrex::Real qf = k_f * (sc[19]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[19] - g_RT[21])) *
                           (refCinv) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 93:  H2NN + O2 <=> NH2 + NO2
    const amrex::Real k_f = 1500000 * exp(-(2999.67957702859) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 94:  H + H2NN <=> H + N2H2
    const amrex::Real k_f =
      18000 * exp((0.97) * logT - (2249.7861016464) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[12] + g_RT[19])) * (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 95:  H + H2NN <=> H2 + NNH
    const amrex::Real k_f = 480 * exp((1.5) * logT - (-449.97634256258) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[19] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 96:  H2NN + O <=> NH2 + NO
    const amrex::Real k_f =
      3200 * exp((1.03) * logT - (1359.84239600409) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[16] + g_RT[19])) * (sc[9] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 97:  H2NN + O <=> NNH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (-449.97634256258) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[19] - g_RT[21])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 98:  H2NN + OH <=> H2O + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.934908972387) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] + g_RT[19] - g_RT[21])) * (sc[8] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 99:  H2NN + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.957207339939) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[16] + g_RT[19] - g_RT[21])) *
                           (sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 100:  H2NN + HO2 <=> H2O2 + NNH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-804.895056954649) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT[21])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 101:  NNH <=> H + N2
    const amrex::Real k_f = 1000000000;
    const amrex::Real qf = k_f * (sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[21])) * (refCinv) * (sc[0] * sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 102:  H + NNH <=> H2 + N2
    const amrex::Real k_f =
      240 * exp((1.5) * logT - (-449.724734229678) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[21])) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 103:  NNH + O <=> H + N2O
    const amrex::Real k_f =
      190000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[11] + g_RT[21])) * (sc[2] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 104:  NNH + O <=> NH + NO
    const amrex::Real k_f =
      520000 * exp((0.388) * logT - (-205.81561631413) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[21])) * (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[15] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 105:  NNH + O <=> N2 + OH
    const amrex::Real k_f =
      12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[21])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 106:  NNH + OH <=> H2O + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[8] + g_RT[21])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 107:  NNH + O2 <=> HO2 + N2
    const amrex::Real k_f =
      560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[7] + g_RT[21])) * (sc[0] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[7] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 108:  NH2 + NNH <=> N2 + NH3
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (-579.655277340457) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] - g_RT[13] + g_RT[16] + g_RT[21])) *
                           (sc[0] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 109:  HO2 + NNH <=> H2O2 + N2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (-804.895056954649) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[7] + g_RT[21])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 110:  NNH + NO <=> HNO + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[21])) * (sc[0] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 111:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2110000 * exp(-(-241.543999586265) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[7] + g_RT[9] - g_RT[10])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[7] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 113:  NO + OH <=> HONO
    const amrex::Real k_f =
      3.09e+17 * exp((-4.17) * logT - (815.714215269451) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] + g_RT[9] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 114:  HNO <=> H + NO
    const amrex::Real k_f =
      1.826e+20 * exp((-3.008) * logT - (24094.0391195633) * invT);
    const amrex::Real qf = k_f * (sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[9] + g_RT[18])) * (refCinv) * (sc[2] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[9] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 115:  H + HNO <=> H2 + NO
    const amrex::Real k_f =
      968000 * exp((0.62) * logT - (181.157999689699) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[9] + g_RT[18])) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 116:  HNO + O <=> NO + OH
    const amrex::Real k_f = 22900000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[18])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 117:  HNO + OH <=> H + HONO
    const amrex::Real k_f =
      0.00148 * exp((2.72) * logT - (2291.65372824135) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[5] - g_RT[17] + g_RT[18])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[5] -= qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 118:  HNO + OH <=> H2O + NO
    const amrex::Real k_f =
      63000 * exp((0.39) * logT - (1903.17046224011) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[9] + g_RT[18])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 119:  HNO + O2 <=> HO2 + NO
    const amrex::Real k_f = 20000000 * exp(-(7495.92551816042) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[18])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 120:  HNO + NH2 <=> NH3 + NO
    const amrex::Real k_f =
      36.7 * exp((1.63) * logT - (-629.0208322559) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT[18])) *
                           (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 121:  HNO + NO <=> N2O + OH
    const amrex::Real k_f = 8510000 * exp(-(14900.2555388111) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[11] + g_RT[18])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 122:  HNO + NO2 <=> HONO + NO
    const amrex::Real k_f =
      0.0442 * exp((2.64) * logT - (2033.80047651635) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] - g_RT[17] + g_RT[18])) *
                           (sc[9] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 123:  H + HONO <=> H2 + NO2
    const amrex::Real k_f =
      0.00189 * exp((2.83) * logT - (715.926350440375) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[17])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 124:  H + HONO <=> H2O + NO
    const amrex::Real k_f =
      4300 * exp((0.98) * logT - (2048.09182982521) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[9] + g_RT[17])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 125:  HONO + O <=> NO2 + OH
    const amrex::Real k_f = 12100000 * exp(-(2999.17636036279) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[17])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 126:  HONO + OH <=> H2O + NO2
    const amrex::Real k_f = 1700000 * exp(-(-261.672666218454) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[10] + g_RT[17])) * (sc[8] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 127:  HONO + NH <=> NH2 + NO2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[15] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[15] - g_RT[16] + g_RT[17])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 128:  HONO + NH2 <=> NH3 + NO2
    const amrex::Real k_f =
      0.000317 * exp((2.83) * logT - (-1796.48349692285) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] - g_RT[13] + g_RT[16] + g_RT[17])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 129:  2 HONO => H2O + NO + NO2
    const amrex::Real k_f =
      3.49e-07 * exp((3.64) * logT - (6108.35085170383) * invT);
    const amrex::Real qf = k_f * ((sc[17] * sc[17]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[10] += qdot;
    wdot[17] -= 2.000000 * qdot;
  }

  {
    // reaction 131:  H + H2NO <=> H2 + HNO
    const amrex::Real k_f = 480 * exp((1.5) * logT - (784.917355322202) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[18] + g_RT[22])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 132:  H + H2NO <=> NH2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[16] + g_RT[22])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[16] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 133:  H2NO + O <=> HNO + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (244.965872913738) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[22])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 134:  H2NO + OH <=> H2O + HNO
    const amrex::Real k_f = 2.4 * exp((2) * logT - (599.934908972387) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[18] + g_RT[22])) * (sc[8] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 135:  H2NO + NO2 <=> HNO + HONO
    const amrex::Real k_f = 600000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[17] - g_RT[18] + g_RT[22])) *
                           (sc[17] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[17] += qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 136:  H2NO + NH2 <=> HNO + NH3
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[16] - g_RT[18] + g_RT[22])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 137:  H2NO + O2 <=> HNO + HO2
    const amrex::Real k_f =
      0.00023 * exp((2.994) * logT - (8303.08505011119) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[18] + g_RT[22])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[7] += qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 138:  H2NO + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.336 * exp((2) * logT - (-721.612698763968) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[18] + g_RT[22])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[18] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 139:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 88500000;
    const amrex::Real qf = k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[9] + g_RT[10])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 140:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 3920000 * exp(-(-119.765566461523) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[9] + g_RT[10])) * (sc[3] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 141:  HO2 + NO2 <=> HONO + O2
    const amrex::Real k_f =
      1.9e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[7] + g_RT[10] - g_RT[17])) * (sc[3] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[7] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 142:  2 NO2 => 2 NO + O2
    const amrex::Real k_f = 1630000 * exp(-(13098.7398752302) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] += 2.000000 * qdot;
    wdot[10] -= 2.000000 * qdot;
  }

  {
    // reaction 144:  H + N2O <=> N2 + OH
    const amrex::Real k_f = 25300 * exp(-(2289.64086157813) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 145:  H + N2O <=> N2 + OH
    const amrex::Real k_f = 500000000 * exp(-(9108.23171539874) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 146:  N2O + O <=> 2 NO
    const amrex::Real k_f = 66200000 * exp(-(13400.669874713) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - 2.000000 * g_RT[9] + g_RT[11])) * ((sc[9] * sc[9]));
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += 2.000000 * qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 147:  N2O + O <=> N2 + O2
    const amrex::Real k_f = 102000000 * exp(-(14100.1511045149) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[11])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 148:  N2O + OH <=> HO2 + N2
    const amrex::Real k_f =
      1e-08 * exp((4.72) * logT - (18397.6163983205) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11])) * (sc[0] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 149:  N2O + NO <=> N2 + NO2
    const amrex::Real k_f =
      0.525 * exp((2.23) * logT - (23298.9567875918) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[10] + g_RT[11])) * (sc[0] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 24; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[24]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 24; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 24; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[24]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 24; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[24]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 24; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[24];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 2.016000;   // H2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 15.999000;  // O
  XW += x[5] * 17.007000;  // OH
  XW += x[6] * 34.014000;  // H2O2
  XW += x[7] * 33.006000;  // HO2
  XW += x[8] * 18.015000;  // H2O
  XW += x[9] * 30.006000;  // NO
  XW += x[10] * 46.005000; // NO2
  XW += x[11] * 44.013000; // N2O
  XW += x[12] * 30.030000; // N2H2
  XW += x[13] * 17.031000; // NH3
  XW += x[14] * 32.046000; // N2H4
  XW += x[15] * 15.015000; // NH
  XW += x[16] * 16.023000; // NH2
  XW += x[17] * 47.013000; // HONO
  XW += x[18] * 31.014000; // HNO
  XW += x[19] * 30.030000; // H2NN
  XW += x[20] * 14.007000; // N
  XW += x[21] * 29.022000; // NNH
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 31.038000; // N2H3
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 24; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 24; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // N2
  kcharge[1] = 0;  // H2
  kcharge[2] = 0;  // H
  kcharge[3] = 0;  // O2
  kcharge[4] = 0;  // O
  kcharge[5] = 0;  // OH
  kcharge[6] = 0;  // H2O2
  kcharge[7] = 0;  // HO2
  kcharge[8] = 0;  // H2O
  kcharge[9] = 0;  // NO
  kcharge[10] = 0; // NO2
  kcharge[11] = 0; // N2O
  kcharge[12] = 0; // N2H2
  kcharge[13] = 0; // NH3
  kcharge[14] = 0; // N2H4
  kcharge[15] = 0; // NH
  kcharge[16] = 0; // NH2
  kcharge[17] = 0; // HONO
  kcharge[18] = 0; // HNO
  kcharge[19] = 0; // H2NN
  kcharge[20] = 0; // N
  kcharge[21] = 0; // NNH
  kcharge[22] = 0; // H2NO
  kcharge[23] = 0; // N2H3
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[24];
  CKCHRG(kchrg);

  for (int id = 0; id < 24; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 625; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[24];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 24; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[24];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[24];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[24];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 8: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[1] + (1.2 - 1) * sc[3] +
          (7.7 - 1) * sc[6] + (7.65 - 1) * sc[8];
  // forward
  phi_f = sc[6];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3344021476) * invT);
  dlnkfdT = 0.9 * invT + (24531.3344021476) * invT2;
  // pressure-fall-off
  k_0 = 2.49e+24 * exp(-2.3 * logT - (24531.3344021476) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3344021476) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = refC * exp(-2.000000 * g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6]) + (2.000000 * h_RT[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += 2 * q; // OH
  wdot[6] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.5 * dcdc_fac;
  dqdc[1] = 3.7 * dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 1.2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac - k_r * 2.000000 * sc[5];
  dqdc[6] = 7.7 * dcdc_fac + k_f;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 7.65 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 5] += 2 * dqdc[k];
    J[25 * k + 6] -= dqdc[k];
  }
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[606] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 21: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.3 - 1) * sc[1] + (10 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4650000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 1.737e+19 * exp(-1.23 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.23 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[7] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 1.3 * dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[3];
  dqdc[3] = dcdc_fac + k_f * sc[2];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac - k_r;
  dqdc[8] = 10 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 2] -= dqdc[k];
    J[25 * k + 3] -= dqdc[k];
    J[25 * k + 7] += dqdc[k];
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 112: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.5 - 1) * sc[3] + (10 - 1) * sc[8];
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 4.72e+24 * exp(-2.87 * logT - (779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[10];
  Kc = refCinv * exp(g_RT[4] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.7 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 1.5 * dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[9];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 10 * dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[4];
  dqdc[10] = dcdc_fac - k_r;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 4] -= dqdc[k];
    J[25 * k + 9] -= dqdc[k];
    J[25 * k + 10] += dqdc[k];
  }
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT

  // reaction 143: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.4 - 1) * sc[3] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[11];
  k_f = 99000000000 * exp(-(29136.7833919257) * invT);
  dlnkfdT = (29136.7833919257) * invT2;
  // pressure-fall-off
  k_0 = 602000000000000 * exp(-(28906.8083434863) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28906.8083434863) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = refC * exp(-g_RT[0] - g_RT[4] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[11] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.7 * dcdc_fac - k_r * sc[4];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 1.4 * dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * sc[0];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 12 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac + k_f;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 0] += dqdc[k];
    J[25 * k + 4] += dqdc[k];
    J[25 * k + 11] -= dqdc[k];
  }
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 0: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[1];
  k_f = 45770000000000 * exp(-1.4 * logT - (52535.8702316793) * invT);
  dlnkfdT = -1.4 * invT + (52535.8702316793) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[1] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor + k_f;
  dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = 12 * q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 1] -= dqdc[k];
    J[25 * k + 2] += 2 * dqdc[k];
  }
  J[601] -= dqdT;     // dwdot[H2]/dT
  J[602] += 2 * dqdT; // dwdot[H]/dT

  // reaction 3: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 6165 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[4] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor - k_r;
  dqdc[4] = q_nocor + k_f * 2.000000 * sc[4];
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = 12 * q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 3] += dqdc[k];
    J[25 * k + 4] += -2 * dqdc[k];
  }
  J[603] += dqdT;      // dwdot[O2]/dT
  J[604] += -2 * dqdT; // dwdot[O]/dT

  // reaction 5: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[1] + (3.65 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 35000000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] -= q; // OH
  wdot[8] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 0.73 * q_nocor;
  dqdc[2] = q_nocor + k_f * sc[5];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor + k_f * sc[2];
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = 3.65 * q_nocor - k_r;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 2] -= dqdc[k];
    J[25 * k + 5] -= dqdc[k];
    J[25 * k + 8] += dqdc[k];
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 7: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 4714000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = 2.5 * q_nocor;
  dqdc[2] = q_nocor + k_f * sc[4];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor + k_f * sc[2];
  dqdc[5] = q_nocor - k_r;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = 12 * q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 2] -= dqdc[k];
    J[25 * k + 4] -= dqdc[k];
    J[25 * k + 5] += dqdc[k];
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 22: O + OH + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 10000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[4] + g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[5] -= q; // OH
  wdot[7] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor + k_f * sc[5];
  dqdc[5] = q_nocor + k_f * sc[4];
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor - k_r;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 4] -= dqdc[k];
    J[25 * k + 5] -= dqdc[k];
    J[25 * k + 7] += dqdc[k];
  }
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 130: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[22];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32696.4927963283) * invT);
  dlnkfdT = -2.83 * invT + (32696.4927963283) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = refC * exp(-g_RT[2] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[2] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor - k_r * sc[18];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor - k_r * sc[2];
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor + k_f;
  dqdc[23] = q_nocor;
  for (int k = 0; k < 24; k++) {
    J[25 * k + 2] += dqdc[k];
    J[25 * k + 18] += dqdc[k];
    J[25 * k + 22] -= dqdc[k];
  }
  J[602] += dqdT; // dwdot[H]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 0.0508 * exp(2.67 * logT - (3166.24429340995) * invT);
  dlnkfdT = 2.67 * invT + (3166.24429340995) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[26] -= dqdci; // dwdot[H2]/d[H2]
  J[27] += dqdci; // dwdot[H]/d[H2]
  J[29] -= dqdci; // dwdot[O]/d[H2]
  J[30] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[51] -= dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[101] -= dqdci; // dwdot[H2]/d[O]
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[601] -= dqdT; // dwdot[H2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 43800000 * exp(-(3517.48952614165) * invT);
  dlnkfdT = (3517.48952614165) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[5] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[5] -= q; // OH
  wdot[8] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[5];
  J[26] -= dqdci; // dwdot[H2]/d[H2]
  J[27] += dqdci; // dwdot[H]/d[H2]
  J[30] -= dqdci; // dwdot[OH]/d[H2]
  J[33] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[51] -= dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[201] -= dqdci; // dwdot[H2]/d[H2O]
  J[202] += dqdci; // dwdot[H]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[601] -= dqdT; // dwdot[H2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 4: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 114000000 * exp(-(7692.18001782426) * invT);
  dlnkfdT = (7692.18001782426) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[4] += q; // O
  wdot[5] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[53] -= dqdci; // dwdot[O2]/d[H]
  J[54] += dqdci; // dwdot[O]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[77] -= dqdci; // dwdot[H]/d[O2]
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[102] -= dqdci; // dwdot[H]/d[O]
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[129] += dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 6: H2O + O <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 67 * exp(1.704 * logT - (7541.61759141549) * invT);
  dlnkfdT = 1.704 * invT + (7541.61759141549) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[5] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (2.000000 * h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;     // O
  wdot[5] += 2 * q; // OH
  wdot[8] -= q;     // H2O
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[104] -= dqdci;     // dwdot[O]/d[O]
  J[105] += 2 * dqdci; // dwdot[OH]/d[O]
  J[108] -= dqdci;     // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[5];
  J[129] -= dqdci;     // dwdot[O]/d[OH]
  J[130] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci;     // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[4];
  J[204] -= dqdci;     // dwdot[O]/d[H2O]
  J[205] += 2 * dqdci; // dwdot[OH]/d[H2O]
  J[208] -= dqdci;     // dwdot[H2O]/d[H2O]
  // d()/dT
  J[604] -= dqdT;     // dwdot[O]/dT
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[608] -= dqdT;     // dwdot[H2O]/dT

  // reaction 9: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[2] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // OH
  wdot[6] -= q; // H2O2
  wdot[8] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[56] -= dqdci; // dwdot[H2O2]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[152] -= dqdci; // dwdot[H]/d[H2O2]
  J[155] += dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[H]/d[H2O]
  J[205] += dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 10: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 21500 * exp(1 * logT - (3019.30502699498) * invT);
  dlnkfdT = 1 * invT + (3019.30502699498) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[7];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[31] -= dqdci; // dwdot[H2O2]/d[H2]
  J[32] += dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[56] -= dqdci; // dwdot[H2O2]/d[H]
  J[57] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[151] += dqdci; // dwdot[H2]/d[H2O2]
  J[152] -= dqdci; // dwdot[H]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[176] += dqdci; // dwdot[H2]/d[HO2]
  J[177] -= dqdci; // dwdot[H]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 11: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 9.55 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[7];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[H2O2]/d[O]
  J[107] += dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[7];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[154] -= dqdci; // dwdot[O]/d[H2O2]
  J[155] += dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[179] -= dqdci; // dwdot[O]/d[HO2]
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 12: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  wdot[8] += q; // H2O
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[155] -= dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[7];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[207] += dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 13: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 75900000 * exp(-(3657.88697590116) * invT);
  dlnkfdT = (3657.88697590116) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  wdot[8] += q; // H2O
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[155] -= dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[7];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[207] += dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 14: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (2.000000 * h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[5] += 2 * q; // OH
  wdot[7] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[52] -= dqdci;     // dwdot[H]/d[H]
  J[55] += 2 * dqdci; // dwdot[OH]/d[H]
  J[57] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[5];
  J[127] -= dqdci;     // dwdot[H]/d[OH]
  J[130] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[177] -= dqdci;     // dwdot[H]/d[HO2]
  J[180] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[602] -= dqdT;     // dwdot[H]/dT
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[607] -= dqdT;     // dwdot[HO2]/dT

  // reaction 15: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 11400 * exp(1.083 * logT - (278.671325189338) * invT);
  dlnkfdT = 1.083 * invT + (278.671325189338) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[3] += q; // O2
  wdot[7] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[28] += dqdci; // dwdot[O2]/d[H2]
  J[32] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[53] += dqdci; // dwdot[O2]/d[H]
  J[57] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[1];
  J[76] += dqdci; // dwdot[H2]/d[O2]
  J[77] -= dqdci; // dwdot[H]/d[O2]
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[176] += dqdci; // dwdot[H2]/d[HO2]
  J[177] -= dqdci; // dwdot[H]/d[HO2]
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT

  // reaction 16: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 32500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  wdot[7] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[107] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[179] -= dqdci; // dwdot[O]/d[HO2]
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 7000000 * exp(-(-549.995687057926) * invT);
  dlnkfdT = (-549.995687057926) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] -= q; // OH
  wdot[7] -= q; // HO2
  wdot[8] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[80] -= dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[83] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[203] += dqdci; // dwdot[O2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[207] -= dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 18: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 450000000 * exp(-(5499.96190274592) * invT);
  dlnkfdT = (5499.96190274592) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] -= q; // OH
  wdot[7] -= q; // HO2
  wdot[8] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[80] -= dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[83] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[203] += dqdci; // dwdot[O2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[207] -= dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[7] * sc[7]);
  k_f = 100000000 * exp(-(5555.95985331667) * invT);
  dlnkfdT = (5555.95985331667) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] += q;     // H2O2
  wdot[7] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[78] += dqdci;      // dwdot[O2]/d[O2]
  J[81] += dqdci;      // dwdot[H2O2]/d[O2]
  J[82] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[153] += dqdci;      // dwdot[O2]/d[H2O2]
  J[156] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[157] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[7];
  J[178] += dqdci;      // dwdot[O2]/d[HO2]
  J[181] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[182] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[606] += dqdT;      // dwdot[H2O2]/dT
  J[607] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[7] * sc[7]);
  k_f = 190000 * exp(-(-708.997056952244) * invT);
  dlnkfdT = (-708.997056952244) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] += q;     // H2O2
  wdot[7] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[78] += dqdci;      // dwdot[O2]/d[O2]
  J[81] += dqdci;      // dwdot[H2O2]/d[O2]
  J[82] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[153] += dqdci;      // dwdot[O2]/d[H2O2]
  J[156] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[157] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[7];
  J[178] += dqdci;      // dwdot[O2]/d[HO2]
  J[181] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[182] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[606] += dqdT;      // dwdot[H2O2]/dT
  J[607] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 23: NH3 <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 3.497e+30 * exp(-5.224 * logT - (55939.2755075164) * invT);
  dlnkfdT = -5.224 * invT + (55939.2755075164) * invT2;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = refC * exp(-g_RT[2] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[2] + h_RT[16]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[63] -= dqdci; // dwdot[NH3]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f;
  J[327] += dqdci; // dwdot[H]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 24: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  dlnkfdT = (1836.74083018723) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[40] += dqdci; // dwdot[NH]/d[H2]
  J[41] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[NH]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[1];
  J[376] += dqdci; // dwdot[H2]/d[NH]
  J[377] -= dqdci; // dwdot[H]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[401] += dqdci; // dwdot[H2]/d[NH2]
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 25: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 0.01963 * exp(2.854 * logT - (4287.51166815603) * invT);
  dlnkfdT = 2.854 * invT + (4287.51166815603) * invT2;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[38] -= dqdci; // dwdot[NH3]/d[H2]
  J[41] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[63] -= dqdci; // dwdot[NH3]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[326] += dqdci; // dwdot[H2]/d[NH3]
  J[327] -= dqdci; // dwdot[H]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[1];
  J[401] += dqdci; // dwdot[H2]/d[NH2]
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 26: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[13];
  k_f = 0.1559 * exp(2.372 * logT - (59.8324615641812) * invT);
  dlnkfdT = 2.372 * invT + (59.8324615641812) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[NH3]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[213] -= dqdci; // dwdot[NH3]/d[H2O]
  J[216] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH3]
  dqdci = +k_f * sc[5];
  J[330] -= dqdci; // dwdot[OH]/d[NH3]
  J[333] += dqdci; // dwdot[H2O]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[405] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 27: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 0.000443 * exp(3.18 * logT - (3391.63503802389) * invT);
  dlnkfdT = 3.18 * invT + (3391.63503802389) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[NH3]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[NH3]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[329] -= dqdci; // dwdot[O]/d[NH3]
  J[330] += dqdci; // dwdot[OH]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 28: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[13];
  k_f = 1.173e-06 * exp(3.839 * logT - (8685.52971612278) * invT);
  dlnkfdT = 3.839 * invT + (8685.52971612278) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[163] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[166] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[13];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[188] -= dqdci; // dwdot[NH3]/d[HO2]
  J[191] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[7];
  J[331] += dqdci; // dwdot[H2O2]/d[NH3]
  J[332] -= dqdci; // dwdot[HO2]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[406] += dqdci; // dwdot[H2O2]/d[NH2]
  J[407] -= dqdci; // dwdot[HO2]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 29: NH3 + O2 <=> HO2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 14150 * exp(1.285 * logT - (27789.6673453998) * invT);
  dlnkfdT = 1.285 * invT + (27789.6673453998) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[3] - g_RT[7] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[88] -= dqdci; // dwdot[NH3]/d[O2]
  J[91] += dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[188] -= dqdci; // dwdot[NH3]/d[HO2]
  J[191] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[328] -= dqdci; // dwdot[O2]/d[NH3]
  J[332] += dqdci; // dwdot[HO2]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[407] += dqdci; // dwdot[HO2]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 30: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 1500000000 * exp(-0.547 * logT - (421.041384278809) * invT);
  dlnkfdT = -0.547 * invT + (421.041384278809) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 31: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 77300000 * exp(-0.277 * logT - (325.279252776171) * invT);
  dlnkfdT = -0.277 * invT + (325.279252776171) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 32: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 33: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 330 * exp(1.5 * logT - (2554.73540112406) * invT);
  dlnkfdT = 1.5 * invT + (2554.73540112406) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 34: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 9.6 * exp(1.97 * logT - (337.155166089162) * invT);
  dlnkfdT = 1.97 * invT + (337.155166089162) * invT2;
  // reverse
  phi_r = sc[8] * sc[15];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[8] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[215] += dqdci; // dwdot[NH]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[8];
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[383] += dqdci; // dwdot[H2O]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[405] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 35: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 2.9e-08 * exp(3.764 * logT - (9151.00513199214) * invT);
  dlnkfdT = 3.764 * invT + (9151.00513199214) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // OH
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[91] -= dqdci; // dwdot[NH2]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 36: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 260000 * exp(0.487 * logT - (14618.4592381271) * invT);
  dlnkfdT = 0.487 * invT + (14618.4592381271) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[91] -= dqdci; // dwdot[NH2]/d[O2]
  J[97] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[22];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[122] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[404] += dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[553] -= dqdci; // dwdot[O2]/d[H2NO]
  J[554] += dqdci; // dwdot[O]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[16];
  k_f = 15660000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(-g_RT[5] + g_RT[7] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[7] -= q;  // HO2
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[147] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[16];
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[191] -= dqdci; // dwdot[NH2]/d[HO2]
  J[197] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[7];
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[HO2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[557] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 38: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 1500000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(-g_RT[2] - g_RT[12] + g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] += q; // N2H2
  wdot[15] -= q; // NH
  wdot[16] -= q; // NH2
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[315] -= dqdci; // dwdot[NH]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[387] += dqdci; // dwdot[N2H2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[412] += dqdci; // dwdot[N2H2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 39: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[13] * sc[20];
  Kc = exp(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[13] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[15] -= q; // NH
  wdot[16] -= q; // NH2
  wdot[20] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[340] -= dqdci; // dwdot[NH]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[345] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[388] += dqdci; // dwdot[NH3]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[420] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = -k_r * sc[13];
  J[513] += dqdci; // dwdot[NH3]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[516] -= dqdci; // dwdot[NH2]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 40: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[16] * sc[20];
  Kc = exp(2.000000 * g_RT[15] - g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[15]) + (h_RT[16] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= 2 * q; // NH
  wdot[16] += q;     // NH2
  wdot[20] += q;     // N
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci;      // dwdot[NH2]/d[NH]
  J[395] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[415] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci;      // dwdot[NH2]/d[NH2]
  J[420] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = -k_r * sc[16];
  J[515] += -2 * dqdci; // dwdot[NH]/d[N]
  J[516] += dqdci;      // dwdot[NH2]/d[N]
  J[520] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT
  J[616] += dqdT;      // dwdot[NH2]/dT
  J[620] += dqdT;      // dwdot[N]/dT

  // reaction 41: 2 NH => H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 6260000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[1] += q;      // H2
  wdot[15] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[375] += dqdci;      // dwdot[N2]/d[NH]
  J[376] += dqdci;      // dwdot[H2]/d[NH]
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT;      // dwdot[N2]/dT
  J[601] += dqdT;      // dwdot[H2]/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 42: 2 NH => 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 56340000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[2] += 2 * q;  // H
  wdot[15] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[375] += dqdci;      // dwdot[N2]/d[NH]
  J[377] += 2 * dqdci;  // dwdot[H]/d[NH]
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT;      // dwdot[N2]/dT
  J[602] += 2 * dqdT;  // dwdot[H]/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 43: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 5.64e-06 * exp(3.53 * logT - (276.769166192596) * invT);
  dlnkfdT = 3.53 * invT + (276.769166192596) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(-g_RT[13] - g_RT[15] + 2.000000 * g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q;     // NH3
  wdot[15] += q;     // NH
  wdot[16] -= 2 * q; // NH2
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[338] += dqdci;      // dwdot[NH3]/d[NH3]
  J[340] += dqdci;      // dwdot[NH]/d[NH3]
  J[341] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH]
  dqdci = -k_r * sc[13];
  J[388] += dqdci;      // dwdot[NH3]/d[NH]
  J[390] += dqdci;      // dwdot[NH]/d[NH]
  J[391] += -2 * dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[413] += dqdci;      // dwdot[NH3]/d[NH2]
  J[415] += dqdci;      // dwdot[NH]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[613] += dqdT;      // dwdot[NH3]/dT
  J[615] += dqdT;      // dwdot[NH]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT

  // reaction 44: 2 NH2 <=> N2H4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 5.6e+42 * exp(-11.3 * logT - (5979.37642025808) * invT);
  dlnkfdT = -11.3 * invT + (5979.37642025808) * invT2;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(-g_RT[14] + 2.000000 * g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q;     // N2H4
  wdot[16] -= 2 * q; // NH2
  // d()/d[N2H4]
  dqdci = -k_r;
  J[364] += dqdci;      // dwdot[N2H4]/d[N2H4]
  J[366] += -2 * dqdci; // dwdot[NH2]/d[N2H4]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[414] += dqdci;      // dwdot[N2H4]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[614] += dqdT;      // dwdot[N2H4]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT

  // reaction 45: 2 NH2 <=> H + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 1200000 * exp(-0.03 * logT - (5074.44189014145) * invT);
  dlnkfdT = -0.03 * invT + (5074.44189014145) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H
  wdot[16] -= 2 * q; // NH2
  wdot[23] += q;     // N2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[52] += dqdci;      // dwdot[H]/d[H]
  J[66] += -2 * dqdci; // dwdot[NH2]/d[H]
  J[73] += dqdci;      // dwdot[N2H3]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[402] += dqdci;      // dwdot[H]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[423] += dqdci;      // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[577] += dqdci;      // dwdot[H]/d[N2H3]
  J[591] += -2 * dqdci; // dwdot[NH2]/d[N2H3]
  J[598] += dqdci;      // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[602] += dqdT;      // dwdot[H]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT
  J[623] += dqdT;      // dwdot[N2H3]/dT

  // reaction 46: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 1.2e+15 * exp(-3.08 * logT - (1694.8337304303) * invT);
  dlnkfdT = -3.08 * invT + (1694.8337304303) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[16] -= 2 * q; // NH2
  wdot[19] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[26] += dqdci;      // dwdot[H2]/d[H2]
  J[41] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[44] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[401] += dqdci;      // dwdot[H2]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[476] += dqdci;      // dwdot[H2]/d[H2NN]
  J[491] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[494] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[601] += dqdT;      // dwdot[H2]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT
  J[619] += dqdT;      // dwdot[H2NN]/dT

  // reaction 47: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[9] * sc[22];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[NO]
  dqdci = -k_r * sc[22];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[247] += dqdci; // dwdot[H2NO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  J[272] += dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[410] -= dqdci; // dwdot[NO2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[9];
  J[559] += dqdci; // dwdot[NO]/d[H2NO]
  J[560] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 48: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[8] * sc[11];
  Kc = exp(-g_RT[8] + g_RT[10] - g_RT[11] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[8] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O
  wdot[10] -= q; // NO2
  wdot[11] += q; // N2O
  wdot[16] -= q; // NH2
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[210] -= dqdci; // dwdot[NO2]/d[H2O]
  J[211] += dqdci; // dwdot[N2O]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[258] += dqdci; // dwdot[H2O]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[261] += dqdci; // dwdot[N2O]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[8];
  J[283] += dqdci; // dwdot[H2O]/d[N2O]
  J[285] -= dqdci; // dwdot[NO2]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[291] -= dqdci; // dwdot[NH2]/d[N2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[410] -= dqdci; // dwdot[NO2]/d[NH2]
  J[411] += dqdci; // dwdot[N2O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 49: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] - g_RT[8] + g_RT[9] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[8] += q;  // H2O
  wdot[9] -= q;  // NO
  wdot[16] -= q; // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[8] += dqdci;  // dwdot[H2O]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[16] -= dqdci; // dwdot[NH2]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[200] += dqdci; // dwdot[N2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] -= dqdci; // dwdot[NO]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[400] += dqdci; // dwdot[N2]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 50: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[16] -= q; // NH2
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[246] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[534] -= dqdci; // dwdot[NO]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 51: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 30100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[20];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[15] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[1] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // NH
  wdot[20] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[40] -= dqdci; // dwdot[NH]/d[H2]
  J[45] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[70] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[376] += dqdci; // dwdot[H2]/d[NH]
  J[377] -= dqdci; // dwdot[H]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[1];
  J[501] += dqdci; // dwdot[H2]/d[N]
  J[502] -= dqdci; // dwdot[H]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 52: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[15] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[115] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 53: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[5] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 54: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 2000 * exp(1.2 * logT);
  dlnkfdT = 1.2 * invT;
  // reverse
  phi_r = sc[8] * sc[20];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[15] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[8] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[15] -= q; // NH
  wdot[20] += q; // N
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[N]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[215] -= dqdci; // dwdot[NH]/d[H2O]
  J[220] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[383] += dqdci; // dwdot[H2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[8];
  J[505] -= dqdci; // dwdot[OH]/d[N]
  J[508] += dqdci; // dwdot[H2O]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 55: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 405000 * exp(0.09 * logT - (5369.32685630302) * invT);
  dlnkfdT = 0.09 * invT + (5369.32685630302) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[90] -= dqdci; // dwdot[NH]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[18];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[115] -= dqdci; // dwdot[NH]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[378] -= dqdci; // dwdot[O2]/d[NH]
  J[379] += dqdci; // dwdot[O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[454] += dqdci; // dwdot[O]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 56: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 2010000000 * exp(-1.38 * logT - (2853.24352727942) * invT);
  dlnkfdT = -1.38 * invT + (2853.24352727942) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[3] - g_RT[5] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[15] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[90] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[378] -= dqdci; // dwdot[O2]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 57: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[20];
  k_f = 641000 * exp(0.51 * logT - (10.0643333160944) * invT);
  dlnkfdT = 0.51 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] - g_RT[2] + g_RT[15] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[20]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[15] -= q; // NH
  wdot[20] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NH]/d[N2]
  J[20] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[70] -= dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[375] += dqdci; // dwdot[N2]/d[NH]
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] -= dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[15];
  J[500] += dqdci; // dwdot[N2]/d[N]
  J[502] += dqdci; // dwdot[H]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 58: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 5328000 * exp(0.026 * logT - (-1456.25870917228) * invT);
  dlnkfdT = 0.026 * invT + (-1456.25870917228) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(-g_RT[2] + g_RT[9] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[15] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[59] -= dqdci; // dwdot[NO]/d[H]
  J[61] += dqdci; // dwdot[N2O]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[277] += dqdci; // dwdot[H]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[290] -= dqdci; // dwdot[NH]/d[N2O]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[384] -= dqdci; // dwdot[NO]/d[NH]
  J[386] += dqdci; // dwdot[N2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 59: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 36350 * exp(0.361 * logT - (-1431.29916254836) * invT);
  dlnkfdT = 0.361 * invT + (-1431.29916254836) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[15] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[15] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[375] += dqdci; // dwdot[N2]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[384] -= dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 60: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(-g_RT[5] + g_RT[10] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[10] -= q; // NO2
  wdot[11] += q; // N2O
  wdot[15] -= q; // NH
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NO2]/d[OH]
  J[136] += dqdci; // dwdot[N2O]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO2]
  dqdci = +k_f * sc[15];
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[261] += dqdci; // dwdot[N2O]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[285] -= dqdci; // dwdot[NO2]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[290] -= dqdci; // dwdot[NH]/d[N2O]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[385] -= dqdci; // dwdot[NO2]/d[NH]
  J[386] += dqdci; // dwdot[N2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 61: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[18];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  J[243] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[15];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  J[268] += dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[385] -= dqdci; // dwdot[NO2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 62: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 28300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(-g_RT[2] + g_RT[5] - g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[9] += q;  // NO
  wdot[20] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[70] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[5];
  J[502] += dqdci; // dwdot[H]/d[N]
  J[505] -= dqdci; // dwdot[OH]/d[N]
  J[509] += dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 63: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 9027 * exp(1 * logT - (3270.91335989734) * invT);
  dlnkfdT = 1 * invT + (3270.91335989734) * invT2;
  // reverse
  phi_r = sc[4] * sc[9];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[9] += q;  // NO
  wdot[20] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[95] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[229] += dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[503] -= dqdci; // dwdot[O2]/d[N]
  J[504] += dqdci; // dwdot[O]/d[N]
  J[509] += dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 64: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 42800000 * exp(-(790.05016531341) * invT);
  dlnkfdT = (790.05016531341) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[9] -= q;  // NO
  wdot[20] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[O]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[20] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[109] -= dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[20];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[229] += dqdci; // dwdot[O]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[9];
  J[500] += dqdci; // dwdot[N2]/d[N]
  J[504] += dqdci; // dwdot[O]/d[N]
  J[509] -= dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 65: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14];
  k_f = 5.3e+39 * exp(-8.35 * logT - (34876.271395428) * invT);
  dlnkfdT = -8.35 * invT + (34876.271395428) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = refC * exp(-g_RT[1] + g_RT[14] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[1] + h_RT[19]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[14] -= q; // N2H4
  wdot[19] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[39] -= dqdci; // dwdot[N2H4]/d[H2]
  J[44] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[351] += dqdci; // dwdot[H2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[369] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[476] += dqdci; // dwdot[H2]/d[H2NN]
  J[489] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT

  // reaction 66: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 960 * exp(1.5 * logT - (2434.71822632963) * invT);
  dlnkfdT = 1.5 * invT + (2434.71822632963) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[39] -= dqdci; // dwdot[N2H4]/d[H2]
  J[48] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[64] -= dqdci; // dwdot[N2H4]/d[H]
  J[73] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[351] += dqdci; // dwdot[H2]/d[N2H4]
  J[352] -= dqdci; // dwdot[H]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[576] += dqdci; // dwdot[H2]/d[N2H3]
  J[577] -= dqdci; // dwdot[H]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 67: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 670 * exp(1.5 * logT - (1434.821679209) * invT);
  dlnkfdT = 1.5 * invT + (1434.821679209) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[114] -= dqdci; // dwdot[N2H4]/d[O]
  J[123] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[139] -= dqdci; // dwdot[N2H4]/d[OH]
  J[148] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[354] -= dqdci; // dwdot[O]/d[N2H4]
  J[355] += dqdci; // dwdot[OH]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[580] += dqdci; // dwdot[OH]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 68: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 84900000 * exp(-(603.859998965664) * invT);
  dlnkfdT = (603.859998965664) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[8] += q;  // H2O
  wdot[12] += q; // N2H2
  wdot[14] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[108] += dqdci; // dwdot[H2O]/d[O]
  J[112] += dqdci; // dwdot[N2H2]/d[O]
  J[114] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[204] -= dqdci; // dwdot[O]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[N2H2]/d[H2O]
  J[214] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[314] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[354] -= dqdci; // dwdot[O]/d[N2H4]
  J[358] += dqdci; // dwdot[H2O]/d[N2H4]
  J[362] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT

  // reaction 69: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[14];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[14]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H4]/d[OH]
  J[148] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[214] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[223] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[5];
  J[355] -= dqdci; // dwdot[OH]/d[N2H4]
  J[358] += dqdci; // dwdot[H2O]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[8];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 70: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[16];
  k_f = 3.7 * exp(1.94 * logT - (820.243165261693) * invT);
  dlnkfdT = 1.94 * invT + (820.243165261693) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[14] -= q; // N2H4
  wdot[16] -= q; // NH2
  wdot[23] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[339] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[348] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[16];
  J[363] += dqdci; // dwdot[NH3]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[366] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[423] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[13];
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 71: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.50469119647) * invT);
  dlnkfdT = 3.13 * invT + (4458.50469119647) * invT2;
  // reverse
  phi_r = sc[17] * sc[23];
  Kc = exp(g_RT[10] + g_RT[14] - g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[17] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO2
  wdot[14] -= q; // N2H4
  wdot[17] += q; // HONO
  wdot[23] += q; // N2H3
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[264] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[273] += dqdci; // dwdot[N2H3]/d[NO2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[360] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[367] += dqdci; // dwdot[HONO]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[439] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[448] += dqdci; // dwdot[N2H3]/d[HONO]
  // d()/d[N2H3]
  dqdci = -k_r * sc[17];
  J[585] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[592] += dqdci; // dwdot[HONO]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 72: N2H3 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 3.6e+47 * exp(-10.38 * logT - (34708.8059212148) * invT);
  dlnkfdT = -10.38 * invT + (34708.8059212148) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = refC * exp(-g_RT[2] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23]) + (h_RT[2] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[73] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f;
  J[577] += dqdci; // dwdot[H]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 73: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 240 * exp(1.5 * logT);
  dlnkfdT = 1.5 * invT;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[37] += dqdci; // dwdot[N2H2]/d[H2]
  J[48] -= dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[73] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[301] += dqdci; // dwdot[H2]/d[N2H2]
  J[302] -= dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[576] += dqdci; // dwdot[H2]/d[N2H3]
  J[577] -= dqdci; // dwdot[H]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 74: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[18];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[16] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[16] += q; // NH2
  wdot[18] += q; // HNO
  wdot[23] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  J[123] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[16];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] += dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[473] -= dqdci; // dwdot[N2H3]/d[HNO]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[591] += dqdci; // dwdot[NH2]/d[N2H3]
  J[593] += dqdci; // dwdot[HNO]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 75: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 170 * exp(1.5 * logT - (-324.826357776947) * invT);
  dlnkfdT = 1.5 * invT + (-324.826357776947) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[112] += dqdci; // dwdot[N2H2]/d[O]
  J[123] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[N2H2]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[305] += dqdci; // dwdot[OH]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[580] += dqdci; // dwdot[OH]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 76: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.2 * exp(2 * logT - (-599.632978972904) * invT);
  dlnkfdT = 2 * invT + (-599.632978972904) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[N2H2]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[N2H2]/d[H2O]
  J[223] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[305] -= dqdci; // dwdot[OH]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 77: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[19] += q; // H2NN
  wdot[23] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[H2NN]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[219] += dqdci; // dwdot[H2NN]/d[H2O]
  J[223] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[H2NN]
  dqdci = -k_r * sc[8];
  J[480] -= dqdci; // dwdot[OH]/d[H2NN]
  J[483] += dqdci; // dwdot[H2O]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[498] -= dqdci; // dwdot[N2H3]/d[H2NN]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[594] += dqdci; // dwdot[H2NN]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 78: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[23];
  k_f = 0.92 * exp(1.94 * logT - (-579.957207339939) * invT);
  dlnkfdT = 1.94 * invT + (-579.957207339939) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(-g_RT[12] - g_RT[13] + g_RT[16] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[23]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // N2H2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[23] -= q; // N2H3
  // d()/d[N2H2]
  dqdci = -k_r * sc[13];
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[313] += dqdci; // dwdot[NH3]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[337] += dqdci; // dwdot[N2H2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[348] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[412] += dqdci; // dwdot[N2H2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[16];
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 79: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(-g_RT[13] + g_RT[16] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[23]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[19] += q; // H2NN
  wdot[23] -= q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[344] += dqdci; // dwdot[H2NN]/d[NH3]
  J[348] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[H2NN]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[13];
  J[488] += dqdci; // dwdot[NH3]/d[H2NN]
  J[491] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[498] -= dqdci; // dwdot[N2H3]/d[H2NN]
  // d()/d[N2H3]
  dqdci = +k_f * sc[16];
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[594] += dqdci; // dwdot[H2NN]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 80: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[23];
  k_f = 0.014 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[23]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H2O2]
  dqdci = -k_r * sc[12];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[162] += dqdci; // dwdot[N2H2]/d[H2O2]
  J[173] -= dqdci; // dwdot[N2H3]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[187] += dqdci; // dwdot[N2H2]/d[HO2]
  J[198] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[306] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[307] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[7];
  J[581] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[582] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 81: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[23];
  k_f = 0.92 * exp(1.94 * logT - (1069.88895316741) * invT);
  dlnkfdT = 1.94 * invT + (1069.88895316741) * invT2;
  // reverse
  phi_r = sc[3] * sc[14];
  Kc = exp(-g_RT[3] + g_RT[7] - g_RT[14] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[23]) + (h_RT[3] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[7] -= q;  // HO2
  wdot[14] += q; // N2H4
  wdot[23] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[89] += dqdci; // dwdot[N2H4]/d[O2]
  J[98] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[189] += dqdci; // dwdot[N2H4]/d[HO2]
  J[198] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[3];
  J[353] += dqdci; // dwdot[O2]/d[N2H4]
  J[357] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[364] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[7];
  J[578] += dqdci; // dwdot[O2]/d[N2H3]
  J[582] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[589] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[614] += dqdT; // dwdot[N2H4]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 82: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 1.8e+40 * exp(-8.41 * logT - (36912.4973762735) * invT);
  dlnkfdT = -8.41 * invT + (36912.4973762735) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 83: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 2.6e+40 * exp(-8.53 * logT - (36677.5958366759) * invT);
  dlnkfdT = -8.53 * invT + (36677.5958366759) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 84: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 4121 * exp(1.289 * logT - (-112.770854806838) * invT);
  dlnkfdT = 1.289 * invT + (-112.770854806838) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[N2H2]/d[H2]
  J[46] += dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[301] += dqdci; // dwdot[H2]/d[N2H2]
  J[302] -= dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 85: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 330 * exp(1.5 * logT - (249.847074572043) * invT);
  dlnkfdT = 1.5 * invT + (249.847074572043) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[112] -= dqdci; // dwdot[N2H2]/d[O]
  J[121] += dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[N2H2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[305] += dqdci; // dwdot[OH]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 86: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 5.923e-05 * exp(3.4 * logT - (-686.236567157896) * invT);
  dlnkfdT = 3.4 * invT + (-686.236567157896) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[N2H2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] -= dqdci; // dwdot[N2H2]/d[H2O]
  J[221] += dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[N2H2]
  dqdci = +k_f * sc[5];
  J[305] -= dqdci; // dwdot[OH]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 87: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 4000000 * exp(-(5996.3348218957) * invT);
  dlnkfdT = (5996.3348218957) * invT2;
  // reverse
  phi_r = sc[11] * sc[16];
  Kc = exp(g_RT[9] - g_RT[11] + g_RT[12] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[11] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[12] -= q; // N2H2
  wdot[16] += q; // NH2
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[237] -= dqdci; // dwdot[N2H2]/d[NO]
  J[241] += dqdci; // dwdot[NH2]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[16];
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[287] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[291] += dqdci; // dwdot[NH2]/d[N2O]
  // d()/d[N2H2]
  dqdci = +k_f * sc[9];
  J[309] -= dqdci; // dwdot[NO]/d[N2H2]
  J[311] += dqdci; // dwdot[N2O]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[316] += dqdci; // dwdot[NH2]/d[N2H2]
  // d()/d[NH2]
  dqdci = -k_r * sc[11];
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[411] += dqdci; // dwdot[N2O]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 88: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[15];
  k_f = 2.4 * exp(2 * logT - (-599.632978972904) * invT);
  dlnkfdT = 2 * invT + (-599.632978972904) * invT2;
  // reverse
  phi_r = sc[16] * sc[21];
  Kc = exp(g_RT[12] + g_RT[15] - g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[15]) + (h_RT[16] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[15] -= q; // NH
  wdot[16] += q; // NH2
  wdot[21] += q; // NNH
  // d()/d[N2H2]
  dqdci = +k_f * sc[15];
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[315] -= dqdci; // dwdot[NH]/d[N2H2]
  J[316] += dqdci; // dwdot[NH2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[387] -= dqdci; // dwdot[N2H2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci; // dwdot[NH2]/d[NH]
  J[396] += dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[16];
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[540] -= dqdci; // dwdot[NH]/d[NNH]
  J[541] += dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 89: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 8.8e-08 * exp(4.05 * logT - (-810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (-810.178831945599) * invT2;
  // reverse
  phi_r = sc[13] * sc[21];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[21] += q; // NNH
  // d()/d[N2H2]
  dqdci = +k_f * sc[16];
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[313] += dqdci; // dwdot[NH3]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[337] -= dqdci; // dwdot[N2H2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[346] += dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[13];
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 90: N2H2 <=> H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 2e+41 * exp(-9.38 * logT - (34446.3230761644) * invT);
  dlnkfdT = -9.38 * invT + (34446.3230761644) * invT2;
  // reverse
  phi_r = sc[19];
  Kc = exp(g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[19] += q; // H2NN
  // d()/d[N2H2]
  dqdci = +k_f;
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[319] += dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = -k_r;
  J[487] -= dqdci; // dwdot[N2H2]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT

  // reaction 91: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 9.6e+35 * exp(-7.57 * logT - (27597.0410378964) * invT);
  dlnkfdT = -7.57 * invT + (27597.0410378964) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[477] += dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 92: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 3.2e+31 * exp(-6.22 * logT - (26327.1737817382) * invT);
  dlnkfdT = -6.22 * invT + (26327.1737817382) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[477] += dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 93: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 1500000 * exp(-(2999.67957702859) * invT);
  dlnkfdT = (2999.67957702859) * invT2;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[10] += q; // NO2
  wdot[16] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[85] += dqdci; // dwdot[NO2]/d[O2]
  J[91] += dqdci; // dwdot[NH2]/d[O2]
  J[94] -= dqdci; // dwdot[H2NN]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[16];
  J[253] -= dqdci; // dwdot[O2]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[266] += dqdci; // dwdot[NH2]/d[NO2]
  J[269] -= dqdci; // dwdot[H2NN]/d[NO2]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[478] -= dqdci; // dwdot[O2]/d[H2NN]
  J[485] += dqdci; // dwdot[NO2]/d[H2NN]
  J[491] += dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 94: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 18000 * exp(0.97 * logT - (2249.7861016464) * invT);
  dlnkfdT = 0.97 * invT + (2249.7861016464) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[12];
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[319] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[487] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 95: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 480 * exp(1.5 * logT - (-449.97634256258) * invT);
  dlnkfdT = 1.5 * invT + (-449.97634256258) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[44] -= dqdci; // dwdot[H2NN]/d[H2]
  J[46] += dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[476] += dqdci; // dwdot[H2]/d[H2NN]
  J[477] -= dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 96: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 3200 * exp(1.03 * logT - (1359.84239600409) * invT);
  dlnkfdT = 1.03 * invT + (1359.84239600409) * invT2;
  // reverse
  phi_r = sc[9] * sc[16];
  Kc = exp(g_RT[4] - g_RT[9] - g_RT[16] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[9] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[16] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  J[119] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[16];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[241] += dqdci; // dwdot[NH2]/d[NO]
  J[244] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[479] -= dqdci; // dwdot[O]/d[H2NN]
  J[484] += dqdci; // dwdot[NO]/d[H2NN]
  J[491] += dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 97: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 330 * exp(1.5 * logT - (-449.97634256258) * invT);
  dlnkfdT = 1.5 * invT + (-449.97634256258) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[119] -= dqdci; // dwdot[H2NN]/d[O]
  J[121] += dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[H2NN]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[479] -= dqdci; // dwdot[O]/d[H2NN]
  J[480] += dqdci; // dwdot[OH]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 98: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[19];
  k_f = 2.4 * exp(2 * logT - (-599.934908972387) * invT);
  dlnkfdT = 2 * invT + (-599.934908972387) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[19]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[144] -= dqdci; // dwdot[H2NN]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[219] -= dqdci; // dwdot[H2NN]/d[H2O]
  J[221] += dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[480] -= dqdci; // dwdot[OH]/d[H2NN]
  J[483] += dqdci; // dwdot[H2O]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 99: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[19];
  k_f = 1.8 * exp(1.94 * logT - (-579.957207339939) * invT);
  dlnkfdT = 1.94 * invT + (-579.957207339939) * invT2;
  // reverse
  phi_r = sc[13] * sc[21];
  Kc = exp(-g_RT[13] + g_RT[16] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[19]) + (h_RT[13] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[344] -= dqdci; // dwdot[H2NN]/d[NH3]
  J[346] += dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[16];
  J[488] += dqdci; // dwdot[NH3]/d[H2NN]
  J[491] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[13];
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 100: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[19]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[169] -= dqdci; // dwdot[H2NN]/d[H2O2]
  J[171] += dqdci; // dwdot[NNH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[H2NN]/d[HO2]
  J[196] += dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[7];
  J[481] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[482] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[531] += dqdci; // dwdot[H2O2]/d[NNH]
  J[532] -= dqdci; // dwdot[HO2]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 101: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = refC * exp(-g_RT[0] - g_RT[2] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[0] + h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 102: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 240 * exp(1.5 * logT - (-449.724734229678) * invT);
  dlnkfdT = 1.5 * invT + (-449.724734229678) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[25] += dqdci; // dwdot[N2]/d[H2]
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[46] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 103: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[11] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[11] += q; // N2O
  wdot[21] -= q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[61] += dqdci; // dwdot[N2O]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[111] += dqdci; // dwdot[N2O]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[277] += dqdci; // dwdot[H]/d[N2O]
  J[279] -= dqdci; // dwdot[O]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[296] -= dqdci; // dwdot[NNH]/d[N2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[536] += dqdci; // dwdot[N2O]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 104: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 520000 * exp(0.388 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.388 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[15] += q; // NH
  wdot[21] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[15];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] += dqdci; // dwdot[NH]/d[NO]
  J[246] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[9];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[396] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[534] += dqdci; // dwdot[NO]/d[NNH]
  J[540] += dqdci; // dwdot[NH]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 105: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[146] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 106: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[5] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[21]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] -= dqdci;  // dwdot[OH]/d[N2]
  J[8] += dqdci;  // dwdot[H2O]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[146] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[200] += dqdci; // dwdot[N2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[221] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[5];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 107: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[7] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O2]/d[N2]
  J[7] += dqdci;  // dwdot[HO2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[75] += dqdci; // dwdot[N2]/d[O2]
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[96] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[196] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[528] -= dqdci; // dwdot[O2]/d[NNH]
  J[532] += dqdci; // dwdot[HO2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 108: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[21];
  k_f = 0.92 * exp(1.94 * logT - (-579.655277340457) * invT);
  dlnkfdT = 1.94 * invT + (-579.655277340457) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] - g_RT[13] + g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[21]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[13] += dqdci; // dwdot[NH3]/d[N2]
  J[16] -= dqdci; // dwdot[NH2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[325] += dqdci; // dwdot[N2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[346] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[400] += dqdci; // dwdot[N2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[16];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 109: HO2 + NNH <=> H2O2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[21];
  k_f = 0.014 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[7] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[21]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[H2O2]/d[N2]
  J[7] -= dqdci;  // dwdot[HO2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[0];
  J[150] += dqdci; // dwdot[N2]/d[H2O2]
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[171] -= dqdci; // dwdot[NNH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[196] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[7];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[531] += dqdci; // dwdot[H2O2]/d[NNH]
  J[532] -= dqdci; // dwdot[HO2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 110: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // NO
  wdot[18] += q; // HNO
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[18] += dqdci; // dwdot[HNO]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[243] += dqdci; // dwdot[HNO]/d[NO]
  J[246] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[450] += dqdci; // dwdot[N2]/d[HNO]
  J[459] -= dqdci; // dwdot[NO]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[471] -= dqdci; // dwdot[NNH]/d[HNO]
  // d()/d[NNH]
  dqdci = +k_f * sc[9];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[534] -= dqdci; // dwdot[NO]/d[NNH]
  J[543] += dqdci; // dwdot[HNO]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 111: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(-g_RT[5] + g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[9]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[7] -= q;  // HO2
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[184] -= dqdci; // dwdot[NO]/d[HO2]
  J[185] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[7];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[232] -= dqdci; // dwdot[HO2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[235] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[257] -= dqdci; // dwdot[HO2]/d[NO2]
  J[259] -= dqdci; // dwdot[NO]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT

  // reaction 113: NO + OH <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3.09e+17 * exp(-4.17 * logT - (815.714215269451) * invT);
  dlnkfdT = -4.17 * invT + (815.714215269451) * invT2;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[9] -= q;  // NO
  wdot[17] += q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[142] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[5];
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[242] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = -k_r;
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[434] -= dqdci; // dwdot[NO]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[617] += dqdT; // dwdot[HONO]/dT

  // reaction 114: HNO <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18];
  k_f = 1.826e+20 * exp(-3.008 * logT - (24094.0391195633) * invT);
  dlnkfdT = -3.008 * invT + (24094.0391195633) * invT2;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = refC * exp(-g_RT[2] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[2] + h_RT[9]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f;
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 115: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 968000 * exp(0.62 * logT - (181.157999689699) * invT);
  dlnkfdT = 0.62 * invT + (181.157999689699) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[34] += dqdci; // dwdot[NO]/d[H2]
  J[43] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[226] += dqdci; // dwdot[H2]/d[NO]
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[451] += dqdci; // dwdot[H2]/d[HNO]
  J[452] -= dqdci; // dwdot[H]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 116: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 22900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[118] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.00148 * exp(2.72 * logT - (2291.65372824135) * invT);
  dlnkfdT = 2.72 * invT + (2291.65372824135) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[17] += q; // HONO
  wdot[18] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[67] += dqdci; // dwdot[HONO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[HONO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[427] += dqdci; // dwdot[H]/d[HONO]
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] -= dqdci; // dwdot[HNO]/d[HONO]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 118: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 63000 * exp(0.39 * logT - (1903.17046224011) * invT);
  dlnkfdT = 0.39 * invT + (1903.17046224011) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO]/d[H2O]
  J[218] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[458] += dqdci; // dwdot[H2O]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 119: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 20000000 * exp(-(7495.92551816042) * invT);
  dlnkfdT = (7495.92551816042) * invT2;
  // reverse
  phi_r = sc[7] * sc[9];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[7] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[93] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[184] += dqdci; // dwdot[NO]/d[HO2]
  J[193] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[7];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[232] += dqdci; // dwdot[HO2]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[457] += dqdci; // dwdot[HO2]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 120: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 36.7 * exp(1.63 * logT - (-629.0208322559) * invT);
  dlnkfdT = 1.63 * invT + (-629.0208322559) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[18] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[13];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[238] += dqdci; // dwdot[NH3]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[9];
  J[334] += dqdci; // dwdot[NO]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[343] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[16];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[463] += dqdci; // dwdot[NH3]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 121: HNO + NO <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 8510000 * exp(-(14900.2555388111) * invT);
  dlnkfdT = (14900.2555388111) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(-g_RT[5] + g_RT[9] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[18] -= q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[136] += dqdci; // dwdot[N2O]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[18];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[293] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[459] -= dqdci; // dwdot[NO]/d[HNO]
  J[461] += dqdci; // dwdot[N2O]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 122: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 0.0442 * exp(2.64 * logT - (2033.80047651635) * invT);
  dlnkfdT = 2.64 * invT + (2033.80047651635) * invT2;
  // reverse
  phi_r = sc[9] * sc[17];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  wdot[18] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[17];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[242] += dqdci; // dwdot[HONO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[18];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[268] -= dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[9];
  J[434] += dqdci; // dwdot[NO]/d[HONO]
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] -= dqdci; // dwdot[HNO]/d[HONO]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 123: H + HONO <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 0.00189 * exp(2.83 * logT - (715.926350440375) * invT);
  dlnkfdT = 2.83 * invT + (715.926350440375) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[35] += dqdci; // dwdot[NO2]/d[H2]
  J[42] -= dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[60] += dqdci; // dwdot[NO2]/d[H]
  J[67] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[251] += dqdci; // dwdot[H2]/d[NO2]
  J[252] -= dqdci; // dwdot[H]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[426] += dqdci; // dwdot[H2]/d[HONO]
  J[427] -= dqdci; // dwdot[H]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 124: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 4300 * exp(0.98 * logT - (2048.09182982521) * invT);
  dlnkfdT = 0.98 * invT + (2048.09182982521) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[2] - g_RT[8] - g_RT[9] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[8] += q;  // H2O
  wdot[9] += q;  // NO
  wdot[17] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[67] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[202] -= dqdci; // dwdot[H]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO]/d[H2O]
  J[217] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[242] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[427] -= dqdci; // dwdot[H]/d[HONO]
  J[433] += dqdci; // dwdot[H2O]/d[HONO]
  J[434] += dqdci; // dwdot[NO]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 125: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 12100000 * exp(-(2999.17636036279) * invT);
  dlnkfdT = (2999.17636036279) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[110] += dqdci; // dwdot[NO2]/d[O]
  J[117] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  J[142] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[254] -= dqdci; // dwdot[O]/d[NO2]
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[429] -= dqdci; // dwdot[O]/d[HONO]
  J[430] += dqdci; // dwdot[OH]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 126: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  J[142] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[210] += dqdci; // dwdot[NO2]/d[H2O]
  J[217] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[8];
  J[255] -= dqdci; // dwdot[OH]/d[NO2]
  J[258] += dqdci; // dwdot[H2O]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[5];
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[433] += dqdci; // dwdot[H2O]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 127: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(-g_RT[10] + g_RT[15] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO2
  wdot[15] -= q; // NH
  wdot[16] += q; // NH2
  wdot[17] -= q; // HONO
  // d()/d[NO2]
  dqdci = -k_r * sc[16];
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  J[266] += dqdci; // dwdot[NH2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[NH]
  dqdci = +k_f * sc[17];
  J[385] += dqdci; // dwdot[NO2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci; // dwdot[NH2]/d[NH]
  J[392] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[HONO]
  dqdci = +k_f * sc[15];
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[440] -= dqdci; // dwdot[NH]/d[HONO]
  J[441] += dqdci; // dwdot[NH2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 128: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[17];
  k_f = 0.000317 * exp(2.83 * logT - (-1796.48349692285) * invT);
  dlnkfdT = 2.83 * invT + (-1796.48349692285) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] - g_RT[13] + g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[17]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[17] -= q; // HONO
  // d()/d[NO2]
  dqdci = -k_r * sc[13];
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[263] += dqdci; // dwdot[NH3]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[335] += dqdci; // dwdot[NO2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[342] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[HONO]
  dqdci = +k_f * sc[16];
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[438] += dqdci; // dwdot[NH3]/d[HONO]
  J[441] -= dqdci; // dwdot[NH2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 129: 2 HONO => H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[17] * sc[17]);
  k_f = 3.49e-07 * exp(3.64 * logT - (6108.35085170383) * invT);
  dlnkfdT = 3.64 * invT + (6108.35085170383) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;      // H2O
  wdot[9] += q;      // NO
  wdot[10] += q;     // NO2
  wdot[17] -= 2 * q; // HONO
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[17];
  J[433] += dqdci;      // dwdot[H2O]/d[HONO]
  J[434] += dqdci;      // dwdot[NO]/d[HONO]
  J[435] += dqdci;      // dwdot[NO2]/d[HONO]
  J[442] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[608] += dqdT;      // dwdot[H2O]/dT
  J[609] += dqdT;      // dwdot[NO]/dT
  J[610] += dqdT;      // dwdot[NO2]/dT
  J[617] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 131: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 480 * exp(1.5 * logT - (784.917355322202) * invT);
  dlnkfdT = 1.5 * invT + (784.917355322202) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[43] += dqdci; // dwdot[HNO]/d[H2]
  J[47] -= dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  J[72] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[451] += dqdci; // dwdot[H2]/d[HNO]
  J[452] -= dqdci; // dwdot[H]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[551] += dqdci; // dwdot[H2]/d[H2NO]
  J[552] -= dqdci; // dwdot[H]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 132: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[16] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[16] += q; // NH2
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  J[72] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[422] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[552] -= dqdci; // dwdot[H]/d[H2NO]
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[566] += dqdci; // dwdot[NH2]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 133: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 330 * exp(1.5 * logT - (244.965872913738) * invT);
  dlnkfdT = 1.5 * invT + (244.965872913738) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  J[122] -= dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[554] -= dqdci; // dwdot[O]/d[H2NO]
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 134: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[22];
  k_f = 2.4 * exp(2 * logT - (599.934908972387) * invT);
  dlnkfdT = 2 * invT + (599.934908972387) * invT2;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[22]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[218] += dqdci; // dwdot[HNO]/d[H2O]
  J[222] -= dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[458] += dqdci; // dwdot[H2O]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[5];
  J[555] -= dqdci; // dwdot[OH]/d[H2NO]
  J[558] += dqdci; // dwdot[H2O]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 135: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[22];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[17] * sc[18];
  Kc = exp(g_RT[10] - g_RT[17] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[22]) + (h_RT[17] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[268] += dqdci; // dwdot[HNO]/d[NO2]
  J[272] -= dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[18];
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] += dqdci; // dwdot[HNO]/d[HONO]
  J[447] -= dqdci; // dwdot[H2NO]/d[HONO]
  // d()/d[HNO]
  dqdci = -k_r * sc[17];
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[560] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[567] += dqdci; // dwdot[HONO]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 136: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-291.865666166737) * invT);
  dlnkfdT = 1.94 * invT + (-291.865666166737) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(-g_RT[13] + g_RT[16] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[22]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[343] += dqdci; // dwdot[HNO]/d[NH3]
  J[347] -= dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  J[422] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[13];
  J[463] += dqdci; // dwdot[NH3]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[16];
  J[563] += dqdci; // dwdot[NH3]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 137: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 0.00023 * exp(2.994 * logT - (8303.08505011119) * invT);
  dlnkfdT = 2.994 * invT + (8303.08505011119) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  J[97] -= dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[18];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[HNO]/d[HO2]
  J[197] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[457] += dqdci; // dwdot[HO2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[553] -= dqdci; // dwdot[O2]/d[H2NO]
  J[557] += dqdci; // dwdot[HO2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 138: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[22];
  k_f = 0.336 * exp(2 * logT - (-721.612698763968) * invT);
  dlnkfdT = 2 * invT + (-721.612698763968) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[22]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[168] += dqdci; // dwdot[HNO]/d[H2O2]
  J[172] -= dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[HNO]/d[HO2]
  J[197] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[456] += dqdci; // dwdot[H2O2]/d[HNO]
  J[457] -= dqdci; // dwdot[HO2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[7];
  J[556] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[557] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 139: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 88500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[60] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[252] -= dqdci; // dwdot[H]/d[NO2]
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT

  // reaction 140: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 3920000 * exp(-(-119.765566461523) * invT);
  dlnkfdT = (-119.765566461523) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[85] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[110] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[228] += dqdci; // dwdot[O2]/d[NO]
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[4];
  J[253] += dqdci; // dwdot[O2]/d[NO2]
  J[254] -= dqdci; // dwdot[O]/d[NO2]
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT

  // reaction 141: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[10];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[3] * sc[17];
  Kc = exp(-g_RT[3] + g_RT[7] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[3] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[7] -= q;  // HO2
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[17];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[85] -= dqdci; // dwdot[NO2]/d[O2]
  J[92] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[185] -= dqdci; // dwdot[NO2]/d[HO2]
  J[192] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[7];
  J[253] += dqdci; // dwdot[O2]/d[NO2]
  J[257] -= dqdci; // dwdot[HO2]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[3];
  J[428] += dqdci; // dwdot[O2]/d[HONO]
  J[432] -= dqdci; // dwdot[HO2]/d[HONO]
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT

  // reaction 142: 2 NO2 => 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 1630000 * exp(-(13098.7398752302) * invT);
  dlnkfdT = (13098.7398752302) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;      // O2
  wdot[9] += 2 * q;  // NO
  wdot[10] -= 2 * q; // NO2
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[253] += dqdci;      // dwdot[O2]/d[NO2]
  J[259] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[260] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[609] += 2 * dqdT;  // dwdot[NO]/dT
  J[610] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 144: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 25300 * exp(-(2289.64086157813) * invT);
  dlnkfdT = (2289.64086157813) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[61] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[277] -= dqdci; // dwdot[H]/d[N2O]
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 145: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 500000000 * exp(-(9108.23171539874) * invT);
  dlnkfdT = (9108.23171539874) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[61] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[277] -= dqdci; // dwdot[H]/d[N2O]
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 146: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 66200000 * exp(-(13400.669874713) * invT);
  dlnkfdT = (13400.669874713) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;     // O
  wdot[9] += 2 * q; // NO
  wdot[11] -= q;    // N2O
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[104] -= dqdci;     // dwdot[O]/d[O]
  J[109] += 2 * dqdci; // dwdot[NO]/d[O]
  J[111] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[9];
  J[229] -= dqdci;     // dwdot[O]/d[NO]
  J[234] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[236] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[279] -= dqdci;     // dwdot[O]/d[N2O]
  J[284] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[286] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[604] -= dqdT;     // dwdot[O]/dT
  J[609] += 2 * dqdT; // dwdot[NO]/dT
  J[611] -= dqdT;     // dwdot[N2O]/dT

  // reaction 147: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 102000000 * exp(-(14100.1511045149) * invT);
  dlnkfdT = (14100.1511045149) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[75] += dqdci; // dwdot[N2]/d[O2]
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[86] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[111] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[278] += dqdci; // dwdot[O2]/d[N2O]
  J[279] -= dqdci; // dwdot[O]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 148: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 1e-08 * exp(4.72 * logT - (18397.6163983205) * invT);
  dlnkfdT = 4.72 * invT + (18397.6163983205) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] -= q;  // OH
  wdot[7] += q;  // HO2
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] -= dqdci;  // dwdot[OH]/d[N2]
  J[7] += dqdci;  // dwdot[HO2]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[186] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[5];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[280] -= dqdci; // dwdot[OH]/d[N2O]
  J[282] += dqdci; // dwdot[HO2]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 149: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 0.525 * exp(2.23 * logT - (23298.9567875918) * invT);
  dlnkfdT = 2.23 * invT + (23298.9567875918) * invT2;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[10] += dqdci; // dwdot[NO2]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[235] += dqdci; // dwdot[NO2]/d[NO]
  J[236] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[250] += dqdci; // dwdot[N2]/d[NO2]
  J[259] -= dqdci; // dwdot[NO]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[261] -= dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[9];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[285] += dqdci; // dwdot[NO2]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  amrex::Real c_R[24], dcRdT[24], e_RT[24];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 24; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[600 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 24; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 24; ++m) {
      dehmixdc += eh_RT[m] * J[k * 25 + m];
    }
    J[k * 25 + 24] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[624] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[24];

  for (int k = 0; k < 24; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 24; k++) {
    J[600 + k] *= 1.e-6;
    J[k * 25 + 24] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 625; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[24];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 24; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[24];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[24];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[24];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 8: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[1] + (1.2 - 1) * sc[3] +
          (7.7 - 1) * sc[6] + (7.65 - 1) * sc[8];
  // forward
  phi_f = sc[6];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3344021476) * invT);
  dlnkfdT = 0.9 * invT + (24531.3344021476) * invT2;
  // pressure-fall-off
  k_0 = 2.49e+24 * exp(-2.3 * logT - (24531.3344021476) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3344021476) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = refC * exp(-2.000000 * g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6]) + (2.000000 * h_RT[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += 2 * q; // OH
  wdot[6] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[5] += 2 * dqdci; // dwdot[OH]/d[N2]
    J[6] -= dqdci;     // dwdot[H2O2]/d[N2]
    // d()/d[H2]
    dqdci = (3.7 - 1) * dcdc_fac;
    J[30] += 2 * dqdci; // dwdot[OH]/d[H2]
    J[31] -= dqdci;     // dwdot[H2O2]/d[H2]
    // d()/d[O2]
    dqdci = (1.2 - 1) * dcdc_fac;
    J[80] += 2 * dqdci; // dwdot[OH]/d[O2]
    J[81] -= dqdci;     // dwdot[H2O2]/d[O2]
    // d()/d[OH]
    dqdci = -k_r * 2.000000 * sc[5];
    J[130] += 2 * dqdci; // dwdot[OH]/d[OH]
    J[131] -= dqdci;     // dwdot[H2O2]/d[OH]
    // d()/d[H2O2]
    dqdci = (7.7 - 1) * dcdc_fac + k_f;
    J[155] += 2 * dqdci; // dwdot[OH]/d[H2O2]
    J[156] -= dqdci;     // dwdot[H2O2]/d[H2O2]
    // d()/d[H2O]
    dqdci = (7.65 - 1) * dcdc_fac;
    J[205] += 2 * dqdci; // dwdot[OH]/d[H2O]
    J[206] -= dqdci;     // dwdot[H2O2]/d[H2O]
  } else {
    dqdc[0] = 1.5 * dcdc_fac;
    dqdc[1] = 3.7 * dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 1.2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac - k_r * 2.000000 * sc[5];
    dqdc[6] = 7.7 * dcdc_fac + k_f;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 7.65 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 5] += 2 * dqdc[k];
      J[25 * k + 6] -= dqdc[k];
    }
  }
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[606] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 21: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.3 - 1) * sc[1] + (10 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 4650000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 1.737e+19 * exp(-1.23 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.23 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[2] + g_RT[3] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[7] += q; // HO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (1.3 - 1) * dcdc_fac;
    J[27] -= dqdci; // dwdot[H]/d[H2]
    J[28] -= dqdci; // dwdot[O2]/d[H2]
    J[32] += dqdci; // dwdot[HO2]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[52] -= dqdci; // dwdot[H]/d[H]
    J[53] -= dqdci; // dwdot[O2]/d[H]
    J[57] += dqdci; // dwdot[HO2]/d[H]
    // d()/d[O2]
    dqdci = +k_f * sc[2];
    J[77] -= dqdci; // dwdot[H]/d[O2]
    J[78] -= dqdci; // dwdot[O2]/d[O2]
    J[82] += dqdci; // dwdot[HO2]/d[O2]
    // d()/d[HO2]
    dqdci = -k_r;
    J[177] -= dqdci; // dwdot[H]/d[HO2]
    J[178] -= dqdci; // dwdot[O2]/d[HO2]
    J[182] += dqdci; // dwdot[HO2]/d[HO2]
    // d()/d[H2O]
    dqdci = (10 - 1) * dcdc_fac;
    J[202] -= dqdci; // dwdot[H]/d[H2O]
    J[203] -= dqdci; // dwdot[O2]/d[H2O]
    J[207] += dqdci; // dwdot[HO2]/d[H2O]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 1.3 * dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[3];
    dqdc[3] = dcdc_fac + k_f * sc[2];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac - k_r;
    dqdc[8] = 10 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 2] -= dqdc[k];
      J[25 * k + 3] -= dqdc[k];
      J[25 * k + 7] += dqdc[k];
    }
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 112: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.5 - 1) * sc[3] + (10 - 1) * sc[8];
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 1300000000 * exp(-0.75 * logT);
  dlnkfdT = -0.75 * invT;
  // pressure-fall-off
  k_0 = 4.72e+24 * exp(-2.87 * logT - (779.985831997315) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.87 * invT + (779.985831997315) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[10];
  Kc = refCinv * exp(g_RT[4] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.7 - 1) * dcdc_fac;
    J[4] -= dqdci;  // dwdot[O]/d[N2]
    J[9] -= dqdci;  // dwdot[NO]/d[N2]
    J[10] += dqdci; // dwdot[NO2]/d[N2]
    // d()/d[O2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[79] -= dqdci; // dwdot[O]/d[O2]
    J[84] -= dqdci; // dwdot[NO]/d[O2]
    J[85] += dqdci; // dwdot[NO2]/d[O2]
    // d()/d[O]
    dqdci = +k_f * sc[9];
    J[104] -= dqdci; // dwdot[O]/d[O]
    J[109] -= dqdci; // dwdot[NO]/d[O]
    J[110] += dqdci; // dwdot[NO2]/d[O]
    // d()/d[H2O]
    dqdci = (10 - 1) * dcdc_fac;
    J[204] -= dqdci; // dwdot[O]/d[H2O]
    J[209] -= dqdci; // dwdot[NO]/d[H2O]
    J[210] += dqdci; // dwdot[NO2]/d[H2O]
    // d()/d[NO]
    dqdci = +k_f * sc[4];
    J[229] -= dqdci; // dwdot[O]/d[NO]
    J[234] -= dqdci; // dwdot[NO]/d[NO]
    J[235] += dqdci; // dwdot[NO2]/d[NO]
    // d()/d[NO2]
    dqdci = -k_r;
    J[254] -= dqdci; // dwdot[O]/d[NO2]
    J[259] -= dqdci; // dwdot[NO]/d[NO2]
    J[260] += dqdci; // dwdot[NO2]/d[NO2]
  } else {
    dqdc[0] = 1.7 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 1.5 * dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[9];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 10 * dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[4];
    dqdc[10] = dcdc_fac - k_r;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 4] -= dqdc[k];
      J[25 * k + 9] -= dqdc[k];
      J[25 * k + 10] += dqdc[k];
    }
  }
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT

  // reaction 143: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (1.4 - 1) * sc[3] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[11];
  k_f = 99000000000 * exp(-(29136.7833919257) * invT);
  dlnkfdT = (29136.7833919257) * invT2;
  // pressure-fall-off
  k_0 = 602000000000000 * exp(-(28906.8083434863) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28906.8083434863) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1);
  Fcent2 = 1 * exp(-T / 10000000);
  Fcent3 = exp(-10000000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1 - Fcent2 / 10000000 + Fcent3 * 10000000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = refC * exp(-g_RT[0] - g_RT[4] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[11] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.7 - 1) * dcdc_fac - k_r * sc[4];
    J[0] += dqdci;  // dwdot[N2]/d[N2]
    J[4] += dqdci;  // dwdot[O]/d[N2]
    J[11] -= dqdci; // dwdot[N2O]/d[N2]
    // d()/d[O2]
    dqdci = (1.4 - 1) * dcdc_fac;
    J[75] += dqdci; // dwdot[N2]/d[O2]
    J[79] += dqdci; // dwdot[O]/d[O2]
    J[86] -= dqdci; // dwdot[N2O]/d[O2]
    // d()/d[O]
    dqdci = -k_r * sc[0];
    J[100] += dqdci; // dwdot[N2]/d[O]
    J[104] += dqdci; // dwdot[O]/d[O]
    J[111] -= dqdci; // dwdot[N2O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[200] += dqdci; // dwdot[N2]/d[H2O]
    J[204] += dqdci; // dwdot[O]/d[H2O]
    J[211] -= dqdci; // dwdot[N2O]/d[H2O]
    // d()/d[N2O]
    dqdci = +k_f;
    J[275] += dqdci; // dwdot[N2]/d[N2O]
    J[279] += dqdci; // dwdot[O]/d[N2O]
    J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  } else {
    dqdc[0] = 1.7 * dcdc_fac - k_r * sc[4];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 1.4 * dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * sc[0];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 12 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac + k_f;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 0] += dqdc[k];
      J[25 * k + 4] += dqdc[k];
      J[25 * k + 11] -= dqdc[k];
    }
  }
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 0: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[1];
  k_f = 45770000000000 * exp(-1.4 * logT - (52535.8702316793) * invT);
  dlnkfdT = -1.4 * invT + (52535.8702316793) * invT2;
  // reverse
  phi_r = (sc[2] * sc[2]);
  Kc = refC * exp(g_RT[1] - 2.000000 * g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1]) + (2.000000 * h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H2
  wdot[2] += 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor + k_f;
    J[26] -= dqdci;     // dwdot[H2]/d[H2]
    J[27] += 2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = -k_r * 2.000000 * sc[2];
    J[51] -= dqdci;     // dwdot[H2]/d[H]
    J[52] += 2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[201] -= dqdci;     // dwdot[H2]/d[H2O]
    J[202] += 2 * dqdci; // dwdot[H]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor + k_f;
    dqdc[2] = q_nocor - k_r * 2.000000 * sc[2];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = 12 * q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 1] -= dqdc[k];
      J[25 * k + 2] += 2 * dqdc[k];
    }
  }
  J[601] -= dqdT;     // dwdot[H2]/dT
  J[602] += 2 * dqdT; // dwdot[H]/dT

  // reaction 3: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 6165 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[4] -= 2 * q; // O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[28] += dqdci;      // dwdot[O2]/d[H2]
    J[29] += -2 * dqdci; // dwdot[O]/d[H2]
    // d()/d[O2]
    dqdci = -k_r;
    J[78] += dqdci;      // dwdot[O2]/d[O2]
    J[79] += -2 * dqdci; // dwdot[O]/d[O2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[4];
    J[103] += dqdci;      // dwdot[O2]/d[O]
    J[104] += -2 * dqdci; // dwdot[O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[203] += dqdci;      // dwdot[O2]/d[H2O]
    J[204] += -2 * dqdci; // dwdot[O]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor - k_r;
    dqdc[4] = q_nocor + k_f * 2.000000 * sc[4];
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = 12 * q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 3] += dqdc[k];
      J[25 * k + 4] += -2 * dqdc[k];
    }
  }
  J[603] += dqdT;      // dwdot[O2]/dT
  J[604] += -2 * dqdT; // dwdot[O]/dT

  // reaction 5: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[1] + (3.65 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 35000000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] -= q; // OH
  wdot[8] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0.73 - 1) * q_nocor;
    J[27] -= dqdci; // dwdot[H]/d[H2]
    J[30] -= dqdci; // dwdot[OH]/d[H2]
    J[33] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[5];
    J[52] -= dqdci; // dwdot[H]/d[H]
    J[55] -= dqdci; // dwdot[OH]/d[H]
    J[58] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = +k_f * sc[2];
    J[127] -= dqdci; // dwdot[H]/d[OH]
    J[130] -= dqdci; // dwdot[OH]/d[OH]
    J[133] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (3.65 - 1) * q_nocor - k_r;
    J[202] -= dqdci; // dwdot[H]/d[H2O]
    J[205] -= dqdci; // dwdot[OH]/d[H2O]
    J[208] += dqdci; // dwdot[H2O]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 0.73 * q_nocor;
    dqdc[2] = q_nocor + k_f * sc[5];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor + k_f * sc[2];
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = 3.65 * q_nocor - k_r;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 2] -= dqdc[k];
      J[25 * k + 5] -= dqdc[k];
      J[25 * k + 8] += dqdc[k];
    }
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 7: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[1] + (12 - 1) * sc[8];
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 4714000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[27] -= dqdci; // dwdot[H]/d[H2]
    J[29] -= dqdci; // dwdot[O]/d[H2]
    J[30] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[4];
    J[52] -= dqdci; // dwdot[H]/d[H]
    J[54] -= dqdci; // dwdot[O]/d[H]
    J[55] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[2];
    J[102] -= dqdci; // dwdot[H]/d[O]
    J[104] -= dqdci; // dwdot[O]/d[O]
    J[105] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[127] -= dqdci; // dwdot[H]/d[OH]
    J[129] -= dqdci; // dwdot[O]/d[OH]
    J[130] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[202] -= dqdci; // dwdot[H]/d[H2O]
    J[204] -= dqdci; // dwdot[O]/d[H2O]
    J[205] += dqdci; // dwdot[OH]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = 2.5 * q_nocor;
    dqdc[2] = q_nocor + k_f * sc[4];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor + k_f * sc[2];
    dqdc[5] = q_nocor - k_r;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = 12 * q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 2] -= dqdc[k];
      J[25 * k + 4] -= dqdc[k];
      J[25 * k + 5] += dqdc[k];
    }
  }
  J[602] -= dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 22: O + OH + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[5];
  k_f = 10000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(g_RT[4] + g_RT[5] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[5]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[5] -= q; // OH
  wdot[7] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[5];
    J[104] -= dqdci; // dwdot[O]/d[O]
    J[105] -= dqdci; // dwdot[OH]/d[O]
    J[107] += dqdci; // dwdot[HO2]/d[O]
    // d()/d[OH]
    dqdci = +k_f * sc[4];
    J[129] -= dqdci; // dwdot[O]/d[OH]
    J[130] -= dqdci; // dwdot[OH]/d[OH]
    J[132] += dqdci; // dwdot[HO2]/d[OH]
    // d()/d[HO2]
    dqdci = -k_r;
    J[179] -= dqdci; // dwdot[O]/d[HO2]
    J[180] -= dqdci; // dwdot[OH]/d[HO2]
    J[182] += dqdci; // dwdot[HO2]/d[HO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor + k_f * sc[5];
    dqdc[5] = q_nocor + k_f * sc[4];
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor - k_r;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 4] -= dqdc[k];
      J[25 * k + 5] -= dqdc[k];
      J[25 * k + 7] += dqdc[k];
    }
  }
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 130: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[22];
  k_f = 2.8e+18 * exp(-2.83 * logT - (32696.4927963283) * invT);
  dlnkfdT = -2.83 * invT + (32696.4927963283) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = refC * exp(-g_RT[2] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[2] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[18];
    J[52] += dqdci; // dwdot[H]/d[H]
    J[68] += dqdci; // dwdot[HNO]/d[H]
    J[72] -= dqdci; // dwdot[H2NO]/d[H]
    // d()/d[HNO]
    dqdci = -k_r * sc[2];
    J[452] += dqdci; // dwdot[H]/d[HNO]
    J[468] += dqdci; // dwdot[HNO]/d[HNO]
    J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[552] += dqdci; // dwdot[H]/d[H2NO]
    J[568] += dqdci; // dwdot[HNO]/d[H2NO]
    J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor - k_r * sc[18];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor - k_r * sc[2];
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor + k_f;
    dqdc[23] = q_nocor;
    for (int k = 0; k < 24; k++) {
      J[25 * k + 2] += dqdc[k];
      J[25 * k + 18] += dqdc[k];
      J[25 * k + 22] -= dqdc[k];
    }
  }
  J[602] += dqdT; // dwdot[H]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 0.0508 * exp(2.67 * logT - (3166.24429340995) * invT);
  dlnkfdT = 2.67 * invT + (3166.24429340995) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[26] -= dqdci; // dwdot[H2]/d[H2]
  J[27] += dqdci; // dwdot[H]/d[H2]
  J[29] -= dqdci; // dwdot[O]/d[H2]
  J[30] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[51] -= dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[101] -= dqdci; // dwdot[H2]/d[O]
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[601] -= dqdT; // dwdot[H2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 43800000 * exp(-(3517.48952614165) * invT);
  dlnkfdT = (3517.48952614165) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[5] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H2
  wdot[2] += q; // H
  wdot[5] -= q; // OH
  wdot[8] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[5];
  J[26] -= dqdci; // dwdot[H2]/d[H2]
  J[27] += dqdci; // dwdot[H]/d[H2]
  J[30] -= dqdci; // dwdot[OH]/d[H2]
  J[33] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[51] -= dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[201] -= dqdci; // dwdot[H2]/d[H2O]
  J[202] += dqdci; // dwdot[H]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[601] -= dqdT; // dwdot[H2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 4: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 114000000 * exp(-(7692.18001782426) * invT);
  dlnkfdT = (7692.18001782426) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[2] + g_RT[3] - g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[3] -= q; // O2
  wdot[4] += q; // O
  wdot[5] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[53] -= dqdci; // dwdot[O2]/d[H]
  J[54] += dqdci; // dwdot[O]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[2];
  J[77] -= dqdci; // dwdot[H]/d[O2]
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[102] -= dqdci; // dwdot[H]/d[O]
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[129] += dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT

  // reaction 6: H2O + O <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 67 * exp(1.704 * logT - (7541.61759141549) * invT);
  dlnkfdT = 1.704 * invT + (7541.61759141549) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[5] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (2.000000 * h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;     // O
  wdot[5] += 2 * q; // OH
  wdot[8] -= q;     // H2O
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[104] -= dqdci;     // dwdot[O]/d[O]
  J[105] += 2 * dqdci; // dwdot[OH]/d[O]
  J[108] -= dqdci;     // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[5];
  J[129] -= dqdci;     // dwdot[O]/d[OH]
  J[130] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci;     // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[4];
  J[204] -= dqdci;     // dwdot[O]/d[H2O]
  J[205] += 2 * dqdci; // dwdot[OH]/d[H2O]
  J[208] -= dqdci;     // dwdot[H2O]/d[H2O]
  // d()/dT
  J[604] -= dqdT;     // dwdot[O]/dT
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[608] -= dqdT;     // dwdot[H2O]/dT

  // reaction 9: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[2] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // H
  wdot[5] += q; // OH
  wdot[6] -= q; // H2O2
  wdot[8] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[56] -= dqdci; // dwdot[H2O2]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[152] -= dqdci; // dwdot[H]/d[H2O2]
  J[155] += dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[H]/d[H2O]
  J[205] += dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 10: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 21500 * exp(1 * logT - (3019.30502699498) * invT);
  dlnkfdT = 1 * invT + (3019.30502699498) * invT2;
  // reverse
  phi_r = sc[1] * sc[7];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[1] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[7];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[31] -= dqdci; // dwdot[H2O2]/d[H2]
  J[32] += dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[56] -= dqdci; // dwdot[H2O2]/d[H]
  J[57] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[151] += dqdci; // dwdot[H2]/d[H2O2]
  J[152] -= dqdci; // dwdot[H]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[176] += dqdci; // dwdot[H2]/d[HO2]
  J[177] -= dqdci; // dwdot[H]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 11: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 9.55 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[5] * sc[7];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[H2O2]/d[O]
  J[107] += dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[7];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[154] -= dqdci; // dwdot[O]/d[H2O2]
  J[155] += dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[179] -= dqdci; // dwdot[O]/d[HO2]
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT

  // reaction 12: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 1740000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  wdot[8] += q; // H2O
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[155] -= dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[7];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[207] += dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 13: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 75900000 * exp(-(3657.88697590116) * invT);
  dlnkfdT = (3657.88697590116) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(g_RT[5] + g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q; // OH
  wdot[6] -= q; // H2O2
  wdot[7] += q; // HO2
  wdot[8] += q; // H2O
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[155] -= dqdci; // dwdot[OH]/d[H2O2]
  J[156] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] += dqdci; // dwdot[HO2]/d[H2O2]
  J[158] += dqdci; // dwdot[H2O]/d[H2O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[8];
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[181] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[7];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[206] -= dqdci; // dwdot[H2O2]/d[H2O]
  J[207] += dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[606] -= dqdT; // dwdot[H2O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 14: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 70790000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (2.000000 * h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;     // H
  wdot[5] += 2 * q; // OH
  wdot[7] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[52] -= dqdci;     // dwdot[H]/d[H]
  J[55] += 2 * dqdci; // dwdot[OH]/d[H]
  J[57] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[5];
  J[127] -= dqdci;     // dwdot[H]/d[OH]
  J[130] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[177] -= dqdci;     // dwdot[H]/d[HO2]
  J[180] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[602] -= dqdT;     // dwdot[H]/dT
  J[605] += 2 * dqdT; // dwdot[OH]/dT
  J[607] -= dqdT;     // dwdot[HO2]/dT

  // reaction 15: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 11400 * exp(1.083 * logT - (278.671325189338) * invT);
  dlnkfdT = 1.083 * invT + (278.671325189338) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H2
  wdot[2] -= q; // H
  wdot[3] += q; // O2
  wdot[7] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[28] += dqdci; // dwdot[O2]/d[H2]
  J[32] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[53] += dqdci; // dwdot[O2]/d[H]
  J[57] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[1];
  J[76] += dqdci; // dwdot[H2]/d[O2]
  J[77] -= dqdci; // dwdot[H]/d[O2]
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[176] += dqdci; // dwdot[H2]/d[HO2]
  J[177] -= dqdci; // dwdot[H]/d[HO2]
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT

  // reaction 16: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 32500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // O
  wdot[5] += q; // OH
  wdot[7] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[107] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[179] -= dqdci; // dwdot[O]/d[HO2]
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 7000000 * exp(-(-549.995687057926) * invT);
  dlnkfdT = (-549.995687057926) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] -= q; // OH
  wdot[7] -= q; // HO2
  wdot[8] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[80] -= dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[83] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[203] += dqdci; // dwdot[O2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[207] -= dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 18: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 450000000 * exp(-(5499.96190274592) * invT);
  dlnkfdT = (5499.96190274592) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(-g_RT[3] + g_RT[5] + g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[5] -= q; // OH
  wdot[7] -= q; // HO2
  wdot[8] += q; // H2O
  // d()/d[O2]
  dqdci = -k_r * sc[8];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[80] -= dqdci; // dwdot[OH]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[83] += dqdci; // dwdot[H2O]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] += dqdci; // dwdot[O2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[183] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[203] += dqdci; // dwdot[O2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[207] -= dqdci; // dwdot[HO2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[7] * sc[7]);
  k_f = 100000000 * exp(-(5555.95985331667) * invT);
  dlnkfdT = (5555.95985331667) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] += q;     // H2O2
  wdot[7] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[78] += dqdci;      // dwdot[O2]/d[O2]
  J[81] += dqdci;      // dwdot[H2O2]/d[O2]
  J[82] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[153] += dqdci;      // dwdot[O2]/d[H2O2]
  J[156] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[157] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[7];
  J[178] += dqdci;      // dwdot[O2]/d[HO2]
  J[181] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[182] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[606] += dqdT;      // dwdot[H2O2]/dT
  J[607] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[7] * sc[7]);
  k_f = 190000 * exp(-(-708.997056952244) * invT);
  dlnkfdT = (-708.997056952244) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(-g_RT[3] - g_RT[6] + 2.000000 * g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] += q;     // H2O2
  wdot[7] -= 2 * q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[78] += dqdci;      // dwdot[O2]/d[O2]
  J[81] += dqdci;      // dwdot[H2O2]/d[O2]
  J[82] += -2 * dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[153] += dqdci;      // dwdot[O2]/d[H2O2]
  J[156] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[157] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[7];
  J[178] += dqdci;      // dwdot[O2]/d[HO2]
  J[181] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[182] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[606] += dqdT;      // dwdot[H2O2]/dT
  J[607] += -2 * dqdT; // dwdot[HO2]/dT

  // reaction 23: NH3 <=> H + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 3.497e+30 * exp(-5.224 * logT - (55939.2755075164) * invT);
  dlnkfdT = -5.224 * invT + (55939.2755075164) * invT2;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = refC * exp(-g_RT[2] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[2] + h_RT[16]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[63] -= dqdci; // dwdot[NH3]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f;
  J[327] += dqdci; // dwdot[H]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 24: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  dlnkfdT = (1836.74083018723) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[40] += dqdci; // dwdot[NH]/d[H2]
  J[41] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[65] += dqdci; // dwdot[NH]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[1];
  J[376] += dqdci; // dwdot[H2]/d[NH]
  J[377] -= dqdci; // dwdot[H]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[401] += dqdci; // dwdot[H2]/d[NH2]
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 25: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 0.01963 * exp(2.854 * logT - (4287.51166815603) * invT);
  dlnkfdT = 2.854 * invT + (4287.51166815603) * invT2;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[38] -= dqdci; // dwdot[NH3]/d[H2]
  J[41] += dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[63] -= dqdci; // dwdot[NH3]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[326] += dqdci; // dwdot[H2]/d[NH3]
  J[327] -= dqdci; // dwdot[H]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[1];
  J[401] += dqdci; // dwdot[H2]/d[NH2]
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 26: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[13];
  k_f = 0.1559 * exp(2.372 * logT - (59.8324615641812) * invT);
  dlnkfdT = 2.372 * invT + (59.8324615641812) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[NH3]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[213] -= dqdci; // dwdot[NH3]/d[H2O]
  J[216] += dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH3]
  dqdci = +k_f * sc[5];
  J[330] -= dqdci; // dwdot[OH]/d[NH3]
  J[333] += dqdci; // dwdot[H2O]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[8];
  J[405] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 27: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 0.000443 * exp(3.18 * logT - (3391.63503802389) * invT);
  dlnkfdT = 3.18 * invT + (3391.63503802389) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[113] -= dqdci; // dwdot[NH3]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[NH3]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[329] -= dqdci; // dwdot[O]/d[NH3]
  J[330] += dqdci; // dwdot[OH]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 28: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[13];
  k_f = 1.173e-06 * exp(3.839 * logT - (8685.52971612278) * invT);
  dlnkfdT = 3.839 * invT + (8685.52971612278) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[163] -= dqdci; // dwdot[NH3]/d[H2O2]
  J[166] += dqdci; // dwdot[NH2]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[13];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[188] -= dqdci; // dwdot[NH3]/d[HO2]
  J[191] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[7];
  J[331] += dqdci; // dwdot[H2O2]/d[NH3]
  J[332] -= dqdci; // dwdot[HO2]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[6];
  J[406] += dqdci; // dwdot[H2O2]/d[NH2]
  J[407] -= dqdci; // dwdot[HO2]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 29: NH3 + O2 <=> HO2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 14150 * exp(1.285 * logT - (27789.6673453998) * invT);
  dlnkfdT = 1.285 * invT + (27789.6673453998) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[3] - g_RT[7] + g_RT[13] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[13] -= q; // NH3
  wdot[16] += q; // NH2
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[88] -= dqdci; // dwdot[NH3]/d[O2]
  J[91] += dqdci; // dwdot[NH2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[188] -= dqdci; // dwdot[NH3]/d[HO2]
  J[191] += dqdci; // dwdot[NH2]/d[HO2]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[328] -= dqdci; // dwdot[O2]/d[NH3]
  J[332] += dqdci; // dwdot[HO2]/d[NH3]
  J[338] -= dqdci; // dwdot[NH3]/d[NH3]
  J[341] += dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[407] += dqdci; // dwdot[HO2]/d[NH2]
  J[413] -= dqdci; // dwdot[NH3]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[613] -= dqdT; // dwdot[NH3]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 30: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 1500000000 * exp(-0.547 * logT - (421.041384278809) * invT);
  dlnkfdT = -0.547 * invT + (421.041384278809) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 31: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 77300000 * exp(-0.277 * logT - (325.279252776171) * invT);
  dlnkfdT = -0.277 * invT + (325.279252776171) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 32: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 33: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 330 * exp(1.5 * logT - (2554.73540112406) * invT);
  dlnkfdT = 1.5 * invT + (2554.73540112406) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 34: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 9.6 * exp(1.97 * logT - (337.155166089162) * invT);
  dlnkfdT = 1.97 * invT + (337.155166089162) * invT2;
  // reverse
  phi_r = sc[8] * sc[15];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[8] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[15] += q; // NH
  wdot[16] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[140] += dqdci; // dwdot[NH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[215] += dqdci; // dwdot[NH]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[8];
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[383] += dqdci; // dwdot[H2O]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[5];
  J[405] -= dqdci; // dwdot[OH]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[415] += dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 35: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 2.9e-08 * exp(3.764 * logT - (9151.00513199214) * invT);
  dlnkfdT = 3.764 * invT + (9151.00513199214) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // OH
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[91] -= dqdci; // dwdot[NH2]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 36: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 260000 * exp(0.487 * logT - (14618.4592381271) * invT);
  dlnkfdT = 0.487 * invT + (14618.4592381271) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[91] -= dqdci; // dwdot[NH2]/d[O2]
  J[97] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[22];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[116] -= dqdci; // dwdot[NH2]/d[O]
  J[122] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[404] += dqdci; // dwdot[O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[553] -= dqdci; // dwdot[O2]/d[H2NO]
  J[554] += dqdci; // dwdot[O]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 37: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[16];
  k_f = 15660000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(-g_RT[5] + g_RT[7] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[7] -= q;  // HO2
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[147] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[16];
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[191] -= dqdci; // dwdot[NH2]/d[HO2]
  J[197] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[7];
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[407] -= dqdci; // dwdot[HO2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[557] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 38: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 1500000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(-g_RT[2] - g_RT[12] + g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] += q; // N2H2
  wdot[15] -= q; // NH
  wdot[16] -= q; // NH2
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[66] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[315] -= dqdci; // dwdot[NH]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[387] += dqdci; // dwdot[N2H2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[402] += dqdci; // dwdot[H]/d[NH2]
  J[412] += dqdci; // dwdot[N2H2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 39: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 0.0096 * exp(2.46 * logT - (53.844183241105) * invT);
  dlnkfdT = 2.46 * invT + (53.844183241105) * invT2;
  // reverse
  phi_r = sc[13] * sc[20];
  Kc = exp(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[13] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[15] -= q; // NH
  wdot[16] -= q; // NH2
  wdot[20] += q; // N
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[340] -= dqdci; // dwdot[NH]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[345] += dqdci; // dwdot[N]/d[NH3]
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[388] += dqdci; // dwdot[NH3]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] -= dqdci; // dwdot[NH2]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[420] += dqdci; // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = -k_r * sc[13];
  J[513] += dqdci; // dwdot[NH3]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[516] -= dqdci; // dwdot[NH2]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 40: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[16] * sc[20];
  Kc = exp(2.000000 * g_RT[15] - g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[15]) + (h_RT[16] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= 2 * q; // NH
  wdot[16] += q;     // NH2
  wdot[20] += q;     // N
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci;      // dwdot[NH2]/d[NH]
  J[395] += dqdci;      // dwdot[N]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[415] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci;      // dwdot[NH2]/d[NH2]
  J[420] += dqdci;      // dwdot[N]/d[NH2]
  // d()/d[N]
  dqdci = -k_r * sc[16];
  J[515] += -2 * dqdci; // dwdot[NH]/d[N]
  J[516] += dqdci;      // dwdot[NH2]/d[N]
  J[520] += dqdci;      // dwdot[N]/d[N]
  // d()/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT
  J[616] += dqdT;      // dwdot[NH2]/dT
  J[620] += dqdT;      // dwdot[N]/dT

  // reaction 41: 2 NH => H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 6260000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[1] += q;      // H2
  wdot[15] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[375] += dqdci;      // dwdot[N2]/d[NH]
  J[376] += dqdci;      // dwdot[H2]/d[NH]
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT;      // dwdot[N2]/dT
  J[601] += dqdT;      // dwdot[H2]/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 42: 2 NH => 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 56340000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[2] += 2 * q;  // H
  wdot[15] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[15];
  J[375] += dqdci;      // dwdot[N2]/d[NH]
  J[377] += 2 * dqdci;  // dwdot[H]/d[NH]
  J[390] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT;      // dwdot[N2]/dT
  J[602] += 2 * dqdT;  // dwdot[H]/dT
  J[615] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 43: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 5.64e-06 * exp(3.53 * logT - (276.769166192596) * invT);
  dlnkfdT = 3.53 * invT + (276.769166192596) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(-g_RT[13] - g_RT[15] + 2.000000 * g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q;     // NH3
  wdot[15] += q;     // NH
  wdot[16] -= 2 * q; // NH2
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[338] += dqdci;      // dwdot[NH3]/d[NH3]
  J[340] += dqdci;      // dwdot[NH]/d[NH3]
  J[341] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  // d()/d[NH]
  dqdci = -k_r * sc[13];
  J[388] += dqdci;      // dwdot[NH3]/d[NH]
  J[390] += dqdci;      // dwdot[NH]/d[NH]
  J[391] += -2 * dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[413] += dqdci;      // dwdot[NH3]/d[NH2]
  J[415] += dqdci;      // dwdot[NH]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[613] += dqdT;      // dwdot[NH3]/dT
  J[615] += dqdT;      // dwdot[NH]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT

  // reaction 44: 2 NH2 <=> N2H4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 5.6e+42 * exp(-11.3 * logT - (5979.37642025808) * invT);
  dlnkfdT = -11.3 * invT + (5979.37642025808) * invT2;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(-g_RT[14] + 2.000000 * g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q;     // N2H4
  wdot[16] -= 2 * q; // NH2
  // d()/d[N2H4]
  dqdci = -k_r;
  J[364] += dqdci;      // dwdot[N2H4]/d[N2H4]
  J[366] += -2 * dqdci; // dwdot[NH2]/d[N2H4]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[414] += dqdci;      // dwdot[N2H4]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[614] += dqdT;      // dwdot[N2H4]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT

  // reaction 45: 2 NH2 <=> H + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 1200000 * exp(-0.03 * logT - (5074.44189014145) * invT);
  dlnkfdT = -0.03 * invT + (5074.44189014145) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H
  wdot[16] -= 2 * q; // NH2
  wdot[23] += q;     // N2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[52] += dqdci;      // dwdot[H]/d[H]
  J[66] += -2 * dqdci; // dwdot[NH2]/d[H]
  J[73] += dqdci;      // dwdot[N2H3]/d[H]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[402] += dqdci;      // dwdot[H]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[423] += dqdci;      // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[577] += dqdci;      // dwdot[H]/d[N2H3]
  J[591] += -2 * dqdci; // dwdot[NH2]/d[N2H3]
  J[598] += dqdci;      // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[602] += dqdT;      // dwdot[H]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT
  J[623] += dqdT;      // dwdot[N2H3]/dT

  // reaction 46: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[16] * sc[16]);
  k_f = 1.2e+15 * exp(-3.08 * logT - (1694.8337304303) * invT);
  dlnkfdT = -3.08 * invT + (1694.8337304303) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[16]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H2
  wdot[16] -= 2 * q; // NH2
  wdot[19] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[26] += dqdci;      // dwdot[H2]/d[H2]
  J[41] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[44] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[16];
  J[401] += dqdci;      // dwdot[H2]/d[NH2]
  J[416] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[476] += dqdci;      // dwdot[H2]/d[H2NN]
  J[491] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[494] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[601] += dqdT;      // dwdot[H2]/dT
  J[616] += -2 * dqdT; // dwdot[NH2]/dT
  J[619] += dqdT;      // dwdot[H2NN]/dT

  // reaction 47: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[9] * sc[22];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[16] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[NO]
  dqdci = -k_r * sc[22];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[247] += dqdci; // dwdot[H2NO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  J[272] += dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[410] -= dqdci; // dwdot[NO2]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[422] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[9];
  J[559] += dqdci; // dwdot[NO]/d[H2NO]
  J[560] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[572] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[622] += dqdT; // dwdot[H2NO]/dT

  // reaction 48: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[8] * sc[11];
  Kc = exp(-g_RT[8] + g_RT[10] - g_RT[11] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[8] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // H2O
  wdot[10] -= q; // NO2
  wdot[11] += q; // N2O
  wdot[16] -= q; // NH2
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[210] -= dqdci; // dwdot[NO2]/d[H2O]
  J[211] += dqdci; // dwdot[N2O]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[258] += dqdci; // dwdot[H2O]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[261] += dqdci; // dwdot[N2O]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[8];
  J[283] += dqdci; // dwdot[H2O]/d[N2O]
  J[285] -= dqdci; // dwdot[NO2]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[291] -= dqdci; // dwdot[NH2]/d[N2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[410] -= dqdci; // dwdot[NO2]/d[NH2]
  J[411] += dqdci; // dwdot[N2O]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 49: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 26000000000000 * exp(-2.369 * logT - (437.798499250106) * invT);
  dlnkfdT = -2.369 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] - g_RT[8] + g_RT[9] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[8] += q;  // H2O
  wdot[9] -= q;  // NO
  wdot[16] -= q; // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[8] += dqdci;  // dwdot[H2O]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[16] -= dqdci; // dwdot[NH2]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[200] += dqdci; // dwdot[N2]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] -= dqdci; // dwdot[NO]/d[H2O]
  J[216] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[400] += dqdci; // dwdot[N2]/d[NH2]
  J[408] += dqdci; // dwdot[H2O]/d[NH2]
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT

  // reaction 50: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 43000 * exp(0.294 * logT - (-435.785632586887) * invT);
  dlnkfdT = 0.294 * invT + (-435.785632586887) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(-g_RT[5] + g_RT[9] + g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[16] -= q; // NH2
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[141] -= dqdci; // dwdot[NH2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[246] += dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[534] -= dqdci; // dwdot[NO]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 51: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 30100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[20];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[15] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[1] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[15] -= q; // NH
  wdot[20] += q; // N
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[40] -= dqdci; // dwdot[NH]/d[H2]
  J[45] += dqdci; // dwdot[N]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[70] += dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[376] += dqdci; // dwdot[H2]/d[NH]
  J[377] -= dqdci; // dwdot[H]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[1];
  J[501] += dqdci; // dwdot[H2]/d[N]
  J[502] -= dqdci; // dwdot[H]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 52: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[15] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[115] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 53: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(-g_RT[2] + g_RT[5] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 54: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[15];
  k_f = 2000 * exp(1.2 * logT);
  dlnkfdT = 1.2 * invT;
  // reverse
  phi_r = sc[8] * sc[20];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[15] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[8] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[15] -= q; // NH
  wdot[20] += q; // N
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[N]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[215] -= dqdci; // dwdot[NH]/d[H2O]
  J[220] += dqdci; // dwdot[N]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[380] -= dqdci; // dwdot[OH]/d[NH]
  J[383] += dqdci; // dwdot[H2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] += dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = -k_r * sc[8];
  J[505] -= dqdci; // dwdot[OH]/d[N]
  J[508] += dqdci; // dwdot[H2O]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] += dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] += dqdT; // dwdot[N]/dT

  // reaction 55: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 405000 * exp(0.09 * logT - (5369.32685630302) * invT);
  dlnkfdT = 0.09 * invT + (5369.32685630302) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[90] -= dqdci; // dwdot[NH]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[18];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[115] -= dqdci; // dwdot[NH]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[378] -= dqdci; // dwdot[O2]/d[NH]
  J[379] += dqdci; // dwdot[O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[454] += dqdci; // dwdot[O]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 56: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 2010000000 * exp(-1.38 * logT - (2853.24352727942) * invT);
  dlnkfdT = -1.38 * invT + (2853.24352727942) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[3] - g_RT[5] - g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[15] -= q; // NH
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[80] += dqdci; // dwdot[OH]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[90] -= dqdci; // dwdot[NH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[128] -= dqdci; // dwdot[O2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[378] -= dqdci; // dwdot[O2]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 57: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[20];
  k_f = 641000 * exp(0.51 * logT - (10.0643333160944) * invT);
  dlnkfdT = 0.51 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] - g_RT[2] + g_RT[15] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[20]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[15] -= q; // NH
  wdot[20] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[15] -= dqdci; // dwdot[NH]/d[N2]
  J[20] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  J[70] -= dqdci; // dwdot[N]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[375] += dqdci; // dwdot[N2]/d[NH]
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[395] -= dqdci; // dwdot[N]/d[NH]
  // d()/d[N]
  dqdci = +k_f * sc[15];
  J[500] += dqdci; // dwdot[N2]/d[N]
  J[502] += dqdci; // dwdot[H]/d[N]
  J[515] -= dqdci; // dwdot[NH]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 58: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 5328000 * exp(0.026 * logT - (-1456.25870917228) * invT);
  dlnkfdT = 0.026 * invT + (-1456.25870917228) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(-g_RT[2] + g_RT[9] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[15] -= q; // NH
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[59] -= dqdci; // dwdot[NO]/d[H]
  J[61] += dqdci; // dwdot[N2O]/d[H]
  J[65] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[277] += dqdci; // dwdot[H]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[290] -= dqdci; // dwdot[NH]/d[N2O]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[377] += dqdci; // dwdot[H]/d[NH]
  J[384] -= dqdci; // dwdot[NO]/d[NH]
  J[386] += dqdci; // dwdot[N2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 59: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 36350 * exp(0.361 * logT - (-1431.29916254836) * invT);
  dlnkfdT = 0.361 * invT + (-1431.29916254836) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[9] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[15] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[15] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[15];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[375] += dqdci; // dwdot[N2]/d[NH]
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[384] -= dqdci; // dwdot[NO]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 60: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(-g_RT[5] + g_RT[10] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[10] -= q; // NO2
  wdot[11] += q; // N2O
  wdot[15] -= q; // NH
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NO2]/d[OH]
  J[136] += dqdci; // dwdot[N2O]/d[OH]
  J[140] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[NO2]
  dqdci = +k_f * sc[15];
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[261] += dqdci; // dwdot[N2O]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[285] -= dqdci; // dwdot[NO2]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[290] -= dqdci; // dwdot[NH]/d[N2O]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[380] += dqdci; // dwdot[OH]/d[NH]
  J[385] -= dqdci; // dwdot[NO2]/d[NH]
  J[386] += dqdci; // dwdot[N2O]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[615] -= dqdT; // dwdot[NH]/dT

  // reaction 61: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[15] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[15] -= q; // NH
  wdot[18] += q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[18];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[240] -= dqdci; // dwdot[NH]/d[NO]
  J[243] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[15];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  J[268] += dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[NH]
  dqdci = +k_f * sc[10];
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[385] -= dqdci; // dwdot[NO2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[393] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[9];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[465] -= dqdci; // dwdot[NH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT

  // reaction 62: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[20];
  k_f = 28300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(-g_RT[2] + g_RT[5] - g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[20]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[9] += q;  // NO
  wdot[20] -= q; // N
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[70] -= dqdci; // dwdot[N]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[N]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[5];
  J[502] += dqdci; // dwdot[H]/d[N]
  J[505] -= dqdci; // dwdot[OH]/d[N]
  J[509] += dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 63: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 9027 * exp(1 * logT - (3270.91335989734) * invT);
  dlnkfdT = 1 * invT + (3270.91335989734) * invT2;
  // reverse
  phi_r = sc[4] * sc[9];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[4] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // O
  wdot[9] += q;  // NO
  wdot[20] -= q; // N
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[79] += dqdci; // dwdot[O]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[95] -= dqdci; // dwdot[N]/d[O2]
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[103] -= dqdci; // dwdot[O2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[229] += dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[503] -= dqdci; // dwdot[O2]/d[N]
  J[504] += dqdci; // dwdot[O]/d[N]
  J[509] += dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 64: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 42800000 * exp(-(790.05016531341) * invT);
  dlnkfdT = (790.05016531341) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[9] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // O
  wdot[9] -= q;  // NO
  wdot[20] -= q; // N
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[O]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[20] -= dqdci; // dwdot[N]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[104] += dqdci; // dwdot[O]/d[O]
  J[109] -= dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[N]/d[O]
  // d()/d[NO]
  dqdci = +k_f * sc[20];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[229] += dqdci; // dwdot[O]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[245] -= dqdci; // dwdot[N]/d[NO]
  // d()/d[N]
  dqdci = +k_f * sc[9];
  J[500] += dqdci; // dwdot[N2]/d[N]
  J[504] += dqdci; // dwdot[O]/d[N]
  J[509] -= dqdci; // dwdot[NO]/d[N]
  J[520] -= dqdci; // dwdot[N]/d[N]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] += dqdT; // dwdot[O]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[620] -= dqdT; // dwdot[N]/dT

  // reaction 65: N2H4 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14];
  k_f = 5.3e+39 * exp(-8.35 * logT - (34876.271395428) * invT);
  dlnkfdT = -8.35 * invT + (34876.271395428) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = refC * exp(-g_RT[1] + g_RT[14] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[1] + h_RT[19]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[14] -= q; // N2H4
  wdot[19] += q; // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[39] -= dqdci; // dwdot[N2H4]/d[H2]
  J[44] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[351] += dqdci; // dwdot[H2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[369] += dqdci; // dwdot[H2NN]/d[N2H4]
  // d()/d[H2NN]
  dqdci = -k_r * sc[1];
  J[476] += dqdci; // dwdot[H2]/d[H2NN]
  J[489] -= dqdci; // dwdot[N2H4]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT

  // reaction 66: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 960 * exp(1.5 * logT - (2434.71822632963) * invT);
  dlnkfdT = 1.5 * invT + (2434.71822632963) * invT2;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[39] -= dqdci; // dwdot[N2H4]/d[H2]
  J[48] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[64] -= dqdci; // dwdot[N2H4]/d[H]
  J[73] += dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H4]
  dqdci = +k_f * sc[2];
  J[351] += dqdci; // dwdot[H2]/d[N2H4]
  J[352] -= dqdci; // dwdot[H]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[576] += dqdci; // dwdot[H2]/d[N2H3]
  J[577] -= dqdci; // dwdot[H]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 67: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 670 * exp(1.5 * logT - (1434.821679209) * invT);
  dlnkfdT = 1.5 * invT + (1434.821679209) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[114] -= dqdci; // dwdot[N2H4]/d[O]
  J[123] += dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[139] -= dqdci; // dwdot[N2H4]/d[OH]
  J[148] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[354] -= dqdci; // dwdot[O]/d[N2H4]
  J[355] += dqdci; // dwdot[OH]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[580] += dqdci; // dwdot[OH]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 68: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 84900000 * exp(-(603.859998965664) * invT);
  dlnkfdT = (603.859998965664) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[8] += q;  // H2O
  wdot[12] += q; // N2H2
  wdot[14] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[108] += dqdci; // dwdot[H2O]/d[O]
  J[112] += dqdci; // dwdot[N2H2]/d[O]
  J[114] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[204] -= dqdci; // dwdot[O]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[N2H2]/d[H2O]
  J[214] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[314] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[354] -= dqdci; // dwdot[O]/d[N2H4]
  J[358] += dqdci; // dwdot[H2O]/d[N2H4]
  J[362] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT

  // reaction 69: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[14];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[8] * sc[23];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[14] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[14]) + (h_RT[8] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[14] -= q; // N2H4
  wdot[23] += q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H4]/d[OH]
  J[148] += dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[214] -= dqdci; // dwdot[N2H4]/d[H2O]
  J[223] += dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H4]
  dqdci = +k_f * sc[5];
  J[355] -= dqdci; // dwdot[OH]/d[N2H4]
  J[358] += dqdci; // dwdot[H2O]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = -k_r * sc[8];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 70: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[16];
  k_f = 3.7 * exp(1.94 * logT - (820.243165261693) * invT);
  dlnkfdT = 1.94 * invT + (820.243165261693) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[14] -= q; // N2H4
  wdot[16] -= q; // NH2
  wdot[23] += q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[339] -= dqdci; // dwdot[N2H4]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[348] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[16];
  J[363] += dqdci; // dwdot[NH3]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[366] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[414] -= dqdci; // dwdot[N2H4]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[423] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[13];
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 71: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.50469119647) * invT);
  dlnkfdT = 3.13 * invT + (4458.50469119647) * invT2;
  // reverse
  phi_r = sc[17] * sc[23];
  Kc = exp(g_RT[10] + g_RT[14] - g_RT[17] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[17] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO2
  wdot[14] -= q; // N2H4
  wdot[17] += q; // HONO
  wdot[23] += q; // N2H3
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[264] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[273] += dqdci; // dwdot[N2H3]/d[NO2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[360] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[364] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[367] += dqdci; // dwdot[HONO]/d[N2H4]
  J[373] += dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[HONO]
  dqdci = -k_r * sc[23];
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[439] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[448] += dqdci; // dwdot[N2H3]/d[HONO]
  // d()/d[N2H3]
  dqdci = -k_r * sc[17];
  J[585] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[589] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[592] += dqdci; // dwdot[HONO]/d[N2H3]
  J[598] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[614] -= dqdT; // dwdot[N2H4]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[623] += dqdT; // dwdot[N2H3]/dT

  // reaction 72: N2H3 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 3.6e+47 * exp(-10.38 * logT - (34708.8059212148) * invT);
  dlnkfdT = -10.38 * invT + (34708.8059212148) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = refC * exp(-g_RT[2] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23]) + (h_RT[2] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[73] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f;
  J[577] += dqdci; // dwdot[H]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 73: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 240 * exp(1.5 * logT);
  dlnkfdT = 1.5 * invT;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[37] += dqdci; // dwdot[N2H2]/d[H2]
  J[48] -= dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[73] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[301] += dqdci; // dwdot[H2]/d[N2H2]
  J[302] -= dqdci; // dwdot[H]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[2];
  J[576] += dqdci; // dwdot[H2]/d[N2H3]
  J[577] -= dqdci; // dwdot[H]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 74: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[18];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[16] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[16] += q; // NH2
  wdot[18] += q; // HNO
  wdot[23] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  J[123] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[16];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[466] += dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[473] -= dqdci; // dwdot[N2H3]/d[HNO]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[591] += dqdci; // dwdot[NH2]/d[N2H3]
  J[593] += dqdci; // dwdot[HNO]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 75: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 170 * exp(1.5 * logT - (-324.826357776947) * invT);
  dlnkfdT = 1.5 * invT + (-324.826357776947) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[112] += dqdci; // dwdot[N2H2]/d[O]
  J[123] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[N2H2]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[305] += dqdci; // dwdot[OH]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[579] -= dqdci; // dwdot[O]/d[N2H3]
  J[580] += dqdci; // dwdot[OH]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 76: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 1.2 * exp(2 * logT - (-599.632978972904) * invT);
  dlnkfdT = 2 * invT + (-599.632978972904) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[N2H2]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] += dqdci; // dwdot[N2H2]/d[H2O]
  J[223] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[8];
  J[305] -= dqdci; // dwdot[OH]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 77: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[23]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[19] += q; // H2NN
  wdot[23] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[H2NN]/d[OH]
  J[148] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[219] += dqdci; // dwdot[H2NN]/d[H2O]
  J[223] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[H2NN]
  dqdci = -k_r * sc[8];
  J[480] -= dqdci; // dwdot[OH]/d[H2NN]
  J[483] += dqdci; // dwdot[H2O]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[498] -= dqdci; // dwdot[N2H3]/d[H2NN]
  // d()/d[N2H3]
  dqdci = +k_f * sc[5];
  J[580] -= dqdci; // dwdot[OH]/d[N2H3]
  J[583] += dqdci; // dwdot[H2O]/d[N2H3]
  J[594] += dqdci; // dwdot[H2NN]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 78: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[23];
  k_f = 0.92 * exp(1.94 * logT - (-579.957207339939) * invT);
  dlnkfdT = 1.94 * invT + (-579.957207339939) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(-g_RT[12] - g_RT[13] + g_RT[16] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[23]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // N2H2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[23] -= q; // N2H3
  // d()/d[N2H2]
  dqdci = -k_r * sc[13];
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[313] += dqdci; // dwdot[NH3]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[NH3]
  dqdci = -k_r * sc[12];
  J[337] += dqdci; // dwdot[N2H2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[348] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[412] += dqdci; // dwdot[N2H2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[16];
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 79: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(-g_RT[13] + g_RT[16] - g_RT[19] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[23]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[19] += q; // H2NN
  wdot[23] -= q; // N2H3
  // d()/d[NH3]
  dqdci = -k_r * sc[19];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[344] += dqdci; // dwdot[H2NN]/d[NH3]
  J[348] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] += dqdci; // dwdot[H2NN]/d[NH2]
  J[423] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[13];
  J[488] += dqdci; // dwdot[NH3]/d[H2NN]
  J[491] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[498] -= dqdci; // dwdot[N2H3]/d[H2NN]
  // d()/d[N2H3]
  dqdci = +k_f * sc[16];
  J[588] += dqdci; // dwdot[NH3]/d[N2H3]
  J[591] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[594] += dqdci; // dwdot[H2NN]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 80: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[23];
  k_f = 0.014 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[12] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[23]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[12] += q; // N2H2
  wdot[23] -= q; // N2H3
  // d()/d[H2O2]
  dqdci = -k_r * sc[12];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[162] += dqdci; // dwdot[N2H2]/d[H2O2]
  J[173] -= dqdci; // dwdot[N2H3]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[187] += dqdci; // dwdot[N2H2]/d[HO2]
  J[198] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[6];
  J[306] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[307] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[323] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[7];
  J[581] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[582] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[587] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 81: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[23];
  k_f = 0.92 * exp(1.94 * logT - (1069.88895316741) * invT);
  dlnkfdT = 1.94 * invT + (1069.88895316741) * invT2;
  // reverse
  phi_r = sc[3] * sc[14];
  Kc = exp(-g_RT[3] + g_RT[7] - g_RT[14] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[23]) + (h_RT[3] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[7] -= q;  // HO2
  wdot[14] += q; // N2H4
  wdot[23] -= q; // N2H3
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[89] += dqdci; // dwdot[N2H4]/d[O2]
  J[98] -= dqdci; // dwdot[N2H3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[189] += dqdci; // dwdot[N2H4]/d[HO2]
  J[198] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[N2H4]
  dqdci = -k_r * sc[3];
  J[353] += dqdci; // dwdot[O2]/d[N2H4]
  J[357] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[364] += dqdci; // dwdot[N2H4]/d[N2H4]
  J[373] -= dqdci; // dwdot[N2H3]/d[N2H4]
  // d()/d[N2H3]
  dqdci = +k_f * sc[7];
  J[578] += dqdci; // dwdot[O2]/d[N2H3]
  J[582] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[589] += dqdci; // dwdot[N2H4]/d[N2H3]
  J[598] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[614] += dqdT; // dwdot[N2H4]/dT
  J[623] -= dqdT; // dwdot[N2H3]/dT

  // reaction 82: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 1.8e+40 * exp(-8.41 * logT - (36912.4973762735) * invT);
  dlnkfdT = -8.41 * invT + (36912.4973762735) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 83: N2H2 <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 2.6e+40 * exp(-8.53 * logT - (36677.5958366759) * invT);
  dlnkfdT = -8.53 * invT + (36677.5958366759) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f;
  J[302] += dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 84: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 4121 * exp(1.289 * logT - (-112.770854806838) * invT);
  dlnkfdT = 1.289 * invT + (-112.770854806838) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[37] -= dqdci; // dwdot[N2H2]/d[H2]
  J[46] += dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[62] -= dqdci; // dwdot[N2H2]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[N2H2]
  dqdci = +k_f * sc[2];
  J[301] += dqdci; // dwdot[H2]/d[N2H2]
  J[302] -= dqdci; // dwdot[H]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 85: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 330 * exp(1.5 * logT - (249.847074572043) * invT);
  dlnkfdT = 1.5 * invT + (249.847074572043) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[112] -= dqdci; // dwdot[N2H2]/d[O]
  J[121] += dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[N2H2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[304] -= dqdci; // dwdot[O]/d[N2H2]
  J[305] += dqdci; // dwdot[OH]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 86: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 5.923e-05 * exp(3.4 * logT - (-686.236567157896) * invT);
  dlnkfdT = 3.4 * invT + (-686.236567157896) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[12] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[12] -= q; // N2H2
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[N2H2]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[212] -= dqdci; // dwdot[N2H2]/d[H2O]
  J[221] += dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[N2H2]
  dqdci = +k_f * sc[5];
  J[305] -= dqdci; // dwdot[OH]/d[N2H2]
  J[308] += dqdci; // dwdot[H2O]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 87: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 4000000 * exp(-(5996.3348218957) * invT);
  dlnkfdT = (5996.3348218957) * invT2;
  // reverse
  phi_r = sc[11] * sc[16];
  Kc = exp(g_RT[9] - g_RT[11] + g_RT[12] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[11] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[12] -= q; // N2H2
  wdot[16] += q; // NH2
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[237] -= dqdci; // dwdot[N2H2]/d[NO]
  J[241] += dqdci; // dwdot[NH2]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[16];
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[287] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[291] += dqdci; // dwdot[NH2]/d[N2O]
  // d()/d[N2H2]
  dqdci = +k_f * sc[9];
  J[309] -= dqdci; // dwdot[NO]/d[N2H2]
  J[311] += dqdci; // dwdot[N2O]/d[N2H2]
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[316] += dqdci; // dwdot[NH2]/d[N2H2]
  // d()/d[NH2]
  dqdci = -k_r * sc[11];
  J[409] -= dqdci; // dwdot[NO]/d[NH2]
  J[411] += dqdci; // dwdot[N2O]/d[NH2]
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[616] += dqdT; // dwdot[NH2]/dT

  // reaction 88: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[15];
  k_f = 2.4 * exp(2 * logT - (-599.632978972904) * invT);
  dlnkfdT = 2 * invT + (-599.632978972904) * invT2;
  // reverse
  phi_r = sc[16] * sc[21];
  Kc = exp(g_RT[12] + g_RT[15] - g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[15]) + (h_RT[16] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[15] -= q; // NH
  wdot[16] += q; // NH2
  wdot[21] += q; // NNH
  // d()/d[N2H2]
  dqdci = +k_f * sc[15];
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[315] -= dqdci; // dwdot[NH]/d[N2H2]
  J[316] += dqdci; // dwdot[NH2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NH]
  dqdci = +k_f * sc[12];
  J[387] -= dqdci; // dwdot[N2H2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci; // dwdot[NH2]/d[NH]
  J[396] += dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[16];
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[540] -= dqdci; // dwdot[NH]/d[NNH]
  J[541] += dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 89: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 8.8e-08 * exp(4.05 * logT - (-810.178831945599) * invT);
  dlnkfdT = 4.05 * invT + (-810.178831945599) * invT2;
  // reverse
  phi_r = sc[13] * sc[21];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[16] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[21] += q; // NNH
  // d()/d[N2H2]
  dqdci = +k_f * sc[16];
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[313] += dqdci; // dwdot[NH3]/d[N2H2]
  J[316] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[321] += dqdci; // dwdot[NNH]/d[N2H2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[337] -= dqdci; // dwdot[N2H2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[346] += dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[412] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[13];
  J[537] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 90: N2H2 <=> H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12];
  k_f = 2e+41 * exp(-9.38 * logT - (34446.3230761644) * invT);
  dlnkfdT = -9.38 * invT + (34446.3230761644) * invT2;
  // reverse
  phi_r = sc[19];
  Kc = exp(g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // N2H2
  wdot[19] += q; // H2NN
  // d()/d[N2H2]
  dqdci = +k_f;
  J[312] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[319] += dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = -k_r;
  J[487] -= dqdci; // dwdot[N2H2]/d[H2NN]
  J[494] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[612] -= dqdT; // dwdot[N2H2]/dT
  J[619] += dqdT; // dwdot[H2NN]/dT

  // reaction 91: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 9.6e+35 * exp(-7.57 * logT - (27597.0410378964) * invT);
  dlnkfdT = -7.57 * invT + (27597.0410378964) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[477] += dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 92: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19];
  k_f = 3.2e+31 * exp(-6.22 * logT - (26327.1737817382) * invT);
  dlnkfdT = -6.22 * invT + (26327.1737817382) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = refC * exp(-g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[2] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[477] += dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 93: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 1500000 * exp(-(2999.67957702859) * invT);
  dlnkfdT = (2999.67957702859) * invT2;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[10] += q; // NO2
  wdot[16] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[85] += dqdci; // dwdot[NO2]/d[O2]
  J[91] += dqdci; // dwdot[NH2]/d[O2]
  J[94] -= dqdci; // dwdot[H2NN]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[16];
  J[253] -= dqdci; // dwdot[O2]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[266] += dqdci; // dwdot[NH2]/d[NO2]
  J[269] -= dqdci; // dwdot[H2NN]/d[NO2]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[403] -= dqdci; // dwdot[O2]/d[NH2]
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[478] -= dqdci; // dwdot[O2]/d[H2NN]
  J[485] += dqdci; // dwdot[NO2]/d[H2NN]
  J[491] += dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 94: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 18000 * exp(0.97 * logT - (2249.7861016464) * invT);
  dlnkfdT = 0.97 * invT + (2249.7861016464) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(g_RT[2] - g_RT[2] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // N2H2
  wdot[19] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[12];
  J[62] += dqdci; // dwdot[N2H2]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[312] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[319] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[487] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[612] += dqdT; // dwdot[N2H2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 95: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 480 * exp(1.5 * logT - (-449.97634256258) * invT);
  dlnkfdT = 1.5 * invT + (-449.97634256258) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[44] -= dqdci; // dwdot[H2NN]/d[H2]
  J[46] += dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[69] -= dqdci; // dwdot[H2NN]/d[H]
  J[71] += dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2NN]
  dqdci = +k_f * sc[2];
  J[476] += dqdci; // dwdot[H2]/d[H2NN]
  J[477] -= dqdci; // dwdot[H]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 96: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 3200 * exp(1.03 * logT - (1359.84239600409) * invT);
  dlnkfdT = 1.03 * invT + (1359.84239600409) * invT2;
  // reverse
  phi_r = sc[9] * sc[16];
  Kc = exp(g_RT[4] - g_RT[9] - g_RT[16] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[9] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[16] += q; // NH2
  wdot[19] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[116] += dqdci; // dwdot[NH2]/d[O]
  J[119] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[16];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[241] += dqdci; // dwdot[NH2]/d[NO]
  J[244] -= dqdci; // dwdot[H2NN]/d[NO]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[404] -= dqdci; // dwdot[O]/d[NH2]
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[479] -= dqdci; // dwdot[O]/d[H2NN]
  J[484] += dqdci; // dwdot[NO]/d[H2NN]
  J[491] += dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT

  // reaction 97: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 330 * exp(1.5 * logT - (-449.97634256258) * invT);
  dlnkfdT = 1.5 * invT + (-449.97634256258) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[119] -= dqdci; // dwdot[H2NN]/d[O]
  J[121] += dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[H2NN]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[479] -= dqdci; // dwdot[O]/d[H2NN]
  J[480] += dqdci; // dwdot[OH]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 98: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[19];
  k_f = 2.4 * exp(2 * logT - (-599.934908972387) * invT);
  dlnkfdT = 2 * invT + (-599.934908972387) * invT2;
  // reverse
  phi_r = sc[8] * sc[21];
  Kc = exp(g_RT[5] - g_RT[8] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[19]) + (h_RT[8] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[144] -= dqdci; // dwdot[H2NN]/d[OH]
  J[146] += dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[219] -= dqdci; // dwdot[H2NN]/d[H2O]
  J[221] += dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[H2NN]
  dqdci = +k_f * sc[5];
  J[480] -= dqdci; // dwdot[OH]/d[H2NN]
  J[483] += dqdci; // dwdot[H2O]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[8];
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 99: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[19];
  k_f = 1.8 * exp(1.94 * logT - (-579.957207339939) * invT);
  dlnkfdT = 1.94 * invT + (-579.957207339939) * invT2;
  // reverse
  phi_r = sc[13] * sc[21];
  Kc = exp(-g_RT[13] + g_RT[16] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[19]) + (h_RT[13] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[344] -= dqdci; // dwdot[H2NN]/d[NH3]
  J[346] += dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[19];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[419] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[421] += dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[16];
  J[488] += dqdci; // dwdot[NH3]/d[H2NN]
  J[491] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[13];
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 100: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[19];
  k_f = 0.029 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[19]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[19] -= q; // H2NN
  wdot[21] += q; // NNH
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[169] -= dqdci; // dwdot[H2NN]/d[H2O2]
  J[171] += dqdci; // dwdot[NNH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[H2NN]/d[HO2]
  J[196] += dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[7];
  J[481] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[482] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[494] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[496] += dqdci; // dwdot[NNH]/d[H2NN]
  // d()/d[NNH]
  dqdci = -k_r * sc[6];
  J[531] += dqdci; // dwdot[H2O2]/d[NNH]
  J[532] -= dqdci; // dwdot[HO2]/d[NNH]
  J[544] -= dqdci; // dwdot[H2NN]/d[NNH]
  J[546] += dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[619] -= dqdT; // dwdot[H2NN]/dT
  J[621] += dqdT; // dwdot[NNH]/dT

  // reaction 101: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21];
  k_f = 1000000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = refC * exp(-g_RT[0] - g_RT[2] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[0] + h_RT[2]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] += q;  // H
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] += dqdci;  // dwdot[H]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] += dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 102: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 240 * exp(1.5 * logT - (-449.724734229678) * invT);
  dlnkfdT = 1.5 * invT + (-449.724734229678) * invT2;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[25] += dqdci; // dwdot[N2]/d[H2]
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[46] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[526] += dqdci; // dwdot[H2]/d[NNH]
  J[527] -= dqdci; // dwdot[H]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 103: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 190000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[11] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[4] -= q;  // O
  wdot[11] += q; // N2O
  wdot[21] -= q; // NNH
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[O]/d[H]
  J[61] += dqdci; // dwdot[N2O]/d[H]
  J[71] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[102] += dqdci; // dwdot[H]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[111] += dqdci; // dwdot[N2O]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[N2O]
  dqdci = -k_r * sc[2];
  J[277] += dqdci; // dwdot[H]/d[N2O]
  J[279] -= dqdci; // dwdot[O]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[296] -= dqdci; // dwdot[NNH]/d[N2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[527] += dqdci; // dwdot[H]/d[NNH]
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[536] += dqdci; // dwdot[N2O]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 104: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 520000 * exp(0.388 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.388 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[15] += q; // NH
  wdot[21] -= q; // NNH
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[115] += dqdci; // dwdot[NH]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[15];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[240] += dqdci; // dwdot[NH]/d[NO]
  J[246] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[NH]
  dqdci = -k_r * sc[9];
  J[379] -= dqdci; // dwdot[O]/d[NH]
  J[384] += dqdci; // dwdot[NO]/d[NH]
  J[390] += dqdci; // dwdot[NH]/d[NH]
  J[396] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[534] += dqdci; // dwdot[NO]/d[NNH]
  J[540] += dqdci; // dwdot[NH]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[615] += dqdT; // dwdot[NH]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 105: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[121] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[146] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[529] -= dqdci; // dwdot[O]/d[NNH]
  J[530] += dqdci; // dwdot[OH]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 106: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[5] - g_RT[8] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[21]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] -= dqdci;  // dwdot[OH]/d[N2]
  J[8] += dqdci;  // dwdot[H2O]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[146] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[200] += dqdci; // dwdot[N2]/d[H2O]
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[221] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[5];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[530] -= dqdci; // dwdot[OH]/d[NNH]
  J[533] += dqdci; // dwdot[H2O]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 107: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[7] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O2]/d[N2]
  J[7] += dqdci;  // dwdot[HO2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[75] += dqdci; // dwdot[N2]/d[O2]
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[96] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[196] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[528] -= dqdci; // dwdot[O2]/d[NNH]
  J[532] += dqdci; // dwdot[HO2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 108: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[21];
  k_f = 0.92 * exp(1.94 * logT - (-579.655277340457) * invT);
  dlnkfdT = 1.94 * invT + (-579.655277340457) * invT2;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = exp(-g_RT[0] - g_RT[13] + g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[21]) + (h_RT[0] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[13] += dqdci; // dwdot[NH3]/d[N2]
  J[16] -= dqdci; // dwdot[NH2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[325] += dqdci; // dwdot[N2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[346] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[400] += dqdci; // dwdot[N2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[421] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[16];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[538] += dqdci; // dwdot[NH3]/d[NNH]
  J[541] -= dqdci; // dwdot[NH2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 109: HO2 + NNH <=> H2O2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[21];
  k_f = 0.014 * exp(2.69 * logT - (-804.895056954649) * invT);
  dlnkfdT = 2.69 * invT + (-804.895056954649) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[7] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[21]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[H2O2]/d[N2]
  J[7] -= dqdci;  // dwdot[HO2]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[0];
  J[150] += dqdci; // dwdot[N2]/d[H2O2]
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[171] -= dqdci; // dwdot[NNH]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[196] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[7];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[531] += dqdci; // dwdot[H2O2]/d[NNH]
  J[532] -= dqdci; // dwdot[HO2]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 110: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // NO
  wdot[18] += q; // HNO
  wdot[21] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[18] += dqdci; // dwdot[HNO]/d[N2]
  J[21] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[243] += dqdci; // dwdot[HNO]/d[NO]
  J[246] -= dqdci; // dwdot[NNH]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[450] += dqdci; // dwdot[N2]/d[HNO]
  J[459] -= dqdci; // dwdot[NO]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[471] -= dqdci; // dwdot[NNH]/d[HNO]
  // d()/d[NNH]
  dqdci = +k_f * sc[9];
  J[525] += dqdci; // dwdot[N2]/d[NNH]
  J[534] -= dqdci; // dwdot[NO]/d[NNH]
  J[543] += dqdci; // dwdot[HNO]/d[NNH]
  J[546] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[621] -= dqdT; // dwdot[NNH]/dT

  // reaction 111: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(-g_RT[5] + g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[9]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[7] -= q;  // HO2
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[HO2]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[180] += dqdci; // dwdot[OH]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[184] -= dqdci; // dwdot[NO]/d[HO2]
  J[185] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[7];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[232] -= dqdci; // dwdot[HO2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[235] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[257] -= dqdci; // dwdot[HO2]/d[NO2]
  J[259] -= dqdci; // dwdot[NO]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT

  // reaction 113: NO + OH <=> HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3.09e+17 * exp(-4.17 * logT - (815.714215269451) * invT);
  dlnkfdT = -4.17 * invT + (815.714215269451) * invT2;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[9] -= q;  // NO
  wdot[17] += q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[142] += dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[5];
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[242] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = -k_r;
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[434] -= dqdci; // dwdot[NO]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[617] += dqdT; // dwdot[HONO]/dT

  // reaction 114: HNO <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18];
  k_f = 1.826e+20 * exp(-3.008 * logT - (24094.0391195633) * invT);
  dlnkfdT = -3.008 * invT + (24094.0391195633) * invT2;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = refC * exp(-g_RT[2] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18]) + (h_RT[2] + h_RT[9]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[227] += dqdci; // dwdot[H]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f;
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 115: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 968000 * exp(0.62 * logT - (181.157999689699) * invT);
  dlnkfdT = 0.62 * invT + (181.157999689699) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[34] += dqdci; // dwdot[NO]/d[H2]
  J[43] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[226] += dqdci; // dwdot[H2]/d[NO]
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[451] += dqdci; // dwdot[H2]/d[HNO]
  J[452] -= dqdci; // dwdot[H]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 116: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 22900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[118] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 117: HNO + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 0.00148 * exp(2.72 * logT - (2291.65372824135) * invT);
  dlnkfdT = 2.72 * invT + (2291.65372824135) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H
  wdot[5] -= q;  // OH
  wdot[17] += q; // HONO
  wdot[18] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[52] += dqdci; // dwdot[H]/d[H]
  J[55] -= dqdci; // dwdot[OH]/d[H]
  J[67] += dqdci; // dwdot[HONO]/d[H]
  J[68] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[127] += dqdci; // dwdot[H]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[HONO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[2];
  J[427] += dqdci; // dwdot[H]/d[HONO]
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] -= dqdci; // dwdot[HNO]/d[HONO]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[452] += dqdci; // dwdot[H]/d[HNO]
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[602] += dqdT; // dwdot[H]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 118: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[18];
  k_f = 63000 * exp(0.39 * logT - (1903.17046224011) * invT);
  dlnkfdT = 0.39 * invT + (1903.17046224011) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[18]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO]/d[H2O]
  J[218] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[230] -= dqdci; // dwdot[OH]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[5];
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[458] += dqdci; // dwdot[H2O]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 119: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 20000000 * exp(-(7495.92551816042) * invT);
  dlnkfdT = (7495.92551816042) * invT2;
  // reverse
  phi_r = sc[7] * sc[9];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[7] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[9] += q;  // NO
  wdot[18] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[93] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[184] += dqdci; // dwdot[NO]/d[HO2]
  J[193] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[7];
  J[228] -= dqdci; // dwdot[O2]/d[NO]
  J[232] += dqdci; // dwdot[HO2]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[457] += dqdci; // dwdot[HO2]/d[HNO]
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 120: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 36.7 * exp(1.63 * logT - (-629.0208322559) * invT);
  dlnkfdT = 1.63 * invT + (-629.0208322559) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[18] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[13];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[238] += dqdci; // dwdot[NH3]/d[NO]
  J[241] -= dqdci; // dwdot[NH2]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NH3]
  dqdci = -k_r * sc[9];
  J[334] += dqdci; // dwdot[NO]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[343] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[409] += dqdci; // dwdot[NO]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = +k_f * sc[16];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[463] += dqdci; // dwdot[NH3]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 121: HNO + NO <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 8510000 * exp(-(14900.2555388111) * invT);
  dlnkfdT = (14900.2555388111) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(-g_RT[5] + g_RT[9] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // OH
  wdot[9] -= q;  // NO
  wdot[11] += q; // N2O
  wdot[18] -= q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NO]/d[OH]
  J[136] += dqdci; // dwdot[N2O]/d[OH]
  J[143] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[18];
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[236] += dqdci; // dwdot[N2O]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[286] += dqdci; // dwdot[N2O]/d[N2O]
  J[293] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[459] -= dqdci; // dwdot[NO]/d[HNO]
  J[461] += dqdci; // dwdot[N2O]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[611] += dqdT; // dwdot[N2O]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 122: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 0.0442 * exp(2.64 * logT - (2033.80047651635) * invT);
  dlnkfdT = 2.64 * invT + (2033.80047651635) * invT2;
  // reverse
  phi_r = sc[9] * sc[17];
  Kc = exp(-g_RT[9] + g_RT[10] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  wdot[18] -= q; // HNO
  // d()/d[NO]
  dqdci = -k_r * sc[17];
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  J[242] += dqdci; // dwdot[HONO]/d[NO]
  J[243] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[18];
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[268] -= dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[9];
  J[434] += dqdci; // dwdot[NO]/d[HONO]
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] -= dqdci; // dwdot[HNO]/d[HONO]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[459] += dqdci; // dwdot[NO]/d[HNO]
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] -= dqdT; // dwdot[HNO]/dT

  // reaction 123: H + HONO <=> H2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 0.00189 * exp(2.83 * logT - (715.926350440375) * invT);
  dlnkfdT = 2.83 * invT + (715.926350440375) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[35] += dqdci; // dwdot[NO2]/d[H2]
  J[42] -= dqdci; // dwdot[HONO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[60] += dqdci; // dwdot[NO2]/d[H]
  J[67] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[NO2]
  dqdci = -k_r * sc[1];
  J[251] += dqdci; // dwdot[H2]/d[NO2]
  J[252] -= dqdci; // dwdot[H]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[426] += dqdci; // dwdot[H2]/d[HONO]
  J[427] -= dqdci; // dwdot[H]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 124: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 4300 * exp(0.98 * logT - (2048.09182982521) * invT);
  dlnkfdT = 0.98 * invT + (2048.09182982521) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[2] - g_RT[8] - g_RT[9] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[8] += q;  // H2O
  wdot[9] += q;  // NO
  wdot[17] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[58] += dqdci; // dwdot[H2O]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[67] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[202] -= dqdci; // dwdot[H]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[209] += dqdci; // dwdot[NO]/d[H2O]
  J[217] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[233] += dqdci; // dwdot[H2O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[242] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[2];
  J[427] -= dqdci; // dwdot[H]/d[HONO]
  J[433] += dqdci; // dwdot[H2O]/d[HONO]
  J[434] += dqdci; // dwdot[NO]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 125: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 12100000 * exp(-(2999.17636036279) * invT);
  dlnkfdT = (2999.17636036279) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[110] += dqdci; // dwdot[NO2]/d[O]
  J[117] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  J[142] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[254] -= dqdci; // dwdot[O]/d[NO2]
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[429] -= dqdci; // dwdot[O]/d[HONO]
  J[430] += dqdci; // dwdot[OH]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 126: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[17];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[10] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[10] += q; // NO2
  wdot[17] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[135] += dqdci; // dwdot[NO2]/d[OH]
  J[142] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[210] += dqdci; // dwdot[NO2]/d[H2O]
  J[217] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[8];
  J[255] -= dqdci; // dwdot[OH]/d[NO2]
  J[258] += dqdci; // dwdot[H2O]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[5];
  J[430] -= dqdci; // dwdot[OH]/d[HONO]
  J[433] += dqdci; // dwdot[H2O]/d[HONO]
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 127: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[16];
  Kc = exp(-g_RT[10] + g_RT[15] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[10] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO2
  wdot[15] -= q; // NH
  wdot[16] += q; // NH2
  wdot[17] -= q; // HONO
  // d()/d[NO2]
  dqdci = -k_r * sc[16];
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[265] -= dqdci; // dwdot[NH]/d[NO2]
  J[266] += dqdci; // dwdot[NH2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[NH]
  dqdci = +k_f * sc[17];
  J[385] += dqdci; // dwdot[NO2]/d[NH]
  J[390] -= dqdci; // dwdot[NH]/d[NH]
  J[391] += dqdci; // dwdot[NH2]/d[NH]
  J[392] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[10];
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[415] -= dqdci; // dwdot[NH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[HONO]
  dqdci = +k_f * sc[15];
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[440] -= dqdci; // dwdot[NH]/d[HONO]
  J[441] += dqdci; // dwdot[NH2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[615] -= dqdT; // dwdot[NH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 128: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[17];
  k_f = 0.000317 * exp(2.83 * logT - (-1796.48349692285) * invT);
  dlnkfdT = 2.83 * invT + (-1796.48349692285) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] - g_RT[13] + g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[17]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // NO2
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[17] -= q; // HONO
  // d()/d[NO2]
  dqdci = -k_r * sc[13];
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[263] += dqdci; // dwdot[NH3]/d[NO2]
  J[266] -= dqdci; // dwdot[NH2]/d[NO2]
  J[267] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[335] += dqdci; // dwdot[NO2]/d[NH3]
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[342] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[410] += dqdci; // dwdot[NO2]/d[NH2]
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[417] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[HONO]
  dqdci = +k_f * sc[16];
  J[435] += dqdci; // dwdot[NO2]/d[HONO]
  J[438] += dqdci; // dwdot[NH3]/d[HONO]
  J[441] -= dqdci; // dwdot[NH2]/d[HONO]
  J[442] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[617] -= dqdT; // dwdot[HONO]/dT

  // reaction 129: 2 HONO => H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[17] * sc[17]);
  k_f = 3.49e-07 * exp(3.64 * logT - (6108.35085170383) * invT);
  dlnkfdT = 3.64 * invT + (6108.35085170383) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;      // H2O
  wdot[9] += q;      // NO
  wdot[10] += q;     // NO2
  wdot[17] -= 2 * q; // HONO
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[17];
  J[433] += dqdci;      // dwdot[H2O]/d[HONO]
  J[434] += dqdci;      // dwdot[NO]/d[HONO]
  J[435] += dqdci;      // dwdot[NO2]/d[HONO]
  J[442] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[608] += dqdT;      // dwdot[H2O]/dT
  J[609] += dqdT;      // dwdot[NO]/dT
  J[610] += dqdT;      // dwdot[NO2]/dT
  J[617] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 131: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 480 * exp(1.5 * logT - (784.917355322202) * invT);
  dlnkfdT = 1.5 * invT + (784.917355322202) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H2
  wdot[2] -= q;  // H
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[26] += dqdci; // dwdot[H2]/d[H2]
  J[27] -= dqdci; // dwdot[H]/d[H2]
  J[43] += dqdci; // dwdot[HNO]/d[H2]
  J[47] -= dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[51] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[68] += dqdci; // dwdot[HNO]/d[H]
  J[72] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[451] += dqdci; // dwdot[H2]/d[HNO]
  J[452] -= dqdci; // dwdot[H]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[551] += dqdci; // dwdot[H2]/d[H2NO]
  J[552] -= dqdci; // dwdot[H]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[601] += dqdT; // dwdot[H2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 132: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[16] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[16] += q; // NH2
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[66] += dqdci; // dwdot[NH2]/d[H]
  J[72] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[141] += dqdci; // dwdot[NH2]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[402] -= dqdci; // dwdot[H]/d[NH2]
  J[405] += dqdci; // dwdot[OH]/d[NH2]
  J[416] += dqdci; // dwdot[NH2]/d[NH2]
  J[422] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[2];
  J[552] -= dqdci; // dwdot[H]/d[H2NO]
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[566] += dqdci; // dwdot[NH2]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[616] += dqdT; // dwdot[NH2]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 133: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 330 * exp(1.5 * logT - (244.965872913738) * invT);
  dlnkfdT = 1.5 * invT + (244.965872913738) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // O
  wdot[5] += q;  // OH
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[105] += dqdci; // dwdot[OH]/d[O]
  J[118] += dqdci; // dwdot[HNO]/d[O]
  J[122] -= dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[129] -= dqdci; // dwdot[O]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[454] -= dqdci; // dwdot[O]/d[HNO]
  J[455] += dqdci; // dwdot[OH]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[554] -= dqdci; // dwdot[O]/d[H2NO]
  J[555] += dqdci; // dwdot[OH]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 134: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[22];
  k_f = 2.4 * exp(2 * logT - (599.934908972387) * invT);
  dlnkfdT = 2 * invT + (599.934908972387) * invT2;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(g_RT[5] - g_RT[8] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[22]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // OH
  wdot[8] += q;  // H2O
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[H2O]/d[OH]
  J[143] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[205] -= dqdci; // dwdot[OH]/d[H2O]
  J[208] += dqdci; // dwdot[H2O]/d[H2O]
  J[218] += dqdci; // dwdot[HNO]/d[H2O]
  J[222] -= dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[8];
  J[455] -= dqdci; // dwdot[OH]/d[HNO]
  J[458] += dqdci; // dwdot[H2O]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[5];
  J[555] -= dqdci; // dwdot[OH]/d[H2NO]
  J[558] += dqdci; // dwdot[H2O]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[608] += dqdT; // dwdot[H2O]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 135: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[22];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[17] * sc[18];
  Kc = exp(g_RT[10] - g_RT[17] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[22]) + (h_RT[17] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  J[268] += dqdci; // dwdot[HNO]/d[NO2]
  J[272] -= dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[18];
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  J[443] += dqdci; // dwdot[HNO]/d[HONO]
  J[447] -= dqdci; // dwdot[H2NO]/d[HONO]
  // d()/d[HNO]
  dqdci = -k_r * sc[17];
  J[460] -= dqdci; // dwdot[NO2]/d[HNO]
  J[467] += dqdci; // dwdot[HONO]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[10];
  J[560] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[567] += dqdci; // dwdot[HONO]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 136: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-291.865666166737) * invT);
  dlnkfdT = 1.94 * invT + (-291.865666166737) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(-g_RT[13] + g_RT[16] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[22]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NH3
  wdot[16] -= q; // NH2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[338] += dqdci; // dwdot[NH3]/d[NH3]
  J[341] -= dqdci; // dwdot[NH2]/d[NH3]
  J[343] += dqdci; // dwdot[HNO]/d[NH3]
  J[347] -= dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[413] += dqdci; // dwdot[NH3]/d[NH2]
  J[416] -= dqdci; // dwdot[NH2]/d[NH2]
  J[418] += dqdci; // dwdot[HNO]/d[NH2]
  J[422] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[13];
  J[463] += dqdci; // dwdot[NH3]/d[HNO]
  J[466] -= dqdci; // dwdot[NH2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[16];
  J[563] += dqdci; // dwdot[NH3]/d[H2NO]
  J[566] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[613] += dqdT; // dwdot[NH3]/dT
  J[616] -= dqdT; // dwdot[NH2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 137: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 0.00023 * exp(2.994 * logT - (8303.08505011119) * invT);
  dlnkfdT = 2.994 * invT + (8303.08505011119) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[7] += q;  // HO2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[78] -= dqdci; // dwdot[O2]/d[O2]
  J[82] += dqdci; // dwdot[HO2]/d[O2]
  J[93] += dqdci; // dwdot[HNO]/d[O2]
  J[97] -= dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[18];
  J[178] -= dqdci; // dwdot[O2]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[HNO]/d[HO2]
  J[197] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[453] -= dqdci; // dwdot[O2]/d[HNO]
  J[457] += dqdci; // dwdot[HO2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[553] -= dqdci; // dwdot[O2]/d[H2NO]
  J[557] += dqdci; // dwdot[HO2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[603] -= dqdT; // dwdot[O2]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 138: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[22];
  k_f = 0.336 * exp(2 * logT - (-721.612698763968) * invT);
  dlnkfdT = 2 * invT + (-721.612698763968) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[18] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[22]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O2
  wdot[7] -= q;  // HO2
  wdot[18] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[156] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[157] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[168] += dqdci; // dwdot[HNO]/d[H2O2]
  J[172] -= dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[181] += dqdci; // dwdot[H2O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[HNO]/d[HO2]
  J[197] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[456] += dqdci; // dwdot[H2O2]/d[HNO]
  J[457] -= dqdci; // dwdot[HO2]/d[HNO]
  J[468] += dqdci; // dwdot[HNO]/d[HNO]
  J[472] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[7];
  J[556] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[557] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[568] += dqdci; // dwdot[HNO]/d[H2NO]
  J[572] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[606] += dqdT; // dwdot[H2O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[618] += dqdT; // dwdot[HNO]/dT
  J[622] -= dqdT; // dwdot[H2NO]/dT

  // reaction 139: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 88500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[59] += dqdci; // dwdot[NO]/d[H]
  J[60] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NO]/d[OH]
  J[135] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[227] -= dqdci; // dwdot[H]/d[NO]
  J[230] += dqdci; // dwdot[OH]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[252] -= dqdci; // dwdot[H]/d[NO2]
  J[255] += dqdci; // dwdot[OH]/d[NO2]
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT

  // reaction 140: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 3920000 * exp(-(-119.765566461523) * invT);
  dlnkfdT = (-119.765566461523) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[9] += q;  // NO
  wdot[10] -= q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[84] += dqdci; // dwdot[NO]/d[O2]
  J[85] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[109] += dqdci; // dwdot[NO]/d[O]
  J[110] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[228] += dqdci; // dwdot[O2]/d[NO]
  J[229] -= dqdci; // dwdot[O]/d[NO]
  J[234] += dqdci; // dwdot[NO]/d[NO]
  J[235] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[4];
  J[253] += dqdci; // dwdot[O2]/d[NO2]
  J[254] -= dqdci; // dwdot[O]/d[NO2]
  J[259] += dqdci; // dwdot[NO]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[609] += dqdT; // dwdot[NO]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT

  // reaction 141: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[10];
  k_f = 1.9e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[3] * sc[17];
  Kc = exp(-g_RT[3] + g_RT[7] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[3] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[7] -= q;  // HO2
  wdot[10] -= q; // NO2
  wdot[17] += q; // HONO
  // d()/d[O2]
  dqdci = -k_r * sc[17];
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[82] -= dqdci; // dwdot[HO2]/d[O2]
  J[85] -= dqdci; // dwdot[NO2]/d[O2]
  J[92] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[178] += dqdci; // dwdot[O2]/d[HO2]
  J[182] -= dqdci; // dwdot[HO2]/d[HO2]
  J[185] -= dqdci; // dwdot[NO2]/d[HO2]
  J[192] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[7];
  J[253] += dqdci; // dwdot[O2]/d[NO2]
  J[257] -= dqdci; // dwdot[HO2]/d[NO2]
  J[260] -= dqdci; // dwdot[NO2]/d[NO2]
  J[267] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[3];
  J[428] += dqdci; // dwdot[O2]/d[HONO]
  J[432] -= dqdci; // dwdot[HO2]/d[HONO]
  J[435] -= dqdci; // dwdot[NO2]/d[HONO]
  J[442] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[607] -= dqdT; // dwdot[HO2]/dT
  J[610] -= dqdT; // dwdot[NO2]/dT
  J[617] += dqdT; // dwdot[HONO]/dT

  // reaction 142: 2 NO2 => 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 1630000 * exp(-(13098.7398752302) * invT);
  dlnkfdT = (13098.7398752302) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;      // O2
  wdot[9] += 2 * q;  // NO
  wdot[10] -= 2 * q; // NO2
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[253] += dqdci;      // dwdot[O2]/d[NO2]
  J[259] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[260] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[603] += dqdT;      // dwdot[O2]/dT
  J[609] += 2 * dqdT;  // dwdot[NO]/dT
  J[610] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 144: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 25300 * exp(-(2289.64086157813) * invT);
  dlnkfdT = (2289.64086157813) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[61] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[277] -= dqdci; // dwdot[H]/d[N2O]
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 145: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 500000000 * exp(-(9108.23171539874) * invT);
  dlnkfdT = (9108.23171539874) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[2] - g_RT[5] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[2] -= q;  // H
  wdot[5] += q;  // OH
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[2] -= dqdci;  // dwdot[H]/d[N2]
  J[5] += dqdci;  // dwdot[OH]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[50] += dqdci; // dwdot[N2]/d[H]
  J[52] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[OH]/d[H]
  J[61] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[H]/d[OH]
  J[130] += dqdci; // dwdot[OH]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[277] -= dqdci; // dwdot[H]/d[N2O]
  J[280] += dqdci; // dwdot[OH]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[602] -= dqdT; // dwdot[H]/dT
  J[605] += dqdT; // dwdot[OH]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 146: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 66200000 * exp(-(13400.669874713) * invT);
  dlnkfdT = (13400.669874713) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(g_RT[4] - 2.000000 * g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;     // O
  wdot[9] += 2 * q; // NO
  wdot[11] -= q;    // N2O
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[104] -= dqdci;     // dwdot[O]/d[O]
  J[109] += 2 * dqdci; // dwdot[NO]/d[O]
  J[111] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[9];
  J[229] -= dqdci;     // dwdot[O]/d[NO]
  J[234] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[236] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[279] -= dqdci;     // dwdot[O]/d[N2O]
  J[284] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[286] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[604] -= dqdT;     // dwdot[O]/dT
  J[609] += 2 * dqdT; // dwdot[NO]/dT
  J[611] -= dqdT;     // dwdot[N2O]/dT

  // reaction 147: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 102000000 * exp(-(14100.1511045149) * invT);
  dlnkfdT = (14100.1511045149) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[4] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O2
  wdot[4] -= q;  // O
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O2]/d[N2]
  J[4] -= dqdci;  // dwdot[O]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[75] += dqdci; // dwdot[N2]/d[O2]
  J[78] += dqdci; // dwdot[O2]/d[O2]
  J[79] -= dqdci; // dwdot[O]/d[O2]
  J[86] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[100] += dqdci; // dwdot[N2]/d[O]
  J[103] += dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[O]/d[O]
  J[111] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[278] += dqdci; // dwdot[O2]/d[N2O]
  J[279] -= dqdci; // dwdot[O]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[603] += dqdT; // dwdot[O2]/dT
  J[604] -= dqdT; // dwdot[O]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 148: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 1e-08 * exp(4.72 * logT - (18397.6163983205) * invT);
  dlnkfdT = 4.72 * invT + (18397.6163983205) * invT2;
  // reverse
  phi_r = sc[0] * sc[7];
  Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] -= q;  // OH
  wdot[7] += q;  // HO2
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[7];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] -= dqdci;  // dwdot[OH]/d[N2]
  J[7] += dqdci;  // dwdot[HO2]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[125] += dqdci; // dwdot[N2]/d[OH]
  J[130] -= dqdci; // dwdot[OH]/d[OH]
  J[132] += dqdci; // dwdot[HO2]/d[OH]
  J[136] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[175] += dqdci; // dwdot[N2]/d[HO2]
  J[180] -= dqdci; // dwdot[OH]/d[HO2]
  J[182] += dqdci; // dwdot[HO2]/d[HO2]
  J[186] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[5];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[280] -= dqdci; // dwdot[OH]/d[N2O]
  J[282] += dqdci; // dwdot[HO2]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[605] -= dqdT; // dwdot[OH]/dT
  J[607] += dqdT; // dwdot[HO2]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  // reaction 149: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 0.525 * exp(2.23 * logT - (23298.9567875918) * invT);
  dlnkfdT = 2.23 * invT + (23298.9567875918) * invT2;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // NO
  wdot[10] += q; // NO2
  wdot[11] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[NO]/d[N2]
  J[10] += dqdci; // dwdot[NO2]/d[N2]
  J[11] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[225] += dqdci; // dwdot[N2]/d[NO]
  J[234] -= dqdci; // dwdot[NO]/d[NO]
  J[235] += dqdci; // dwdot[NO2]/d[NO]
  J[236] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[250] += dqdci; // dwdot[N2]/d[NO2]
  J[259] -= dqdci; // dwdot[NO]/d[NO2]
  J[260] += dqdci; // dwdot[NO2]/d[NO2]
  J[261] -= dqdci; // dwdot[N2O]/d[NO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[9];
  J[275] += dqdci; // dwdot[N2]/d[N2O]
  J[284] -= dqdci; // dwdot[NO]/d[N2O]
  J[285] += dqdci; // dwdot[NO2]/d[N2O]
  J[286] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[600] += dqdT; // dwdot[N2]/dT
  J[609] -= dqdT; // dwdot[NO]/dT
  J[610] += dqdT; // dwdot[NO2]/dT
  J[611] -= dqdT; // dwdot[N2O]/dT

  amrex::Real c_R[24], dcRdT[24], e_RT[24];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 24; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[600 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 24; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 24; ++m) {
      dehmixdc += eh_RT[m] * J[k * 25 + m];
    }
    J[k * 25 + 24] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[624] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[24];

  for (int k = 0; k < 24; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 24; k++) {
    J[600 + k] *= 1.e-6;
    J[k * 25 + 24] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 98;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 11784;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 24;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.80140000E+01;
  WT[1] = 2.01600000E+00;
  WT[2] = 1.00800000E+00;
  WT[3] = 3.19980000E+01;
  WT[4] = 1.59990000E+01;
  WT[5] = 1.70070000E+01;
  WT[6] = 3.40140000E+01;
  WT[7] = 3.30060000E+01;
  WT[8] = 1.80150000E+01;
  WT[9] = 3.00060000E+01;
  WT[10] = 4.60050000E+01;
  WT[11] = 4.40130000E+01;
  WT[12] = 3.00300000E+01;
  WT[13] = 1.70310000E+01;
  WT[14] = 3.20460000E+01;
  WT[15] = 1.50150000E+01;
  WT[16] = 1.60230000E+01;
  WT[17] = 4.70130000E+01;
  WT[18] = 3.10140000E+01;
  WT[19] = 3.00300000E+01;
  WT[20] = 1.40070000E+01;
  WT[21] = 2.90220000E+01;
  WT[22] = 3.20220000E+01;
  WT[23] = 3.10380000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 9.75300000E+01;
  EPS[1] = 3.80000000E+01;
  EPS[2] = 1.45000000E+02;
  EPS[3] = 1.07400000E+02;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 8.00000000E+01;
  EPS[6] = 1.07400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 5.72400000E+02;
  EPS[9] = 9.75000000E+01;
  EPS[10] = 2.00000000E+02;
  EPS[11] = 2.32400000E+02;
  EPS[12] = 7.14000000E+01;
  EPS[13] = 4.81000000E+02;
  EPS[14] = 2.05000000E+02;
  EPS[15] = 8.00000000E+01;
  EPS[16] = 8.00000000E+01;
  EPS[17] = 2.00000000E+02;
  EPS[18] = 1.16700000E+02;
  EPS[19] = 7.14000000E+01;
  EPS[20] = 7.14000000E+01;
  EPS[21] = 7.14000000E+01;
  EPS[22] = 1.16700000E+02;
  EPS[23] = 2.00000000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 3.62100000E+00;
  SIG[1] = 2.92000000E+00;
  SIG[2] = 2.05000000E+00;
  SIG[3] = 3.45800000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 2.75000000E+00;
  SIG[6] = 3.45800000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 2.60500000E+00;
  SIG[9] = 3.62100000E+00;
  SIG[10] = 3.50000000E+00;
  SIG[11] = 3.82800000E+00;
  SIG[12] = 3.79800000E+00;
  SIG[13] = 2.92000000E+00;
  SIG[14] = 4.23000000E+00;
  SIG[15] = 2.65000000E+00;
  SIG[16] = 2.65000000E+00;
  SIG[17] = 3.50000000E+00;
  SIG[18] = 3.49200000E+00;
  SIG[19] = 3.79800000E+00;
  SIG[20] = 3.29800000E+00;
  SIG[21] = 3.79800000E+00;
  SIG[22] = 3.49200000E+00;
  SIG[23] = 3.90000000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 0.00000000E+00;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 0.00000000E+00;
  ZROT[6] = 0.00000000E+00;
  ZROT[7] = 0.00000000E+00;
  ZROT[8] = 0.00000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 0.00000000E+00;
  ZROT[14] = 0.00000000E+00;
  ZROT[15] = 0.00000000E+00;
  ZROT[16] = 0.00000000E+00;
  ZROT[17] = 0.00000000E+00;
  ZROT[18] = 0.00000000E+00;
  ZROT[19] = 0.00000000E+00;
  ZROT[20] = 0.00000000E+00;
  ZROT[21] = 0.00000000E+00;
  ZROT[22] = 0.00000000E+00;
  ZROT[23] = 0.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 1;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 0;
  NLIN[5] = 1;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 2;
  NLIN[9] = 1;
  NLIN[10] = 2;
  NLIN[11] = 1;
  NLIN[12] = 2;
  NLIN[13] = 2;
  NLIN[14] = 2;
  NLIN[15] = 1;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 2;
  NLIN[20] = 0;
  NLIN[21] = 2;
  NLIN[22] = 2;
  NLIN[23] = 2;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.65695492E+01;
  COFETA[1] = 2.39056562E+00;
  COFETA[2] = -2.34558144E-01;
  COFETA[3] = 1.05024037E-02;
  COFETA[4] = -1.38347555E+01;
  COFETA[5] = 1.00106621E+00;
  COFETA[6] = -4.98105694E-02;
  COFETA[7] = 2.31450475E-03;
  COFETA[8] = -2.04078253E+01;
  COFETA[9] = 3.65436395E+00;
  COFETA[10] = -3.98339635E-01;
  COFETA[11] = 1.75883009E-02;
  COFETA[12] = -1.71618439E+01;
  COFETA[13] = 2.68036374E+00;
  COFETA[14] = -2.72570227E-01;
  COFETA[15] = 1.21650964E-02;
  COFETA[16] = -1.50926370E+01;
  COFETA[17] = 1.92606504E+00;
  COFETA[18] = -1.73487476E-01;
  COFETA[19] = 7.82572931E-03;
  COFETA[20] = -1.50620876E+01;
  COFETA[21] = 1.92606504E+00;
  COFETA[22] = -1.73487476E-01;
  COFETA[23] = 7.82572931E-03;
  COFETA[24] = -1.71312945E+01;
  COFETA[25] = 2.68036374E+00;
  COFETA[26] = -2.72570227E-01;
  COFETA[27] = 1.21650964E-02;
  COFETA[28] = -1.71463359E+01;
  COFETA[29] = 2.68036374E+00;
  COFETA[30] = -2.72570227E-01;
  COFETA[31] = 1.21650964E-02;
  COFETA[32] = -1.61342881E+01;
  COFETA[33] = 1.17767563E+00;
  COFETA[34] = 5.68796670E-02;
  COFETA[35] = -7.51680174E-03;
  COFETA[36] = -1.65334706E+01;
  COFETA[37] = 2.38991566E+00;
  COFETA[38] = -2.34474715E-01;
  COFETA[39] = 1.04988351E-02;
  COFETA[40] = -2.24069409E+01;
  COFETA[41] = 4.68007883E+00;
  COFETA[42] = -5.23982071E-01;
  COFETA[43] = 2.27205629E-02;
  COFETA[44] = -2.38016052E+01;
  COFETA[45] = 5.08149651E+00;
  COFETA[46] = -5.69446240E-01;
  COFETA[47] = 2.44183705E-02;
  COFETA[48] = -1.48309013E+01;
  COFETA[49] = 1.69625877E+00;
  COFETA[50] = -1.42936462E-01;
  COFETA[51] = 6.47223426E-03;
  COFETA[52] = -2.04835787E+01;
  COFETA[53] = 3.05630126E+00;
  COFETA[54] = -2.19497961E-01;
  COFETA[55] = 5.73506116E-03;
  COFETA[56] = -2.31744337E+01;
  COFETA[57] = 4.75234877E+00;
  COFETA[58] = -5.32490068E-01;
  COFETA[59] = 2.30536067E-02;
  COFETA[60] = -1.50502927E+01;
  COFETA[61] = 1.92606504E+00;
  COFETA[62] = -1.73487476E-01;
  COFETA[63] = 7.82572931E-03;
  COFETA[64] = -1.50178050E+01;
  COFETA[65] = 1.92606504E+00;
  COFETA[66] = -1.73487476E-01;
  COFETA[67] = 7.82572931E-03;
  COFETA[68] = -2.23961039E+01;
  COFETA[69] = 4.68007883E+00;
  COFETA[70] = -5.23982071E-01;
  COFETA[71] = 2.27205629E-02;
  COFETA[72] = -1.77852722E+01;
  COFETA[73] = 2.90334768E+00;
  COFETA[74] = -3.01373404E-01;
  COFETA[75] = 1.34067714E-02;
  COFETA[76] = -1.48309013E+01;
  COFETA[77] = 1.69625877E+00;
  COFETA[78] = -1.42936462E-01;
  COFETA[79] = 6.47223426E-03;
  COFETA[80] = -1.49299043E+01;
  COFETA[81] = 1.69625877E+00;
  COFETA[82] = -1.42936462E-01;
  COFETA[83] = 6.47223426E-03;
  COFETA[84] = -1.48479726E+01;
  COFETA[85] = 1.69625877E+00;
  COFETA[86] = -1.42936462E-01;
  COFETA[87] = 6.47223426E-03;
  COFETA[88] = -1.77692799E+01;
  COFETA[89] = 2.90334768E+00;
  COFETA[90] = -3.01373404E-01;
  COFETA[91] = 1.34067714E-02;
  COFETA[92] = -2.28201370E+01;
  COFETA[93] = 4.68007883E+00;
  COFETA[94] = -5.23982071E-01;
  COFETA[95] = 2.27205629E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.41429211E+01;
  COFLAM[1] = -4.07146367E+00;
  COFLAM[2] = 7.21002426E-01;
  COFLAM[3] = -3.53713994E-02;
  COFLAM[4] = 9.83834688E+00;
  COFLAM[5] = -7.75727139E-01;
  COFLAM[6] = 1.59853382E-01;
  COFLAM[7] = -4.61695782E-03;
  COFLAM[8] = -8.57944636E-01;
  COFLAM[9] = 3.65436395E+00;
  COFLAM[10] = -3.98339635E-01;
  COFLAM[11] = 1.75883009E-02;
  COFLAM[12] = -1.61450376E+00;
  COFLAM[13] = 2.73467063E+00;
  COFLAM[14] = -2.51122720E-01;
  COFLAM[15] = 1.07433559E-02;
  COFLAM[16] = 1.69268564E+00;
  COFLAM[17] = 1.92606504E+00;
  COFLAM[18] = -1.73487476E-01;
  COFLAM[19] = 7.82572931E-03;
  COFLAM[20] = 1.41832140E+01;
  COFLAM[21] = -3.26221304E+00;
  COFLAM[22] = 5.37538471E-01;
  COFLAM[23] = -2.35356088E-02;
  COFLAM[24] = 9.06887777E-01;
  COFLAM[25] = 1.28750812E+00;
  COFLAM[26] = 2.08235251E-02;
  COFLAM[27] = -4.24431015E-03;
  COFLAM[28] = 5.63713012E-01;
  COFLAM[29] = 1.59866250E+00;
  COFLAM[30] = -5.91283645E-02;
  COFLAM[31] = 1.07188790E-03;
  COFLAM[32] = 1.82064347E+01;
  COFLAM[33] = -6.51218746E+00;
  COFLAM[34] = 1.16348292E+00;
  COFLAM[35] = -5.85246525E-02;
  COFLAM[36] = 1.06369384E+01;
  COFLAM[37] = -2.62853070E+00;
  COFLAM[38] = 5.25919466E-01;
  COFLAM[39] = -2.67273491E-02;
  COFLAM[40] = -1.36593684E+01;
  COFLAM[41] = 7.15879840E+00;
  COFLAM[42] = -7.83601536E-01;
  COFLAM[43] = 3.19281571E-02;
  COFLAM[44] = -1.10769133E+01;
  COFLAM[45] = 5.86770142E+00;
  COFLAM[46] = -5.83713575E-01;
  COFLAM[47] = 2.18100030E-02;
  COFLAM[48] = 7.48094256E+00;
  COFLAM[49] = -2.02936405E+00;
  COFLAM[50] = 5.52493180E-01;
  COFLAM[51] = -3.18859215E-02;
  COFLAM[52] = 1.10965272E+01;
  COFLAM[53] = -4.09090472E+00;
  COFLAM[54] = 9.08918839E-01;
  COFLAM[55] = -5.03278645E-02;
  COFLAM[56] = -1.15323427E+01;
  COFLAM[57] = 5.60386321E+00;
  COFLAM[58] = -4.73608087E-01;
  COFLAM[59] = 1.42970202E-02;
  COFLAM[60] = 1.28542991E+01;
  COFLAM[61] = -2.71178369E+00;
  COFLAM[62] = 4.68156709E-01;
  COFLAM[63] = -2.05350295E-02;
  COFLAM[64] = 2.36883515E+01;
  COFLAM[65] = -7.85538684E+00;
  COFLAM[66] = 1.26934308E+00;
  COFLAM[67] = -6.07835158E-02;
  COFLAM[68] = -1.13401413E+01;
  COFLAM[69] = 6.11476259E+00;
  COFLAM[70] = -6.15022358E-01;
  COFLAM[71] = 2.31766664E-02;
  COFLAM[72] = 1.61091262E+01;
  COFLAM[73] = -5.24134346E+00;
  COFLAM[74] = 9.26111876E-01;
  COFLAM[75] = -4.53970315E-02;
  COFLAM[76] = 1.31307935E+01;
  COFLAM[77] = -4.57083411E+00;
  COFLAM[78] = 9.26286798E-01;
  COFLAM[79] = -4.99332749E-02;
  COFLAM[80] = 1.98838734E+00;
  COFLAM[81] = 1.69625877E+00;
  COFLAM[82] = -1.42936462E-01;
  COFLAM[83] = 6.47223426E-03;
  COFLAM[84] = 1.39385063E+01;
  COFLAM[85] = -4.39781461E+00;
  COFLAM[86] = 8.30330794E-01;
  COFLAM[87] = -4.28600339E-02;
  COFLAM[88] = 6.47229527E+00;
  COFLAM[89] = -1.42022222E+00;
  COFLAM[90] = 4.45487132E-01;
  COFLAM[91] = -2.59434399E-02;
  COFLAM[92] = -5.55598670E+00;
  COFLAM[93] = 3.16934298E+00;
  COFLAM[94] = -1.44421027E-01;
  COFLAM[95] = -4.82766185E-04;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.49828551E+01;
  COFD[1] = 3.25781069E+00;
  COFD[2] = -2.12199367E-01;
  COFD[3] = 9.36657283E-03;
  COFD[4] = -1.16906458E+01;
  COFD[5] = 2.47469981E+00;
  COFD[6] = -1.10436257E-01;
  COFD[7] = 4.95273813E-03;
  COFD[8] = -1.42894603E+01;
  COFD[9] = 3.67490723E+00;
  COFD[10] = -2.65114792E-01;
  COFD[11] = 1.16092671E-02;
  COFD[12] = -1.52414498E+01;
  COFD[13] = 3.35922578E+00;
  COFD[14] = -2.25181399E-01;
  COFD[15] = 9.92132878E-03;
  COFD[16] = -1.40756909E+01;
  COFD[17] = 3.07549274E+00;
  COFD[18] = -1.88889344E-01;
  COFD[19] = 8.37152866E-03;
  COFD[20] = -1.40949183E+01;
  COFD[21] = 3.07549274E+00;
  COFD[22] = -1.88889344E-01;
  COFD[23] = 8.37152866E-03;
  COFD[24] = -1.52554785E+01;
  COFD[25] = 3.35922578E+00;
  COFD[26] = -2.25181399E-01;
  COFD[27] = 9.92132878E-03;
  COFD[28] = -1.52486292E+01;
  COFD[29] = 3.35922578E+00;
  COFD[30] = -2.25181399E-01;
  COFD[31] = 9.92132878E-03;
  COFD[32] = -2.04924683E+01;
  COFD[33] = 5.37387116E+00;
  COFD[34] = -4.70529459E-01;
  COFD[35] = 1.99137519E-02;
  COFD[36] = -1.49991002E+01;
  COFD[37] = 3.25758557E+00;
  COFD[38] = -2.12171692E-01;
  COFD[39] = 9.36544059E-03;
  COFD[40] = -1.74272359E+01;
  COFD[41] = 4.14166966E+00;
  COFD[42] = -3.25149462E-01;
  COFD[43] = 1.41943811E-02;
  COFD[44] = -1.79765505E+01;
  COFD[45] = 4.30841971E+00;
  COFD[46] = -3.45524579E-01;
  COFD[47] = 1.50265381E-02;
  COFD[48] = -1.42780328E+01;
  COFD[49] = 2.97137588E+00;
  COFD[50] = -1.75491257E-01;
  COFD[51] = 7.79646773E-03;
  COFD[52] = -2.00009885E+01;
  COFD[53] = 5.18642913E+00;
  COFD[54] = -4.49751926E-01;
  COFD[55] = 1.91538664E-02;
  COFD[56] = -1.76215377E+01;
  COFD[57] = 4.16885068E+00;
  COFD[58] = -3.28516035E-01;
  COFD[59] = 1.43340744E-02;
  COFD[60] = -1.40236167E+01;
  COFD[61] = 3.07549274E+00;
  COFD[62] = -1.88889344E-01;
  COFD[63] = 8.37152866E-03;
  COFD[64] = -1.40445265E+01;
  COFD[65] = 3.07549274E+00;
  COFD[66] = -1.88889344E-01;
  COFD[67] = 8.37152866E-03;
  COFD[68] = -1.74313098E+01;
  COFD[69] = 4.14166966E+00;
  COFD[70] = -3.25149462E-01;
  COFD[71] = 1.41943811E-02;
  COFD[72] = -1.55297830E+01;
  COFD[73] = 3.46766436E+00;
  COFD[74] = -2.39228775E-01;
  COFD[75] = 1.05291747E-02;
  COFD[76] = -1.42780328E+01;
  COFD[77] = 2.97137588E+00;
  COFD[78] = -1.75491257E-01;
  COFD[79] = 7.79646773E-03;
  COFD[80] = -1.39186828E+01;
  COFD[81] = 2.97137588E+00;
  COFD[82] = -1.75491257E-01;
  COFD[83] = 7.79646773E-03;
  COFD[84] = -1.42697208E+01;
  COFD[85] = 2.97137588E+00;
  COFD[86] = -1.75491257E-01;
  COFD[87] = 7.79646773E-03;
  COFD[88] = -1.55373090E+01;
  COFD[89] = 3.46766436E+00;
  COFD[90] = -2.39228775E-01;
  COFD[91] = 1.05291747E-02;
  COFD[92] = -1.74527205E+01;
  COFD[93] = 4.14166966E+00;
  COFD[94] = -3.25149462E-01;
  COFD[95] = 1.41943811E-02;
  COFD[96] = -1.16906458E+01;
  COFD[97] = 2.47469981E+00;
  COFD[98] = -1.10436257E-01;
  COFD[99] = 4.95273813E-03;
  COFD[100] = -1.03270769E+01;
  COFD[101] = 2.19285409E+00;
  COFD[102] = -7.54492786E-02;
  COFD[103] = 3.51398213E-03;
  COFD[104] = -1.14366544E+01;
  COFD[105] = 2.78323501E+00;
  COFD[106] = -1.51214064E-01;
  COFD[107] = 6.75150012E-03;
  COFD[108] = -1.18989101E+01;
  COFD[109] = 2.57507000E+00;
  COFD[110] = -1.24033737E-01;
  COFD[111] = 5.56694959E-03;
  COFD[112] = -1.09595844E+01;
  COFD[113] = 2.30836460E+00;
  COFD[114] = -8.76339315E-02;
  COFD[115] = 3.90878445E-03;
  COFD[116] = -1.09629118E+01;
  COFD[117] = 2.30836460E+00;
  COFD[118] = -8.76339315E-02;
  COFD[119] = 3.90878445E-03;
  COFD[120] = -1.19006697E+01;
  COFD[121] = 2.57507000E+00;
  COFD[122] = -1.24033737E-01;
  COFD[123] = 5.56694959E-03;
  COFD[124] = -1.18998160E+01;
  COFD[125] = 2.57507000E+00;
  COFD[126] = -1.24033737E-01;
  COFD[127] = 5.56694959E-03;
  COFD[128] = -1.61402509E+01;
  COFD[129] = 4.26826011E+00;
  COFD[130] = -3.40773687E-01;
  COFD[131] = 1.48396317E-02;
  COFD[132] = -1.16920043E+01;
  COFD[133] = 2.47435332E+00;
  COFD[134] = -1.10389228E-01;
  COFD[135] = 4.95061056E-03;
  COFD[136] = -1.31911433E+01;
  COFD[137] = 3.04970299E+00;
  COFD[138] = -1.85555523E-01;
  COFD[139] = 8.22773480E-03;
  COFD[140] = -1.36894486E+01;
  COFD[141] = 3.19999740E+00;
  COFD[142] = -2.04999020E-01;
  COFD[143] = 9.06766105E-03;
  COFD[144] = -1.10367385E+01;
  COFD[145] = 2.19094415E+00;
  COFD[146] = -7.11992510E-02;
  COFD[147] = 3.14105973E-03;
  COFD[148] = -1.56943826E+01;
  COFD[149] = 4.06840830E+00;
  COFD[150] = -3.16035090E-01;
  COFD[151] = 1.38145007E-02;
  COFD[152] = -1.34619205E+01;
  COFD[153] = 3.07392586E+00;
  COFD[154] = -1.88686437E-01;
  COFD[155] = 8.36275856E-03;
  COFD[156] = -1.09203428E+01;
  COFD[157] = 2.30836460E+00;
  COFD[158] = -8.76339315E-02;
  COFD[159] = 3.90878445E-03;
  COFD[160] = -1.09240801E+01;
  COFD[161] = 2.30836460E+00;
  COFD[162] = -8.76339315E-02;
  COFD[163] = 3.90878445E-03;
  COFD[164] = -1.31915935E+01;
  COFD[165] = 3.04970299E+00;
  COFD[166] = -1.85555523E-01;
  COFD[167] = 8.22773480E-03;
  COFD[168] = -1.20867851E+01;
  COFD[169] = 2.64389960E+00;
  COFD[170] = -1.33241706E-01;
  COFD[171] = 5.97810200E-03;
  COFD[172] = -1.10367385E+01;
  COFD[173] = 2.19094415E+00;
  COFD[174] = -7.11992510E-02;
  COFD[175] = 3.14105973E-03;
  COFD[176] = -1.08473079E+01;
  COFD[177] = 2.19094415E+00;
  COFD[178] = -7.11992510E-02;
  COFD[179] = 3.14105973E-03;
  COFD[180] = -1.10356472E+01;
  COFD[181] = 2.19094415E+00;
  COFD[182] = -7.11992510E-02;
  COFD[183] = 3.14105973E-03;
  COFD[184] = -1.20877466E+01;
  COFD[185] = 2.64389960E+00;
  COFD[186] = -1.33241706E-01;
  COFD[187] = 5.97810200E-03;
  COFD[188] = -1.33020050E+01;
  COFD[189] = 3.04970299E+00;
  COFD[190] = -1.85555523E-01;
  COFD[191] = 8.22773480E-03;
  COFD[192] = -1.42894603E+01;
  COFD[193] = 3.67490723E+00;
  COFD[194] = -2.65114792E-01;
  COFD[195] = 1.16092671E-02;
  COFD[196] = -1.14366544E+01;
  COFD[197] = 2.78323501E+00;
  COFD[198] = -1.51214064E-01;
  COFD[199] = 6.75150012E-03;
  COFD[200] = -1.47968875E+01;
  COFD[201] = 4.23027636E+00;
  COFD[202] = -3.36139991E-01;
  COFD[203] = 1.46507621E-02;
  COFD[204] = -1.46550238E+01;
  COFD[205] = 3.83606243E+00;
  COFD[206] = -2.86076532E-01;
  COFD[207] = 1.25205829E-02;
  COFD[208] = -1.34230419E+01;
  COFD[209] = 3.48624238E+00;
  COFD[210] = -2.41554467E-01;
  COFD[211] = 1.06263545E-02;
  COFD[212] = -1.34248014E+01;
  COFD[213] = 3.48624238E+00;
  COFD[214] = -2.41554467E-01;
  COFD[215] = 1.06263545E-02;
  COFD[216] = -1.46559297E+01;
  COFD[217] = 3.83606243E+00;
  COFD[218] = -2.86076532E-01;
  COFD[219] = 1.25205829E-02;
  COFD[220] = -1.46554904E+01;
  COFD[221] = 3.83606243E+00;
  COFD[222] = -2.86076532E-01;
  COFD[223] = 1.25205829E-02;
  COFD[224] = -1.95739720E+01;
  COFD[225] = 5.61113230E+00;
  COFD[226] = -4.90190187E-01;
  COFD[227] = 2.03260675E-02;
  COFD[228] = -1.42897987E+01;
  COFD[229] = 3.67461872E+00;
  COFD[230] = -2.65079836E-01;
  COFD[231] = 1.16078592E-02;
  COFD[232] = -1.68734802E+01;
  COFD[233] = 4.63687143E+00;
  COFD[234] = -3.85900861E-01;
  COFD[235] = 1.66856798E-02;
  COFD[236] = -1.74819260E+01;
  COFD[237] = 4.80792005E+00;
  COFD[238] = -4.06126584E-01;
  COFD[239] = 1.74831083E-02;
  COFD[240] = -1.34492865E+01;
  COFD[241] = 3.34156587E+00;
  COFD[242] = -2.22853306E-01;
  COFD[243] = 9.81883417E-03;
  COFD[244] = -1.94027720E+01;
  COFD[245] = 5.54487588E+00;
  COFD[246] = -4.86919661E-01;
  COFD[247] = 2.03935297E-02;
  COFD[248] = -1.72055588E+01;
  COFD[249] = 4.66875212E+00;
  COFD[250] = -3.89780131E-01;
  COFD[251] = 1.68436252E-02;
  COFD[252] = -1.33789967E+01;
  COFD[253] = 3.48624238E+00;
  COFD[254] = -2.41554467E-01;
  COFD[255] = 1.06263545E-02;
  COFD[256] = -1.33809795E+01;
  COFD[257] = 3.48624238E+00;
  COFD[258] = -2.41554467E-01;
  COFD[259] = 1.06263545E-02;
  COFD[260] = -1.68737101E+01;
  COFD[261] = 4.63687143E+00;
  COFD[262] = -3.85900861E-01;
  COFD[263] = 1.66856798E-02;
  COFD[264] = -1.50140936E+01;
  COFD[265] = 3.96853403E+00;
  COFD[266] = -3.03320126E-01;
  COFD[267] = 1.32719819E-02;
  COFD[268] = -1.34492865E+01;
  COFD[269] = 3.34156587E+00;
  COFD[270] = -2.22853306E-01;
  COFD[271] = 9.81883417E-03;
  COFD[272] = -1.32522938E+01;
  COFD[273] = 3.34156587E+00;
  COFD[274] = -2.22853306E-01;
  COFD[275] = 9.81883417E-03;
  COFD[276] = -1.34487228E+01;
  COFD[277] = 3.34156587E+00;
  COFD[278] = -2.22853306E-01;
  COFD[279] = 9.81883417E-03;
  COFD[280] = -1.50145893E+01;
  COFD[281] = 3.96853403E+00;
  COFD[282] = -3.03320126E-01;
  COFD[283] = 1.32719819E-02;
  COFD[284] = -1.70075237E+01;
  COFD[285] = 4.63687143E+00;
  COFD[286] = -3.85900861E-01;
  COFD[287] = 1.66856798E-02;
  COFD[288] = -1.52414498E+01;
  COFD[289] = 3.35922578E+00;
  COFD[290] = -2.25181399E-01;
  COFD[291] = 9.92132878E-03;
  COFD[292] = -1.18989101E+01;
  COFD[293] = 2.57507000E+00;
  COFD[294] = -1.24033737E-01;
  COFD[295] = 5.56694959E-03;
  COFD[296] = -1.46550238E+01;
  COFD[297] = 3.83606243E+00;
  COFD[298] = -2.86076532E-01;
  COFD[299] = 1.25205829E-02;
  COFD[300] = -1.55511233E+01;
  COFD[301] = 3.48070094E+00;
  COFD[302] = -2.40859499E-01;
  COFD[303] = 1.05972514E-02;
  COFD[304] = -1.43139120E+01;
  COFD[305] = 3.17651319E+00;
  COFD[306] = -2.02028974E-01;
  COFD[307] = 8.94232502E-03;
  COFD[308] = -1.43340695E+01;
  COFD[309] = 3.17651319E+00;
  COFD[310] = -2.02028974E-01;
  COFD[311] = 8.94232502E-03;
  COFD[312] = -1.55661647E+01;
  COFD[313] = 3.48070094E+00;
  COFD[314] = -2.40859499E-01;
  COFD[315] = 1.05972514E-02;
  COFD[316] = -1.55588172E+01;
  COFD[317] = 3.48070094E+00;
  COFD[318] = -2.40859499E-01;
  COFD[319] = 1.05972514E-02;
  COFD[320] = -2.06408348E+01;
  COFD[321] = 5.41688482E+00;
  COFD[322] = -4.73387188E-01;
  COFD[323] = 1.99280175E-02;
  COFD[324] = -1.52582687E+01;
  COFD[325] = 3.35876143E+00;
  COFD[326] = -2.25120173E-01;
  COFD[327] = 9.91863270E-03;
  COFD[328] = -1.77337260E+01;
  COFD[329] = 4.25438185E+00;
  COFD[330] = -3.39084808E-01;
  COFD[331] = 1.47709916E-02;
  COFD[332] = -1.83308344E+01;
  COFD[333] = 4.43878381E+00;
  COFD[334] = -3.61697624E-01;
  COFD[335] = 1.56975581E-02;
  COFD[336] = -1.45001273E+01;
  COFD[337] = 3.05837263E+00;
  COFD[338] = -1.86672802E-01;
  COFD[339] = 8.27575734E-03;
  COFD[340] = -2.03608484E+01;
  COFD[341] = 5.32029196E+00;
  COFD[342] = -4.65578114E-01;
  COFD[343] = 1.97797257E-02;
  COFD[344] = -1.79257516E+01;
  COFD[345] = 4.28074656E+00;
  COFD[346] = -3.42272429E-01;
  COFD[347] = 1.48995988E-02;
  COFD[348] = -1.42600522E+01;
  COFD[349] = 3.17651319E+00;
  COFD[350] = -2.02028974E-01;
  COFD[351] = 8.94232502E-03;
  COFD[352] = -1.42819328E+01;
  COFD[353] = 3.17651319E+00;
  COFD[354] = -2.02028974E-01;
  COFD[355] = 8.94232502E-03;
  COFD[356] = -1.77381432E+01;
  COFD[357] = 4.25438185E+00;
  COFD[358] = -3.39084808E-01;
  COFD[359] = 1.47709916E-02;
  COFD[360] = -1.57967271E+01;
  COFD[361] = 3.57122377E+00;
  COFD[362] = -2.52409987E-01;
  COFD[363] = 1.10900562E-02;
  COFD[364] = -1.45001273E+01;
  COFD[365] = 3.05837263E+00;
  COFD[366] = -1.86672802E-01;
  COFD[367] = 8.27575734E-03;
  COFD[368] = -1.41254300E+01;
  COFD[369] = 3.05837263E+00;
  COFD[370] = -1.86672802E-01;
  COFD[371] = 8.27575734E-03;
  COFD[372] = -1.44912481E+01;
  COFD[373] = 3.05837263E+00;
  COFD[374] = -1.86672802E-01;
  COFD[375] = 8.27575734E-03;
  COFD[376] = -1.58047841E+01;
  COFD[377] = 3.57122377E+00;
  COFD[378] = -2.52409987E-01;
  COFD[379] = 1.10900562E-02;
  COFD[380] = -1.77552699E+01;
  COFD[381] = 4.25438185E+00;
  COFD[382] = -3.39084808E-01;
  COFD[383] = 1.47709916E-02;
  COFD[384] = -1.40756909E+01;
  COFD[385] = 3.07549274E+00;
  COFD[386] = -1.88889344E-01;
  COFD[387] = 8.37152866E-03;
  COFD[388] = -1.09595844E+01;
  COFD[389] = 2.30836460E+00;
  COFD[390] = -8.76339315E-02;
  COFD[391] = 3.90878445E-03;
  COFD[392] = -1.34230419E+01;
  COFD[393] = 3.48624238E+00;
  COFD[394] = -2.41554467E-01;
  COFD[395] = 1.06263545E-02;
  COFD[396] = -1.43139120E+01;
  COFD[397] = 3.17651319E+00;
  COFD[398] = -2.02028974E-01;
  COFD[399] = 8.94232502E-03;
  COFD[400] = -1.32093517E+01;
  COFD[401] = 2.90778936E+00;
  COFD[402] = -1.67388544E-01;
  COFD[403] = 7.45220609E-03;
  COFD[404] = -1.32243932E+01;
  COFD[405] = 2.90778936E+00;
  COFD[406] = -1.67388544E-01;
  COFD[407] = 7.45220609E-03;
  COFD[408] = -1.43238892E+01;
  COFD[409] = 3.17651319E+00;
  COFD[410] = -2.02028974E-01;
  COFD[411] = 8.94232502E-03;
  COFD[412] = -1.43190281E+01;
  COFD[413] = 3.17651319E+00;
  COFD[414] = -2.02028974E-01;
  COFD[415] = 8.94232502E-03;
  COFD[416] = -1.94093476E+01;
  COFD[417] = 5.16013126E+00;
  COFD[418] = -4.46824543E-01;
  COFD[419] = 1.90464887E-02;
  COFD[420] = -1.40871001E+01;
  COFD[421] = 3.07518980E+00;
  COFD[422] = -1.88850114E-01;
  COFD[423] = 8.36983308E-03;
  COFD[424] = -1.62772129E+01;
  COFD[425] = 3.88250968E+00;
  COFD[426] = -2.92155848E-01;
  COFD[427] = 1.27867850E-02;
  COFD[428] = -1.69290023E+01;
  COFD[429] = 4.09077642E+00;
  COFD[430] = -3.18894990E-01;
  COFD[431] = 1.39371445E-02;
  COFD[432] = -1.34296968E+01;
  COFD[433] = 2.80913567E+00;
  COFD[434] = -1.54536855E-01;
  COFD[435] = 6.89359313E-03;
  COFD[436] = -1.89669550E+01;
  COFD[437] = 4.98075560E+00;
  COFD[438] = -4.26721620E-01;
  COFD[439] = 1.83024823E-02;
  COFD[440] = -1.65447057E+01;
  COFD[441] = 3.92040487E+00;
  COFD[442] = -2.97068442E-01;
  COFD[443] = 1.30000135E-02;
  COFD[444] = -1.31565325E+01;
  COFD[445] = 2.90778936E+00;
  COFD[446] = -1.67388544E-01;
  COFD[447] = 7.45220609E-03;
  COFD[448] = -1.31730281E+01;
  COFD[449] = 2.90778936E+00;
  COFD[450] = -1.67388544E-01;
  COFD[451] = 7.45220609E-03;
  COFD[452] = -1.62799868E+01;
  COFD[453] = 3.88250968E+00;
  COFD[454] = -2.92155848E-01;
  COFD[455] = 1.27867850E-02;
  COFD[456] = -1.45065534E+01;
  COFD[457] = 3.24450689E+00;
  COFD[458] = -2.10570734E-01;
  COFD[459] = 9.30026771E-03;
  COFD[460] = -1.34296968E+01;
  COFD[461] = 2.80913567E+00;
  COFD[462] = -1.54536855E-01;
  COFD[463] = 6.89359313E-03;
  COFD[464] = -1.31034501E+01;
  COFD[465] = 2.80913567E+00;
  COFD[466] = -1.54536855E-01;
  COFD[467] = 6.89359313E-03;
  COFD[468] = -1.34236967E+01;
  COFD[469] = 2.80913567E+00;
  COFD[470] = -1.54536855E-01;
  COFD[471] = 6.89359313E-03;
  COFD[472] = -1.45119385E+01;
  COFD[473] = 3.24450689E+00;
  COFD[474] = -2.10570734E-01;
  COFD[475] = 9.30026771E-03;
  COFD[476] = -1.63426470E+01;
  COFD[477] = 3.88250968E+00;
  COFD[478] = -2.92155848E-01;
  COFD[479] = 1.27867850E-02;
  COFD[480] = -1.40949183E+01;
  COFD[481] = 3.07549274E+00;
  COFD[482] = -1.88889344E-01;
  COFD[483] = 8.37152866E-03;
  COFD[484] = -1.09629118E+01;
  COFD[485] = 2.30836460E+00;
  COFD[486] = -8.76339315E-02;
  COFD[487] = 3.90878445E-03;
  COFD[488] = -1.34248014E+01;
  COFD[489] = 3.48624238E+00;
  COFD[490] = -2.41554467E-01;
  COFD[491] = 1.06263545E-02;
  COFD[492] = -1.43340695E+01;
  COFD[493] = 3.17651319E+00;
  COFD[494] = -2.02028974E-01;
  COFD[495] = 8.94232502E-03;
  COFD[496] = -1.32243932E+01;
  COFD[497] = 2.90778936E+00;
  COFD[498] = -1.67388544E-01;
  COFD[499] = 7.45220609E-03;
  COFD[500] = -1.32399011E+01;
  COFD[501] = 2.90778936E+00;
  COFD[502] = -1.67388544E-01;
  COFD[503] = 7.45220609E-03;
  COFD[504] = -1.43444614E+01;
  COFD[505] = 3.17651319E+00;
  COFD[506] = -2.02028974E-01;
  COFD[507] = 8.94232502E-03;
  COFD[508] = -1.43393972E+01;
  COFD[509] = 3.17651319E+00;
  COFD[510] = -2.02028974E-01;
  COFD[511] = 8.94232502E-03;
  COFD[512] = -1.94252948E+01;
  COFD[513] = 5.16013126E+00;
  COFD[514] = -4.46824543E-01;
  COFD[515] = 1.90464887E-02;
  COFD[516] = -1.41068125E+01;
  COFD[517] = 3.07518980E+00;
  COFD[518] = -1.88850114E-01;
  COFD[519] = 8.36983308E-03;
  COFD[520] = -1.62996992E+01;
  COFD[521] = 3.88250968E+00;
  COFD[522] = -2.92155848E-01;
  COFD[523] = 1.27867850E-02;
  COFD[524] = -1.69512232E+01;
  COFD[525] = 4.09077642E+00;
  COFD[526] = -3.18894990E-01;
  COFD[527] = 1.39371445E-02;
  COFD[528] = -1.34494148E+01;
  COFD[529] = 2.80913567E+00;
  COFD[530] = -1.54536855E-01;
  COFD[531] = 6.89359313E-03;
  COFD[532] = -1.89824738E+01;
  COFD[533] = 4.98075560E+00;
  COFD[534] = -4.26721620E-01;
  COFD[535] = 1.83024823E-02;
  COFD[536] = -1.65648734E+01;
  COFD[537] = 3.92040487E+00;
  COFD[538] = -2.97068442E-01;
  COFD[539] = 1.30000135E-02;
  COFD[540] = -1.31710897E+01;
  COFD[541] = 2.90778936E+00;
  COFD[542] = -1.67388544E-01;
  COFD[543] = 7.45220609E-03;
  COFD[544] = -1.31880809E+01;
  COFD[545] = 2.90778936E+00;
  COFD[546] = -1.67388544E-01;
  COFD[547] = 7.45220609E-03;
  COFD[548] = -1.63026010E+01;
  COFD[549] = 3.88250968E+00;
  COFD[550] = -2.92155848E-01;
  COFD[551] = 1.27867850E-02;
  COFD[552] = -1.45264956E+01;
  COFD[553] = 3.24450689E+00;
  COFD[554] = -2.10570734E-01;
  COFD[555] = 9.30026771E-03;
  COFD[556] = -1.34494148E+01;
  COFD[557] = 2.80913567E+00;
  COFD[558] = -1.54536855E-01;
  COFD[559] = 6.89359313E-03;
  COFD[560] = -1.31174788E+01;
  COFD[561] = 2.80913567E+00;
  COFD[562] = -1.54536855E-01;
  COFD[563] = 6.89359313E-03;
  COFD[564] = -1.34431749E+01;
  COFD[565] = 2.80913567E+00;
  COFD[566] = -1.54536855E-01;
  COFD[567] = 6.89359313E-03;
  COFD[568] = -1.45321011E+01;
  COFD[569] = 3.24450689E+00;
  COFD[570] = -2.10570734E-01;
  COFD[571] = 9.30026771E-03;
  COFD[572] = -1.63625946E+01;
  COFD[573] = 3.88250968E+00;
  COFD[574] = -2.92155848E-01;
  COFD[575] = 1.27867850E-02;
  COFD[576] = -1.52554785E+01;
  COFD[577] = 3.35922578E+00;
  COFD[578] = -2.25181399E-01;
  COFD[579] = 9.92132878E-03;
  COFD[580] = -1.19006697E+01;
  COFD[581] = 2.57507000E+00;
  COFD[582] = -1.24033737E-01;
  COFD[583] = 5.56694959E-03;
  COFD[584] = -1.46559297E+01;
  COFD[585] = 3.83606243E+00;
  COFD[586] = -2.86076532E-01;
  COFD[587] = 1.25205829E-02;
  COFD[588] = -1.55661647E+01;
  COFD[589] = 3.48070094E+00;
  COFD[590] = -2.40859499E-01;
  COFD[591] = 1.05972514E-02;
  COFD[592] = -1.43238892E+01;
  COFD[593] = 3.17651319E+00;
  COFD[594] = -2.02028974E-01;
  COFD[595] = 8.94232502E-03;
  COFD[596] = -1.43444614E+01;
  COFD[597] = 3.17651319E+00;
  COFD[598] = -2.02028974E-01;
  COFD[599] = 8.94232502E-03;
  COFD[600] = -1.55816727E+01;
  COFD[601] = 3.48070094E+00;
  COFD[602] = -2.40859499E-01;
  COFD[603] = 1.05972514E-02;
  COFD[604] = -1.55740954E+01;
  COFD[605] = 3.48070094E+00;
  COFD[606] = -2.40859499E-01;
  COFD[607] = 1.05972514E-02;
  COFD[608] = -2.06516251E+01;
  COFD[609] = 5.41688482E+00;
  COFD[610] = -4.73387188E-01;
  COFD[611] = 1.99280175E-02;
  COFD[612] = -1.52728198E+01;
  COFD[613] = 3.35876143E+00;
  COFD[614] = -2.25120173E-01;
  COFD[615] = 9.91863270E-03;
  COFD[616] = -1.77515170E+01;
  COFD[617] = 4.25438185E+00;
  COFD[618] = -3.39084808E-01;
  COFD[619] = 1.47709916E-02;
  COFD[620] = -1.83482954E+01;
  COFD[621] = 4.43878381E+00;
  COFD[622] = -3.61697624E-01;
  COFD[623] = 1.56975581E-02;
  COFD[624] = -1.45146845E+01;
  COFD[625] = 3.05837263E+00;
  COFD[626] = -1.86672802E-01;
  COFD[627] = 8.27575734E-03;
  COFD[628] = -2.03712500E+01;
  COFD[629] = 5.32029196E+00;
  COFD[630] = -4.65578114E-01;
  COFD[631] = 1.97797257E-02;
  COFD[632] = -1.79408045E+01;
  COFD[633] = 4.28074656E+00;
  COFD[634] = -3.42272429E-01;
  COFD[635] = 1.48995988E-02;
  COFD[636] = -1.42696077E+01;
  COFD[637] = 3.17651319E+00;
  COFD[638] = -2.02028974E-01;
  COFD[639] = 8.94232502E-03;
  COFD[640] = -1.42919200E+01;
  COFD[641] = 3.17651319E+00;
  COFD[642] = -2.02028974E-01;
  COFD[643] = 8.94232502E-03;
  COFD[644] = -1.77560949E+01;
  COFD[645] = 4.25438185E+00;
  COFD[646] = -3.39084808E-01;
  COFD[647] = 1.47709916E-02;
  COFD[648] = -1.58115301E+01;
  COFD[649] = 3.57122377E+00;
  COFD[650] = -2.52409987E-01;
  COFD[651] = 1.10900562E-02;
  COFD[652] = -1.45146845E+01;
  COFD[653] = 3.05837263E+00;
  COFD[654] = -1.86672802E-01;
  COFD[655] = 8.27575734E-03;
  COFD[656] = -1.41345352E+01;
  COFD[657] = 3.05837263E+00;
  COFD[658] = -1.86672802E-01;
  COFD[659] = 8.27575734E-03;
  COFD[660] = -1.45055453E+01;
  COFD[661] = 3.05837263E+00;
  COFD[662] = -1.86672802E-01;
  COFD[663] = 8.27575734E-03;
  COFD[664] = -1.58198313E+01;
  COFD[665] = 3.57122377E+00;
  COFD[666] = -2.52409987E-01;
  COFD[667] = 1.10900562E-02;
  COFD[668] = -1.77700789E+01;
  COFD[669] = 4.25438185E+00;
  COFD[670] = -3.39084808E-01;
  COFD[671] = 1.47709916E-02;
  COFD[672] = -1.52486292E+01;
  COFD[673] = 3.35922578E+00;
  COFD[674] = -2.25181399E-01;
  COFD[675] = 9.92132878E-03;
  COFD[676] = -1.18998160E+01;
  COFD[677] = 2.57507000E+00;
  COFD[678] = -1.24033737E-01;
  COFD[679] = 5.56694959E-03;
  COFD[680] = -1.46554904E+01;
  COFD[681] = 3.83606243E+00;
  COFD[682] = -2.86076532E-01;
  COFD[683] = 1.25205829E-02;
  COFD[684] = -1.55588172E+01;
  COFD[685] = 3.48070094E+00;
  COFD[686] = -2.40859499E-01;
  COFD[687] = 1.05972514E-02;
  COFD[688] = -1.43190281E+01;
  COFD[689] = 3.17651319E+00;
  COFD[690] = -2.02028974E-01;
  COFD[691] = 8.94232502E-03;
  COFD[692] = -1.43393972E+01;
  COFD[693] = 3.17651319E+00;
  COFD[694] = -2.02028974E-01;
  COFD[695] = 8.94232502E-03;
  COFD[696] = -1.55740954E+01;
  COFD[697] = 3.48070094E+00;
  COFD[698] = -2.40859499E-01;
  COFD[699] = 1.05972514E-02;
  COFD[700] = -1.55666313E+01;
  COFD[701] = 3.48070094E+00;
  COFD[702] = -2.40859499E-01;
  COFD[703] = 1.05972514E-02;
  COFD[704] = -2.06463656E+01;
  COFD[705] = 5.41688482E+00;
  COFD[706] = -4.73387188E-01;
  COFD[707] = 1.99280175E-02;
  COFD[708] = -1.52657135E+01;
  COFD[709] = 3.35876143E+00;
  COFD[710] = -2.25120173E-01;
  COFD[711] = 9.91863270E-03;
  COFD[712] = -1.77428141E+01;
  COFD[713] = 4.25438185E+00;
  COFD[714] = -3.39084808E-01;
  COFD[715] = 1.47709916E-02;
  COFD[716] = -1.83397553E+01;
  COFD[717] = 4.43878381E+00;
  COFD[718] = -3.61697624E-01;
  COFD[719] = 1.56975581E-02;
  COFD[720] = -1.45075753E+01;
  COFD[721] = 3.05837263E+00;
  COFD[722] = -1.86672802E-01;
  COFD[723] = 8.27575734E-03;
  COFD[724] = -2.03661810E+01;
  COFD[725] = 5.32029196E+00;
  COFD[726] = -4.65578114E-01;
  COFD[727] = 1.97797257E-02;
  COFD[728] = -1.79334513E+01;
  COFD[729] = 4.28074656E+00;
  COFD[730] = -3.42272429E-01;
  COFD[731] = 1.48995988E-02;
  COFD[732] = -1.42649530E+01;
  COFD[733] = 3.17651319E+00;
  COFD[734] = -2.02028974E-01;
  COFD[735] = 8.94232502E-03;
  COFD[736] = -1.42870540E+01;
  COFD[737] = 3.17651319E+00;
  COFD[738] = -2.02028974E-01;
  COFD[739] = 8.94232502E-03;
  COFD[740] = -1.77473126E+01;
  COFD[741] = 4.25438185E+00;
  COFD[742] = -3.39084808E-01;
  COFD[743] = 1.47709916E-02;
  COFD[744] = -1.58042999E+01;
  COFD[745] = 3.57122377E+00;
  COFD[746] = -2.52409987E-01;
  COFD[747] = 1.10900562E-02;
  COFD[748] = -1.45075753E+01;
  COFD[749] = 3.05837263E+00;
  COFD[750] = -1.86672802E-01;
  COFD[751] = 8.27575734E-03;
  COFD[752] = -1.41301009E+01;
  COFD[753] = 3.05837263E+00;
  COFD[754] = -1.86672802E-01;
  COFD[755] = 8.27575734E-03;
  COFD[756] = -1.44985640E+01;
  COFD[757] = 3.05837263E+00;
  COFD[758] = -1.86672802E-01;
  COFD[759] = 8.27575734E-03;
  COFD[760] = -1.58124809E+01;
  COFD[761] = 3.57122377E+00;
  COFD[762] = -2.52409987E-01;
  COFD[763] = 1.10900562E-02;
  COFD[764] = -1.77628457E+01;
  COFD[765] = 4.25438185E+00;
  COFD[766] = -3.39084808E-01;
  COFD[767] = 1.47709916E-02;
  COFD[768] = -2.04924683E+01;
  COFD[769] = 5.37387116E+00;
  COFD[770] = -4.70529459E-01;
  COFD[771] = 1.99137519E-02;
  COFD[772] = -1.61402509E+01;
  COFD[773] = 4.26826011E+00;
  COFD[774] = -3.40773687E-01;
  COFD[775] = 1.48396317E-02;
  COFD[776] = -1.95739720E+01;
  COFD[777] = 5.61113230E+00;
  COFD[778] = -4.90190187E-01;
  COFD[779] = 2.03260675E-02;
  COFD[780] = -2.06408348E+01;
  COFD[781] = 5.41688482E+00;
  COFD[782] = -4.73387188E-01;
  COFD[783] = 1.99280175E-02;
  COFD[784] = -1.94093476E+01;
  COFD[785] = 5.16013126E+00;
  COFD[786] = -4.46824543E-01;
  COFD[787] = 1.90464887E-02;
  COFD[788] = -1.94252948E+01;
  COFD[789] = 5.16013126E+00;
  COFD[790] = -4.46824543E-01;
  COFD[791] = 1.90464887E-02;
  COFD[792] = -2.06516251E+01;
  COFD[793] = 5.41688482E+00;
  COFD[794] = -4.73387188E-01;
  COFD[795] = 1.99280175E-02;
  COFD[796] = -2.06463656E+01;
  COFD[797] = 5.41688482E+00;
  COFD[798] = -4.73387188E-01;
  COFD[799] = 1.99280175E-02;
  COFD[800] = -1.61922589E+01;
  COFD[801] = 3.05592433E+00;
  COFD[802] = -7.94834977E-02;
  COFD[803] = -5.73792030E-04;
  COFD[804] = -2.05050716E+01;
  COFD[805] = 5.37373820E+00;
  COFD[806] = -4.70521401E-01;
  COFD[807] = 1.99137782E-02;
  COFD[808] = -2.14542455E+01;
  COFD[809] = 5.49993732E+00;
  COFD[810] = -4.62042917E-01;
  COFD[811] = 1.85577413E-02;
  COFD[812] = -2.13655991E+01;
  COFD[813] = 5.35901292E+00;
  COFD[814] = -4.36172487E-01;
  COFD[815] = 1.71345319E-02;
  COFD[816] = -1.95861373E+01;
  COFD[817] = 5.05708283E+00;
  COFD[818] = -4.35739290E-01;
  COFD[819] = 1.86583205E-02;
  COFD[820] = -1.76568755E+01;
  COFD[821] = 3.69678379E+00;
  COFD[822] = -1.74734312E-01;
  COFD[823] = 4.01259004E-03;
  COFD[824] = -2.16146331E+01;
  COFD[825] = 5.48685326E+00;
  COFD[826] = -4.59242736E-01;
  COFD[827] = 1.83928847E-02;
  COFD[828] = -1.93545859E+01;
  COFD[829] = 5.16013126E+00;
  COFD[830] = -4.46824543E-01;
  COFD[831] = 1.90464887E-02;
  COFD[832] = -1.93720430E+01;
  COFD[833] = 5.16013126E+00;
  COFD[834] = -4.46824543E-01;
  COFD[835] = 1.90464887E-02;
  COFD[836] = -2.14572714E+01;
  COFD[837] = 5.49993732E+00;
  COFD[838] = -4.62042917E-01;
  COFD[839] = 1.85577413E-02;
  COFD[840] = -2.09198980E+01;
  COFD[841] = 5.50410224E+00;
  COFD[842] = -4.82760329E-01;
  COFD[843] = 2.02578587E-02;
  COFD[844] = -1.95861373E+01;
  COFD[845] = 5.05708283E+00;
  COFD[846] = -4.35739290E-01;
  COFD[847] = 1.86583205E-02;
  COFD[848] = -1.92450630E+01;
  COFD[849] = 5.05708283E+00;
  COFD[850] = -4.35739290E-01;
  COFD[851] = 1.86583205E-02;
  COFD[852] = -1.95796677E+01;
  COFD[853] = 5.05708283E+00;
  COFD[854] = -4.35739290E-01;
  COFD[855] = 1.86583205E-02;
  COFD[856] = -2.09257148E+01;
  COFD[857] = 5.50410224E+00;
  COFD[858] = -4.82760329E-01;
  COFD[859] = 2.02578587E-02;
  COFD[860] = -2.15175497E+01;
  COFD[861] = 5.49993732E+00;
  COFD[862] = -4.62042917E-01;
  COFD[863] = 1.85577413E-02;
  COFD[864] = -1.49991002E+01;
  COFD[865] = 3.25758557E+00;
  COFD[866] = -2.12171692E-01;
  COFD[867] = 9.36544059E-03;
  COFD[868] = -1.16920043E+01;
  COFD[869] = 2.47435332E+00;
  COFD[870] = -1.10389228E-01;
  COFD[871] = 4.95061056E-03;
  COFD[872] = -1.42897987E+01;
  COFD[873] = 3.67461872E+00;
  COFD[874] = -2.65079836E-01;
  COFD[875] = 1.16078592E-02;
  COFD[876] = -1.52582687E+01;
  COFD[877] = 3.35876143E+00;
  COFD[878] = -2.25120173E-01;
  COFD[879] = 9.91863270E-03;
  COFD[880] = -1.40871001E+01;
  COFD[881] = 3.07518980E+00;
  COFD[882] = -1.88850114E-01;
  COFD[883] = 8.36983308E-03;
  COFD[884] = -1.41068125E+01;
  COFD[885] = 3.07518980E+00;
  COFD[886] = -1.88850114E-01;
  COFD[887] = 8.36983308E-03;
  COFD[888] = -1.52728198E+01;
  COFD[889] = 3.35876143E+00;
  COFD[890] = -2.25120173E-01;
  COFD[891] = 9.91863270E-03;
  COFD[892] = -1.52657135E+01;
  COFD[893] = 3.35876143E+00;
  COFD[894] = -2.25120173E-01;
  COFD[895] = 9.91863270E-03;
  COFD[896] = -2.05050716E+01;
  COFD[897] = 5.37373820E+00;
  COFD[898] = -4.70521401E-01;
  COFD[899] = 1.99137782E-02;
  COFD[900] = -1.50159354E+01;
  COFD[901] = 3.25736066E+00;
  COFD[902] = -2.12144046E-01;
  COFD[903] = 9.36430976E-03;
  COFD[904] = -1.74474122E+01;
  COFD[905] = 4.14135251E+00;
  COFD[906] = -3.25110732E-01;
  COFD[907] = 1.41927996E-02;
  COFD[908] = -1.79960759E+01;
  COFD[909] = 4.30798848E+00;
  COFD[910] = -3.45470822E-01;
  COFD[911] = 1.50242973E-02;
  COFD[912] = -1.42948900E+01;
  COFD[913] = 2.97115231E+00;
  COFD[914] = -1.75463252E-01;
  COFD[915] = 7.79530067E-03;
  COFD[916] = -2.00125687E+01;
  COFD[917] = 5.18604489E+00;
  COFD[918] = -4.49707415E-01;
  COFD[919] = 1.91521475E-02;
  COFD[920] = -1.76386291E+01;
  COFD[921] = 4.16851125E+00;
  COFD[922] = -3.28473932E-01;
  COFD[923] = 1.43323241E-02;
  COFD[924] = -1.40345311E+01;
  COFD[925] = 3.07518980E+00;
  COFD[926] = -1.88850114E-01;
  COFD[927] = 8.36983308E-03;
  COFD[928] = -1.40559476E+01;
  COFD[929] = 3.07518980E+00;
  COFD[930] = -1.88850114E-01;
  COFD[931] = 8.36983308E-03;
  COFD[932] = -1.74516622E+01;
  COFD[933] = 4.14135251E+00;
  COFD[934] = -3.25110732E-01;
  COFD[935] = 1.41927996E-02;
  COFD[936] = -1.55466807E+01;
  COFD[937] = 3.46735141E+00;
  COFD[938] = -2.39189370E-01;
  COFD[939] = 1.05275176E-02;
  COFD[940] = -1.42948900E+01;
  COFD[941] = 2.97115231E+00;
  COFD[942] = -1.75463252E-01;
  COFD[943] = 7.79530067E-03;
  COFD[944] = -1.39292538E+01;
  COFD[945] = 2.97115231E+00;
  COFD[946] = -1.75463252E-01;
  COFD[947] = 7.79530067E-03;
  COFD[948] = -1.42862849E+01;
  COFD[949] = 2.97115231E+00;
  COFD[950] = -1.75463252E-01;
  COFD[951] = 7.79530067E-03;
  COFD[952] = -1.55544808E+01;
  COFD[953] = 3.46735141E+00;
  COFD[954] = -2.39189370E-01;
  COFD[955] = 1.05275176E-02;
  COFD[956] = -1.74695868E+01;
  COFD[957] = 4.14135251E+00;
  COFD[958] = -3.25110732E-01;
  COFD[959] = 1.41927996E-02;
  COFD[960] = -1.74272359E+01;
  COFD[961] = 4.14166966E+00;
  COFD[962] = -3.25149462E-01;
  COFD[963] = 1.41943811E-02;
  COFD[964] = -1.31911433E+01;
  COFD[965] = 3.04970299E+00;
  COFD[966] = -1.85555523E-01;
  COFD[967] = 8.22773480E-03;
  COFD[968] = -1.68734802E+01;
  COFD[969] = 4.63687143E+00;
  COFD[970] = -3.85900861E-01;
  COFD[971] = 1.66856798E-02;
  COFD[972] = -1.77337260E+01;
  COFD[973] = 4.25438185E+00;
  COFD[974] = -3.39084808E-01;
  COFD[975] = 1.47709916E-02;
  COFD[976] = -1.62772129E+01;
  COFD[977] = 3.88250968E+00;
  COFD[978] = -2.92155848E-01;
  COFD[979] = 1.27867850E-02;
  COFD[980] = -1.62996992E+01;
  COFD[981] = 3.88250968E+00;
  COFD[982] = -2.92155848E-01;
  COFD[983] = 1.27867850E-02;
  COFD[984] = -1.77515170E+01;
  COFD[985] = 4.25438185E+00;
  COFD[986] = -3.39084808E-01;
  COFD[987] = 1.47709916E-02;
  COFD[988] = -1.77428141E+01;
  COFD[989] = 4.25438185E+00;
  COFD[990] = -3.39084808E-01;
  COFD[991] = 1.47709916E-02;
  COFD[992] = -2.14542455E+01;
  COFD[993] = 5.49993732E+00;
  COFD[994] = -4.62042917E-01;
  COFD[995] = 1.85577413E-02;
  COFD[996] = -1.74474122E+01;
  COFD[997] = 4.14135251E+00;
  COFD[998] = -3.25110732E-01;
  COFD[999] = 1.41927996E-02;
  COFD[1000] = -2.00443658E+01;
  COFD[1001] = 5.03042083E+00;
  COFD[1002] = -4.32596342E-01;
  COFD[1003] = 1.85345510E-02;
  COFD[1004] = -2.05716764E+01;
  COFD[1005] = 5.17526774E+00;
  COFD[1006] = -4.48472252E-01;
  COFD[1007] = 1.91050891E-02;
  COFD[1008] = -1.62833796E+01;
  COFD[1009] = 3.68407693E+00;
  COFD[1010] = -2.66228170E-01;
  COFD[1011] = 1.16542305E-02;
  COFD[1012] = -2.15739396E+01;
  COFD[1013] = 5.58518186E+00;
  COFD[1014] = -4.80813479E-01;
  COFD[1015] = 1.96787936E-02;
  COFD[1016] = -2.02329931E+01;
  COFD[1017] = 5.06106939E+00;
  COFD[1018] = -4.36210404E-01;
  COFD[1019] = 1.86769307E-02;
  COFD[1020] = -1.62212145E+01;
  COFD[1021] = 3.88250968E+00;
  COFD[1022] = -2.92155848E-01;
  COFD[1023] = 1.27867850E-02;
  COFD[1024] = -1.62455101E+01;
  COFD[1025] = 3.88250968E+00;
  COFD[1026] = -2.92155848E-01;
  COFD[1027] = 1.27867850E-02;
  COFD[1028] = -2.00497549E+01;
  COFD[1029] = 5.03042083E+00;
  COFD[1030] = -4.32596342E-01;
  COFD[1031] = 1.85345510E-02;
  COFD[1032] = -1.79999625E+01;
  COFD[1033] = 4.34871946E+00;
  COFD[1034] = -3.50542624E-01;
  COFD[1035] = 1.52355319E-02;
  COFD[1036] = -1.62833796E+01;
  COFD[1037] = 3.68407693E+00;
  COFD[1038] = -2.66228170E-01;
  COFD[1039] = 1.16542305E-02;
  COFD[1040] = -1.58784406E+01;
  COFD[1041] = 3.68407693E+00;
  COFD[1042] = -2.66228170E-01;
  COFD[1043] = 1.16542305E-02;
  COFD[1044] = -1.62729811E+01;
  COFD[1045] = 3.68407693E+00;
  COFD[1046] = -2.66228170E-01;
  COFD[1047] = 1.16542305E-02;
  COFD[1048] = -1.80094534E+01;
  COFD[1049] = 4.34871946E+00;
  COFD[1050] = -3.50542624E-01;
  COFD[1051] = 1.52355319E-02;
  COFD[1052] = -2.00475034E+01;
  COFD[1053] = 5.03042083E+00;
  COFD[1054] = -4.32596342E-01;
  COFD[1055] = 1.85345510E-02;
  COFD[1056] = -1.79765505E+01;
  COFD[1057] = 4.30841971E+00;
  COFD[1058] = -3.45524579E-01;
  COFD[1059] = 1.50265381E-02;
  COFD[1060] = -1.36894486E+01;
  COFD[1061] = 3.19999740E+00;
  COFD[1062] = -2.04999020E-01;
  COFD[1063] = 9.06766105E-03;
  COFD[1064] = -1.74819260E+01;
  COFD[1065] = 4.80792005E+00;
  COFD[1066] = -4.06126584E-01;
  COFD[1067] = 1.74831083E-02;
  COFD[1068] = -1.83308344E+01;
  COFD[1069] = 4.43878381E+00;
  COFD[1070] = -3.61697624E-01;
  COFD[1071] = 1.56975581E-02;
  COFD[1072] = -1.69290023E+01;
  COFD[1073] = 4.09077642E+00;
  COFD[1074] = -3.18894990E-01;
  COFD[1075] = 1.39371445E-02;
  COFD[1076] = -1.69512232E+01;
  COFD[1077] = 4.09077642E+00;
  COFD[1078] = -3.18894990E-01;
  COFD[1079] = 1.39371445E-02;
  COFD[1080] = -1.83482954E+01;
  COFD[1081] = 4.43878381E+00;
  COFD[1082] = -3.61697624E-01;
  COFD[1083] = 1.56975581E-02;
  COFD[1084] = -1.83397553E+01;
  COFD[1085] = 4.43878381E+00;
  COFD[1086] = -3.61697624E-01;
  COFD[1087] = 1.56975581E-02;
  COFD[1088] = -2.13655991E+01;
  COFD[1089] = 5.35901292E+00;
  COFD[1090] = -4.36172487E-01;
  COFD[1091] = 1.71345319E-02;
  COFD[1092] = -1.79960759E+01;
  COFD[1093] = 4.30798848E+00;
  COFD[1094] = -3.45470822E-01;
  COFD[1095] = 1.50242973E-02;
  COFD[1096] = -2.05716764E+01;
  COFD[1097] = 5.17526774E+00;
  COFD[1098] = -4.48472252E-01;
  COFD[1099] = 1.91050891E-02;
  COFD[1100] = -2.11909780E+01;
  COFD[1101] = 5.35817304E+00;
  COFD[1102] = -4.69455306E-01;
  COFD[1103] = 1.99063292E-02;
  COFD[1104] = -1.70265556E+01;
  COFD[1105] = 3.93849401E+00;
  COFD[1106] = -2.99416642E-01;
  COFD[1107] = 1.31020815E-02;
  COFD[1108] = -2.16211139E+01;
  COFD[1109] = 5.50657794E+00;
  COFD[1110] = -4.63927523E-01;
  COFD[1111] = 1.86800112E-02;
  COFD[1112] = -2.07567853E+01;
  COFD[1113] = 5.20655416E+00;
  COFD[1114] = -4.52109025E-01;
  COFD[1115] = 1.92460992E-02;
  COFD[1116] = -1.68748925E+01;
  COFD[1117] = 4.09077642E+00;
  COFD[1118] = -3.18894990E-01;
  COFD[1119] = 1.39371445E-02;
  COFD[1120] = -1.68989140E+01;
  COFD[1121] = 4.09077642E+00;
  COFD[1122] = -3.18894990E-01;
  COFD[1123] = 1.39371445E-02;
  COFD[1124] = -2.05769457E+01;
  COFD[1125] = 5.17526774E+00;
  COFD[1126] = -4.48472252E-01;
  COFD[1127] = 1.91050891E-02;
  COFD[1128] = -1.86088645E+01;
  COFD[1129] = 4.53681554E+00;
  COFD[1130] = -3.73517224E-01;
  COFD[1131] = 1.61730724E-02;
  COFD[1132] = -1.70265556E+01;
  COFD[1133] = 3.93849401E+00;
  COFD[1134] = -2.99416642E-01;
  COFD[1135] = 1.31020815E-02;
  COFD[1136] = -1.66315381E+01;
  COFD[1137] = 3.93849401E+00;
  COFD[1138] = -2.99416642E-01;
  COFD[1139] = 1.31020815E-02;
  COFD[1140] = -1.70163379E+01;
  COFD[1141] = 3.93849401E+00;
  COFD[1142] = -2.99416642E-01;
  COFD[1143] = 1.31020815E-02;
  COFD[1144] = -1.86181839E+01;
  COFD[1145] = 4.53681554E+00;
  COFD[1146] = -3.73517224E-01;
  COFD[1147] = 1.61730724E-02;
  COFD[1148] = -2.05721233E+01;
  COFD[1149] = 5.17526774E+00;
  COFD[1150] = -4.48472252E-01;
  COFD[1151] = 1.91050891E-02;
  COFD[1152] = -1.42780328E+01;
  COFD[1153] = 2.97137588E+00;
  COFD[1154] = -1.75491257E-01;
  COFD[1155] = 7.79646773E-03;
  COFD[1156] = -1.10367385E+01;
  COFD[1157] = 2.19094415E+00;
  COFD[1158] = -7.11992510E-02;
  COFD[1159] = 3.14105973E-03;
  COFD[1160] = -1.34492865E+01;
  COFD[1161] = 3.34156587E+00;
  COFD[1162] = -2.22853306E-01;
  COFD[1163] = 9.81883417E-03;
  COFD[1164] = -1.45001273E+01;
  COFD[1165] = 3.05837263E+00;
  COFD[1166] = -1.86672802E-01;
  COFD[1167] = 8.27575734E-03;
  COFD[1168] = -1.34296968E+01;
  COFD[1169] = 2.80913567E+00;
  COFD[1170] = -1.54536855E-01;
  COFD[1171] = 6.89359313E-03;
  COFD[1172] = -1.34494148E+01;
  COFD[1173] = 2.80913567E+00;
  COFD[1174] = -1.54536855E-01;
  COFD[1175] = 6.89359313E-03;
  COFD[1176] = -1.45146845E+01;
  COFD[1177] = 3.05837263E+00;
  COFD[1178] = -1.86672802E-01;
  COFD[1179] = 8.27575734E-03;
  COFD[1180] = -1.45075753E+01;
  COFD[1181] = 3.05837263E+00;
  COFD[1182] = -1.86672802E-01;
  COFD[1183] = 8.27575734E-03;
  COFD[1184] = -1.95861373E+01;
  COFD[1185] = 5.05708283E+00;
  COFD[1186] = -4.35739290E-01;
  COFD[1187] = 1.86583205E-02;
  COFD[1188] = -1.42948900E+01;
  COFD[1189] = 2.97115231E+00;
  COFD[1190] = -1.75463252E-01;
  COFD[1191] = 7.79530067E-03;
  COFD[1192] = -1.62833796E+01;
  COFD[1193] = 3.68407693E+00;
  COFD[1194] = -2.66228170E-01;
  COFD[1195] = 1.16542305E-02;
  COFD[1196] = -1.70265556E+01;
  COFD[1197] = 3.93849401E+00;
  COFD[1198] = -2.99416642E-01;
  COFD[1199] = 1.31020815E-02;
  COFD[1200] = -1.36978066E+01;
  COFD[1201] = 2.73155251E+00;
  COFD[1202] = -1.44594082E-01;
  COFD[1203] = 6.46883252E-03;
  COFD[1204] = -1.90109410E+01;
  COFD[1205] = 4.82909392E+00;
  COFD[1206] = -4.08610711E-01;
  COFD[1207] = 1.75802236E-02;
  COFD[1208] = -1.64977272E+01;
  COFD[1209] = 3.72316581E+00;
  COFD[1210] = -2.71276511E-01;
  COFD[1211] = 1.18720331E-02;
  COFD[1212] = -1.33779841E+01;
  COFD[1213] = 2.80913567E+00;
  COFD[1214] = -1.54536855E-01;
  COFD[1215] = 6.89359313E-03;
  COFD[1216] = -1.33994064E+01;
  COFD[1217] = 2.80913567E+00;
  COFD[1218] = -1.54536855E-01;
  COFD[1219] = 6.89359313E-03;
  COFD[1220] = -1.62876317E+01;
  COFD[1221] = 3.68407693E+00;
  COFD[1222] = -2.66228170E-01;
  COFD[1223] = 1.16542305E-02;
  COFD[1224] = -1.47303677E+01;
  COFD[1225] = 3.14480429E+00;
  COFD[1226] = -1.97906290E-01;
  COFD[1227] = 8.76325718E-03;
  COFD[1228] = -1.36978066E+01;
  COFD[1229] = 2.73155251E+00;
  COFD[1230] = -1.44594082E-01;
  COFD[1231] = 6.46883252E-03;
  COFD[1232] = -1.33354626E+01;
  COFD[1233] = 2.73155251E+00;
  COFD[1234] = -1.44594082E-01;
  COFD[1235] = 6.46883252E-03;
  COFD[1236] = -1.36891980E+01;
  COFD[1237] = 2.73155251E+00;
  COFD[1238] = -1.44594082E-01;
  COFD[1239] = 6.46883252E-03;
  COFD[1240] = -1.47381710E+01;
  COFD[1241] = 3.14480429E+00;
  COFD[1242] = -1.97906290E-01;
  COFD[1243] = 8.76325718E-03;
  COFD[1244] = -1.63029340E+01;
  COFD[1245] = 3.68407693E+00;
  COFD[1246] = -2.66228170E-01;
  COFD[1247] = 1.16542305E-02;
  COFD[1248] = -2.00009885E+01;
  COFD[1249] = 5.18642913E+00;
  COFD[1250] = -4.49751926E-01;
  COFD[1251] = 1.91538664E-02;
  COFD[1252] = -1.56943826E+01;
  COFD[1253] = 4.06840830E+00;
  COFD[1254] = -3.16035090E-01;
  COFD[1255] = 1.38145007E-02;
  COFD[1256] = -1.94027720E+01;
  COFD[1257] = 5.54487588E+00;
  COFD[1258] = -4.86919661E-01;
  COFD[1259] = 2.03935297E-02;
  COFD[1260] = -2.03608484E+01;
  COFD[1261] = 5.32029196E+00;
  COFD[1262] = -4.65578114E-01;
  COFD[1263] = 1.97797257E-02;
  COFD[1264] = -1.89669550E+01;
  COFD[1265] = 4.98075560E+00;
  COFD[1266] = -4.26721620E-01;
  COFD[1267] = 1.83024823E-02;
  COFD[1268] = -1.89824738E+01;
  COFD[1269] = 4.98075560E+00;
  COFD[1270] = -4.26721620E-01;
  COFD[1271] = 1.83024823E-02;
  COFD[1272] = -2.03712500E+01;
  COFD[1273] = 5.32029196E+00;
  COFD[1274] = -4.65578114E-01;
  COFD[1275] = 1.97797257E-02;
  COFD[1276] = -2.03661810E+01;
  COFD[1277] = 5.32029196E+00;
  COFD[1278] = -4.65578114E-01;
  COFD[1279] = 1.97797257E-02;
  COFD[1280] = -1.76568755E+01;
  COFD[1281] = 3.69678379E+00;
  COFD[1282] = -1.74734312E-01;
  COFD[1283] = 4.01259004E-03;
  COFD[1284] = -2.00125687E+01;
  COFD[1285] = 5.18604489E+00;
  COFD[1286] = -4.49707415E-01;
  COFD[1287] = 1.91521475E-02;
  COFD[1288] = -2.15739396E+01;
  COFD[1289] = 5.58518186E+00;
  COFD[1290] = -4.80813479E-01;
  COFD[1291] = 1.96787936E-02;
  COFD[1292] = -2.16211139E+01;
  COFD[1293] = 5.50657794E+00;
  COFD[1294] = -4.63927523E-01;
  COFD[1295] = 1.86800112E-02;
  COFD[1296] = -1.90109410E+01;
  COFD[1297] = 4.82909392E+00;
  COFD[1298] = -4.08610711E-01;
  COFD[1299] = 1.75802236E-02;
  COFD[1300] = -1.88526753E+01;
  COFD[1301] = 4.23183762E+00;
  COFD[1302] = -2.56024049E-01;
  COFD[1303] = 7.99320327E-03;
  COFD[1304] = -2.17552529E+01;
  COFD[1305] = 5.58486198E+00;
  COFD[1306] = -4.79832301E-01;
  COFD[1307] = 1.95990950E-02;
  COFD[1308] = -1.89147506E+01;
  COFD[1309] = 4.98075560E+00;
  COFD[1310] = -4.26721620E-01;
  COFD[1311] = 1.83024823E-02;
  COFD[1312] = -1.89317532E+01;
  COFD[1313] = 4.98075560E+00;
  COFD[1314] = -4.26721620E-01;
  COFD[1315] = 1.83024823E-02;
  COFD[1316] = -2.15768444E+01;
  COFD[1317] = 5.58518186E+00;
  COFD[1318] = -4.80813479E-01;
  COFD[1319] = 1.96787936E-02;
  COFD[1320] = -2.05628479E+01;
  COFD[1321] = 5.37634919E+00;
  COFD[1322] = -4.70693222E-01;
  COFD[1323] = 1.99144603E-02;
  COFD[1324] = -1.90109410E+01;
  COFD[1325] = 4.82909392E+00;
  COFD[1326] = -4.08610711E-01;
  COFD[1327] = 1.75802236E-02;
  COFD[1328] = -1.86830530E+01;
  COFD[1329] = 4.82909392E+00;
  COFD[1330] = -4.08610711E-01;
  COFD[1331] = 1.75802236E-02;
  COFD[1332] = -1.90046955E+01;
  COFD[1333] = 4.82909392E+00;
  COFD[1334] = -4.08610711E-01;
  COFD[1335] = 1.75802236E-02;
  COFD[1336] = -2.05684585E+01;
  COFD[1337] = 5.37634919E+00;
  COFD[1338] = -4.70693222E-01;
  COFD[1339] = 1.99144603E-02;
  COFD[1340] = -2.16335876E+01;
  COFD[1341] = 5.58518186E+00;
  COFD[1342] = -4.80813479E-01;
  COFD[1343] = 1.96787936E-02;
  COFD[1344] = -1.76215377E+01;
  COFD[1345] = 4.16885068E+00;
  COFD[1346] = -3.28516035E-01;
  COFD[1347] = 1.43340744E-02;
  COFD[1348] = -1.34619205E+01;
  COFD[1349] = 3.07392586E+00;
  COFD[1350] = -1.88686437E-01;
  COFD[1351] = 8.36275856E-03;
  COFD[1352] = -1.72055588E+01;
  COFD[1353] = 4.66875212E+00;
  COFD[1354] = -3.89780131E-01;
  COFD[1355] = 1.68436252E-02;
  COFD[1356] = -1.79257516E+01;
  COFD[1357] = 4.28074656E+00;
  COFD[1358] = -3.42272429E-01;
  COFD[1359] = 1.48995988E-02;
  COFD[1360] = -1.65447057E+01;
  COFD[1361] = 3.92040487E+00;
  COFD[1362] = -2.97068442E-01;
  COFD[1363] = 1.30000135E-02;
  COFD[1364] = -1.65648734E+01;
  COFD[1365] = 3.92040487E+00;
  COFD[1366] = -2.97068442E-01;
  COFD[1367] = 1.30000135E-02;
  COFD[1368] = -1.79408045E+01;
  COFD[1369] = 4.28074656E+00;
  COFD[1370] = -3.42272429E-01;
  COFD[1371] = 1.48995988E-02;
  COFD[1372] = -1.79334513E+01;
  COFD[1373] = 4.28074656E+00;
  COFD[1374] = -3.42272429E-01;
  COFD[1375] = 1.48995988E-02;
  COFD[1376] = -2.16146331E+01;
  COFD[1377] = 5.48685326E+00;
  COFD[1378] = -4.59242736E-01;
  COFD[1379] = 1.83928847E-02;
  COFD[1380] = -1.76386291E+01;
  COFD[1381] = 4.16851125E+00;
  COFD[1382] = -3.28473932E-01;
  COFD[1383] = 1.43323241E-02;
  COFD[1384] = -2.02329931E+01;
  COFD[1385] = 5.06106939E+00;
  COFD[1386] = -4.36210404E-01;
  COFD[1387] = 1.86769307E-02;
  COFD[1388] = -2.07567853E+01;
  COFD[1389] = 5.20655416E+00;
  COFD[1390] = -4.52109025E-01;
  COFD[1391] = 1.92460992E-02;
  COFD[1392] = -1.64977272E+01;
  COFD[1393] = 3.72316581E+00;
  COFD[1394] = -2.71276511E-01;
  COFD[1395] = 1.18720331E-02;
  COFD[1396] = -2.17552529E+01;
  COFD[1397] = 5.58486198E+00;
  COFD[1398] = -4.79832301E-01;
  COFD[1399] = 1.95990950E-02;
  COFD[1400] = -2.04168324E+01;
  COFD[1401] = 5.09044464E+00;
  COFD[1402] = -4.39653461E-01;
  COFD[1403] = 1.88117190E-02;
  COFD[1404] = -1.64944536E+01;
  COFD[1405] = 3.92040487E+00;
  COFD[1406] = -2.97068442E-01;
  COFD[1407] = 1.30000135E-02;
  COFD[1408] = -1.65163449E+01;
  COFD[1409] = 3.92040487E+00;
  COFD[1410] = -2.97068442E-01;
  COFD[1411] = 1.30000135E-02;
  COFD[1412] = -2.02374142E+01;
  COFD[1413] = 5.06106939E+00;
  COFD[1414] = -4.36210404E-01;
  COFD[1415] = 1.86769307E-02;
  COFD[1416] = -1.82118969E+01;
  COFD[1417] = 4.38314454E+00;
  COFD[1418] = -3.54844523E-01;
  COFD[1419] = 1.54154407E-02;
  COFD[1420] = -1.64977272E+01;
  COFD[1421] = 3.72316581E+00;
  COFD[1422] = -2.71276511E-01;
  COFD[1423] = 1.18720331E-02;
  COFD[1424] = -1.61370785E+01;
  COFD[1425] = 3.72316581E+00;
  COFD[1426] = -2.71276511E-01;
  COFD[1427] = 1.18720331E-02;
  COFD[1428] = -1.64888415E+01;
  COFD[1429] = 3.72316581E+00;
  COFD[1430] = -2.71276511E-01;
  COFD[1431] = 1.18720331E-02;
  COFD[1432] = -1.82199600E+01;
  COFD[1433] = 4.38314454E+00;
  COFD[1434] = -3.54844523E-01;
  COFD[1435] = 1.54154407E-02;
  COFD[1436] = -2.02435759E+01;
  COFD[1437] = 5.06106939E+00;
  COFD[1438] = -4.36210404E-01;
  COFD[1439] = 1.86769307E-02;
  COFD[1440] = -1.40236167E+01;
  COFD[1441] = 3.07549274E+00;
  COFD[1442] = -1.88889344E-01;
  COFD[1443] = 8.37152866E-03;
  COFD[1444] = -1.09203428E+01;
  COFD[1445] = 2.30836460E+00;
  COFD[1446] = -8.76339315E-02;
  COFD[1447] = 3.90878445E-03;
  COFD[1448] = -1.33789967E+01;
  COFD[1449] = 3.48624238E+00;
  COFD[1450] = -2.41554467E-01;
  COFD[1451] = 1.06263545E-02;
  COFD[1452] = -1.42600522E+01;
  COFD[1453] = 3.17651319E+00;
  COFD[1454] = -2.02028974E-01;
  COFD[1455] = 8.94232502E-03;
  COFD[1456] = -1.31565325E+01;
  COFD[1457] = 2.90778936E+00;
  COFD[1458] = -1.67388544E-01;
  COFD[1459] = 7.45220609E-03;
  COFD[1460] = -1.31710897E+01;
  COFD[1461] = 2.90778936E+00;
  COFD[1462] = -1.67388544E-01;
  COFD[1463] = 7.45220609E-03;
  COFD[1464] = -1.42696077E+01;
  COFD[1465] = 3.17651319E+00;
  COFD[1466] = -2.02028974E-01;
  COFD[1467] = 8.94232502E-03;
  COFD[1468] = -1.42649530E+01;
  COFD[1469] = 3.17651319E+00;
  COFD[1470] = -2.02028974E-01;
  COFD[1471] = 8.94232502E-03;
  COFD[1472] = -1.93545859E+01;
  COFD[1473] = 5.16013126E+00;
  COFD[1474] = -4.46824543E-01;
  COFD[1475] = 1.90464887E-02;
  COFD[1476] = -1.40345311E+01;
  COFD[1477] = 3.07518980E+00;
  COFD[1478] = -1.88850114E-01;
  COFD[1479] = 8.36983308E-03;
  COFD[1480] = -1.62212145E+01;
  COFD[1481] = 3.88250968E+00;
  COFD[1482] = -2.92155848E-01;
  COFD[1483] = 1.27867850E-02;
  COFD[1484] = -1.68748925E+01;
  COFD[1485] = 4.09077642E+00;
  COFD[1486] = -3.18894990E-01;
  COFD[1487] = 1.39371445E-02;
  COFD[1488] = -1.33779841E+01;
  COFD[1489] = 2.80913567E+00;
  COFD[1490] = -1.54536855E-01;
  COFD[1491] = 6.89359313E-03;
  COFD[1492] = -1.89147506E+01;
  COFD[1493] = 4.98075560E+00;
  COFD[1494] = -4.26721620E-01;
  COFD[1495] = 1.83024823E-02;
  COFD[1496] = -1.64944536E+01;
  COFD[1497] = 3.92040487E+00;
  COFD[1498] = -2.97068442E-01;
  COFD[1499] = 1.30000135E-02;
  COFD[1500] = -1.31035309E+01;
  COFD[1501] = 2.90778936E+00;
  COFD[1502] = -1.67388544E-01;
  COFD[1503] = 7.45220609E-03;
  COFD[1504] = -1.31195110E+01;
  COFD[1505] = 2.90778936E+00;
  COFD[1506] = -1.67388544E-01;
  COFD[1507] = 7.45220609E-03;
  COFD[1508] = -1.62238594E+01;
  COFD[1509] = 3.88250968E+00;
  COFD[1510] = -2.92155848E-01;
  COFD[1511] = 1.27867850E-02;
  COFD[1512] = -1.44530909E+01;
  COFD[1513] = 3.24450689E+00;
  COFD[1514] = -2.10570734E-01;
  COFD[1515] = 9.30026771E-03;
  COFD[1516] = -1.33779841E+01;
  COFD[1517] = 2.80913567E+00;
  COFD[1518] = -1.54536855E-01;
  COFD[1519] = 6.89359313E-03;
  COFD[1520] = -1.30550382E+01;
  COFD[1521] = 2.80913567E+00;
  COFD[1522] = -1.54536855E-01;
  COFD[1523] = 6.89359313E-03;
  COFD[1524] = -1.33722286E+01;
  COFD[1525] = 2.80913567E+00;
  COFD[1526] = -1.54536855E-01;
  COFD[1527] = 6.89359313E-03;
  COFD[1528] = -1.44582517E+01;
  COFD[1529] = 3.24450689E+00;
  COFD[1530] = -2.10570734E-01;
  COFD[1531] = 9.30026771E-03;
  COFD[1532] = -1.62911759E+01;
  COFD[1533] = 3.88250968E+00;
  COFD[1534] = -2.92155848E-01;
  COFD[1535] = 1.27867850E-02;
  COFD[1536] = -1.40445265E+01;
  COFD[1537] = 3.07549274E+00;
  COFD[1538] = -1.88889344E-01;
  COFD[1539] = 8.37152866E-03;
  COFD[1540] = -1.09240801E+01;
  COFD[1541] = 2.30836460E+00;
  COFD[1542] = -8.76339315E-02;
  COFD[1543] = 3.90878445E-03;
  COFD[1544] = -1.33809795E+01;
  COFD[1545] = 3.48624238E+00;
  COFD[1546] = -2.41554467E-01;
  COFD[1547] = 1.06263545E-02;
  COFD[1548] = -1.42819328E+01;
  COFD[1549] = 3.17651319E+00;
  COFD[1550] = -2.02028974E-01;
  COFD[1551] = 8.94232502E-03;
  COFD[1552] = -1.31730281E+01;
  COFD[1553] = 2.90778936E+00;
  COFD[1554] = -1.67388544E-01;
  COFD[1555] = 7.45220609E-03;
  COFD[1556] = -1.31880809E+01;
  COFD[1557] = 2.90778936E+00;
  COFD[1558] = -1.67388544E-01;
  COFD[1559] = 7.45220609E-03;
  COFD[1560] = -1.42919200E+01;
  COFD[1561] = 3.17651319E+00;
  COFD[1562] = -2.02028974E-01;
  COFD[1563] = 8.94232502E-03;
  COFD[1564] = -1.42870540E+01;
  COFD[1565] = 3.17651319E+00;
  COFD[1566] = -2.02028974E-01;
  COFD[1567] = 8.94232502E-03;
  COFD[1568] = -1.93720430E+01;
  COFD[1569] = 5.16013126E+00;
  COFD[1570] = -4.46824543E-01;
  COFD[1571] = 1.90464887E-02;
  COFD[1572] = -1.40559476E+01;
  COFD[1573] = 3.07518980E+00;
  COFD[1574] = -1.88850114E-01;
  COFD[1575] = 8.36983308E-03;
  COFD[1576] = -1.62455101E+01;
  COFD[1577] = 3.88250968E+00;
  COFD[1578] = -2.92155848E-01;
  COFD[1579] = 1.27867850E-02;
  COFD[1580] = -1.68989140E+01;
  COFD[1581] = 4.09077642E+00;
  COFD[1582] = -3.18894990E-01;
  COFD[1583] = 1.39371445E-02;
  COFD[1584] = -1.33994064E+01;
  COFD[1585] = 2.80913567E+00;
  COFD[1586] = -1.54536855E-01;
  COFD[1587] = 6.89359313E-03;
  COFD[1588] = -1.89317532E+01;
  COFD[1589] = 4.98075560E+00;
  COFD[1590] = -4.26721620E-01;
  COFD[1591] = 1.83024823E-02;
  COFD[1592] = -1.65163449E+01;
  COFD[1593] = 3.92040487E+00;
  COFD[1594] = -2.97068442E-01;
  COFD[1595] = 1.30000135E-02;
  COFD[1596] = -1.31195110E+01;
  COFD[1597] = 2.90778936E+00;
  COFD[1598] = -1.67388544E-01;
  COFD[1599] = 7.45220609E-03;
  COFD[1600] = -1.31360187E+01;
  COFD[1601] = 2.90778936E+00;
  COFD[1602] = -1.67388544E-01;
  COFD[1603] = 7.45220609E-03;
  COFD[1604] = -1.62482871E+01;
  COFD[1605] = 3.88250968E+00;
  COFD[1606] = -2.92155848E-01;
  COFD[1607] = 1.27867850E-02;
  COFD[1608] = -1.44747472E+01;
  COFD[1609] = 3.24450689E+00;
  COFD[1610] = -2.10570734E-01;
  COFD[1611] = 9.30026771E-03;
  COFD[1612] = -1.33994064E+01;
  COFD[1613] = 2.80913567E+00;
  COFD[1614] = -1.54536855E-01;
  COFD[1615] = 6.89359313E-03;
  COFD[1616] = -1.30704546E+01;
  COFD[1617] = 2.80913567E+00;
  COFD[1618] = -1.54536855E-01;
  COFD[1619] = 6.89359313E-03;
  COFD[1620] = -1.33934005E+01;
  COFD[1621] = 2.80913567E+00;
  COFD[1622] = -1.54536855E-01;
  COFD[1623] = 6.89359313E-03;
  COFD[1624] = -1.44801377E+01;
  COFD[1625] = 3.24450689E+00;
  COFD[1626] = -2.10570734E-01;
  COFD[1627] = 9.30026771E-03;
  COFD[1628] = -1.63128378E+01;
  COFD[1629] = 3.88250968E+00;
  COFD[1630] = -2.92155848E-01;
  COFD[1631] = 1.27867850E-02;
  COFD[1632] = -1.74313098E+01;
  COFD[1633] = 4.14166966E+00;
  COFD[1634] = -3.25149462E-01;
  COFD[1635] = 1.41943811E-02;
  COFD[1636] = -1.31915935E+01;
  COFD[1637] = 3.04970299E+00;
  COFD[1638] = -1.85555523E-01;
  COFD[1639] = 8.22773480E-03;
  COFD[1640] = -1.68737101E+01;
  COFD[1641] = 4.63687143E+00;
  COFD[1642] = -3.85900861E-01;
  COFD[1643] = 1.66856798E-02;
  COFD[1644] = -1.77381432E+01;
  COFD[1645] = 4.25438185E+00;
  COFD[1646] = -3.39084808E-01;
  COFD[1647] = 1.47709916E-02;
  COFD[1648] = -1.62799868E+01;
  COFD[1649] = 3.88250968E+00;
  COFD[1650] = -2.92155848E-01;
  COFD[1651] = 1.27867850E-02;
  COFD[1652] = -1.63026010E+01;
  COFD[1653] = 3.88250968E+00;
  COFD[1654] = -2.92155848E-01;
  COFD[1655] = 1.27867850E-02;
  COFD[1656] = -1.77560949E+01;
  COFD[1657] = 4.25438185E+00;
  COFD[1658] = -3.39084808E-01;
  COFD[1659] = 1.47709916E-02;
  COFD[1660] = -1.77473126E+01;
  COFD[1661] = 4.25438185E+00;
  COFD[1662] = -3.39084808E-01;
  COFD[1663] = 1.47709916E-02;
  COFD[1664] = -2.14572714E+01;
  COFD[1665] = 5.49993732E+00;
  COFD[1666] = -4.62042917E-01;
  COFD[1667] = 1.85577413E-02;
  COFD[1668] = -1.74516622E+01;
  COFD[1669] = 4.14135251E+00;
  COFD[1670] = -3.25110732E-01;
  COFD[1671] = 1.41927996E-02;
  COFD[1672] = -2.00497549E+01;
  COFD[1673] = 5.03042083E+00;
  COFD[1674] = -4.32596342E-01;
  COFD[1675] = 1.85345510E-02;
  COFD[1676] = -2.05769457E+01;
  COFD[1677] = 5.17526774E+00;
  COFD[1678] = -4.48472252E-01;
  COFD[1679] = 1.91050891E-02;
  COFD[1680] = -1.62876317E+01;
  COFD[1681] = 3.68407693E+00;
  COFD[1682] = -2.66228170E-01;
  COFD[1683] = 1.16542305E-02;
  COFD[1684] = -2.15768444E+01;
  COFD[1685] = 5.58518186E+00;
  COFD[1686] = -4.80813479E-01;
  COFD[1687] = 1.96787936E-02;
  COFD[1688] = -2.02374142E+01;
  COFD[1689] = 5.06106939E+00;
  COFD[1690] = -4.36210404E-01;
  COFD[1691] = 1.86769307E-02;
  COFD[1692] = -1.62238594E+01;
  COFD[1693] = 3.88250968E+00;
  COFD[1694] = -2.92155848E-01;
  COFD[1695] = 1.27867850E-02;
  COFD[1696] = -1.62482871E+01;
  COFD[1697] = 3.88250968E+00;
  COFD[1698] = -2.92155848E-01;
  COFD[1699] = 1.27867850E-02;
  COFD[1700] = -2.00552028E+01;
  COFD[1701] = 5.03042083E+00;
  COFD[1702] = -4.32596342E-01;
  COFD[1703] = 1.85345510E-02;
  COFD[1704] = -1.80042982E+01;
  COFD[1705] = 4.34871946E+00;
  COFD[1706] = -3.50542624E-01;
  COFD[1707] = 1.52355319E-02;
  COFD[1708] = -1.62876317E+01;
  COFD[1709] = 3.68407693E+00;
  COFD[1710] = -2.66228170E-01;
  COFD[1711] = 1.16542305E-02;
  COFD[1712] = -1.58809491E+01;
  COFD[1713] = 3.68407693E+00;
  COFD[1714] = -2.66228170E-01;
  COFD[1715] = 1.16542305E-02;
  COFD[1716] = -1.62771453E+01;
  COFD[1717] = 3.68407693E+00;
  COFD[1718] = -2.66228170E-01;
  COFD[1719] = 1.16542305E-02;
  COFD[1720] = -1.80138725E+01;
  COFD[1721] = 4.34871946E+00;
  COFD[1722] = -3.50542624E-01;
  COFD[1723] = 1.52355319E-02;
  COFD[1724] = -2.00518410E+01;
  COFD[1725] = 5.03042083E+00;
  COFD[1726] = -4.32596342E-01;
  COFD[1727] = 1.85345510E-02;
  COFD[1728] = -1.55297830E+01;
  COFD[1729] = 3.46766436E+00;
  COFD[1730] = -2.39228775E-01;
  COFD[1731] = 1.05291747E-02;
  COFD[1732] = -1.20867851E+01;
  COFD[1733] = 2.64389960E+00;
  COFD[1734] = -1.33241706E-01;
  COFD[1735] = 5.97810200E-03;
  COFD[1736] = -1.50140936E+01;
  COFD[1737] = 3.96853403E+00;
  COFD[1738] = -3.03320126E-01;
  COFD[1739] = 1.32719819E-02;
  COFD[1740] = -1.57967271E+01;
  COFD[1741] = 3.57122377E+00;
  COFD[1742] = -2.52409987E-01;
  COFD[1743] = 1.10900562E-02;
  COFD[1744] = -1.45065534E+01;
  COFD[1745] = 3.24450689E+00;
  COFD[1746] = -2.10570734E-01;
  COFD[1747] = 9.30026771E-03;
  COFD[1748] = -1.45264956E+01;
  COFD[1749] = 3.24450689E+00;
  COFD[1750] = -2.10570734E-01;
  COFD[1751] = 9.30026771E-03;
  COFD[1752] = -1.58115301E+01;
  COFD[1753] = 3.57122377E+00;
  COFD[1754] = -2.52409987E-01;
  COFD[1755] = 1.10900562E-02;
  COFD[1756] = -1.58042999E+01;
  COFD[1757] = 3.57122377E+00;
  COFD[1758] = -2.52409987E-01;
  COFD[1759] = 1.10900562E-02;
  COFD[1760] = -2.09198980E+01;
  COFD[1761] = 5.50410224E+00;
  COFD[1762] = -4.82760329E-01;
  COFD[1763] = 2.02578587E-02;
  COFD[1764] = -1.55466807E+01;
  COFD[1765] = 3.46735141E+00;
  COFD[1766] = -2.39189370E-01;
  COFD[1767] = 1.05275176E-02;
  COFD[1768] = -1.79999625E+01;
  COFD[1769] = 4.34871946E+00;
  COFD[1770] = -3.50542624E-01;
  COFD[1771] = 1.52355319E-02;
  COFD[1772] = -1.86088645E+01;
  COFD[1773] = 4.53681554E+00;
  COFD[1774] = -3.73517224E-01;
  COFD[1775] = 1.61730724E-02;
  COFD[1776] = -1.47303677E+01;
  COFD[1777] = 3.14480429E+00;
  COFD[1778] = -1.97906290E-01;
  COFD[1779] = 8.76325718E-03;
  COFD[1780] = -2.05628479E+01;
  COFD[1781] = 5.37634919E+00;
  COFD[1782] = -4.70693222E-01;
  COFD[1783] = 1.99144603E-02;
  COFD[1784] = -1.82118969E+01;
  COFD[1785] = 4.38314454E+00;
  COFD[1786] = -3.54844523E-01;
  COFD[1787] = 1.54154407E-02;
  COFD[1788] = -1.44530909E+01;
  COFD[1789] = 3.24450689E+00;
  COFD[1790] = -2.10570734E-01;
  COFD[1791] = 9.30026771E-03;
  COFD[1792] = -1.44747472E+01;
  COFD[1793] = 3.24450689E+00;
  COFD[1794] = -2.10570734E-01;
  COFD[1795] = 9.30026771E-03;
  COFD[1796] = -1.80042982E+01;
  COFD[1797] = 4.34871946E+00;
  COFD[1798] = -3.50542624E-01;
  COFD[1799] = 1.52355319E-02;
  COFD[1800] = -1.60107195E+01;
  COFD[1801] = 3.64795923E+00;
  COFD[1802] = -2.61984156E-01;
  COFD[1803] = 1.14893124E-02;
  COFD[1804] = -1.47303677E+01;
  COFD[1805] = 3.14480429E+00;
  COFD[1806] = -1.97906290E-01;
  COFD[1807] = 8.76325718E-03;
  COFD[1808] = -1.43591756E+01;
  COFD[1809] = 3.14480429E+00;
  COFD[1810] = -1.97906290E-01;
  COFD[1811] = 8.76325718E-03;
  COFD[1812] = -1.47216216E+01;
  COFD[1813] = 3.14480429E+00;
  COFD[1814] = -1.97906290E-01;
  COFD[1815] = 8.76325718E-03;
  COFD[1816] = -1.60186516E+01;
  COFD[1817] = 3.64795923E+00;
  COFD[1818] = -2.61984156E-01;
  COFD[1819] = 1.14893124E-02;
  COFD[1820] = -1.80224967E+01;
  COFD[1821] = 4.34871946E+00;
  COFD[1822] = -3.50542624E-01;
  COFD[1823] = 1.52355319E-02;
  COFD[1824] = -1.42780328E+01;
  COFD[1825] = 2.97137588E+00;
  COFD[1826] = -1.75491257E-01;
  COFD[1827] = 7.79646773E-03;
  COFD[1828] = -1.10367385E+01;
  COFD[1829] = 2.19094415E+00;
  COFD[1830] = -7.11992510E-02;
  COFD[1831] = 3.14105973E-03;
  COFD[1832] = -1.34492865E+01;
  COFD[1833] = 3.34156587E+00;
  COFD[1834] = -2.22853306E-01;
  COFD[1835] = 9.81883417E-03;
  COFD[1836] = -1.45001273E+01;
  COFD[1837] = 3.05837263E+00;
  COFD[1838] = -1.86672802E-01;
  COFD[1839] = 8.27575734E-03;
  COFD[1840] = -1.34296968E+01;
  COFD[1841] = 2.80913567E+00;
  COFD[1842] = -1.54536855E-01;
  COFD[1843] = 6.89359313E-03;
  COFD[1844] = -1.34494148E+01;
  COFD[1845] = 2.80913567E+00;
  COFD[1846] = -1.54536855E-01;
  COFD[1847] = 6.89359313E-03;
  COFD[1848] = -1.45146845E+01;
  COFD[1849] = 3.05837263E+00;
  COFD[1850] = -1.86672802E-01;
  COFD[1851] = 8.27575734E-03;
  COFD[1852] = -1.45075753E+01;
  COFD[1853] = 3.05837263E+00;
  COFD[1854] = -1.86672802E-01;
  COFD[1855] = 8.27575734E-03;
  COFD[1856] = -1.95861373E+01;
  COFD[1857] = 5.05708283E+00;
  COFD[1858] = -4.35739290E-01;
  COFD[1859] = 1.86583205E-02;
  COFD[1860] = -1.42948900E+01;
  COFD[1861] = 2.97115231E+00;
  COFD[1862] = -1.75463252E-01;
  COFD[1863] = 7.79530067E-03;
  COFD[1864] = -1.62833796E+01;
  COFD[1865] = 3.68407693E+00;
  COFD[1866] = -2.66228170E-01;
  COFD[1867] = 1.16542305E-02;
  COFD[1868] = -1.70265556E+01;
  COFD[1869] = 3.93849401E+00;
  COFD[1870] = -2.99416642E-01;
  COFD[1871] = 1.31020815E-02;
  COFD[1872] = -1.36978066E+01;
  COFD[1873] = 2.73155251E+00;
  COFD[1874] = -1.44594082E-01;
  COFD[1875] = 6.46883252E-03;
  COFD[1876] = -1.90109410E+01;
  COFD[1877] = 4.82909392E+00;
  COFD[1878] = -4.08610711E-01;
  COFD[1879] = 1.75802236E-02;
  COFD[1880] = -1.64977272E+01;
  COFD[1881] = 3.72316581E+00;
  COFD[1882] = -2.71276511E-01;
  COFD[1883] = 1.18720331E-02;
  COFD[1884] = -1.33779841E+01;
  COFD[1885] = 2.80913567E+00;
  COFD[1886] = -1.54536855E-01;
  COFD[1887] = 6.89359313E-03;
  COFD[1888] = -1.33994064E+01;
  COFD[1889] = 2.80913567E+00;
  COFD[1890] = -1.54536855E-01;
  COFD[1891] = 6.89359313E-03;
  COFD[1892] = -1.62876317E+01;
  COFD[1893] = 3.68407693E+00;
  COFD[1894] = -2.66228170E-01;
  COFD[1895] = 1.16542305E-02;
  COFD[1896] = -1.47303677E+01;
  COFD[1897] = 3.14480429E+00;
  COFD[1898] = -1.97906290E-01;
  COFD[1899] = 8.76325718E-03;
  COFD[1900] = -1.36978066E+01;
  COFD[1901] = 2.73155251E+00;
  COFD[1902] = -1.44594082E-01;
  COFD[1903] = 6.46883252E-03;
  COFD[1904] = -1.33354626E+01;
  COFD[1905] = 2.73155251E+00;
  COFD[1906] = -1.44594082E-01;
  COFD[1907] = 6.46883252E-03;
  COFD[1908] = -1.36891980E+01;
  COFD[1909] = 2.73155251E+00;
  COFD[1910] = -1.44594082E-01;
  COFD[1911] = 6.46883252E-03;
  COFD[1912] = -1.47381710E+01;
  COFD[1913] = 3.14480429E+00;
  COFD[1914] = -1.97906290E-01;
  COFD[1915] = 8.76325718E-03;
  COFD[1916] = -1.63029340E+01;
  COFD[1917] = 3.68407693E+00;
  COFD[1918] = -2.66228170E-01;
  COFD[1919] = 1.16542305E-02;
  COFD[1920] = -1.39186828E+01;
  COFD[1921] = 2.97137588E+00;
  COFD[1922] = -1.75491257E-01;
  COFD[1923] = 7.79646773E-03;
  COFD[1924] = -1.08473079E+01;
  COFD[1925] = 2.19094415E+00;
  COFD[1926] = -7.11992510E-02;
  COFD[1927] = 3.14105973E-03;
  COFD[1928] = -1.32522938E+01;
  COFD[1929] = 3.34156587E+00;
  COFD[1930] = -2.22853306E-01;
  COFD[1931] = 9.81883417E-03;
  COFD[1932] = -1.41254300E+01;
  COFD[1933] = 3.05837263E+00;
  COFD[1934] = -1.86672802E-01;
  COFD[1935] = 8.27575734E-03;
  COFD[1936] = -1.31034501E+01;
  COFD[1937] = 2.80913567E+00;
  COFD[1938] = -1.54536855E-01;
  COFD[1939] = 6.89359313E-03;
  COFD[1940] = -1.31174788E+01;
  COFD[1941] = 2.80913567E+00;
  COFD[1942] = -1.54536855E-01;
  COFD[1943] = 6.89359313E-03;
  COFD[1944] = -1.41345352E+01;
  COFD[1945] = 3.05837263E+00;
  COFD[1946] = -1.86672802E-01;
  COFD[1947] = 8.27575734E-03;
  COFD[1948] = -1.41301009E+01;
  COFD[1949] = 3.05837263E+00;
  COFD[1950] = -1.86672802E-01;
  COFD[1951] = 8.27575734E-03;
  COFD[1952] = -1.92450630E+01;
  COFD[1953] = 5.05708283E+00;
  COFD[1954] = -4.35739290E-01;
  COFD[1955] = 1.86583205E-02;
  COFD[1956] = -1.39292538E+01;
  COFD[1957] = 2.97115231E+00;
  COFD[1958] = -1.75463252E-01;
  COFD[1959] = 7.79530067E-03;
  COFD[1960] = -1.58784406E+01;
  COFD[1961] = 3.68407693E+00;
  COFD[1962] = -2.66228170E-01;
  COFD[1963] = 1.16542305E-02;
  COFD[1964] = -1.66315381E+01;
  COFD[1965] = 3.93849401E+00;
  COFD[1966] = -2.99416642E-01;
  COFD[1967] = 1.31020815E-02;
  COFD[1968] = -1.33354626E+01;
  COFD[1969] = 2.73155251E+00;
  COFD[1970] = -1.44594082E-01;
  COFD[1971] = 6.46883252E-03;
  COFD[1972] = -1.86830530E+01;
  COFD[1973] = 4.82909392E+00;
  COFD[1974] = -4.08610711E-01;
  COFD[1975] = 1.75802236E-02;
  COFD[1976] = -1.61370785E+01;
  COFD[1977] = 3.72316581E+00;
  COFD[1978] = -2.71276511E-01;
  COFD[1979] = 1.18720331E-02;
  COFD[1980] = -1.30550382E+01;
  COFD[1981] = 2.80913567E+00;
  COFD[1982] = -1.54536855E-01;
  COFD[1983] = 6.89359313E-03;
  COFD[1984] = -1.30704546E+01;
  COFD[1985] = 2.80913567E+00;
  COFD[1986] = -1.54536855E-01;
  COFD[1987] = 6.89359313E-03;
  COFD[1988] = -1.58809491E+01;
  COFD[1989] = 3.68407693E+00;
  COFD[1990] = -2.66228170E-01;
  COFD[1991] = 1.16542305E-02;
  COFD[1992] = -1.43591756E+01;
  COFD[1993] = 3.14480429E+00;
  COFD[1994] = -1.97906290E-01;
  COFD[1995] = 8.76325718E-03;
  COFD[1996] = -1.33354626E+01;
  COFD[1997] = 2.73155251E+00;
  COFD[1998] = -1.44594082E-01;
  COFD[1999] = 6.46883252E-03;
  COFD[2000] = -1.30341700E+01;
  COFD[2001] = 2.73155251E+00;
  COFD[2002] = -1.44594082E-01;
  COFD[2003] = 6.46883252E-03;
  COFD[2004] = -1.33299692E+01;
  COFD[2005] = 2.73155251E+00;
  COFD[2006] = -1.44594082E-01;
  COFD[2007] = 6.46883252E-03;
  COFD[2008] = -1.43640965E+01;
  COFD[2009] = 3.14480429E+00;
  COFD[2010] = -1.97906290E-01;
  COFD[2011] = 8.76325718E-03;
  COFD[2012] = -1.59394625E+01;
  COFD[2013] = 3.68407693E+00;
  COFD[2014] = -2.66228170E-01;
  COFD[2015] = 1.16542305E-02;
  COFD[2016] = -1.42697208E+01;
  COFD[2017] = 2.97137588E+00;
  COFD[2018] = -1.75491257E-01;
  COFD[2019] = 7.79646773E-03;
  COFD[2020] = -1.10356472E+01;
  COFD[2021] = 2.19094415E+00;
  COFD[2022] = -7.11992510E-02;
  COFD[2023] = 3.14105973E-03;
  COFD[2024] = -1.34487228E+01;
  COFD[2025] = 3.34156587E+00;
  COFD[2026] = -2.22853306E-01;
  COFD[2027] = 9.81883417E-03;
  COFD[2028] = -1.44912481E+01;
  COFD[2029] = 3.05837263E+00;
  COFD[2030] = -1.86672802E-01;
  COFD[2031] = 8.27575734E-03;
  COFD[2032] = -1.34236967E+01;
  COFD[2033] = 2.80913567E+00;
  COFD[2034] = -1.54536855E-01;
  COFD[2035] = 6.89359313E-03;
  COFD[2036] = -1.34431749E+01;
  COFD[2037] = 2.80913567E+00;
  COFD[2038] = -1.54536855E-01;
  COFD[2039] = 6.89359313E-03;
  COFD[2040] = -1.45055453E+01;
  COFD[2041] = 3.05837263E+00;
  COFD[2042] = -1.86672802E-01;
  COFD[2043] = 8.27575734E-03;
  COFD[2044] = -1.44985640E+01;
  COFD[2045] = 3.05837263E+00;
  COFD[2046] = -1.86672802E-01;
  COFD[2047] = 8.27575734E-03;
  COFD[2048] = -1.95796677E+01;
  COFD[2049] = 5.05708283E+00;
  COFD[2050] = -4.35739290E-01;
  COFD[2051] = 1.86583205E-02;
  COFD[2052] = -1.42862849E+01;
  COFD[2053] = 2.97115231E+00;
  COFD[2054] = -1.75463252E-01;
  COFD[2055] = 7.79530067E-03;
  COFD[2056] = -1.62729811E+01;
  COFD[2057] = 3.68407693E+00;
  COFD[2058] = -2.66228170E-01;
  COFD[2059] = 1.16542305E-02;
  COFD[2060] = -1.70163379E+01;
  COFD[2061] = 3.93849401E+00;
  COFD[2062] = -2.99416642E-01;
  COFD[2063] = 1.31020815E-02;
  COFD[2064] = -1.36891980E+01;
  COFD[2065] = 2.73155251E+00;
  COFD[2066] = -1.44594082E-01;
  COFD[2067] = 6.46883252E-03;
  COFD[2068] = -1.90046955E+01;
  COFD[2069] = 4.82909392E+00;
  COFD[2070] = -4.08610711E-01;
  COFD[2071] = 1.75802236E-02;
  COFD[2072] = -1.64888415E+01;
  COFD[2073] = 3.72316581E+00;
  COFD[2074] = -2.71276511E-01;
  COFD[2075] = 1.18720331E-02;
  COFD[2076] = -1.33722286E+01;
  COFD[2077] = 2.80913567E+00;
  COFD[2078] = -1.54536855E-01;
  COFD[2079] = 6.89359313E-03;
  COFD[2080] = -1.33934005E+01;
  COFD[2081] = 2.80913567E+00;
  COFD[2082] = -1.54536855E-01;
  COFD[2083] = 6.89359313E-03;
  COFD[2084] = -1.62771453E+01;
  COFD[2085] = 3.68407693E+00;
  COFD[2086] = -2.66228170E-01;
  COFD[2087] = 1.16542305E-02;
  COFD[2088] = -1.47216216E+01;
  COFD[2089] = 3.14480429E+00;
  COFD[2090] = -1.97906290E-01;
  COFD[2091] = 8.76325718E-03;
  COFD[2092] = -1.36891980E+01;
  COFD[2093] = 2.73155251E+00;
  COFD[2094] = -1.44594082E-01;
  COFD[2095] = 6.46883252E-03;
  COFD[2096] = -1.33299692E+01;
  COFD[2097] = 2.73155251E+00;
  COFD[2098] = -1.44594082E-01;
  COFD[2099] = 6.46883252E-03;
  COFD[2100] = -1.36807352E+01;
  COFD[2101] = 2.73155251E+00;
  COFD[2102] = -1.44594082E-01;
  COFD[2103] = 6.46883252E-03;
  COFD[2104] = -1.47292885E+01;
  COFD[2105] = 3.14480429E+00;
  COFD[2106] = -1.97906290E-01;
  COFD[2107] = 8.76325718E-03;
  COFD[2108] = -1.62941846E+01;
  COFD[2109] = 3.68407693E+00;
  COFD[2110] = -2.66228170E-01;
  COFD[2111] = 1.16542305E-02;
  COFD[2112] = -1.55373090E+01;
  COFD[2113] = 3.46766436E+00;
  COFD[2114] = -2.39228775E-01;
  COFD[2115] = 1.05291747E-02;
  COFD[2116] = -1.20877466E+01;
  COFD[2117] = 2.64389960E+00;
  COFD[2118] = -1.33241706E-01;
  COFD[2119] = 5.97810200E-03;
  COFD[2120] = -1.50145893E+01;
  COFD[2121] = 3.96853403E+00;
  COFD[2122] = -3.03320126E-01;
  COFD[2123] = 1.32719819E-02;
  COFD[2124] = -1.58047841E+01;
  COFD[2125] = 3.57122377E+00;
  COFD[2126] = -2.52409987E-01;
  COFD[2127] = 1.10900562E-02;
  COFD[2128] = -1.45119385E+01;
  COFD[2129] = 3.24450689E+00;
  COFD[2130] = -2.10570734E-01;
  COFD[2131] = 9.30026771E-03;
  COFD[2132] = -1.45321011E+01;
  COFD[2133] = 3.24450689E+00;
  COFD[2134] = -2.10570734E-01;
  COFD[2135] = 9.30026771E-03;
  COFD[2136] = -1.58198313E+01;
  COFD[2137] = 3.57122377E+00;
  COFD[2138] = -2.52409987E-01;
  COFD[2139] = 1.10900562E-02;
  COFD[2140] = -1.58124809E+01;
  COFD[2141] = 3.57122377E+00;
  COFD[2142] = -2.52409987E-01;
  COFD[2143] = 1.10900562E-02;
  COFD[2144] = -2.09257148E+01;
  COFD[2145] = 5.50410224E+00;
  COFD[2146] = -4.82760329E-01;
  COFD[2147] = 2.02578587E-02;
  COFD[2148] = -1.55544808E+01;
  COFD[2149] = 3.46735141E+00;
  COFD[2150] = -2.39189370E-01;
  COFD[2151] = 1.05275176E-02;
  COFD[2152] = -1.80094534E+01;
  COFD[2153] = 4.34871946E+00;
  COFD[2154] = -3.50542624E-01;
  COFD[2155] = 1.52355319E-02;
  COFD[2156] = -1.86181839E+01;
  COFD[2157] = 4.53681554E+00;
  COFD[2158] = -3.73517224E-01;
  COFD[2159] = 1.61730724E-02;
  COFD[2160] = -1.47381710E+01;
  COFD[2161] = 3.14480429E+00;
  COFD[2162] = -1.97906290E-01;
  COFD[2163] = 8.76325718E-03;
  COFD[2164] = -2.05684585E+01;
  COFD[2165] = 5.37634919E+00;
  COFD[2166] = -4.70693222E-01;
  COFD[2167] = 1.99144603E-02;
  COFD[2168] = -1.82199600E+01;
  COFD[2169] = 4.38314454E+00;
  COFD[2170] = -3.54844523E-01;
  COFD[2171] = 1.54154407E-02;
  COFD[2172] = -1.44582517E+01;
  COFD[2173] = 3.24450689E+00;
  COFD[2174] = -2.10570734E-01;
  COFD[2175] = 9.30026771E-03;
  COFD[2176] = -1.44801377E+01;
  COFD[2177] = 3.24450689E+00;
  COFD[2178] = -2.10570734E-01;
  COFD[2179] = 9.30026771E-03;
  COFD[2180] = -1.80138725E+01;
  COFD[2181] = 4.34871946E+00;
  COFD[2182] = -3.50542624E-01;
  COFD[2183] = 1.52355319E-02;
  COFD[2184] = -1.60186516E+01;
  COFD[2185] = 3.64795923E+00;
  COFD[2186] = -2.61984156E-01;
  COFD[2187] = 1.14893124E-02;
  COFD[2188] = -1.47381710E+01;
  COFD[2189] = 3.14480429E+00;
  COFD[2190] = -1.97906290E-01;
  COFD[2191] = 8.76325718E-03;
  COFD[2192] = -1.43640965E+01;
  COFD[2193] = 3.14480429E+00;
  COFD[2194] = -1.97906290E-01;
  COFD[2195] = 8.76325718E-03;
  COFD[2196] = -1.47292885E+01;
  COFD[2197] = 3.14480429E+00;
  COFD[2198] = -1.97906290E-01;
  COFD[2199] = 8.76325718E-03;
  COFD[2200] = -1.60267117E+01;
  COFD[2201] = 3.64795923E+00;
  COFD[2202] = -2.61984156E-01;
  COFD[2203] = 1.14893124E-02;
  COFD[2204] = -1.80304320E+01;
  COFD[2205] = 4.34871946E+00;
  COFD[2206] = -3.50542624E-01;
  COFD[2207] = 1.52355319E-02;
  COFD[2208] = -1.74527205E+01;
  COFD[2209] = 4.14166966E+00;
  COFD[2210] = -3.25149462E-01;
  COFD[2211] = 1.41943811E-02;
  COFD[2212] = -1.33020050E+01;
  COFD[2213] = 3.04970299E+00;
  COFD[2214] = -1.85555523E-01;
  COFD[2215] = 8.22773480E-03;
  COFD[2216] = -1.70075237E+01;
  COFD[2217] = 4.63687143E+00;
  COFD[2218] = -3.85900861E-01;
  COFD[2219] = 1.66856798E-02;
  COFD[2220] = -1.77552699E+01;
  COFD[2221] = 4.25438185E+00;
  COFD[2222] = -3.39084808E-01;
  COFD[2223] = 1.47709916E-02;
  COFD[2224] = -1.63426470E+01;
  COFD[2225] = 3.88250968E+00;
  COFD[2226] = -2.92155848E-01;
  COFD[2227] = 1.27867850E-02;
  COFD[2228] = -1.63625946E+01;
  COFD[2229] = 3.88250968E+00;
  COFD[2230] = -2.92155848E-01;
  COFD[2231] = 1.27867850E-02;
  COFD[2232] = -1.77700789E+01;
  COFD[2233] = 4.25438185E+00;
  COFD[2234] = -3.39084808E-01;
  COFD[2235] = 1.47709916E-02;
  COFD[2236] = -1.77628457E+01;
  COFD[2237] = 4.25438185E+00;
  COFD[2238] = -3.39084808E-01;
  COFD[2239] = 1.47709916E-02;
  COFD[2240] = -2.15175497E+01;
  COFD[2241] = 5.49993732E+00;
  COFD[2242] = -4.62042917E-01;
  COFD[2243] = 1.85577413E-02;
  COFD[2244] = -1.74695868E+01;
  COFD[2245] = 4.14135251E+00;
  COFD[2246] = -3.25110732E-01;
  COFD[2247] = 1.41927996E-02;
  COFD[2248] = -2.00475034E+01;
  COFD[2249] = 5.03042083E+00;
  COFD[2250] = -4.32596342E-01;
  COFD[2251] = 1.85345510E-02;
  COFD[2252] = -2.05721233E+01;
  COFD[2253] = 5.17526774E+00;
  COFD[2254] = -4.48472252E-01;
  COFD[2255] = 1.91050891E-02;
  COFD[2256] = -1.63029340E+01;
  COFD[2257] = 3.68407693E+00;
  COFD[2258] = -2.66228170E-01;
  COFD[2259] = 1.16542305E-02;
  COFD[2260] = -2.16335876E+01;
  COFD[2261] = 5.58518186E+00;
  COFD[2262] = -4.80813479E-01;
  COFD[2263] = 1.96787936E-02;
  COFD[2264] = -2.02435759E+01;
  COFD[2265] = 5.06106939E+00;
  COFD[2266] = -4.36210404E-01;
  COFD[2267] = 1.86769307E-02;
  COFD[2268] = -1.62911759E+01;
  COFD[2269] = 3.88250968E+00;
  COFD[2270] = -2.92155848E-01;
  COFD[2271] = 1.27867850E-02;
  COFD[2272] = -1.63128378E+01;
  COFD[2273] = 3.88250968E+00;
  COFD[2274] = -2.92155848E-01;
  COFD[2275] = 1.27867850E-02;
  COFD[2276] = -2.00518410E+01;
  COFD[2277] = 5.03042083E+00;
  COFD[2278] = -4.32596342E-01;
  COFD[2279] = 1.85345510E-02;
  COFD[2280] = -1.80224967E+01;
  COFD[2281] = 4.34871946E+00;
  COFD[2282] = -3.50542624E-01;
  COFD[2283] = 1.52355319E-02;
  COFD[2284] = -1.63029340E+01;
  COFD[2285] = 3.68407693E+00;
  COFD[2286] = -2.66228170E-01;
  COFD[2287] = 1.16542305E-02;
  COFD[2288] = -1.59394625E+01;
  COFD[2289] = 3.68407693E+00;
  COFD[2290] = -2.66228170E-01;
  COFD[2291] = 1.16542305E-02;
  COFD[2292] = -1.62941846E+01;
  COFD[2293] = 3.68407693E+00;
  COFD[2294] = -2.66228170E-01;
  COFD[2295] = 1.16542305E-02;
  COFD[2296] = -1.80304320E+01;
  COFD[2297] = 4.34871946E+00;
  COFD[2298] = -3.50542624E-01;
  COFD[2299] = 1.52355319E-02;
  COFD[2300] = -2.00640240E+01;
  COFD[2301] = 5.03042083E+00;
  COFD[2302] = -4.32596342E-01;
  COFD[2303] = 1.85345510E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 1;
  KTDIF[1] = 2;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 4.31330748E-01;
  COFTD[1] = 9.20535689E-05;
  COFTD[2] = -5.94508898E-08;
  COFTD[3] = 1.21437846E-11;
  COFTD[4] = 0.00000000E+00;
  COFTD[5] = 0.00000000E+00;
  COFTD[6] = 0.00000000E+00;
  COFTD[7] = 0.00000000E+00;
  COFTD[8] = -1.44152190E-01;
  COFTD[9] = -7.99993584E-05;
  COFTD[10] = 4.89707442E-08;
  COFTD[11] = -9.14277269E-12;
  COFTD[12] = 4.26576987E-01;
  COFTD[13] = 1.20406440E-04;
  COFTD[14] = -7.67293441E-08;
  COFTD[15] = 1.52089282E-11;
  COFTD[16] = 4.06676789E-01;
  COFTD[17] = 3.84699853E-05;
  COFTD[18] = -2.54843294E-08;
  COFTD[19] = 5.86294132E-12;
  COFTD[20] = 4.12890501E-01;
  COFTD[21] = 3.90577773E-05;
  COFTD[22] = -2.58737105E-08;
  COFTD[23] = 5.95252260E-12;
  COFTD[24] = 4.29786829E-01;
  COFTD[25] = 1.21312456E-04;
  COFTD[26] = -7.73067054E-08;
  COFTD[27] = 1.53233700E-11;
  COFTD[28] = 4.28228101E-01;
  COFTD[29] = 1.20872486E-04;
  COFTD[30] = -7.70263335E-08;
  COFTD[31] = 1.52677960E-11;
  COFTD[32] = 8.27866776E-02;
  COFTD[33] = 6.04871821E-04;
  COFTD[34] = -3.16400889E-07;
  COFTD[35] = 5.19483386E-11;
  COFTD[36] = 4.35530319E-01;
  COFTD[37] = 9.28595255E-05;
  COFTD[38] = -5.99739561E-08;
  COFTD[39] = 1.22519981E-11;
  COFTD[40] = 3.35876848E-01;
  COFTD[41] = 3.31390958E-04;
  COFTD[42] = -1.94934498E-07;
  COFTD[43] = 3.49299774E-11;
  COFTD[44] = 3.03583159E-01;
  COFTD[45] = 3.83873415E-04;
  COFTD[46] = -2.21858385E-07;
  COFTD[47] = 3.91460261E-11;
  COFTD[48] = 4.68942192E-01;
  COFTD[49] = 1.80545885E-05;
  COFTD[50] = -1.19735977E-08;
  COFTD[51] = 3.47453353E-12;
  COFTD[52] = 1.17860064E-01;
  COFTD[53] = 5.50730922E-04;
  COFTD[54] = -2.93605767E-07;
  COFTD[55] = 4.88092192E-11;
  COFTD[56] = 3.18453173E-01;
  COFTD[57] = 3.27442779E-04;
  COFTD[58] = -1.92047098E-07;
  COFTD[59] = 3.43212289E-11;
  COFTD[60] = 3.99901552E-01;
  COFTD[61] = 3.78290751E-05;
  COFTD[62] = -2.50597604E-08;
  COFTD[63] = 5.76526469E-12;
  COFTD[64] = 4.06832805E-01;
  COFTD[65] = 3.84847437E-05;
  COFTD[66] = -2.54941061E-08;
  COFTD[67] = 5.86519055E-12;
  COFTD[68] = 3.36509790E-01;
  COFTD[69] = 3.32015447E-04;
  COFTD[70] = -1.95301842E-07;
  COFTD[71] = 3.49958011E-11;
  COFTD[72] = 4.13276369E-01;
  COFTD[73] = 1.43904192E-04;
  COFTD[74] = -9.06635924E-08;
  COFTD[75] = 1.76105046E-11;
  COFTD[76] = 4.68942192E-01;
  COFTD[77] = 1.80545885E-05;
  COFTD[78] = -1.19735977E-08;
  COFTD[79] = 3.47453353E-12;
  COFTD[80] = 4.01448263E-01;
  COFTD[81] = 1.54560270E-05;
  COFTD[82] = -1.02502613E-08;
  COFTD[83] = 2.97445074E-12;
  COFTD[84] = 4.66750237E-01;
  COFTD[85] = 1.79701968E-05;
  COFTD[86] = -1.19176301E-08;
  COFTD[87] = 3.45829268E-12;
  COFTD[88] = 4.14978094E-01;
  COFTD[89] = 1.44496739E-04;
  COFTD[90] = -9.10369129E-08;
  COFTD[91] = 1.76830184E-11;
  COFTD[92] = 3.21936705E-01;
  COFTD[93] = 3.17636996E-04;
  COFTD[94] = -1.86843988E-07;
  COFTD[95] = 3.34802529E-11;
  COFTD[96] = 2.01521521E-01;
  COFTD[97] = 5.62743751E-04;
  COFTD[98] = -3.08519054E-07;
  COFTD[99] = 5.22805672E-11;
  COFTD[100] = 1.44152190E-01;
  COFTD[101] = 7.99993584E-05;
  COFTD[102] = -4.89707442E-08;
  COFTD[103] = 9.14277269E-12;
  COFTD[104] = 0.00000000E+00;
  COFTD[105] = 0.00000000E+00;
  COFTD[106] = 0.00000000E+00;
  COFTD[107] = 0.00000000E+00;
  COFTD[108] = 1.79839678E-01;
  COFTD[109] = 6.01720824E-04;
  COFTD[110] = -3.26432767E-07;
  COFTD[111] = 5.49110406E-11;
  COFTD[112] = 2.35281489E-01;
  COFTD[113] = 4.65667373E-04;
  COFTD[114] = -2.60938016E-07;
  COFTD[115] = 4.49268709E-11;
  COFTD[116] = 2.37051899E-01;
  COFTD[117] = 4.69171356E-04;
  COFTD[118] = -2.62901483E-07;
  COFTD[119] = 4.52649298E-11;
  COFTD[120] = 1.80513126E-01;
  COFTD[121] = 6.03974096E-04;
  COFTD[122] = -3.27655164E-07;
  COFTD[123] = 5.51166667E-11;
  COFTD[124] = 1.80186380E-01;
  COFTD[125] = 6.02880848E-04;
  COFTD[126] = -3.27062078E-07;
  COFTD[127] = 5.50169005E-11;
  COFTD[128] = -1.74351746E-01;
  COFTD[129] = 8.62242165E-04;
  COFTD[130] = -3.79543417E-07;
  COFTD[131] = 5.60259034E-11;
  COFTD[132] = 2.02562008E-01;
  COFTD[133] = 5.65332922E-04;
  COFTD[134] = -3.09948981E-07;
  COFTD[135] = 5.25241285E-11;
  COFTD[136] = 2.76047505E-02;
  COFTD[137] = 8.06199937E-04;
  COFTD[138] = -4.08431546E-07;
  COFTD[139] = 6.57152296E-11;
  COFTD[140] = -8.57035282E-03;
  COFTD[141] = 8.40083371E-04;
  COFTD[142] = -4.18318603E-07;
  COFTD[143] = 6.65929848E-11;
  COFTD[144] = 2.75785466E-01;
  COFTD[145] = 4.52150560E-04;
  COFTD[146] = -2.56613757E-07;
  COFTD[147] = 4.46163923E-11;
  COFTD[148] = -1.47923388E-01;
  COFTD[149] = 8.60599598E-04;
  COFTD[150] = -3.89552626E-07;
  COFTD[151] = 5.85120164E-11;
  COFTD[152] = 2.11713585E-02;
  COFTD[153] = 7.97030059E-04;
  COFTD[154] = -4.02655072E-07;
  COFTD[155] = 6.46731083E-11;
  COFTD[156] = 2.33338372E-01;
  COFTD[157] = 4.61821570E-04;
  COFTD[158] = -2.58783010E-07;
  COFTD[159] = 4.45558338E-11;
  COFTD[160] = 2.35326077E-01;
  COFTD[161] = 4.65755621E-04;
  COFTD[162] = -2.60987466E-07;
  COFTD[163] = 4.49353850E-11;
  COFTD[164] = 2.76307114E-02;
  COFTD[165] = 8.06958129E-04;
  COFTD[166] = -4.08815656E-07;
  COFTD[167] = 6.57770315E-11;
  COFTD[168] = 1.59106390E-01;
  COFTD[169] = 6.28945159E-04;
  COFTD[170] = -3.38129723E-07;
  COFTD[171] = 5.65283799E-11;
  COFTD[172] = 2.75785466E-01;
  COFTD[173] = 4.52150560E-04;
  COFTD[174] = -2.56613757E-07;
  COFTD[175] = 4.46163923E-11;
  COFTD[176] = 2.55342069E-01;
  COFTD[177] = 4.18633590E-04;
  COFTD[178] = -2.37591519E-07;
  COFTD[179] = 4.13090729E-11;
  COFTD[180] = 2.75142423E-01;
  COFTD[181] = 4.51096291E-04;
  COFTD[182] = -2.56015417E-07;
  COFTD[183] = 4.45123613E-11;
  COFTD[184] = 1.59432618E-01;
  COFTD[185] = 6.30234735E-04;
  COFTD[186] = -3.38823017E-07;
  COFTD[187] = 5.66442846E-11;
  COFTD[188] = 2.70271178E-02;
  COFTD[189] = 7.89330109E-04;
  COFTD[190] = -3.99885068E-07;
  COFTD[191] = 6.43401307E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[24];
  amrex::Real SIG[24];
  amrex::Real wt[24];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: N2
  // Imported from NIST
  Tci[0] = 126.192000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (28.013400 * 28.013400 * 33.958000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (28.013400 * 33.958000);
  acentric_i[0] = 0.037200;

  // species 1: H2
  // Imported from NIST
  Tci[1] = 33.145000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (2.015880 * 2.015880 * 12.964000);
  bi[1] = 0.08664 * Rcst * Tci[1] / (2.015880 * 12.964000);
  acentric_i[1] = -0.219000;

  // species 2: H
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O2
  // Imported from NIST
  Tci[3] = 154.581000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (31.998800 * 31.998800 * 50.430466);
  bi[3] = 0.08664 * Rcst * Tci[3] / (31.998800 * 50.430466);
  acentric_i[3] = 0.022200;

  // species 4: O
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: OH
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann * 1e-24 * SIG[5] *
           SIG[5] * SIG[5]) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: H2O2
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: HO2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: H2O
  // Imported from NIST
  Tci[8] = 647.096000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (18.015340 * 18.015340 * 220.640000);
  bi[8] = 0.08664 * Rcst * Tci[8] / (18.015340 * 220.640000);
  acentric_i[8] = 0.344300;

  // species 9: NO
  // Imported from NIST
  Tci[9] = 180.000000;
  ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] /
          (30.006000 * 30.006000 * 64.800000);
  bi[9] = 0.08664 * Rcst * Tci[9] / (30.006000 * 64.800000);
  acentric_i[9] = 0.582000;

  // species 10: NO2
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: N2O
  // Imported from NIST
  Tci[11] = 309.600000;
  ai[11] = 1e6 * 0.42748 * Rcst * Rcst * Tci[11] * Tci[11] /
           (44.013000 * 44.013000 * 72.550000);
  bi[11] = 0.08664 * Rcst * Tci[11] / (44.013000 * 72.550000);
  acentric_i[11] = 0.162000;

  // species 12: N2H2
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: NH3
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: N2H4
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: NH
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;

  // species 16: NH2
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: HONO
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: HNO
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: H2NN
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: N
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann * 1e-24 * SIG[20] *
            SIG[20] * SIG[20]) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: NNH
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: H2NO
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann * 1e-24 * SIG[22] *
            SIG[22] * SIG[22]) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * 1e-24 * SIG[22] * SIG[22] * SIG[22] / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: N2H3
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: N2
  // Imported from NIST
  sqrtOneOverTc[0] = 8.9019282240563e-02;
  sqrtAsti[0] = 4.2022983929562e+04;
  Bi[0] = 9.5560052221563e-01;
  Fomega[0] = 5.4259343186608e-01;

  // species 1: H2
  // Imported from NIST
  sqrtOneOverTc[1] = 1.7369646834812e-01;
  sqrtAsti[1] = 2.4824229305911e+05;
  Bi[1] = 9.1362254169923e+00;
  Fomega[1] = 1.3798618890700e-01;

  // species 2: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 7.2391579785311e-02;
  sqrtAsti[2] = 5.8451221185793e+05;
  Bi[2] = 4.4006634563410e+00;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.0430717653241e-02;
  sqrtAsti[3] = 3.6980081924740e+04;
  Bi[3] = 6.9005216444999e-01;
  Fomega[3] = 5.1945301904908e-01;

  // species 4: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 4.2500156012386e+04;
  Bi[4] = 6.6930234851885e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[5] = 9.7460146948181e-02;
  sqrtAsti[5] = 3.9981183985545e+04;
  Bi[5] = 6.2963299076575e-01;
  Fomega[5] = 4.8508000000000e-01;

  // species 6: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 8.4114315417892e-02;
  sqrtAsti[6] = 3.2660380884830e+04;
  Bi[6] = 6.2594239211036e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 8.4114315417892e-02;
  sqrtAsti[7] = 3.3657825710980e+04;
  Bi[7] = 6.4505861132042e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: H2O
  // Imported from NIST
  sqrtOneOverTc[8] = 3.9311140369715e-02;
  sqrtAsti[8] = 1.3145468419592e+05;
  Bi[8] = 1.1727204136223e+00;
  Fomega[8] = 1.0013577274636e+00;

  // species 9: NO
  // Imported from NIST
  sqrtOneOverTc[9] = 7.4535599249993e-02;
  sqrtAsti[9] = 4.0510614916903e+04;
  Bi[9] = 6.6687106751983e-01;
  Fomega[9] = 1.3368144381880e+00;

  // species 10: NO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 6.1639209090192e-02;
  sqrtAsti[10] = 3.3554545279404e+04;
  Bi[10] = 4.7986182770822e-01;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: N2O
  // Imported from NIST
  sqrtOneOverTc[11] = 5.6832861622539e-02;
  sqrtAsti[11] = 4.4894507333531e+04;
  Bi[11] = 6.9844955486412e-01;
  Fomega[11] = 7.3247646842800e-01;

  // species 12: N2H2
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 1.0316275924140e-01;
  sqrtAsti[12] = 3.4718866886354e+04;
  Bi[12] = 9.3934830234373e-01;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: NH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[13] = 3.9746557257596e-02;
  sqrtAsti[13] = 1.0711394012187e+05;
  Bi[13] = 7.5270623103672e-01;
  Fomega[13] = 4.8508000000000e-01;

  // species 14: N2H4
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 6.0882871132455e-02;
  sqrtAsti[14] = 6.4796713909941e+04;
  Bi[14] = 1.2160862543432e+00;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: NH
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 9.7460146948181e-02;
  sqrtAsti[15] = 4.2837862875144e+04;
  Bi[15] = 6.3815972382091e-01;
  Fomega[15] = 4.8508000000000e-01;

  // species 16: NH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 9.7460146948181e-02;
  sqrtAsti[16] = 4.0142951449185e+04;
  Bi[16] = 5.9801337160150e-01;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: HONO
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 6.1639209090192e-02;
  sqrtAsti[17] = 3.2835106365877e+04;
  Bi[17] = 4.6957316877708e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: HNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 8.0693142212399e-02;
  sqrtAsti[18] = 3.7890324657121e+04;
  Bi[18] = 7.0693914184172e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: H2NN
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 1.0316275924140e-01;
  sqrtAsti[19] = 3.4718866886354e+04;
  Bi[19] = 9.3934830234373e-01;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: N
  // Computed from Lennard-Jones
  sqrtOneOverTc[20] = 1.0316275924140e-01;
  sqrtAsti[20] = 6.0230890290396e+04;
  Bi[20] = 1.3186329724611e+00;
  Fomega[20] = 4.8508000000000e-01;

  // species 21: NNH
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 1.0316275924140e-01;
  sqrtAsti[21] = 3.5924732016994e+04;
  Bi[21] = 9.7197400314873e-01;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: H2NO
  // Computed from Lennard-Jones
  sqrtOneOverTc[22] = 8.0693142212399e-02;
  sqrtAsti[22] = 3.6697599429016e+04;
  Bi[22] = 6.8468585800634e-01;
  Fomega[22] = 4.8508000000000e-01;

  // species 23: N2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 6.1639209090192e-02;
  sqrtAsti[23] = 5.8500221172854e+04;
  Bi[23] = 9.8405007346676e-01;
  Fomega[23] = 4.8508000000000e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
