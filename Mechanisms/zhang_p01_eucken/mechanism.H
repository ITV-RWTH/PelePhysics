#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  O
1  H
2  N
*/

// Species
#define N2_ID 0
#define H_ID 1
#define H2_ID 2
#define O_ID 3
#define OH_ID 4
#define H2O_ID 5
#define HO2_ID 6
#define H2O2_ID 7
#define O2_ID 8
#define N_ID 9
#define NH_ID 10
#define NH2_ID 11
#define NH3_ID 12
#define NNH_ID 13
#define N2H2_ID 14
#define N2H3_ID 15
#define N2H4_ID 16
#define H2NN_ID 17
#define NO_ID 18
#define N2O_ID 19
#define NO2_ID 20
#define HNO_ID 21
#define H2NO_ID 22
#define HNOH_ID 23
#define NH2OH_ID 24
#define HONO_ID 25
#define HNO2_ID 26
#define HON_ID 27
#define NO3_ID 28
#define HNO3_ID 29

#define NUM_GAS_ELEMENTS 3    // Elements in the homogeneous phase
#define NUM_GAS_SPECIES 30    // Species in the homogeneous phase
#define NUM_GAS_REACTIONS 243 // Reactions in the homogeneous phase

#define SITE_DENSITY 0.000000E+00 // mol/cm^2

#define NUM_SURFACE_ELEMENTS 0  // Additional elements in heterogeneous phase
#define NUM_SURFACE_SPECIES 0   // Species in the heterogeneous phase
#define NUM_SURFACE_REACTIONS 0 // Reactions in the heterogeneous phase

#define NUM_ELEMENTS (NUM_GAS_ELEMENTS + NUM_SURFACE_ELEMENTS)
#define NUM_SPECIES (NUM_GAS_SPECIES + NUM_SURFACE_SPECIES)
#define NUM_REACTIONS (NUM_GAS_REACTIONS + NUM_SURFACE_REACTIONS)

#define NUM_IONS 0

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 3;
  kk = 30;
  ii = 243;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[30] = {
  0.0356964374955379, // N2
  0.9920634920634921, // H
  0.4960317460317460, // H2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0312519532470779, // O2
  0.0713928749910759, // N
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0587164582232400, // NH3
  0.0344566191165323, // NNH
  0.0333000333000333, // N2H2
  0.0322185707842000, // N2H3
  0.0312051426075017, // N2H4
  0.0333000333000333, // H2NN
  0.0333266679997334, // NO
  0.0227205598345943, // N2O
  0.0217367677426367, // NO2
  0.0322435029341588, // HNO
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0302755071147442, // NH2OH
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0322435029341588, // HON
  0.0161279917424682, // NO3
  0.0158699930172031, // HNO3
};
#endif
const amrex::Real h_global_imw[30] = {
  0.0356964374955379, // N2
  0.9920634920634921, // H
  0.4960317460317460, // H2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0312519532470779, // O2
  0.0713928749910759, // N
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0587164582232400, // NH3
  0.0344566191165323, // NNH
  0.0333000333000333, // N2H2
  0.0322185707842000, // N2H3
  0.0312051426075017, // N2H4
  0.0333000333000333, // H2NN
  0.0333266679997334, // NO
  0.0227205598345943, // N2O
  0.0217367677426367, // NO2
  0.0322435029341588, // HNO
  0.0312285303853601, // H2NO
  0.0312285303853601, // HNOH
  0.0302755071147442, // NH2OH
  0.0212707123561568, // HONO
  0.0212707123561568, // HNO2
  0.0322435029341588, // HON
  0.0161279917424682, // NO3
  0.0158699930172031, // HNO3
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[30] = {
  28.014000, // N2
  1.008000,  // H
  2.016000,  // H2
  15.999000, // O
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  31.998000, // O2
  14.007000, // N
  15.015000, // NH
  16.023000, // NH2
  17.031000, // NH3
  29.022000, // NNH
  30.030000, // N2H2
  31.038000, // N2H3
  32.046000, // N2H4
  30.030000, // H2NN
  30.006000, // NO
  44.013000, // N2O
  46.005000, // NO2
  31.014000, // HNO
  32.022000, // H2NO
  32.022000, // HNOH
  33.030000, // NH2OH
  47.013000, // HONO
  47.013000, // HNO2
  31.014000, // HON
  62.004000, // NO3
  63.012000, // HNO3
};
#endif
const amrex::Real h_global_mw[30] = {
  28.014000, // N2
  1.008000,  // H
  2.016000,  // H2
  15.999000, // O
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  31.998000, // O2
  14.007000, // N
  15.015000, // NH
  16.023000, // NH2
  17.031000, // NH3
  29.022000, // NNH
  30.030000, // N2H2
  31.038000, // N2H3
  32.046000, // N2H4
  30.030000, // H2NN
  30.006000, // NO
  44.013000, // N2O
  46.005000, // NO2
  31.014000, // HNO
  32.022000, // H2NO
  32.022000, // HNOH
  33.030000, // NH2OH
  47.013000, // HONO
  47.013000, // HNO2
  31.014000, // HON
  62.004000, // NO3
  63.012000, // HNO3
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.0356964374955379;  // N2
  imw_new[1] = 0.9920634920634921;  // H
  imw_new[2] = 0.4960317460317460;  // H2
  imw_new[3] = 0.0625039064941559;  // O
  imw_new[4] = 0.0587993179279120;  // OH
  imw_new[5] = 0.0555092978073827;  // H2O
  imw_new[6] = 0.0302975216627280;  // HO2
  imw_new[7] = 0.0293996589639560;  // H2O2
  imw_new[8] = 0.0312519532470779;  // O2
  imw_new[9] = 0.0713928749910759;  // N
  imw_new[10] = 0.0666000666000666; // NH
  imw_new[11] = 0.0624102852150034; // NH2
  imw_new[12] = 0.0587164582232400; // NH3
  imw_new[13] = 0.0344566191165323; // NNH
  imw_new[14] = 0.0333000333000333; // N2H2
  imw_new[15] = 0.0322185707842000; // N2H3
  imw_new[16] = 0.0312051426075017; // N2H4
  imw_new[17] = 0.0333000333000333; // H2NN
  imw_new[18] = 0.0333266679997334; // NO
  imw_new[19] = 0.0227205598345943; // N2O
  imw_new[20] = 0.0217367677426367; // NO2
  imw_new[21] = 0.0322435029341588; // HNO
  imw_new[22] = 0.0312285303853601; // H2NO
  imw_new[23] = 0.0312285303853601; // HNOH
  imw_new[24] = 0.0302755071147442; // NH2OH
  imw_new[25] = 0.0212707123561568; // HONO
  imw_new[26] = 0.0212707123561568; // HNO2
  imw_new[27] = 0.0322435029341588; // HON
  imw_new[28] = 0.0161279917424682; // NO3
  imw_new[29] = 0.0158699930172031; // HNO3
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 28.014000;  // N2
  mw_new[1] = 1.008000;   // H
  mw_new[2] = 2.016000;   // H2
  mw_new[3] = 15.999000;  // O
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 18.015000;  // H2O
  mw_new[6] = 33.006000;  // HO2
  mw_new[7] = 34.014000;  // H2O2
  mw_new[8] = 31.998000;  // O2
  mw_new[9] = 14.007000;  // N
  mw_new[10] = 15.015000; // NH
  mw_new[11] = 16.023000; // NH2
  mw_new[12] = 17.031000; // NH3
  mw_new[13] = 29.022000; // NNH
  mw_new[14] = 30.030000; // N2H2
  mw_new[15] = 31.038000; // N2H3
  mw_new[16] = 32.046000; // N2H4
  mw_new[17] = 30.030000; // H2NN
  mw_new[18] = 30.006000; // NO
  mw_new[19] = 44.013000; // N2O
  mw_new[20] = 46.005000; // NO2
  mw_new[21] = 31.014000; // HNO
  mw_new[22] = 32.022000; // H2NO
  mw_new[23] = 32.022000; // HNOH
  mw_new[24] = 33.030000; // NH2OH
  mw_new[25] = 47.013000; // HONO
  mw_new[26] = 47.013000; // HNO2
  mw_new[27] = 31.014000; // HON
  mw_new[28] = 62.004000; // NO3
  mw_new[29] = 63.012000; // HNO3
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                 5.64151500e-09 * T3 - 2.44485400e-12 * T4;
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                 2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 2: H2
    species[2] = +1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 3: O
    species[3] = +2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 4: OH
    species[4] = +3.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
                 5.79853643e-09 * T3 + 2.06237379e-12 * T4;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                 5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                 2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                 2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 8: O2
    species[8] = +2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 9: N
    species[9] = +1.50307100e+00 - 2.18001800e-05 * T + 5.42052900e-08 * T2 -
                 5.64756000e-11 * T3 + 2.09990400e-14 * T4;
    // species 10: NH
    species[10] = +2.49138447e+00 + 2.48105072e-04 * T - 1.22352658e-06 * T2 +
                  1.97740127e-09 * T3 - 7.89210613e-13 * T4;
    // species 11: NH2
    species[11] = +3.02590054e+00 - 9.53251946e-04 * T + 4.13467348e-06 * T2 -
                  2.81816628e-09 * T3 + 6.73047183e-13 * T4;
    // species 12: NH3
    species[12] = +1.20435200e+00 + 1.01147600e-02 * T - 1.46526500e-05 * T2 +
                  1.44723500e-08 * T3 - 5.32850900e-12 * T4;
    // species 13: NNH
    species[13] = +2.86231284e+00 - 4.41898698e-04 * T + 6.38522141e-06 * T2 -
                  5.84138844e-09 * T3 + 1.69125822e-12 * T4;
    // species 14: N2H2
    species[14] = +3.14915878e+00 - 4.82013543e-03 * T + 2.19606525e-05 * T2 -
                  2.03662902e-08 * T3 + 6.25367200e-12 * T4;
    // species 15: N2H3
    species[15] = +2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
    // species 16: N2H4
    species[16] = +2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 17: H2NN
    species[17] = +3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 18: NO
    species[18] = +2.37654200e+00 + 1.25306300e-03 * T - 3.30275100e-06 * T2 +
                  5.21781000e-09 * T3 - 2.44626300e-12 * T4;
    // species 19: N2O
    species[19] = +1.54305800e+00 + 9.49219300e-03 * T - 9.79277500e-06 * T2 +
                  6.26384500e-09 * T3 - 1.90182600e-12 * T4;
    // species 20: NO2
    species[20] = +1.67060000e+00 + 7.83850100e-03 * T - 8.06386500e-06 * T2 +
                  6.16171500e-09 * T3 - 2.32015000e-12 * T4;
    // species 21: HNO
    species[21] = +1.78440300e+00 + 6.60964600e-03 * T - 9.30022300e-06 * T2 +
                  9.43798000e-09 * T3 - 3.75314600e-12 * T4;
    // species 23: HNOH
    species[23] = +2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 24: NH2OH
    species[24] = +2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 25: HONO
    species[25] = +1.29041300e+00 + 1.40992200e-02 * T - 1.36787200e-05 * T2 +
                  7.49878000e-09 * T3 - 1.87690500e-12 * T4;
    // species 28: NO3
    species[28] = +1.17359330e+00 + 1.04902685e-02 * T + 1.10472669e-05 * T2 -
                  2.81561867e-08 * T3 + 1.36583960e-11 * T4;
    // species 29: HNO3
    species[29] = +6.93291540e-01 + 1.90167702e-02 * T - 8.25176697e-06 * T2 -
                  6.06113827e-09 * T3 + 4.65236978e-12 * T4;
  } else {
    // species 0: N2
    species[0] = +1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                 1.00970380e-10 * T3 - 6.75335100e-15 * T4;
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                 4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 2: H2
    species[2] = +2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 3: O
    species[3] = +1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                 1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 4: OH
    species[4] = +1.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
                 3.05218674e-11 * T3 - 1.33195876e-15 * T4;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                 9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                 1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                 3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 8: O2
    species[8] = +2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                 2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 9: N
    species[9] = +1.45026800e+00 + 1.06614600e-04 * T - 7.46533700e-08 * T2 +
                 1.87965200e-11 * T3 - 1.02598400e-15 * T4;
    // species 10: NH
    species[10] = +2.38393047e+00 - 3.04401048e-04 * T + 1.07871576e-06 * T2 -
                  5.39749068e-10 * T3 + 8.56574985e-14 * T4;
    // species 11: NH2
    species[11] = +2.80751460e+00 + 1.74138848e-04 * T + 2.06281679e-06 * T2 -
                  1.18308148e-09 * T3 + 2.00814234e-13 * T4;
    // species 12: NH3
    species[12] = +1.46190400e+00 + 6.05916600e-03 * T - 2.00497700e-06 * T2 +
                  3.13600300e-10 * T3 - 1.93831700e-14 * T4;
    // species 13: NNH
    species[13] = +1.78024159e+00 + 4.51114118e-03 * T - 1.98147075e-06 * T2 +
                  3.61161241e-10 * T3 - 1.55679242e-14 * T4;
    // species 14: N2H2
    species[14] = +1.38388380e+00 + 6.63619559e-03 * T - 1.81669068e-06 * T2 -
                  1.19497031e-10 * T3 + 9.31659255e-14 * T4;
    // species 15: N2H3
    species[15] = +3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
    // species 16: N2H4
    species[16] = +3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 17: H2NN
    species[17] = +2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 18: NO
    species[18] = +2.24543500e+00 + 1.26913800e-03 * T - 5.01589000e-07 * T2 +
                  9.16928300e-11 * T3 - 6.27541900e-15 * T4;
    // species 19: N2O
    species[19] = +3.71897700e+00 + 2.87371400e-03 * T - 1.19749600e-06 * T2 +
                  2.25055200e-10 * T3 - 1.57533700e-14 * T4;
    // species 20: NO2
    species[20] = +3.68285900e+00 + 2.46242900e-03 * T - 1.04225900e-06 * T2 +
                  1.97690200e-10 * T3 - 1.39171700e-14 * T4;
    // species 21: HNO
    species[21] = +2.61514400e+00 + 3.21248600e-03 * T - 1.26033700e-06 * T2 +
                  2.26729800e-10 * T3 - 1.53623600e-14 * T4;
    // species 23: HNOH
    species[23] = +2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 24: NH2OH
    species[24] = +2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 25: HONO
    species[25] = +4.48689300e+00 + 4.21806500e-03 * T - 1.64914300e-06 * T2 +
                  2.97187700e-10 * T3 - 2.02114800e-14 * T4;
    // species 28: NO3
    species[28] = +6.48347702e+00 + 2.57772064e-03 * T - 1.00945831e-06 * T2 +
                  1.72314063e-10 * T3 - 1.07154008e-14 * T4;
    // species 29: HNO3
    species[29] = +7.03098942e+00 + 4.46958589e-03 * T - 1.72459491e-06 * T2 +
                  2.91556153e-10 * T3 - 1.80102702e-14 * T4;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +1.53059000e+00 + 8.59603500e-03 * T - 5.47103000e-06 * T2 +
                  2.27624900e-09 * T3 - 4.64807300e-13 * T4;
    // species 26: HNO2
    species[26] = +9.34838000e-01 + 1.01003600e-02 * T - 4.96461600e-06 * T2 +
                  8.70112000e-10 * T3 - 2.32413500e-15 * T4;
  } else {
    // species 22: H2NO
    species[22] = +4.67334600e+00 + 2.29883700e-03 * T - 1.77444600e-07 * T2 -
                  1.10348200e-10 * T3 + 1.85976200e-14 * T4;
    // species 26: HNO2
    species[26] = +5.47963000e+00 + 1.99527400e-03 * T - 1.74038700e-07 * T2 -
                  9.69587200e-11 * T3 + 1.70148000e-14 * T4;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +2.33656431e+00 + 2.67682939e-03 * T + 5.61801303e-07 * T2 -
                  1.11362279e-09 * T3 + 2.84076438e-13 * T4;
  } else {
    // species 27: HON
    species[27] = +2.78577430e+00 + 2.86062728e-03 * T - 1.02423922e-06 * T2 +
                  1.64463139e-10 * T3 - 9.77943616e-15 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                 5.64151500e-09 * T3 - 2.44485400e-12 * T4;
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                 2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 2: H2
    species[2] = +2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 3: O
    species[3] = +3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 4: OH
    species[4] = +4.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
                 5.79853643e-09 * T3 + 2.06237379e-12 * T4;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                 5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                 2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                 2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 8: O2
    species[8] = +3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 9: N
    species[9] = +2.50307100e+00 - 2.18001800e-05 * T + 5.42052900e-08 * T2 -
                 5.64756000e-11 * T3 + 2.09990400e-14 * T4;
    // species 10: NH
    species[10] = +3.49138447e+00 + 2.48105072e-04 * T - 1.22352658e-06 * T2 +
                  1.97740127e-09 * T3 - 7.89210613e-13 * T4;
    // species 11: NH2
    species[11] = +4.02590054e+00 - 9.53251946e-04 * T + 4.13467348e-06 * T2 -
                  2.81816628e-09 * T3 + 6.73047183e-13 * T4;
    // species 12: NH3
    species[12] = +2.20435200e+00 + 1.01147600e-02 * T - 1.46526500e-05 * T2 +
                  1.44723500e-08 * T3 - 5.32850900e-12 * T4;
    // species 13: NNH
    species[13] = +3.86231284e+00 - 4.41898698e-04 * T + 6.38522141e-06 * T2 -
                  5.84138844e-09 * T3 + 1.69125822e-12 * T4;
    // species 14: N2H2
    species[14] = +4.14915878e+00 - 4.82013543e-03 * T + 2.19606525e-05 * T2 -
                  2.03662902e-08 * T3 + 6.25367200e-12 * T4;
    // species 15: N2H3
    species[15] = +3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
                  2.99727732e-08 * T3 + 1.20978970e-11 * T4;
    // species 16: N2H4
    species[16] = +3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
                  5.00709182e-08 * T3 + 2.03362064e-11 * T4;
    // species 17: H2NN
    species[17] = +4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
                  3.04000551e-08 * T3 + 1.04700639e-11 * T4;
    // species 18: NO
    species[18] = +3.37654200e+00 + 1.25306300e-03 * T - 3.30275100e-06 * T2 +
                  5.21781000e-09 * T3 - 2.44626300e-12 * T4;
    // species 19: N2O
    species[19] = +2.54305800e+00 + 9.49219300e-03 * T - 9.79277500e-06 * T2 +
                  6.26384500e-09 * T3 - 1.90182600e-12 * T4;
    // species 20: NO2
    species[20] = +2.67060000e+00 + 7.83850100e-03 * T - 8.06386500e-06 * T2 +
                  6.16171500e-09 * T3 - 2.32015000e-12 * T4;
    // species 21: HNO
    species[21] = +2.78440300e+00 + 6.60964600e-03 * T - 9.30022300e-06 * T2 +
                  9.43798000e-09 * T3 - 3.75314600e-12 * T4;
    // species 23: HNOH
    species[23] = +3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
                  3.15645120e-08 * T3 + 1.24084574e-11 * T4;
    // species 24: NH2OH
    species[24] = +3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
                  1.96668262e-08 * T3 + 8.82516590e-12 * T4;
    // species 25: HONO
    species[25] = +2.29041300e+00 + 1.40992200e-02 * T - 1.36787200e-05 * T2 +
                  7.49878000e-09 * T3 - 1.87690500e-12 * T4;
    // species 28: NO3
    species[28] = +2.17359330e+00 + 1.04902685e-02 * T + 1.10472669e-05 * T2 -
                  2.81561867e-08 * T3 + 1.36583960e-11 * T4;
    // species 29: HNO3
    species[29] = +1.69329154e+00 + 1.90167702e-02 * T - 8.25176697e-06 * T2 -
                  6.06113827e-09 * T3 + 4.65236978e-12 * T4;
  } else {
    // species 0: N2
    species[0] = +2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                 1.00970380e-10 * T3 - 6.75335100e-15 * T4;
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                 4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 2: H2
    species[2] = +3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 3: O
    species[3] = +2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                 1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 4: OH
    species[4] = +2.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
                 3.05218674e-11 * T3 - 1.33195876e-15 * T4;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                 9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                 1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                 3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 8: O2
    species[8] = +3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                 2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 9: N
    species[9] = +2.45026800e+00 + 1.06614600e-04 * T - 7.46533700e-08 * T2 +
                 1.87965200e-11 * T3 - 1.02598400e-15 * T4;
    // species 10: NH
    species[10] = +3.38393047e+00 - 3.04401048e-04 * T + 1.07871576e-06 * T2 -
                  5.39749068e-10 * T3 + 8.56574985e-14 * T4;
    // species 11: NH2
    species[11] = +3.80751460e+00 + 1.74138848e-04 * T + 2.06281679e-06 * T2 -
                  1.18308148e-09 * T3 + 2.00814234e-13 * T4;
    // species 12: NH3
    species[12] = +2.46190400e+00 + 6.05916600e-03 * T - 2.00497700e-06 * T2 +
                  3.13600300e-10 * T3 - 1.93831700e-14 * T4;
    // species 13: NNH
    species[13] = +2.78024159e+00 + 4.51114118e-03 * T - 1.98147075e-06 * T2 +
                  3.61161241e-10 * T3 - 1.55679242e-14 * T4;
    // species 14: N2H2
    species[14] = +2.38388380e+00 + 6.63619559e-03 * T - 1.81669068e-06 * T2 -
                  1.19497031e-10 * T3 + 9.31659255e-14 * T4;
    // species 15: N2H3
    species[15] = +4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
                  3.83733021e-10 * T3 - 2.23107573e-14 * T4;
    // species 16: N2H4
    species[16] = +4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
                  4.67278418e-10 * T3 - 2.73068599e-14 * T4;
    // species 17: H2NN
    species[17] = +3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
                  3.58539206e-10 * T3 - 2.14532905e-14 * T4;
    // species 18: NO
    species[18] = +3.24543500e+00 + 1.26913800e-03 * T - 5.01589000e-07 * T2 +
                  9.16928300e-11 * T3 - 6.27541900e-15 * T4;
    // species 19: N2O
    species[19] = +4.71897700e+00 + 2.87371400e-03 * T - 1.19749600e-06 * T2 +
                  2.25055200e-10 * T3 - 1.57533700e-14 * T4;
    // species 20: NO2
    species[20] = +4.68285900e+00 + 2.46242900e-03 * T - 1.04225900e-06 * T2 +
                  1.97690200e-10 * T3 - 1.39171700e-14 * T4;
    // species 21: HNO
    species[21] = +3.61514400e+00 + 3.21248600e-03 * T - 1.26033700e-06 * T2 +
                  2.26729800e-10 * T3 - 1.53623600e-14 * T4;
    // species 23: HNOH
    species[23] = +3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
                  2.55371446e-10 * T3 - 1.48308561e-14 * T4;
    // species 24: NH2OH
    species[24] = +3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
                  4.37930933e-10 * T3 - 2.52724604e-14 * T4;
    // species 25: HONO
    species[25] = +5.48689300e+00 + 4.21806500e-03 * T - 1.64914300e-06 * T2 +
                  2.97187700e-10 * T3 - 2.02114800e-14 * T4;
    // species 28: NO3
    species[28] = +7.48347702e+00 + 2.57772064e-03 * T - 1.00945831e-06 * T2 +
                  1.72314063e-10 * T3 - 1.07154008e-14 * T4;
    // species 29: HNO3
    species[29] = +8.03098942e+00 + 4.46958589e-03 * T - 1.72459491e-06 * T2 +
                  2.91556153e-10 * T3 - 1.80102702e-14 * T4;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +2.53059000e+00 + 8.59603500e-03 * T - 5.47103000e-06 * T2 +
                  2.27624900e-09 * T3 - 4.64807300e-13 * T4;
    // species 26: HNO2
    species[26] = +1.93483800e+00 + 1.01003600e-02 * T - 4.96461600e-06 * T2 +
                  8.70112000e-10 * T3 - 2.32413500e-15 * T4;
  } else {
    // species 22: H2NO
    species[22] = +5.67334600e+00 + 2.29883700e-03 * T - 1.77444600e-07 * T2 -
                  1.10348200e-10 * T3 + 1.85976200e-14 * T4;
    // species 26: HNO2
    species[26] = +6.47963000e+00 + 1.99527400e-03 * T - 1.74038700e-07 * T2 -
                  9.69587200e-11 * T3 + 1.70148000e-14 * T4;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +3.33656431e+00 + 2.67682939e-03 * T + 5.61801303e-07 * T2 -
                  1.11362279e-09 * T3 + 2.84076438e-13 * T4;
  } else {
    // species 27: HON
    species[27] = +3.78577430e+00 + 2.86062728e-03 * T - 1.02423922e-06 * T2 +
                  1.64463139e-10 * T3 - 9.77943616e-15 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                 3.298677000000000e+00 * logT - 7.041202000000000e-04 * T +
                 6.605369999999999e-07 * T2 - 4.701262500000001e-10 * T3 +
                 1.222427000000000e-13 * T4;
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * logT - 3.526664095000000e-13 * T +
                 3.326532733333333e-16 * T2 - 1.917346933333333e-19 * T3 +
                 4.638661660000000e-23 * T4;
    // species 2: H2
    species[2] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * logT - 3.990260375000000e-03 * T +
                 3.246358500000000e-06 * T2 - 1.679767450000000e-09 * T3 +
                 3.688058805000000e-13 * T4;
    // species 3: O
    species[3] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * logT + 1.639659420000000e-03 * T -
                 1.107177326666667e-06 * T2 + 5.106721866666666e-10 * T3 -
                 1.056329855000000e-13 * T4;
    // species 4: OH
    species[4] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                 4.125305610000000e+00 * logT + 1.612724695000000e-03 * T -
                 1.087941151666667e-06 * T2 + 4.832113691666666e-10 * T3 -
                 1.031186895000000e-13 * T4;
    // species 5: H2O
    species[5] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * logT + 1.018217050000000e-03 * T -
                 1.086733685000000e-06 * T2 + 4.573308850000000e-10 * T3 -
                 8.859890850000000e-14 * T4;
    // species 6: HO2
    species[6] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * logT + 2.374560255000000e-03 * T -
                 3.526381516666666e-06 * T2 + 2.023032450000000e-09 * T3 -
                 4.646125620000001e-13 * T4;
    // species 7: H2O2
    species[7] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                 4.276112690000000e+00 * logT + 2.714112085000000e-04 * T -
                 2.788928350000000e-06 * T2 + 1.798090108333333e-09 * T3 -
                 4.312271815000000e-13 * T4;
    // species 8: O2
    species[8] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * logT + 1.498367080000000e-03 * T -
                 1.641217001666667e-06 * T2 + 8.067745908333334e-10 * T3 -
                 1.621864185000000e-13 * T4;
    // species 9: N
    species[9] = +5.609890000000000e+04 * invT - 1.664495000000000e+00 -
                 2.503071000000000e+00 * logT + 1.090009000000000e-05 * T -
                 9.034215000000001e-09 * T2 + 4.706300000000000e-12 * T3 -
                 1.049952000000000e-15 * T4;
    // species 10: NH
    species[10] = +4.178515170000000e+04 * invT + 1.654711460000000e+00 -
                  3.491384470000000e+00 * logT - 1.240525360000000e-04 * T +
                  2.039210966666667e-07 * T2 - 1.647834391666667e-10 * T3 +
                  3.946053065000000e-14 * T4;
    // species 11: NH2
    species[11] = +2.124473900000000e+04 * invT + 3.439680683000000e+00 -
                  4.025900540000000e+00 * logT + 4.766259730000000e-04 * T -
                  6.891122466666667e-07 * T2 + 2.348471900000000e-10 * T3 -
                  3.365235915000000e-14 * T4;
    // species 12: NH3
    species[12] = -6.525488000000000e+03 * invT - 5.922786000000000e+00 -
                  2.204352000000000e+00 * logT - 5.057380000000000e-03 * T +
                  2.442108333333333e-06 * T2 - 1.206029166666667e-09 * T3 +
                  2.664254500000000e-13 * T4;
    // species 13: NNH
    species[13] = +2.916212980000000e+04 * invT - 9.910363099999997e-01 -
                  3.862312840000000e+00 * logT + 2.209493490000000e-04 * T -
                  1.064203568333333e-06 * T2 + 4.867823700000000e-10 * T3 -
                  8.456291099999999e-14 * T4;
    // species 14: N2H2
    species[14] = +2.328745970000000e+04 * invT + 9.576165599999995e-01 -
                  4.149158780000000e+00 * logT + 2.410067715000000e-03 * T -
                  3.660108750000000e-06 * T2 + 1.697190850000000e-09 * T3 -
                  3.126836000000000e-13 * T4;
    // species 15: N2H3
    species[15] = +2.530561390000000e+04 * invT - 4.410508040000000e+00 -
                  3.421255050000000e+00 * logT - 6.745079500000000e-04 * T -
                  3.724317850000000e-06 * T2 + 2.497731100000000e-09 * T3 -
                  6.048948500000000e-13 * T4;
    // species 16: N2H4
    species[16] = +1.008939250000000e+04 * invT - 1.917998810000000e+00 -
                  3.834721490000000e+00 * logT + 3.245647775000000e-04 * T -
                  6.280807716666667e-06 * T2 + 4.172576516666667e-09 * T3 -
                  1.016810320000000e-12 * T4;
    // species 17: H2NN
    species[17] = +3.495800030000000e+04 * invT + 3.021298060000000e+00 -
                  4.532040010000000e+00 * logT + 3.662092890000000e-03 * T -
                  5.013395216666666e-06 * T2 + 2.533337925000000e-09 * T3 -
                  5.235031950000000e-13 * T4;
    // species 18: NO
    species[18] = +9.817960999999999e+03 * invT - 2.453047999999999e+00 -
                  3.376542000000000e+00 * logT - 6.265315000000000e-04 * T +
                  5.504585000000000e-07 * T2 - 4.348175000000000e-10 * T3 +
                  1.223131500000000e-13 * T4;
    // species 19: N2O
    species[19] = +8.765100000000000e+03 * invT - 6.968164000000000e+00 -
                  2.543058000000000e+00 * logT - 4.746096500000000e-03 * T +
                  1.632129166666667e-06 * T2 - 5.219870833333333e-10 * T3 +
                  9.509129999999999e-14 * T4;
    // species 20: NO2
    species[20] = +2.896291000000000e+03 * invT - 8.941469999999999e+00 -
                  2.670600000000000e+00 * logT - 3.919250500000000e-03 * T +
                  1.343977500000000e-06 * T2 - 5.134762500000000e-10 * T3 +
                  1.160075000000000e-13 * T4;
    // species 21: HNO
    species[21] = +1.091878000000000e+04 * invT - 6.251226000000000e+00 -
                  2.784403000000000e+00 * logT - 3.304823000000000e-03 * T +
                  1.550037166666667e-06 * T2 - 7.864983333333334e-10 * T3 +
                  1.876573000000000e-13 * T4;
    // species 23: HNOH
    species[23] = +1.091997900000000e+04 * invT - 1.603427350000000e+00 -
                  3.956082480000000e+00 * logT + 1.513055100000000e-03 * T -
                  4.281239933333333e-06 * T2 + 2.630376000000000e-09 * T3 -
                  6.204228700000000e-13 * T4;
    // species 24: NH2OH
    species[24] = -6.581484810000000e+03 * invT - 4.722774790000000e+00 -
                  3.210160920000000e+00 * logT - 3.098358380000000e-03 * T -
                  1.843249133333333e-06 * T2 + 1.638902183333333e-09 * T3 -
                  4.412582950000000e-13 * T4;
    // species 25: HONO
    species[25] = -1.043195000000000e+04 * invT - 1.099035700000000e+01 -
                  2.290413000000000e+00 * logT - 7.049610000000000e-03 * T +
                  2.279786666666666e-06 * T2 - 6.248983333333332e-10 * T3 +
                  9.384525000000000e-14 * T4;
    // species 28: NO3
    species[28] = +7.812909050000000e+03 * invT - 1.242861570000000e+01 -
                  2.173593300000000e+00 * logT - 5.245134250000000e-03 * T -
                  1.841211150000000e-06 * T2 + 2.346348891666666e-09 * T3 -
                  6.829198000000000e-13 * T4;
    // species 29: HNO3
    species[29] = -1.741989090000000e+04 * invT - 1.549069226000000e+01 -
                  1.693291540000000e+00 * logT - 9.508385100000001e-03 * T +
                  1.375294495000000e-06 * T2 + 5.050948558333334e-10 * T3 -
                  2.326184890000000e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                 2.926640000000000e+00 * logT - 7.439884000000000e-04 * T +
                 9.474600000000001e-08 * T2 - 8.414198333333333e-12 * T3 +
                 3.376675500000000e-16 * T4;
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * logT + 1.154214865000000e-11 * T -
                 2.692699133333334e-15 * T2 + 3.945960291666667e-19 * T3 -
                 2.490986785000000e-23 * T4;
    // species 2: H2
    species[2] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * logT + 2.470123655000000e-05 * T -
                 8.324279633333333e-08 * T2 + 1.496386616666667e-11 * T3 -
                 1.001276880000000e-15 * T4;
    // species 3: O
    species[3] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * logT + 4.298705685000000e-05 * T -
                 6.991409816666667e-09 * T2 + 8.348149916666666e-13 * T3 -
                 6.141684549999999e-17 * T4;
    // species 4: OH
    species[4] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                 2.864728860000000e+00 * logT - 5.282522400000000e-04 * T +
                 4.318045966666667e-08 * T2 - 2.543488950000000e-12 * T3 +
                 6.659793800000000e-17 * T4;
    // species 5: H2O
    species[5] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * logT - 1.088459020000000e-03 * T +
                 2.734541966666666e-08 * T2 + 8.086832250000000e-12 * T3 -
                 8.410049600000000e-16 * T4;
    // species 6: HO2
    species[6] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * logT - 1.119910065000000e-03 * T +
                 1.056096916666667e-07 * T2 - 9.520530833333334e-12 * T3 +
                 5.395426750000000e-16 * T4;
    // species 7: H2O2
    species[7] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                 4.165002850000000e+00 * logT - 2.454158470000000e-03 * T +
                 3.168987083333333e-07 * T2 - 3.093216550000000e-11 * T3 +
                 1.439541525000000e-15 * T4;
    // species 8: O2
    species[8] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * logT - 7.415437700000000e-04 * T +
                 1.263277781666667e-07 * T2 - 1.745587958333333e-11 * T3 +
                 1.083588970000000e-15 * T4;
    // species 9: N
    species[9] = +5.611604000000000e+04 * invT - 1.998490000000000e+00 -
                 2.450268000000000e+00 * logT - 5.330730000000000e-05 * T +
                 1.244222833333333e-08 * T2 - 1.566376666666667e-12 * T3 +
                 5.129920000000000e-17 * T4;
    // species 10: NH
    species[10] = +4.185575860000000e+04 * invT + 7.832735100000003e-01 -
                  3.383930470000000e+00 * logT + 1.522005240000000e-04 * T -
                  1.797859600000000e-07 * T2 + 4.497908900000000e-11 * T3 -
                  4.282874925000000e-15 * T4;
    // species 11: NH2
    species[11] = +2.127572380000000e+04 * invT + 2.231170530000000e+00 -
                  3.807514600000000e+00 * logT - 8.706942400000000e-05 * T -
                  3.438027983333333e-07 * T2 + 9.859012333333333e-11 * T3 -
                  1.004071170000000e-14 * T4;
    // species 12: NH3
    species[12] = -6.493270000000000e+03 * invT - 5.010192999999999e+00 -
                  2.461904000000000e+00 * logT - 3.029583000000000e-03 * T +
                  3.341628333333333e-07 * T2 - 2.613335833333333e-11 * T3 +
                  9.691585000000000e-16 * T4;
    // species 13: NNH
    species[13] = +2.934730630000000e+04 * invT - 7.137287099999999e+00 -
                  2.780241590000000e+00 * logT - 2.255570590000000e-03 * T +
                  3.302451250000000e-07 * T2 - 3.009677008333334e-11 * T3 +
                  7.783962100000001e-16 * T4;
    // species 14: N2H2
    species[14] = +2.342075320000000e+04 * invT - 8.225282000000000e+00 -
                  2.383883800000000e+00 * logT - 3.318097795000000e-03 * T +
                  3.027817800000000e-07 * T2 + 9.958085916666667e-12 * T3 -
                  4.658296275000000e-15 * T4;
    // species 15: N2H3
    species[15] = +2.480986030000000e+04 * invT + 1.160601740000001e+00 -
                  4.044835660000000e+00 * logT - 3.655650930000000e-03 * T +
                  4.127096650000000e-07 * T2 - 3.197775175000000e-11 * T3 +
                  1.115537865000000e-15 * T4;
    // species 16: N2H4
    species[16] = +9.282655479999999e+03 * invT + 7.633971290000000e+00 -
                  4.939573570000000e+00 * logT - 4.375085935000000e-03 * T +
                  4.989984300000000e-07 * T2 - 3.893986816666666e-11 * T3 +
                  1.365342995000000e-15 * T4;
    // species 17: H2NN
    species[17] = +3.485301490000000e+04 * invT - 3.639898450000000e+00 -
                  3.059036700000000e+00 * logT - 3.091911735000000e-03 * T +
                  3.702852750000000e-07 * T2 - 2.987826716666667e-11 * T3 +
                  1.072664525000000e-15 * T4;
    // species 18: NO
    species[18] = +9.800840000000000e+03 * invT - 3.171859000000000e+00 -
                  3.245435000000000e+00 * logT - 6.345690000000000e-04 * T +
                  8.359816666666666e-08 * T2 - 7.641069166666667e-12 * T3 +
                  3.137709500000000e-16 * T4;
    // species 19: N2O
    species[19] = +8.165811000000000e+03 * invT + 6.376227000000000e+00 -
                  4.718977000000000e+00 * logT - 1.436857000000000e-03 * T +
                  1.995826666666667e-07 * T2 - 1.875460000000000e-11 * T3 +
                  7.876685000000001e-16 * T4;
    // species 20: NO2
    species[20] = +2.261292000000000e+03 * invT + 3.694260500000000e+00 -
                  4.682859000000000e+00 * logT - 1.231214500000000e-03 * T +
                  1.737098333333333e-07 * T2 - 1.647418333333333e-11 * T3 +
                  6.958585000000000e-16 * T4;
    // species 21: HNO
    species[21] = +1.066191000000000e+04 * invT - 1.195120000000000e+00 -
                  3.615144000000000e+00 * logT - 1.606243000000000e-03 * T +
                  2.100561666666667e-07 * T2 - 1.889415000000000e-11 * T3 +
                  7.681180000000001e-16 * T4;
    // species 23: HNOH
    species[23] = +1.057801060000000e+04 * invT + 3.573909499999997e-01 -
                  3.983219330000000e+00 * logT - 2.444231870000000e-03 * T +
                  2.751443950000000e-07 * T2 - 2.128095383333333e-11 * T3 +
                  7.415428049999999e-16 * T4;
    // species 24: NH2OH
    species[24] = -6.860184190000000e+03 * invT + 8.956365999999960e-02 -
                  3.881125020000000e+00 * logT - 4.078542240000000e-03 * T +
                  4.710259600000000e-07 * T2 - 3.649424441666666e-11 * T3 +
                  1.263623020000000e-15 * T4;
    // species 25: HONO
    species[25] = -1.126865000000000e+04 * invT + 8.483895000000000e+00 -
                  5.486893000000000e+00 * logT - 2.109032500000000e-03 * T +
                  2.748571666666667e-07 * T2 - 2.476564166666666e-11 * T3 +
                  1.010574000000000e-15 * T4;
    // species 28: NO3
    species[28] = +6.129904740000000e+03 * invT + 2.164529062000000e+01 -
                  7.483477020000000e+00 * logT - 1.288860320000000e-03 * T +
                  1.682430516666667e-07 * T2 - 1.435950525000000e-11 * T3 +
                  5.357700400000000e-16 * T4;
    // species 29: HNO3
    species[29] = -1.931381830000000e+04 * invT + 2.429264312000000e+01 -
                  8.030989419999999e+00 * logT - 2.234792945000000e-03 * T +
                  2.874324850000000e-07 * T2 - 2.429634608333334e-11 * T3 +
                  9.005135099999999e-16 * T4;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +6.868030000000000e+03 * invT - 8.735920000000000e+00 -
                  2.530590000000000e+00 * logT - 4.298017500000000e-03 * T +
                  9.118383333333333e-07 * T2 - 1.896874166666667e-10 * T3 +
                  2.324036500000000e-14 * T4;
    // species 26: HNO2
    species[26] = -5.915715910000000e+03 * invT - 1.279337020000000e+01 -
                  1.934838000000000e+00 * logT - 5.050180000000000e-03 * T +
                  8.274360000000001e-07 * T2 - 7.250933333333334e-11 * T3 +
                  1.162067500000000e-16 * T4;
  } else {
    // species 22: H2NO
    species[22] = +5.569325000000000e+03 * invT + 1.182688600000000e+01 -
                  5.673346000000000e+00 * logT - 1.149418500000000e-03 * T +
                  2.957410000000000e-08 * T2 + 9.195683333333332e-12 * T3 -
                  9.298810000000001e-16 * T4;
    // species 26: HNO2
    species[26] = -7.809502910000000e+03 * invT + 1.715678180000000e+01 -
                  6.479630000000000e+00 * logT - 9.976370000000000e-04 * T +
                  2.900645000000000e-08 * T2 + 8.079893333333334e-12 * T3 -
                  8.507399999999999e-16 * T4;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +2.959797510000000e+04 * invT - 2.626867570000000e+00 -
                  3.336564310000000e+00 * logT - 1.338414695000000e-03 * T -
                  9.363355050000000e-08 * T2 + 9.280189916666667e-11 * T3 -
                  1.420382190000000e-14 * T4;
  } else {
    // species 27: HON
    species[27] = +2.933197010000000e+04 * invT + 6.638413700000001e-01 -
                  3.785774300000000e+00 * logT - 1.430313640000000e-03 * T +
                  1.707065366666667e-07 * T2 - 1.370526158333333e-11 * T3 +
                  4.889718080000000e-16 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = -1.02089990e+03 * invT - 1.65169500e+00 -
                 3.29867700e+00 * logT - 7.04120200e-04 * T +
                 6.60537000e-07 * T2 - 4.70126250e-10 * T3 +
                 1.22242700e-13 * T4;
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * logT - 3.52666409e-13 * T +
                 3.32653273e-16 * T2 - 1.91734693e-19 * T3 +
                 4.63866166e-23 * T4;
    // species 2: H2
    species[2] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * logT - 3.99026037e-03 * T +
                 3.24635850e-06 * T2 - 1.67976745e-09 * T3 +
                 3.68805881e-13 * T4;
    // species 3: O
    species[3] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * logT + 1.63965942e-03 * T -
                 1.10717733e-06 * T2 + 5.10672187e-10 * T3 -
                 1.05632985e-13 * T4;
    // species 4: OH
    species[4] = +3.38153812e+03 * invT + 3.81573857e+00 -
                 4.12530561e+00 * logT + 1.61272470e-03 * T -
                 1.08794115e-06 * T2 + 4.83211369e-10 * T3 -
                 1.03118689e-13 * T4;
    // species 5: H2O
    species[5] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * logT + 1.01821705e-03 * T -
                 1.08673369e-06 * T2 + 4.57330885e-10 * T3 -
                 8.85989085e-14 * T4;
    // species 6: HO2
    species[6] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * logT + 2.37456025e-03 * T -
                 3.52638152e-06 * T2 + 2.02303245e-09 * T3 -
                 4.64612562e-13 * T4;
    // species 7: H2O2
    species[7] = -1.77025821e+04 * invT - 1.58938050e-01 -
                 4.27611269e+00 * logT + 2.71411208e-04 * T -
                 2.78892835e-06 * T2 + 1.79809011e-09 * T3 -
                 4.31227182e-13 * T4;
    // species 8: O2
    species[8] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * logT + 1.49836708e-03 * T -
                 1.64121700e-06 * T2 + 8.06774591e-10 * T3 -
                 1.62186418e-13 * T4;
    // species 9: N
    species[9] = +5.60989000e+04 * invT - 2.66449500e+00 -
                 2.50307100e+00 * logT + 1.09000900e-05 * T -
                 9.03421500e-09 * T2 + 4.70630000e-12 * T3 -
                 1.04995200e-15 * T4;
    // species 10: NH
    species[10] = +4.17851517e+04 * invT + 6.54711460e-01 -
                  3.49138447e+00 * logT - 1.24052536e-04 * T +
                  2.03921097e-07 * T2 - 1.64783439e-10 * T3 +
                  3.94605307e-14 * T4;
    // species 11: NH2
    species[11] = +2.12447390e+04 * invT + 2.43968068e+00 -
                  4.02590054e+00 * logT + 4.76625973e-04 * T -
                  6.89112247e-07 * T2 + 2.34847190e-10 * T3 -
                  3.36523592e-14 * T4;
    // species 12: NH3
    species[12] = -6.52548800e+03 * invT - 6.92278600e+00 -
                  2.20435200e+00 * logT - 5.05738000e-03 * T +
                  2.44210833e-06 * T2 - 1.20602917e-09 * T3 +
                  2.66425450e-13 * T4;
    // species 13: NNH
    species[13] = +2.91621298e+04 * invT - 1.99103631e+00 -
                  3.86231284e+00 * logT + 2.20949349e-04 * T -
                  1.06420357e-06 * T2 + 4.86782370e-10 * T3 -
                  8.45629110e-14 * T4;
    // species 14: N2H2
    species[14] = +2.32874597e+04 * invT - 4.23834400e-02 -
                  4.14915878e+00 * logT + 2.41006771e-03 * T -
                  3.66010875e-06 * T2 + 1.69719085e-09 * T3 -
                  3.12683600e-13 * T4;
    // species 15: N2H3
    species[15] = +2.53056139e+04 * invT - 5.41050804e+00 -
                  3.42125505e+00 * logT - 6.74507950e-04 * T -
                  3.72431785e-06 * T2 + 2.49773110e-09 * T3 -
                  6.04894850e-13 * T4;
    // species 16: N2H4
    species[16] = +1.00893925e+04 * invT - 2.91799881e+00 -
                  3.83472149e+00 * logT + 3.24564777e-04 * T -
                  6.28080772e-06 * T2 + 4.17257652e-09 * T3 -
                  1.01681032e-12 * T4;
    // species 17: H2NN
    species[17] = +3.49580003e+04 * invT + 2.02129806e+00 -
                  4.53204001e+00 * logT + 3.66209289e-03 * T -
                  5.01339522e-06 * T2 + 2.53333792e-09 * T3 -
                  5.23503195e-13 * T4;
    // species 18: NO
    species[18] = +9.81796100e+03 * invT - 3.45304800e+00 -
                  3.37654200e+00 * logT - 6.26531500e-04 * T +
                  5.50458500e-07 * T2 - 4.34817500e-10 * T3 +
                  1.22313150e-13 * T4;
    // species 19: N2O
    species[19] = +8.76510000e+03 * invT - 7.96816400e+00 -
                  2.54305800e+00 * logT - 4.74609650e-03 * T +
                  1.63212917e-06 * T2 - 5.21987083e-10 * T3 +
                  9.50913000e-14 * T4;
    // species 20: NO2
    species[20] = +2.89629100e+03 * invT - 9.94147000e+00 -
                  2.67060000e+00 * logT - 3.91925050e-03 * T +
                  1.34397750e-06 * T2 - 5.13476250e-10 * T3 +
                  1.16007500e-13 * T4;
    // species 21: HNO
    species[21] = +1.09187800e+04 * invT - 7.25122600e+00 -
                  2.78440300e+00 * logT - 3.30482300e-03 * T +
                  1.55003717e-06 * T2 - 7.86498333e-10 * T3 +
                  1.87657300e-13 * T4;
    // species 23: HNOH
    species[23] = +1.09199790e+04 * invT - 2.60342735e+00 -
                  3.95608248e+00 * logT + 1.51305510e-03 * T -
                  4.28123993e-06 * T2 + 2.63037600e-09 * T3 -
                  6.20422870e-13 * T4;
    // species 24: NH2OH
    species[24] = -6.58148481e+03 * invT - 5.72277479e+00 -
                  3.21016092e+00 * logT - 3.09835838e-03 * T -
                  1.84324913e-06 * T2 + 1.63890218e-09 * T3 -
                  4.41258295e-13 * T4;
    // species 25: HONO
    species[25] = -1.04319500e+04 * invT - 1.19903570e+01 -
                  2.29041300e+00 * logT - 7.04961000e-03 * T +
                  2.27978667e-06 * T2 - 6.24898333e-10 * T3 +
                  9.38452500e-14 * T4;
    // species 28: NO3
    species[28] = +7.81290905e+03 * invT - 1.34286157e+01 -
                  2.17359330e+00 * logT - 5.24513425e-03 * T -
                  1.84121115e-06 * T2 + 2.34634889e-09 * T3 -
                  6.82919800e-13 * T4;
    // species 29: HNO3
    species[29] = -1.74198909e+04 * invT - 1.64906923e+01 -
                  1.69329154e+00 * logT - 9.50838510e-03 * T +
                  1.37529450e-06 * T2 + 5.05094856e-10 * T3 -
                  2.32618489e-13 * T4;
  } else {
    // species 0: N2
    species[0] = -9.22797700e+02 * invT - 4.05388800e+00 -
                 2.92664000e+00 * logT - 7.43988400e-04 * T +
                 9.47460000e-08 * T2 - 8.41419833e-12 * T3 +
                 3.37667550e-16 * T4;
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * logT + 1.15421486e-11 * T -
                 2.69269913e-15 * T2 + 3.94596029e-19 * T3 -
                 2.49098679e-23 * T4;
    // species 2: H2
    species[2] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * logT + 2.47012365e-05 * T -
                 8.32427963e-08 * T2 + 1.49638662e-11 * T3 -
                 1.00127688e-15 * T4;
    // species 3: O
    species[3] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * logT + 4.29870569e-05 * T -
                 6.99140982e-09 * T2 + 8.34814992e-13 * T3 -
                 6.14168455e-17 * T4;
    // species 4: OH
    species[4] = +3.71885774e+03 * invT - 3.83691187e+00 -
                 2.86472886e+00 * logT - 5.28252240e-04 * T +
                 4.31804597e-08 * T2 - 2.54348895e-12 * T3 +
                 6.65979380e-17 * T4;
    // species 5: H2O
    species[5] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * logT - 1.08845902e-03 * T +
                 2.73454197e-08 * T2 + 8.08683225e-12 * T3 -
                 8.41004960e-16 * T4;
    // species 6: HO2
    species[6] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * logT - 1.11991006e-03 * T +
                 1.05609692e-07 * T2 - 9.52053083e-12 * T3 +
                 5.39542675e-16 * T4;
    // species 7: H2O2
    species[7] = -1.78617877e+04 * invT + 2.48846230e-01 -
                 4.16500285e+00 * logT - 2.45415847e-03 * T +
                 3.16898708e-07 * T2 - 3.09321655e-11 * T3 +
                 1.43954153e-15 * T4;
    // species 8: O2
    species[8] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * logT - 7.41543770e-04 * T +
                 1.26327778e-07 * T2 - 1.74558796e-11 * T3 +
                 1.08358897e-15 * T4;
    // species 9: N
    species[9] = +5.61160400e+04 * invT - 2.99849000e+00 -
                 2.45026800e+00 * logT - 5.33073000e-05 * T +
                 1.24422283e-08 * T2 - 1.56637667e-12 * T3 +
                 5.12992000e-17 * T4;
    // species 10: NH
    species[10] = +4.18557586e+04 * invT - 2.16726490e-01 -
                  3.38393047e+00 * logT + 1.52200524e-04 * T -
                  1.79785960e-07 * T2 + 4.49790890e-11 * T3 -
                  4.28287493e-15 * T4;
    // species 11: NH2
    species[11] = +2.12757238e+04 * invT + 1.23117053e+00 -
                  3.80751460e+00 * logT - 8.70694240e-05 * T -
                  3.43802798e-07 * T2 + 9.85901233e-11 * T3 -
                  1.00407117e-14 * T4;
    // species 12: NH3
    species[12] = -6.49327000e+03 * invT - 6.01019300e+00 -
                  2.46190400e+00 * logT - 3.02958300e-03 * T +
                  3.34162833e-07 * T2 - 2.61333583e-11 * T3 +
                  9.69158500e-16 * T4;
    // species 13: NNH
    species[13] = +2.93473063e+04 * invT - 8.13728710e+00 -
                  2.78024159e+00 * logT - 2.25557059e-03 * T +
                  3.30245125e-07 * T2 - 3.00967701e-11 * T3 +
                  7.78396210e-16 * T4;
    // species 14: N2H2
    species[14] = +2.34207532e+04 * invT - 9.22528200e+00 -
                  2.38388380e+00 * logT - 3.31809780e-03 * T +
                  3.02781780e-07 * T2 + 9.95808592e-12 * T3 -
                  4.65829627e-15 * T4;
    // species 15: N2H3
    species[15] = +2.48098603e+04 * invT + 1.60601740e-01 -
                  4.04483566e+00 * logT - 3.65565093e-03 * T +
                  4.12709665e-07 * T2 - 3.19777517e-11 * T3 +
                  1.11553786e-15 * T4;
    // species 16: N2H4
    species[16] = +9.28265548e+03 * invT + 6.63397129e+00 -
                  4.93957357e+00 * logT - 4.37508594e-03 * T +
                  4.98998430e-07 * T2 - 3.89398682e-11 * T3 +
                  1.36534300e-15 * T4;
    // species 17: H2NN
    species[17] = +3.48530149e+04 * invT - 4.63989845e+00 -
                  3.05903670e+00 * logT - 3.09191173e-03 * T +
                  3.70285275e-07 * T2 - 2.98782672e-11 * T3 +
                  1.07266452e-15 * T4;
    // species 18: NO
    species[18] = +9.80084000e+03 * invT - 4.17185900e+00 -
                  3.24543500e+00 * logT - 6.34569000e-04 * T +
                  8.35981667e-08 * T2 - 7.64106917e-12 * T3 +
                  3.13770950e-16 * T4;
    // species 19: N2O
    species[19] = +8.16581100e+03 * invT + 5.37622700e+00 -
                  4.71897700e+00 * logT - 1.43685700e-03 * T +
                  1.99582667e-07 * T2 - 1.87546000e-11 * T3 +
                  7.87668500e-16 * T4;
    // species 20: NO2
    species[20] = +2.26129200e+03 * invT + 2.69426050e+00 -
                  4.68285900e+00 * logT - 1.23121450e-03 * T +
                  1.73709833e-07 * T2 - 1.64741833e-11 * T3 +
                  6.95858500e-16 * T4;
    // species 21: HNO
    species[21] = +1.06619100e+04 * invT - 2.19512000e+00 -
                  3.61514400e+00 * logT - 1.60624300e-03 * T +
                  2.10056167e-07 * T2 - 1.88941500e-11 * T3 +
                  7.68118000e-16 * T4;
    // species 23: HNOH
    species[23] = +1.05780106e+04 * invT - 6.42609050e-01 -
                  3.98321933e+00 * logT - 2.44423187e-03 * T +
                  2.75144395e-07 * T2 - 2.12809538e-11 * T3 +
                  7.41542805e-16 * T4;
    // species 24: NH2OH
    species[24] = -6.86018419e+03 * invT - 9.10436340e-01 -
                  3.88112502e+00 * logT - 4.07854224e-03 * T +
                  4.71025960e-07 * T2 - 3.64942444e-11 * T3 +
                  1.26362302e-15 * T4;
    // species 25: HONO
    species[25] = -1.12686500e+04 * invT + 7.48389500e+00 -
                  5.48689300e+00 * logT - 2.10903250e-03 * T +
                  2.74857167e-07 * T2 - 2.47656417e-11 * T3 +
                  1.01057400e-15 * T4;
    // species 28: NO3
    species[28] = +6.12990474e+03 * invT + 2.06452906e+01 -
                  7.48347702e+00 * logT - 1.28886032e-03 * T +
                  1.68243052e-07 * T2 - 1.43595052e-11 * T3 +
                  5.35770040e-16 * T4;
    // species 29: HNO3
    species[29] = -1.93138183e+04 * invT + 2.32926431e+01 -
                  8.03098942e+00 * logT - 2.23479294e-03 * T +
                  2.87432485e-07 * T2 - 2.42963461e-11 * T3 +
                  9.00513510e-16 * T4;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +6.86803000e+03 * invT - 9.73592000e+00 -
                  2.53059000e+00 * logT - 4.29801750e-03 * T +
                  9.11838333e-07 * T2 - 1.89687417e-10 * T3 +
                  2.32403650e-14 * T4;
    // species 26: HNO2
    species[26] = -5.91571591e+03 * invT - 1.37933702e+01 -
                  1.93483800e+00 * logT - 5.05018000e-03 * T +
                  8.27436000e-07 * T2 - 7.25093333e-11 * T3 +
                  1.16206750e-16 * T4;
  } else {
    // species 22: H2NO
    species[22] = +5.56932500e+03 * invT + 1.08268860e+01 -
                  5.67334600e+00 * logT - 1.14941850e-03 * T +
                  2.95741000e-08 * T2 + 9.19568333e-12 * T3 -
                  9.29881000e-16 * T4;
    // species 26: HNO2
    species[26] = -7.80950291e+03 * invT + 1.61567818e+01 -
                  6.47963000e+00 * logT - 9.97637000e-04 * T +
                  2.90064500e-08 * T2 + 8.07989333e-12 * T3 -
                  8.50740000e-16 * T4;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +2.95979751e+04 * invT - 3.62686757e+00 -
                  3.33656431e+00 * logT - 1.33841470e-03 * T -
                  9.36335505e-08 * T2 + 9.28018992e-11 * T3 -
                  1.42038219e-14 * T4;
  } else {
    // species 27: HON
    species[27] = +2.93319701e+04 * invT - 3.36158630e-01 -
                  3.78577430e+00 * logT - 1.43031364e-03 * T +
                  1.70706537e-07 * T2 - 1.37052616e-11 * T3 +
                  4.88971808e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                 1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                 1.02089990e+03 * invT;
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                 5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                 2.54736599e+04 * invT;
    // species 2: H2
    species[2] = +1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 3: O
    species[3] = +2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 4: OH
    species[4] = +3.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
                 1.44963411e-09 * T3 + 4.12474758e-13 * T4 +
                 3.38153812e+03 * invT;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                 1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                 6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                 5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                 1.77025821e+04 * invT;
    // species 8: O2
    species[8] = +2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 9: N
    species[9] = +1.50307100e+00 - 1.09000900e-05 * T + 1.80684300e-08 * T2 -
                 1.41189000e-11 * T3 + 4.19980800e-15 * T4 +
                 5.60989000e+04 * invT;
    // species 10: NH
    species[10] = +2.49138447e+00 + 1.24052536e-04 * T - 4.07842193e-07 * T2 +
                  4.94350317e-10 * T3 - 1.57842123e-13 * T4 +
                  4.17851517e+04 * invT;
    // species 11: NH2
    species[11] = +3.02590054e+00 - 4.76625973e-04 * T + 1.37822449e-06 * T2 -
                  7.04541570e-10 * T3 + 1.34609437e-13 * T4 +
                  2.12447390e+04 * invT;
    // species 12: NH3
    species[12] = +1.20435200e+00 + 5.05738000e-03 * T - 4.88421667e-06 * T2 +
                  3.61808750e-09 * T3 - 1.06570180e-12 * T4 -
                  6.52548800e+03 * invT;
    // species 13: NNH
    species[13] = +2.86231284e+00 - 2.20949349e-04 * T + 2.12840714e-06 * T2 -
                  1.46034711e-09 * T3 + 3.38251644e-13 * T4 +
                  2.91621298e+04 * invT;
    // species 14: N2H2
    species[14] = +3.14915878e+00 - 2.41006771e-03 * T + 7.32021750e-06 * T2 -
                  5.09157255e-09 * T3 + 1.25073440e-12 * T4 +
                  2.32874597e+04 * invT;
    // species 15: N2H3
    species[15] = +2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.53056139e+04 * invT;
    // species 16: N2H4
    species[16] = +2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 17: H2NN
    species[17] = +3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 18: NO
    species[18] = +2.37654200e+00 + 6.26531500e-04 * T - 1.10091700e-06 * T2 +
                  1.30445250e-09 * T3 - 4.89252600e-13 * T4 +
                  9.81796100e+03 * invT;
    // species 19: N2O
    species[19] = +1.54305800e+00 + 4.74609650e-03 * T - 3.26425833e-06 * T2 +
                  1.56596125e-09 * T3 - 3.80365200e-13 * T4 +
                  8.76510000e+03 * invT;
    // species 20: NO2
    species[20] = +1.67060000e+00 + 3.91925050e-03 * T - 2.68795500e-06 * T2 +
                  1.54042875e-09 * T3 - 4.64030000e-13 * T4 +
                  2.89629100e+03 * invT;
    // species 21: HNO
    species[21] = +1.78440300e+00 + 3.30482300e-03 * T - 3.10007433e-06 * T2 +
                  2.35949500e-09 * T3 - 7.50629200e-13 * T4 +
                  1.09187800e+04 * invT;
    // species 23: HNOH
    species[23] = +2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 24: NH2OH
    species[24] = +2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 25: HONO
    species[25] = +1.29041300e+00 + 7.04961000e-03 * T - 4.55957333e-06 * T2 +
                  1.87469500e-09 * T3 - 3.75381000e-13 * T4 -
                  1.04319500e+04 * invT;
    // species 28: NO3
    species[28] = +1.17359330e+00 + 5.24513425e-03 * T + 3.68242230e-06 * T2 -
                  7.03904667e-09 * T3 + 2.73167920e-12 * T4 +
                  7.81290905e+03 * invT;
    // species 29: HNO3
    species[29] = +6.93291540e-01 + 9.50838510e-03 * T - 2.75058899e-06 * T2 -
                  1.51528457e-09 * T3 + 9.30473956e-13 * T4 -
                  1.74198909e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                 2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                 9.22797700e+02 * invT;
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                 1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                 2.54736599e+04 * invT;
    // species 2: H2
    species[2] = +2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 3: O
    species[3] = +1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                 2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                 2.92175791e+04 * invT;
    // species 4: OH
    species[4] = +1.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
                 7.63046685e-12 * T3 - 2.66391752e-16 * T4 +
                 3.71885774e+03 * invT;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                 2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                 2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                 9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                 1.78617877e+04 * invT;
    // species 8: O2
    species[8] = +2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                 5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                 1.08845772e+03 * invT;
    // species 9: N
    species[9] = +1.45026800e+00 + 5.33073000e-05 * T - 2.48844567e-08 * T2 +
                 4.69913000e-12 * T3 - 2.05196800e-16 * T4 +
                 5.61160400e+04 * invT;
    // species 10: NH
    species[10] = +2.38393047e+00 - 1.52200524e-04 * T + 3.59571920e-07 * T2 -
                  1.34937267e-10 * T3 + 1.71314997e-14 * T4 +
                  4.18557586e+04 * invT;
    // species 11: NH2
    species[11] = +2.80751460e+00 + 8.70694240e-05 * T + 6.87605597e-07 * T2 -
                  2.95770370e-10 * T3 + 4.01628468e-14 * T4 +
                  2.12757238e+04 * invT;
    // species 12: NH3
    species[12] = +1.46190400e+00 + 3.02958300e-03 * T - 6.68325667e-07 * T2 +
                  7.84000750e-11 * T3 - 3.87663400e-15 * T4 -
                  6.49327000e+03 * invT;
    // species 13: NNH
    species[13] = +1.78024159e+00 + 2.25557059e-03 * T - 6.60490250e-07 * T2 +
                  9.02903103e-11 * T3 - 3.11358484e-15 * T4 +
                  2.93473063e+04 * invT;
    // species 14: N2H2
    species[14] = +1.38388380e+00 + 3.31809780e-03 * T - 6.05563560e-07 * T2 -
                  2.98742577e-11 * T3 + 1.86331851e-14 * T4 +
                  2.34207532e+04 * invT;
    // species 15: N2H3
    species[15] = +3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.48098603e+04 * invT;
    // species 16: N2H4
    species[16] = +3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 17: H2NN
    species[17] = +2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 18: NO
    species[18] = +2.24543500e+00 + 6.34569000e-04 * T - 1.67196333e-07 * T2 +
                  2.29232075e-11 * T3 - 1.25508380e-15 * T4 +
                  9.80084000e+03 * invT;
    // species 19: N2O
    species[19] = +3.71897700e+00 + 1.43685700e-03 * T - 3.99165333e-07 * T2 +
                  5.62638000e-11 * T3 - 3.15067400e-15 * T4 +
                  8.16581100e+03 * invT;
    // species 20: NO2
    species[20] = +3.68285900e+00 + 1.23121450e-03 * T - 3.47419667e-07 * T2 +
                  4.94225500e-11 * T3 - 2.78343400e-15 * T4 +
                  2.26129200e+03 * invT;
    // species 21: HNO
    species[21] = +2.61514400e+00 + 1.60624300e-03 * T - 4.20112333e-07 * T2 +
                  5.66824500e-11 * T3 - 3.07247200e-15 * T4 +
                  1.06619100e+04 * invT;
    // species 23: HNOH
    species[23] = +2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 24: NH2OH
    species[24] = +2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 25: HONO
    species[25] = +4.48689300e+00 + 2.10903250e-03 * T - 5.49714333e-07 * T2 +
                  7.42969250e-11 * T3 - 4.04229600e-15 * T4 -
                  1.12686500e+04 * invT;
    // species 28: NO3
    species[28] = +6.48347702e+00 + 1.28886032e-03 * T - 3.36486103e-07 * T2 +
                  4.30785157e-11 * T3 - 2.14308016e-15 * T4 +
                  6.12990474e+03 * invT;
    // species 29: HNO3
    species[29] = +7.03098942e+00 + 2.23479294e-03 * T - 5.74864970e-07 * T2 +
                  7.28890383e-11 * T3 - 3.60205404e-15 * T4 -
                  1.93138183e+04 * invT;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +1.53059000e+00 + 4.29801750e-03 * T - 1.82367667e-06 * T2 +
                  5.69062250e-10 * T3 - 9.29614600e-14 * T4 +
                  6.86803000e+03 * invT;
    // species 26: HNO2
    species[26] = +9.34838000e-01 + 5.05018000e-03 * T - 1.65487200e-06 * T2 +
                  2.17528000e-10 * T3 - 4.64827000e-16 * T4 -
                  5.91571591e+03 * invT;
  } else {
    // species 22: H2NO
    species[22] = +4.67334600e+00 + 1.14941850e-03 * T - 5.91482000e-08 * T2 -
                  2.75870500e-11 * T3 + 3.71952400e-15 * T4 +
                  5.56932500e+03 * invT;
    // species 26: HNO2
    species[26] = +5.47963000e+00 + 9.97637000e-04 * T - 5.80129000e-08 * T2 -
                  2.42396800e-11 * T3 + 3.40296000e-15 * T4 -
                  7.80950291e+03 * invT;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +2.33656431e+00 + 1.33841470e-03 * T + 1.87267101e-07 * T2 -
                  2.78405697e-10 * T3 + 5.68152876e-14 * T4 +
                  2.95979751e+04 * invT;
  } else {
    // species 27: HON
    species[27] = +2.78577430e+00 + 1.43031364e-03 * T - 3.41413073e-07 * T2 +
                  4.11157848e-11 * T3 - 1.95588723e-15 * T4 +
                  2.93319701e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                 1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                 1.02089990e+03 * invT;
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                 5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                 2.54736599e+04 * invT;
    // species 2: H2
    species[2] = +2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 3: O
    species[3] = +3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 4: OH
    species[4] = +4.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
                 1.44963411e-09 * T3 + 4.12474758e-13 * T4 +
                 3.38153812e+03 * invT;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                 1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                 6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                 5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                 1.77025821e+04 * invT;
    // species 8: O2
    species[8] = +3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 9: N
    species[9] = +2.50307100e+00 - 1.09000900e-05 * T + 1.80684300e-08 * T2 -
                 1.41189000e-11 * T3 + 4.19980800e-15 * T4 +
                 5.60989000e+04 * invT;
    // species 10: NH
    species[10] = +3.49138447e+00 + 1.24052536e-04 * T - 4.07842193e-07 * T2 +
                  4.94350317e-10 * T3 - 1.57842123e-13 * T4 +
                  4.17851517e+04 * invT;
    // species 11: NH2
    species[11] = +4.02590054e+00 - 4.76625973e-04 * T + 1.37822449e-06 * T2 -
                  7.04541570e-10 * T3 + 1.34609437e-13 * T4 +
                  2.12447390e+04 * invT;
    // species 12: NH3
    species[12] = +2.20435200e+00 + 5.05738000e-03 * T - 4.88421667e-06 * T2 +
                  3.61808750e-09 * T3 - 1.06570180e-12 * T4 -
                  6.52548800e+03 * invT;
    // species 13: NNH
    species[13] = +3.86231284e+00 - 2.20949349e-04 * T + 2.12840714e-06 * T2 -
                  1.46034711e-09 * T3 + 3.38251644e-13 * T4 +
                  2.91621298e+04 * invT;
    // species 14: N2H2
    species[14] = +4.14915878e+00 - 2.41006771e-03 * T + 7.32021750e-06 * T2 -
                  5.09157255e-09 * T3 + 1.25073440e-12 * T4 +
                  2.32874597e+04 * invT;
    // species 15: N2H3
    species[15] = +3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
                  7.49319330e-09 * T3 + 2.41957940e-12 * T4 +
                  2.53056139e+04 * invT;
    // species 16: N2H4
    species[16] = +3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
                  1.25177296e-08 * T3 + 4.06724128e-12 * T4 +
                  1.00893925e+04 * invT;
    // species 17: H2NN
    species[17] = +4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
                  7.60001377e-09 * T3 + 2.09401278e-12 * T4 +
                  3.49580003e+04 * invT;
    // species 18: NO
    species[18] = +3.37654200e+00 + 6.26531500e-04 * T - 1.10091700e-06 * T2 +
                  1.30445250e-09 * T3 - 4.89252600e-13 * T4 +
                  9.81796100e+03 * invT;
    // species 19: N2O
    species[19] = +2.54305800e+00 + 4.74609650e-03 * T - 3.26425833e-06 * T2 +
                  1.56596125e-09 * T3 - 3.80365200e-13 * T4 +
                  8.76510000e+03 * invT;
    // species 20: NO2
    species[20] = +2.67060000e+00 + 3.91925050e-03 * T - 2.68795500e-06 * T2 +
                  1.54042875e-09 * T3 - 4.64030000e-13 * T4 +
                  2.89629100e+03 * invT;
    // species 21: HNO
    species[21] = +2.78440300e+00 + 3.30482300e-03 * T - 3.10007433e-06 * T2 +
                  2.35949500e-09 * T3 - 7.50629200e-13 * T4 +
                  1.09187800e+04 * invT;
    // species 23: HNOH
    species[23] = +3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
                  7.89112800e-09 * T3 + 2.48169148e-12 * T4 +
                  1.09199790e+04 * invT;
    // species 24: NH2OH
    species[24] = +3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
                  4.91670655e-09 * T3 + 1.76503318e-12 * T4 -
                  6.58148481e+03 * invT;
    // species 25: HONO
    species[25] = +2.29041300e+00 + 7.04961000e-03 * T - 4.55957333e-06 * T2 +
                  1.87469500e-09 * T3 - 3.75381000e-13 * T4 -
                  1.04319500e+04 * invT;
    // species 28: NO3
    species[28] = +2.17359330e+00 + 5.24513425e-03 * T + 3.68242230e-06 * T2 -
                  7.03904667e-09 * T3 + 2.73167920e-12 * T4 +
                  7.81290905e+03 * invT;
    // species 29: HNO3
    species[29] = +1.69329154e+00 + 9.50838510e-03 * T - 2.75058899e-06 * T2 -
                  1.51528457e-09 * T3 + 9.30473956e-13 * T4 -
                  1.74198909e+04 * invT;
  } else {
    // species 0: N2
    species[0] = +2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                 2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                 9.22797700e+02 * invT;
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                 1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                 2.54736599e+04 * invT;
    // species 2: H2
    species[2] = +3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 3: O
    species[3] = +2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                 2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                 2.92175791e+04 * invT;
    // species 4: OH
    species[4] = +2.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
                 7.63046685e-12 * T3 - 2.66391752e-16 * T4 +
                 3.71885774e+03 * invT;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                 2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                 2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                 9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                 1.78617877e+04 * invT;
    // species 8: O2
    species[8] = +3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                 5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                 1.08845772e+03 * invT;
    // species 9: N
    species[9] = +2.45026800e+00 + 5.33073000e-05 * T - 2.48844567e-08 * T2 +
                 4.69913000e-12 * T3 - 2.05196800e-16 * T4 +
                 5.61160400e+04 * invT;
    // species 10: NH
    species[10] = +3.38393047e+00 - 1.52200524e-04 * T + 3.59571920e-07 * T2 -
                  1.34937267e-10 * T3 + 1.71314997e-14 * T4 +
                  4.18557586e+04 * invT;
    // species 11: NH2
    species[11] = +3.80751460e+00 + 8.70694240e-05 * T + 6.87605597e-07 * T2 -
                  2.95770370e-10 * T3 + 4.01628468e-14 * T4 +
                  2.12757238e+04 * invT;
    // species 12: NH3
    species[12] = +2.46190400e+00 + 3.02958300e-03 * T - 6.68325667e-07 * T2 +
                  7.84000750e-11 * T3 - 3.87663400e-15 * T4 -
                  6.49327000e+03 * invT;
    // species 13: NNH
    species[13] = +2.78024159e+00 + 2.25557059e-03 * T - 6.60490250e-07 * T2 +
                  9.02903103e-11 * T3 - 3.11358484e-15 * T4 +
                  2.93473063e+04 * invT;
    // species 14: N2H2
    species[14] = +2.38388380e+00 + 3.31809780e-03 * T - 6.05563560e-07 * T2 -
                  2.98742577e-11 * T3 + 1.86331851e-14 * T4 +
                  2.34207532e+04 * invT;
    // species 15: N2H3
    species[15] = +4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
                  9.59332552e-11 * T3 - 4.46215146e-15 * T4 +
                  2.48098603e+04 * invT;
    // species 16: N2H4
    species[16] = +4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
                  1.16819604e-10 * T3 - 5.46137198e-15 * T4 +
                  9.28265548e+03 * invT;
    // species 17: H2NN
    species[17] = +3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
                  8.96348015e-11 * T3 - 4.29065810e-15 * T4 +
                  3.48530149e+04 * invT;
    // species 18: NO
    species[18] = +3.24543500e+00 + 6.34569000e-04 * T - 1.67196333e-07 * T2 +
                  2.29232075e-11 * T3 - 1.25508380e-15 * T4 +
                  9.80084000e+03 * invT;
    // species 19: N2O
    species[19] = +4.71897700e+00 + 1.43685700e-03 * T - 3.99165333e-07 * T2 +
                  5.62638000e-11 * T3 - 3.15067400e-15 * T4 +
                  8.16581100e+03 * invT;
    // species 20: NO2
    species[20] = +4.68285900e+00 + 1.23121450e-03 * T - 3.47419667e-07 * T2 +
                  4.94225500e-11 * T3 - 2.78343400e-15 * T4 +
                  2.26129200e+03 * invT;
    // species 21: HNO
    species[21] = +3.61514400e+00 + 1.60624300e-03 * T - 4.20112333e-07 * T2 +
                  5.66824500e-11 * T3 - 3.07247200e-15 * T4 +
                  1.06619100e+04 * invT;
    // species 23: HNOH
    species[23] = +3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
                  6.38428615e-11 * T3 - 2.96617122e-15 * T4 +
                  1.05780106e+04 * invT;
    // species 24: NH2OH
    species[24] = +3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
                  1.09482733e-10 * T3 - 5.05449208e-15 * T4 -
                  6.86018419e+03 * invT;
    // species 25: HONO
    species[25] = +5.48689300e+00 + 2.10903250e-03 * T - 5.49714333e-07 * T2 +
                  7.42969250e-11 * T3 - 4.04229600e-15 * T4 -
                  1.12686500e+04 * invT;
    // species 28: NO3
    species[28] = +7.48347702e+00 + 1.28886032e-03 * T - 3.36486103e-07 * T2 +
                  4.30785157e-11 * T3 - 2.14308016e-15 * T4 +
                  6.12990474e+03 * invT;
    // species 29: HNO3
    species[29] = +8.03098942e+00 + 2.23479294e-03 * T - 5.74864970e-07 * T2 +
                  7.28890383e-11 * T3 - 3.60205404e-15 * T4 -
                  1.93138183e+04 * invT;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +2.53059000e+00 + 4.29801750e-03 * T - 1.82367667e-06 * T2 +
                  5.69062250e-10 * T3 - 9.29614600e-14 * T4 +
                  6.86803000e+03 * invT;
    // species 26: HNO2
    species[26] = +1.93483800e+00 + 5.05018000e-03 * T - 1.65487200e-06 * T2 +
                  2.17528000e-10 * T3 - 4.64827000e-16 * T4 -
                  5.91571591e+03 * invT;
  } else {
    // species 22: H2NO
    species[22] = +5.67334600e+00 + 1.14941850e-03 * T - 5.91482000e-08 * T2 -
                  2.75870500e-11 * T3 + 3.71952400e-15 * T4 +
                  5.56932500e+03 * invT;
    // species 26: HNO2
    species[26] = +6.47963000e+00 + 9.97637000e-04 * T - 5.80129000e-08 * T2 -
                  2.42396800e-11 * T3 + 3.40296000e-15 * T4 -
                  7.80950291e+03 * invT;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +3.33656431e+00 + 1.33841470e-03 * T + 1.87267101e-07 * T2 -
                  2.78405697e-10 * T3 + 5.68152876e-14 * T4 +
                  2.95979751e+04 * invT;
  } else {
    // species 27: HON
    species[27] = +3.78577430e+00 + 1.43031364e-03 * T - 3.41413073e-07 * T2 +
                  4.11157848e-11 * T3 - 1.95588723e-15 * T4 +
                  2.93319701e+04 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +3.29867700e+00 * logT + 1.40824040e-03 * T -
                 1.98161100e-06 * T2 + 1.88050500e-09 * T3 -
                 6.11213500e-13 * T4 + 3.95037200e+00;
    // species 1: H
    species[1] = +2.50000000e+00 * logT + 7.05332819e-13 * T -
                 9.97959820e-16 * T2 + 7.66938773e-19 * T3 -
                 2.31933083e-22 * T4 - 4.46682853e-01;
    // species 2: H2
    species[2] = +2.34433112e+00 * logT + 7.98052075e-03 * T -
                 9.73907550e-06 * T2 + 6.71906980e-09 * T3 -
                 1.84402940e-12 * T4 + 6.83010238e-01;
    // species 3: O
    species[3] = +3.16826710e+00 * logT - 3.27931884e-03 * T +
                 3.32153198e-06 * T2 - 2.04268875e-09 * T3 +
                 5.28164927e-13 * T4 + 2.05193346e+00;
    // species 4: OH
    species[4] = +4.12530561e+00 * logT - 3.22544939e-03 * T +
                 3.26382346e-06 * T2 - 1.93284548e-09 * T3 +
                 5.15593447e-13 * T4 - 6.90432960e-01;
    // species 5: H2O
    species[5] = +4.19864056e+00 * logT - 2.03643410e-03 * T +
                 3.26020105e-06 * T2 - 1.82932354e-09 * T3 +
                 4.42994543e-13 * T4 - 8.49032208e-01;
    // species 6: HO2
    species[6] = +4.30179801e+00 * logT - 4.74912051e-03 * T +
                 1.05791445e-05 * T2 - 8.09212980e-09 * T3 +
                 2.32306281e-12 * T4 + 3.71666245e+00;
    // species 7: H2O2
    species[7] = +4.27611269e+00 * logT - 5.42822417e-04 * T +
                 8.36678505e-06 * T2 - 7.19236043e-09 * T3 +
                 2.15613591e-12 * T4 + 3.43505074e+00;
    // species 8: O2
    species[8] = +3.78245636e+00 * logT - 2.99673416e-03 * T +
                 4.92365101e-06 * T2 - 3.22709836e-09 * T3 +
                 8.10932092e-13 * T4 + 3.65767573e+00;
    // species 9: N
    species[9] = +2.50307100e+00 * logT - 2.18001800e-05 * T +
                 2.71026450e-08 * T2 - 1.88252000e-11 * T3 +
                 5.24976000e-15 * T4 + 4.16756600e+00;
    // species 10: NH
    species[10] = +3.49138447e+00 * logT + 2.48105072e-04 * T -
                  6.11763290e-07 * T2 + 6.59133757e-10 * T3 -
                  1.97302653e-13 * T4 + 1.83667301e+00;
    // species 11: NH2
    species[11] = +4.02590054e+00 * logT - 9.53251946e-04 * T +
                  2.06733674e-06 * T2 - 9.39388760e-10 * T3 +
                  1.68261796e-13 * T4 + 5.86219857e-01;
    // species 12: NH3
    species[12] = +2.20435200e+00 * logT + 1.01147600e-02 * T -
                  7.32632500e-06 * T2 + 4.82411667e-09 * T3 -
                  1.33212725e-12 * T4 + 8.12713800e+00;
    // species 13: NNH
    species[13] = +3.86231284e+00 * logT - 4.41898698e-04 * T +
                  3.19261070e-06 * T2 - 1.94712948e-09 * T3 +
                  4.22814555e-13 * T4 + 4.85334915e+00;
    // species 14: N2H2
    species[14] = +4.14915878e+00 * logT - 4.82013543e-03 * T +
                  1.09803263e-05 * T2 - 6.78876340e-09 * T3 +
                  1.56341800e-12 * T4 + 3.19154222e+00;
    // species 15: N2H3
    species[15] = +3.42125505e+00 * logT + 1.34901590e-03 * T +
                  1.11729535e-05 * T2 - 9.99092440e-09 * T3 +
                  3.02447425e-12 * T4 + 7.83176309e+00;
    // species 16: N2H4
    species[16] = +3.83472149e+00 * logT - 6.49129555e-04 * T +
                  1.88424232e-05 * T2 - 1.66903061e-08 * T3 +
                  5.08405160e-12 * T4 + 5.75272030e+00;
    // species 17: H2NN
    species[17] = +4.53204001e+00 * logT - 7.32418578e-03 * T +
                  1.50401856e-05 * T2 - 1.01333517e-08 * T3 +
                  2.61751598e-12 * T4 + 1.51074195e+00;
    // species 18: NO
    species[18] = +3.37654200e+00 * logT + 1.25306300e-03 * T -
                  1.65137550e-06 * T2 + 1.73927000e-09 * T3 -
                  6.11565750e-13 * T4 + 5.82959000e+00;
    // species 19: N2O
    species[19] = +2.54305800e+00 * logT + 9.49219300e-03 * T -
                  4.89638750e-06 * T2 + 2.08794833e-09 * T3 -
                  4.75456500e-13 * T4 + 9.51122200e+00;
    // species 20: NO2
    species[20] = +2.67060000e+00 * logT + 7.83850100e-03 * T -
                  4.03193250e-06 * T2 + 2.05390500e-09 * T3 -
                  5.80037500e-13 * T4 + 1.16120700e+01;
    // species 21: HNO
    species[21] = +2.78440300e+00 * logT + 6.60964600e-03 * T -
                  4.65011150e-06 * T2 + 3.14599333e-09 * T3 -
                  9.38286500e-13 * T4 + 9.03562900e+00;
    // species 23: HNOH
    species[23] = +3.95608248e+00 * logT - 3.02611020e-03 * T +
                  1.28437198e-05 * T2 - 1.05215040e-08 * T3 +
                  3.10211435e-12 * T4 + 5.55950983e+00;
    // species 24: NH2OH
    species[24] = +3.21016092e+00 * logT + 6.19671676e-03 * T +
                  5.52974740e-06 * T2 - 6.55560873e-09 * T3 +
                  2.20629147e-12 * T4 + 7.93293571e+00;
    // species 25: HONO
    species[25] = +2.29041300e+00 * logT + 1.40992200e-02 * T -
                  6.83936000e-06 * T2 + 2.49959333e-09 * T3 -
                  4.69226250e-13 * T4 + 1.32807700e+01;
    // species 28: NO3
    species[28] = +2.17359330e+00 * logT + 1.04902685e-02 * T +
                  5.52363345e-06 * T2 - 9.38539557e-09 * T3 +
                  3.41459900e-12 * T4 + 1.46022090e+01;
    // species 29: HNO3
    species[29] = +1.69329154e+00 * logT + 1.90167702e-02 * T -
                  4.12588348e-06 * T2 - 2.02037942e-09 * T3 +
                  1.16309245e-12 * T4 + 1.71839838e+01;
  } else {
    // species 0: N2
    species[0] = +2.92664000e+00 * logT + 1.48797680e-03 * T -
                 2.84238000e-07 * T2 + 3.36567933e-11 * T3 -
                 1.68833775e-15 * T4 + 5.98052800e+00;
    // species 1: H
    species[1] = +2.50000001e+00 * logT - 2.30842973e-11 * T +
                 8.07809740e-15 * T2 - 1.57838412e-18 * T3 +
                 1.24549339e-22 * T4 - 4.46682914e-01;
    // species 2: H2
    species[2] = +3.33727920e+00 * logT - 4.94024731e-05 * T +
                 2.49728389e-07 * T2 - 5.98554647e-11 * T3 +
                 5.00638440e-15 * T4 - 3.20502331e+00;
    // species 3: O
    species[3] = +2.56942078e+00 * logT - 8.59741137e-05 * T +
                 2.09742295e-08 * T2 - 3.33925997e-12 * T3 +
                 3.07084227e-16 * T4 + 4.78433864e+00;
    // species 4: OH
    species[4] = +2.86472886e+00 * logT + 1.05650448e-03 * T -
                 1.29541379e-07 * T2 + 1.01739558e-11 * T3 -
                 3.32989690e-16 * T4 + 5.70164073e+00;
    // species 5: H2O
    species[5] = +3.03399249e+00 * logT + 2.17691804e-03 * T -
                 8.20362590e-08 * T2 - 3.23473290e-11 * T3 +
                 4.20502480e-15 * T4 + 4.96677010e+00;
    // species 6: HO2
    species[6] = +4.01721090e+00 * logT + 2.23982013e-03 * T -
                 3.16829075e-07 * T2 + 3.80821233e-11 * T3 -
                 2.69771337e-15 * T4 + 3.78510215e+00;
    // species 7: H2O2
    species[7] = +4.16500285e+00 * logT + 4.90831694e-03 * T -
                 9.50696125e-07 * T2 + 1.23728662e-10 * T3 -
                 7.19770763e-15 * T4 + 2.91615662e+00;
    // species 8: O2
    species[8] = +3.28253784e+00 * logT + 1.48308754e-03 * T -
                 3.78983334e-07 * T2 + 6.98235183e-11 * T3 -
                 5.41794485e-15 * T4 + 5.45323129e+00;
    // species 9: N
    species[9] = +2.45026800e+00 * logT + 1.06614600e-04 * T -
                 3.73266850e-08 * T2 + 6.26550667e-12 * T3 -
                 2.56496000e-16 * T4 + 4.44875800e+00;
    // species 10: NH
    species[10] = +3.38393047e+00 * logT - 3.04401048e-04 * T +
                  5.39357880e-07 * T2 - 1.79916356e-10 * T3 +
                  2.14143746e-14 * T4 + 2.60065696e+00;
    // species 11: NH2
    species[11] = +3.80751460e+00 * logT + 1.74138848e-04 * T +
                  1.03140840e-06 * T2 - 3.94360493e-10 * T3 +
                  5.02035585e-14 * T4 + 1.57634407e+00;
    // species 12: NH3
    species[12] = +2.46190400e+00 * logT + 6.05916600e-03 * T -
                  1.00248850e-06 * T2 + 1.04533433e-10 * T3 -
                  4.84579250e-15 * T4 + 7.47209700e+00;
    // species 13: NNH
    species[13] = +2.78024159e+00 * logT + 4.51114118e-03 * T -
                  9.90735375e-07 * T2 + 1.20387080e-10 * T3 -
                  3.89198105e-15 * T4 + 9.91752869e+00;
    // species 14: N2H2
    species[14] = +2.38388380e+00 * logT + 6.63619559e-03 * T -
                  9.08345340e-07 * T2 - 3.98323437e-11 * T3 +
                  2.32914814e-14 * T4 + 1.06091658e+01;
    // species 15: N2H3
    species[15] = +4.04483566e+00 * logT + 7.31130186e-03 * T -
                  1.23812900e-06 * T2 + 1.27911007e-10 * T3 -
                  5.57768933e-15 * T4 + 2.88423392e+00;
    // species 16: N2H4
    species[16] = +4.93957357e+00 * logT + 8.75017187e-03 * T -
                  1.49699529e-06 * T2 + 1.55759473e-10 * T3 -
                  6.82671497e-15 * T4 - 2.69439772e+00;
    // species 17: H2NN
    species[17] = +3.05903670e+00 * logT + 6.18382347e-03 * T -
                  1.11085582e-06 * T2 + 1.19513069e-10 * T3 -
                  5.36332263e-15 * T4 + 6.69893515e+00;
    // species 18: NO
    species[18] = +3.24543500e+00 * logT + 1.26913800e-03 * T -
                  2.50794500e-07 * T2 + 3.05642767e-11 * T3 -
                  1.56885475e-15 * T4 + 6.41729400e+00;
    // species 19: N2O
    species[19] = +4.71897700e+00 * logT + 2.87371400e-03 * T -
                  5.98748000e-07 * T2 + 7.50184000e-11 * T3 -
                  3.93834250e-15 * T4 - 1.65725000e+00;
    // species 20: NO2
    species[20] = +4.68285900e+00 * logT + 2.46242900e-03 * T -
                  5.21129500e-07 * T2 + 6.58967333e-11 * T3 -
                  3.47929250e-15 * T4 + 9.88598500e-01;
    // species 21: HNO
    species[21] = +3.61514400e+00 * logT + 3.21248600e-03 * T -
                  6.30168500e-07 * T2 + 7.55766000e-11 * T3 -
                  3.84059000e-15 * T4 + 4.81026400e+00;
    // species 23: HNOH
    species[23] = +3.98321933e+00 * logT + 4.88846374e-03 * T -
                  8.25433185e-07 * T2 + 8.51238153e-11 * T3 -
                  3.70771402e-15 * T4 + 3.62582838e+00;
    // species 24: NH2OH
    species[24] = +3.88112502e+00 * logT + 8.15708448e-03 * T -
                  1.41307788e-06 * T2 + 1.45976978e-10 * T3 -
                  6.31811510e-15 * T4 + 3.79156136e+00;
    // species 25: HONO
    species[25] = +5.48689300e+00 * logT + 4.21806500e-03 * T -
                  8.24571500e-07 * T2 + 9.90625667e-11 * T3 -
                  5.05287000e-15 * T4 - 2.99700200e+00;
    // species 28: NO3
    species[28] = +7.48347702e+00 * logT + 2.57772064e-03 * T -
                  5.04729155e-07 * T2 + 5.74380210e-11 * T3 -
                  2.67885020e-15 * T4 - 1.41618136e+01;
    // species 29: HNO3
    species[29] = +8.03098942e+00 * logT + 4.46958589e-03 * T -
                  8.62297455e-07 * T2 + 9.71853843e-11 * T3 -
                  4.50256755e-15 * T4 - 1.62616537e+01;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +2.53059000e+00 * logT + 8.59603500e-03 * T -
                  2.73551500e-06 * T2 + 7.58749667e-10 * T3 -
                  1.16201825e-13 * T4 + 1.12665100e+01;
    // species 26: HNO2
    species[26] = +1.93483800e+00 * logT + 1.01003600e-02 * T -
                  2.48230800e-06 * T2 + 2.90037333e-10 * T3 -
                  5.81033750e-16 * T4 + 1.47282082e+01;
  } else {
    // species 22: H2NO
    species[22] = +5.67334600e+00 * logT + 2.29883700e-03 * T -
                  8.87223000e-08 * T2 - 3.67827333e-11 * T3 +
                  4.64940500e-15 * T4 - 6.15354000e+00;
    // species 26: HNO2
    species[26] = +6.47963000e+00 * logT + 1.99527400e-03 * T -
                  8.70193500e-08 * T2 - 3.23195733e-11 * T3 +
                  4.25370000e-15 * T4 - 1.06771518e+01;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +3.33656431e+00 * logT + 2.67682939e-03 * T +
                  2.80900652e-07 * T2 - 3.71207597e-10 * T3 +
                  7.10191095e-14 * T4 + 5.96343188e+00;
  } else {
    // species 27: HON
    species[27] = +3.78577430e+00 * logT + 2.86062728e-03 * T -
                  5.12119610e-07 * T2 + 5.48210463e-11 * T3 -
                  2.44485904e-15 * T4 + 3.12193293e+00;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    species[0] = +1.40824040e-03 - 7.92644400e-06 * T + 1.69245450e-08 * T2 -
                 9.77941600e-12 * T3;
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * T + 6.90244896e-18 * T2 -
                 3.71092933e-21 * T3;
    // species 2: H2
    species[2] = +7.98052075e-03 - 3.89563020e-05 * T + 6.04716282e-08 * T2 -
                 2.95044704e-11 * T3;
    // species 3: O
    species[3] = -3.27931884e-03 + 1.32861279e-05 * T - 1.83841987e-08 * T2 +
                 8.45063884e-12 * T3;
    // species 4: OH
    species[4] = -3.22544939e-03 + 1.30552938e-05 * T - 1.73956093e-08 * T2 +
                 8.24949516e-12 * T3;
    // species 5: H2O
    species[5] = -2.03643410e-03 + 1.30408042e-05 * T - 1.64639119e-08 * T2 +
                 7.08791268e-12 * T3;
    // species 6: HO2
    species[6] = -4.74912051e-03 + 4.23165782e-05 * T - 7.28291682e-08 * T2 +
                 3.71690050e-11 * T3;
    // species 7: H2O2
    species[7] = -5.42822417e-04 + 3.34671402e-05 * T - 6.47312439e-08 * T2 +
                 3.44981745e-11 * T3;
    // species 8: O2
    species[8] = -2.99673416e-03 + 1.96946040e-05 * T - 2.90438853e-08 * T2 +
                 1.29749135e-11 * T3;
    // species 9: N
    species[9] = -2.18001800e-05 + 1.08410580e-07 * T - 1.69426800e-10 * T2 +
                 8.39961600e-14 * T3;
    // species 10: NH
    species[10] = +2.48105072e-04 - 2.44705316e-06 * T + 5.93220381e-09 * T2 -
                  3.15684245e-12 * T3;
    // species 11: NH2
    species[11] = -9.53251946e-04 + 8.26934696e-06 * T - 8.45449884e-09 * T2 +
                  2.69218873e-12 * T3;
    // species 12: NH3
    species[12] = +1.01147600e-02 - 2.93053000e-05 * T + 4.34170500e-08 * T2 -
                  2.13140360e-11 * T3;
    // species 13: NNH
    species[13] = -4.41898698e-04 + 1.27704428e-05 * T - 1.75241653e-08 * T2 +
                  6.76503288e-12 * T3;
    // species 14: N2H2
    species[14] = -4.82013543e-03 + 4.39213050e-05 * T - 6.10988706e-08 * T2 +
                  2.50146880e-11 * T3;
    // species 15: N2H3
    species[15] = +1.34901590e-03 + 4.46918142e-05 * T - 8.99183196e-08 * T2 +
                  4.83915880e-11 * T3;
    // species 16: N2H4
    species[16] = -6.49129555e-04 + 7.53696926e-05 * T - 1.50212755e-07 * T2 +
                  8.13448256e-11 * T3;
    // species 17: H2NN
    species[17] = -7.32418578e-03 + 6.01607426e-05 * T - 9.12001653e-08 * T2 +
                  4.18802556e-11 * T3;
    // species 18: NO
    species[18] = +1.25306300e-03 - 6.60550200e-06 * T + 1.56534300e-08 * T2 -
                  9.78505200e-12 * T3;
    // species 19: N2O
    species[19] = +9.49219300e-03 - 1.95855500e-05 * T + 1.87915350e-08 * T2 -
                  7.60730400e-12 * T3;
    // species 20: NO2
    species[20] = +7.83850100e-03 - 1.61277300e-05 * T + 1.84851450e-08 * T2 -
                  9.28060000e-12 * T3;
    // species 21: HNO
    species[21] = +6.60964600e-03 - 1.86004460e-05 * T + 2.83139400e-08 * T2 -
                  1.50125840e-11 * T3;
    // species 23: HNOH
    species[23] = -3.02611020e-03 + 5.13748792e-05 * T - 9.46935360e-08 * T2 +
                  4.96338296e-11 * T3;
    // species 24: NH2OH
    species[24] = +6.19671676e-03 + 2.21189896e-05 * T - 5.90004786e-08 * T2 +
                  3.53006636e-11 * T3;
    // species 25: HONO
    species[25] = +1.40992200e-02 - 2.73574400e-05 * T + 2.24963400e-08 * T2 -
                  7.50762000e-12 * T3;
    // species 28: NO3
    species[28] = +1.04902685e-02 + 2.20945338e-05 * T - 8.44685601e-08 * T2 +
                  5.46335840e-11 * T3;
    // species 29: HNO3
    species[29] = +1.90167702e-02 - 1.65035339e-05 * T - 1.81834148e-08 * T2 +
                  1.86094791e-11 * T3;
  } else {
    // species 0: N2
    species[0] = +1.48797680e-03 - 1.13695200e-06 * T + 3.02911140e-10 * T2 -
                 2.70134040e-14 * T3;
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * T - 1.42054571e-17 * T2 +
                 1.99278943e-21 * T3;
    // species 2: H2
    species[2] = -4.94024731e-05 + 9.98913556e-07 * T - 5.38699182e-10 * T2 +
                 8.01021504e-14 * T3;
    // species 3: O
    species[3] = -8.59741137e-05 + 8.38969178e-08 * T - 3.00533397e-11 * T2 +
                 4.91334764e-15 * T3;
    // species 4: OH
    species[4] = +1.05650448e-03 - 5.18165516e-07 * T + 9.15656022e-11 * T2 -
                 5.32783504e-15 * T3;
    // species 5: H2O
    species[5] = +2.17691804e-03 - 3.28145036e-07 * T - 2.91125961e-10 * T2 +
                 6.72803968e-14 * T3;
    // species 6: HO2
    species[6] = +2.23982013e-03 - 1.26731630e-06 * T + 3.42739110e-10 * T2 -
                 4.31634140e-14 * T3;
    // species 7: H2O2
    species[7] = +4.90831694e-03 - 3.80278450e-06 * T + 1.11355796e-09 * T2 -
                 1.15163322e-13 * T3;
    // species 8: O2
    species[8] = +1.48308754e-03 - 1.51593334e-06 * T + 6.28411665e-10 * T2 -
                 8.66871176e-14 * T3;
    // species 9: N
    species[9] = +1.06614600e-04 - 1.49306740e-07 * T + 5.63895600e-11 * T2 -
                 4.10393600e-15 * T3;
    // species 10: NH
    species[10] = -3.04401048e-04 + 2.15743152e-06 * T - 1.61924720e-09 * T2 +
                  3.42629994e-13 * T3;
    // species 11: NH2
    species[11] = +1.74138848e-04 + 4.12563358e-06 * T - 3.54924444e-09 * T2 +
                  8.03256936e-13 * T3;
    // species 12: NH3
    species[12] = +6.05916600e-03 - 4.00995400e-06 * T + 9.40800900e-10 * T2 -
                  7.75326800e-14 * T3;
    // species 13: NNH
    species[13] = +4.51114118e-03 - 3.96294150e-06 * T + 1.08348372e-09 * T2 -
                  6.22716968e-14 * T3;
    // species 14: N2H2
    species[14] = +6.63619559e-03 - 3.63338136e-06 * T - 3.58491093e-10 * T2 +
                  3.72663702e-13 * T3;
    // species 15: N2H3
    species[15] = +7.31130186e-03 - 4.95251598e-06 * T + 1.15119906e-09 * T2 -
                  8.92430292e-14 * T3;
    // species 16: N2H4
    species[16] = +8.75017187e-03 - 5.98798116e-06 * T + 1.40183525e-09 * T2 -
                  1.09227440e-13 * T3;
    // species 17: H2NN
    species[17] = +6.18382347e-03 - 4.44342330e-06 * T + 1.07561762e-09 * T2 -
                  8.58131620e-14 * T3;
    // species 18: NO
    species[18] = +1.26913800e-03 - 1.00317800e-06 * T + 2.75078490e-10 * T2 -
                  2.51016760e-14 * T3;
    // species 19: N2O
    species[19] = +2.87371400e-03 - 2.39499200e-06 * T + 6.75165600e-10 * T2 -
                  6.30134800e-14 * T3;
    // species 20: NO2
    species[20] = +2.46242900e-03 - 2.08451800e-06 * T + 5.93070600e-10 * T2 -
                  5.56686800e-14 * T3;
    // species 21: HNO
    species[21] = +3.21248600e-03 - 2.52067400e-06 * T + 6.80189400e-10 * T2 -
                  6.14494400e-14 * T3;
    // species 23: HNOH
    species[23] = +4.88846374e-03 - 3.30173274e-06 * T + 7.66114338e-10 * T2 -
                  5.93234244e-14 * T3;
    // species 24: NH2OH
    species[24] = +8.15708448e-03 - 5.65231152e-06 * T + 1.31379280e-09 * T2 -
                  1.01089842e-13 * T3;
    // species 25: HONO
    species[25] = +4.21806500e-03 - 3.29828600e-06 * T + 8.91563100e-10 * T2 -
                  8.08459200e-14 * T3;
    // species 28: NO3
    species[28] = +2.57772064e-03 - 2.01891662e-06 * T + 5.16942189e-10 * T2 -
                  4.28616032e-14 * T3;
    // species 29: HNO3
    species[29] = +4.46958589e-03 - 3.44918982e-06 * T + 8.74668459e-10 * T2 -
                  7.20410808e-14 * T3;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    species[22] = +8.59603500e-03 - 1.09420600e-05 * T + 6.82874700e-09 * T2 -
                  1.85922920e-12 * T3;
    // species 26: HNO2
    species[26] = +1.01003600e-02 - 9.92923200e-06 * T + 2.61033600e-09 * T2 -
                  9.29654000e-15 * T3;
  } else {
    // species 22: H2NO
    species[22] = +2.29883700e-03 - 3.54889200e-07 * T - 3.31044600e-10 * T2 +
                  7.43904800e-14 * T3;
    // species 26: HNO2
    species[26] = +1.99527400e-03 - 3.48077400e-07 * T - 2.90876160e-10 * T2 +
                  6.80592000e-14 * T3;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    species[27] = +2.67682939e-03 + 1.12360261e-06 * T - 3.34086837e-09 * T2 +
                  1.13630575e-12 * T3;
  } else {
    // species 27: HON
    species[27] = +2.86062728e-03 - 2.04847844e-06 * T + 4.93389417e-10 * T2 -
                  3.91177446e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[30]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
    // species 1: H
    result += y[1] *
              (+2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 2: H2
    result += y[2] *
              (+2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 3: O
    result += y[3] *
              (+3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+4.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
               5.79853643e-09 * T3 + 2.06237379e-12 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 8: O2
    result += y[8] *
              (+3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 9: N
    result += y[9] *
              (+2.50307100e+00 - 2.18001800e-05 * T + 5.42052900e-08 * T2 -
               5.64756000e-11 * T3 + 2.09990400e-14 * T4) *
              0.0713928749910759;
    // species 10: NH
    result += y[10] *
              (+3.49138447e+00 + 2.48105072e-04 * T - 1.22352658e-06 * T2 +
               1.97740127e-09 * T3 - 7.89210613e-13 * T4) *
              0.0666000666000666;
    // species 11: NH2
    result += y[11] *
              (+4.02590054e+00 - 9.53251946e-04 * T + 4.13467348e-06 * T2 -
               2.81816628e-09 * T3 + 6.73047183e-13 * T4) *
              0.0624102852150034;
    // species 12: NH3
    result += y[12] *
              (+2.20435200e+00 + 1.01147600e-02 * T - 1.46526500e-05 * T2 +
               1.44723500e-08 * T3 - 5.32850900e-12 * T4) *
              0.0587164582232400;
    // species 13: NNH
    result += y[13] *
              (+3.86231284e+00 - 4.41898698e-04 * T + 6.38522141e-06 * T2 -
               5.84138844e-09 * T3 + 1.69125822e-12 * T4) *
              0.0344566191165323;
    // species 14: N2H2
    result += y[14] *
              (+4.14915878e+00 - 4.82013543e-03 * T + 2.19606525e-05 * T2 -
               2.03662902e-08 * T3 + 6.25367200e-12 * T4) *
              0.0333000333000333;
    // species 15: N2H3
    result += y[15] *
              (+3.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
    // species 16: N2H4
    result += y[16] *
              (+3.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 17: H2NN
    result += y[17] *
              (+4.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 18: NO
    result += y[18] *
              (+3.37654200e+00 + 1.25306300e-03 * T - 3.30275100e-06 * T2 +
               5.21781000e-09 * T3 - 2.44626300e-12 * T4) *
              0.0333266679997334;
    // species 19: N2O
    result += y[19] *
              (+2.54305800e+00 + 9.49219300e-03 * T - 9.79277500e-06 * T2 +
               6.26384500e-09 * T3 - 1.90182600e-12 * T4) *
              0.0227205598345943;
    // species 20: NO2
    result += y[20] *
              (+2.67060000e+00 + 7.83850100e-03 * T - 8.06386500e-06 * T2 +
               6.16171500e-09 * T3 - 2.32015000e-12 * T4) *
              0.0217367677426367;
    // species 21: HNO
    result += y[21] *
              (+2.78440300e+00 + 6.60964600e-03 * T - 9.30022300e-06 * T2 +
               9.43798000e-09 * T3 - 3.75314600e-12 * T4) *
              0.0322435029341588;
    // species 23: HNOH
    result += y[23] *
              (+3.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 24: NH2OH
    result += y[24] *
              (+3.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 25: HONO
    result += y[25] *
              (+2.29041300e+00 + 1.40992200e-02 * T - 1.36787200e-05 * T2 +
               7.49878000e-09 * T3 - 1.87690500e-12 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+2.17359330e+00 + 1.04902685e-02 * T + 1.10472669e-05 * T2 -
               2.81561867e-08 * T3 + 1.36583960e-11 * T4) *
              0.0161279917424682;
    // species 29: HNO3
    result += y[29] *
              (+1.69329154e+00 + 1.90167702e-02 * T - 8.25176697e-06 * T2 -
               6.06113827e-09 * T3 + 4.65236978e-12 * T4) *
              0.0158699930172031;
  } else {
    // species 0: N2
    result += y[0] *
              (+2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
    // species 1: H
    result += y[1] *
              (+2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 2: H2
    result += y[2] *
              (+3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 3: O
    result += y[3] *
              (+2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+2.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
               3.05218674e-11 * T3 - 1.33195876e-15 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 8: O2
    result += y[8] *
              (+3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 9: N
    result += y[9] *
              (+2.45026800e+00 + 1.06614600e-04 * T - 7.46533700e-08 * T2 +
               1.87965200e-11 * T3 - 1.02598400e-15 * T4) *
              0.0713928749910759;
    // species 10: NH
    result += y[10] *
              (+3.38393047e+00 - 3.04401048e-04 * T + 1.07871576e-06 * T2 -
               5.39749068e-10 * T3 + 8.56574985e-14 * T4) *
              0.0666000666000666;
    // species 11: NH2
    result += y[11] *
              (+3.80751460e+00 + 1.74138848e-04 * T + 2.06281679e-06 * T2 -
               1.18308148e-09 * T3 + 2.00814234e-13 * T4) *
              0.0624102852150034;
    // species 12: NH3
    result += y[12] *
              (+2.46190400e+00 + 6.05916600e-03 * T - 2.00497700e-06 * T2 +
               3.13600300e-10 * T3 - 1.93831700e-14 * T4) *
              0.0587164582232400;
    // species 13: NNH
    result += y[13] *
              (+2.78024159e+00 + 4.51114118e-03 * T - 1.98147075e-06 * T2 +
               3.61161241e-10 * T3 - 1.55679242e-14 * T4) *
              0.0344566191165323;
    // species 14: N2H2
    result += y[14] *
              (+2.38388380e+00 + 6.63619559e-03 * T - 1.81669068e-06 * T2 -
               1.19497031e-10 * T3 + 9.31659255e-14 * T4) *
              0.0333000333000333;
    // species 15: N2H3
    result += y[15] *
              (+4.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
    // species 16: N2H4
    result += y[16] *
              (+4.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 17: H2NN
    result += y[17] *
              (+3.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 18: NO
    result += y[18] *
              (+3.24543500e+00 + 1.26913800e-03 * T - 5.01589000e-07 * T2 +
               9.16928300e-11 * T3 - 6.27541900e-15 * T4) *
              0.0333266679997334;
    // species 19: N2O
    result += y[19] *
              (+4.71897700e+00 + 2.87371400e-03 * T - 1.19749600e-06 * T2 +
               2.25055200e-10 * T3 - 1.57533700e-14 * T4) *
              0.0227205598345943;
    // species 20: NO2
    result += y[20] *
              (+4.68285900e+00 + 2.46242900e-03 * T - 1.04225900e-06 * T2 +
               1.97690200e-10 * T3 - 1.39171700e-14 * T4) *
              0.0217367677426367;
    // species 21: HNO
    result += y[21] *
              (+3.61514400e+00 + 3.21248600e-03 * T - 1.26033700e-06 * T2 +
               2.26729800e-10 * T3 - 1.53623600e-14 * T4) *
              0.0322435029341588;
    // species 23: HNOH
    result += y[23] *
              (+3.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 24: NH2OH
    result += y[24] *
              (+3.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 25: HONO
    result += y[25] *
              (+5.48689300e+00 + 4.21806500e-03 * T - 1.64914300e-06 * T2 +
               2.97187700e-10 * T3 - 2.02114800e-14 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+7.48347702e+00 + 2.57772064e-03 * T - 1.00945831e-06 * T2 +
               1.72314063e-10 * T3 - 1.07154008e-14 * T4) *
              0.0161279917424682;
    // species 29: HNO3
    result += y[29] *
              (+8.03098942e+00 + 4.46958589e-03 * T - 1.72459491e-06 * T2 +
               2.91556153e-10 * T3 - 1.80102702e-14 * T4) *
              0.0158699930172031;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    result += y[22] *
              (+2.53059000e+00 + 8.59603500e-03 * T - 5.47103000e-06 * T2 +
               2.27624900e-09 * T3 - 4.64807300e-13 * T4) *
              0.0312285303853601;
    // species 26: HNO2
    result += y[26] *
              (+1.93483800e+00 + 1.01003600e-02 * T - 4.96461600e-06 * T2 +
               8.70112000e-10 * T3 - 2.32413500e-15 * T4) *
              0.0212707123561568;
  } else {
    // species 22: H2NO
    result += y[22] *
              (+5.67334600e+00 + 2.29883700e-03 * T - 1.77444600e-07 * T2 -
               1.10348200e-10 * T3 + 1.85976200e-14 * T4) *
              0.0312285303853601;
    // species 26: HNO2
    result += y[26] *
              (+6.47963000e+00 + 1.99527400e-03 * T - 1.74038700e-07 * T2 -
               9.69587200e-11 * T3 + 1.70148000e-14 * T4) *
              0.0212707123561568;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    result += y[27] *
              (+3.33656431e+00 + 2.67682939e-03 * T + 5.61801303e-07 * T2 -
               1.11362279e-09 * T3 + 2.84076438e-13 * T4) *
              0.0322435029341588;
  } else {
    // species 27: HON
    result += y[27] *
              (+3.78577430e+00 + 2.86062728e-03 * T - 1.02423922e-06 * T2 +
               1.64463139e-10 * T3 - 9.77943616e-15 * T4) *
              0.0322435029341588;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[30]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result += y[0] *
              (+2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
    // species 1: H
    result += y[1] *
              (+1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 2: H2
    result += y[2] *
              (+1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 3: O
    result += y[3] *
              (+2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+3.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
               5.79853643e-09 * T3 + 2.06237379e-12 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 8: O2
    result += y[8] *
              (+2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 9: N
    result += y[9] *
              (+1.50307100e+00 - 2.18001800e-05 * T + 5.42052900e-08 * T2 -
               5.64756000e-11 * T3 + 2.09990400e-14 * T4) *
              0.0713928749910759;
    // species 10: NH
    result += y[10] *
              (+2.49138447e+00 + 2.48105072e-04 * T - 1.22352658e-06 * T2 +
               1.97740127e-09 * T3 - 7.89210613e-13 * T4) *
              0.0666000666000666;
    // species 11: NH2
    result += y[11] *
              (+3.02590054e+00 - 9.53251946e-04 * T + 4.13467348e-06 * T2 -
               2.81816628e-09 * T3 + 6.73047183e-13 * T4) *
              0.0624102852150034;
    // species 12: NH3
    result += y[12] *
              (+1.20435200e+00 + 1.01147600e-02 * T - 1.46526500e-05 * T2 +
               1.44723500e-08 * T3 - 5.32850900e-12 * T4) *
              0.0587164582232400;
    // species 13: NNH
    result += y[13] *
              (+2.86231284e+00 - 4.41898698e-04 * T + 6.38522141e-06 * T2 -
               5.84138844e-09 * T3 + 1.69125822e-12 * T4) *
              0.0344566191165323;
    // species 14: N2H2
    result += y[14] *
              (+3.14915878e+00 - 4.82013543e-03 * T + 2.19606525e-05 * T2 -
               2.03662902e-08 * T3 + 6.25367200e-12 * T4) *
              0.0333000333000333;
    // species 15: N2H3
    result += y[15] *
              (+2.42125505e+00 + 1.34901590e-03 * T + 2.23459071e-05 * T2 -
               2.99727732e-08 * T3 + 1.20978970e-11 * T4) *
              0.0322185707842000;
    // species 16: N2H4
    result += y[16] *
              (+2.83472149e+00 - 6.49129555e-04 * T + 3.76848463e-05 * T2 -
               5.00709182e-08 * T3 + 2.03362064e-11 * T4) *
              0.0312051426075017;
    // species 17: H2NN
    result += y[17] *
              (+3.53204001e+00 - 7.32418578e-03 * T + 3.00803713e-05 * T2 -
               3.04000551e-08 * T3 + 1.04700639e-11 * T4) *
              0.0333000333000333;
    // species 18: NO
    result += y[18] *
              (+2.37654200e+00 + 1.25306300e-03 * T - 3.30275100e-06 * T2 +
               5.21781000e-09 * T3 - 2.44626300e-12 * T4) *
              0.0333266679997334;
    // species 19: N2O
    result += y[19] *
              (+1.54305800e+00 + 9.49219300e-03 * T - 9.79277500e-06 * T2 +
               6.26384500e-09 * T3 - 1.90182600e-12 * T4) *
              0.0227205598345943;
    // species 20: NO2
    result += y[20] *
              (+1.67060000e+00 + 7.83850100e-03 * T - 8.06386500e-06 * T2 +
               6.16171500e-09 * T3 - 2.32015000e-12 * T4) *
              0.0217367677426367;
    // species 21: HNO
    result += y[21] *
              (+1.78440300e+00 + 6.60964600e-03 * T - 9.30022300e-06 * T2 +
               9.43798000e-09 * T3 - 3.75314600e-12 * T4) *
              0.0322435029341588;
    // species 23: HNOH
    result += y[23] *
              (+2.95608248e+00 - 3.02611020e-03 * T + 2.56874396e-05 * T2 -
               3.15645120e-08 * T3 + 1.24084574e-11 * T4) *
              0.0312285303853601;
    // species 24: NH2OH
    result += y[24] *
              (+2.21016092e+00 + 6.19671676e-03 * T + 1.10594948e-05 * T2 -
               1.96668262e-08 * T3 + 8.82516590e-12 * T4) *
              0.0302755071147442;
    // species 25: HONO
    result += y[25] *
              (+1.29041300e+00 + 1.40992200e-02 * T - 1.36787200e-05 * T2 +
               7.49878000e-09 * T3 - 1.87690500e-12 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+1.17359330e+00 + 1.04902685e-02 * T + 1.10472669e-05 * T2 -
               2.81561867e-08 * T3 + 1.36583960e-11 * T4) *
              0.0161279917424682;
    // species 29: HNO3
    result += y[29] *
              (+6.93291540e-01 + 1.90167702e-02 * T - 8.25176697e-06 * T2 -
               6.06113827e-09 * T3 + 4.65236978e-12 * T4) *
              0.0158699930172031;
  } else {
    // species 0: N2
    result += y[0] *
              (+1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
    // species 1: H
    result += y[1] *
              (+1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 2: H2
    result += y[2] *
              (+2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 3: O
    result += y[3] *
              (+1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 4: OH
    result += y[4] *
              (+1.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
               3.05218674e-11 * T3 - 1.33195876e-15 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 8: O2
    result += y[8] *
              (+2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 9: N
    result += y[9] *
              (+1.45026800e+00 + 1.06614600e-04 * T - 7.46533700e-08 * T2 +
               1.87965200e-11 * T3 - 1.02598400e-15 * T4) *
              0.0713928749910759;
    // species 10: NH
    result += y[10] *
              (+2.38393047e+00 - 3.04401048e-04 * T + 1.07871576e-06 * T2 -
               5.39749068e-10 * T3 + 8.56574985e-14 * T4) *
              0.0666000666000666;
    // species 11: NH2
    result += y[11] *
              (+2.80751460e+00 + 1.74138848e-04 * T + 2.06281679e-06 * T2 -
               1.18308148e-09 * T3 + 2.00814234e-13 * T4) *
              0.0624102852150034;
    // species 12: NH3
    result += y[12] *
              (+1.46190400e+00 + 6.05916600e-03 * T - 2.00497700e-06 * T2 +
               3.13600300e-10 * T3 - 1.93831700e-14 * T4) *
              0.0587164582232400;
    // species 13: NNH
    result += y[13] *
              (+1.78024159e+00 + 4.51114118e-03 * T - 1.98147075e-06 * T2 +
               3.61161241e-10 * T3 - 1.55679242e-14 * T4) *
              0.0344566191165323;
    // species 14: N2H2
    result += y[14] *
              (+1.38388380e+00 + 6.63619559e-03 * T - 1.81669068e-06 * T2 -
               1.19497031e-10 * T3 + 9.31659255e-14 * T4) *
              0.0333000333000333;
    // species 15: N2H3
    result += y[15] *
              (+3.04483566e+00 + 7.31130186e-03 * T - 2.47625799e-06 * T2 +
               3.83733021e-10 * T3 - 2.23107573e-14 * T4) *
              0.0322185707842000;
    // species 16: N2H4
    result += y[16] *
              (+3.93957357e+00 + 8.75017187e-03 * T - 2.99399058e-06 * T2 +
               4.67278418e-10 * T3 - 2.73068599e-14 * T4) *
              0.0312051426075017;
    // species 17: H2NN
    result += y[17] *
              (+2.05903670e+00 + 6.18382347e-03 * T - 2.22171165e-06 * T2 +
               3.58539206e-10 * T3 - 2.14532905e-14 * T4) *
              0.0333000333000333;
    // species 18: NO
    result += y[18] *
              (+2.24543500e+00 + 1.26913800e-03 * T - 5.01589000e-07 * T2 +
               9.16928300e-11 * T3 - 6.27541900e-15 * T4) *
              0.0333266679997334;
    // species 19: N2O
    result += y[19] *
              (+3.71897700e+00 + 2.87371400e-03 * T - 1.19749600e-06 * T2 +
               2.25055200e-10 * T3 - 1.57533700e-14 * T4) *
              0.0227205598345943;
    // species 20: NO2
    result += y[20] *
              (+3.68285900e+00 + 2.46242900e-03 * T - 1.04225900e-06 * T2 +
               1.97690200e-10 * T3 - 1.39171700e-14 * T4) *
              0.0217367677426367;
    // species 21: HNO
    result += y[21] *
              (+2.61514400e+00 + 3.21248600e-03 * T - 1.26033700e-06 * T2 +
               2.26729800e-10 * T3 - 1.53623600e-14 * T4) *
              0.0322435029341588;
    // species 23: HNOH
    result += y[23] *
              (+2.98321933e+00 + 4.88846374e-03 * T - 1.65086637e-06 * T2 +
               2.55371446e-10 * T3 - 1.48308561e-14 * T4) *
              0.0312285303853601;
    // species 24: NH2OH
    result += y[24] *
              (+2.88112502e+00 + 8.15708448e-03 * T - 2.82615576e-06 * T2 +
               4.37930933e-10 * T3 - 2.52724604e-14 * T4) *
              0.0302755071147442;
    // species 25: HONO
    result += y[25] *
              (+4.48689300e+00 + 4.21806500e-03 * T - 1.64914300e-06 * T2 +
               2.97187700e-10 * T3 - 2.02114800e-14 * T4) *
              0.0212707123561568;
    // species 28: NO3
    result += y[28] *
              (+6.48347702e+00 + 2.57772064e-03 * T - 1.00945831e-06 * T2 +
               1.72314063e-10 * T3 - 1.07154008e-14 * T4) *
              0.0161279917424682;
    // species 29: HNO3
    result += y[29] *
              (+7.03098942e+00 + 4.46958589e-03 * T - 1.72459491e-06 * T2 +
               2.91556153e-10 * T3 - 1.80102702e-14 * T4) *
              0.0158699930172031;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    result += y[22] *
              (+1.53059000e+00 + 8.59603500e-03 * T - 5.47103000e-06 * T2 +
               2.27624900e-09 * T3 - 4.64807300e-13 * T4) *
              0.0312285303853601;
    // species 26: HNO2
    result += y[26] *
              (+9.34838000e-01 + 1.01003600e-02 * T - 4.96461600e-06 * T2 +
               8.70112000e-10 * T3 - 2.32413500e-15 * T4) *
              0.0212707123561568;
  } else {
    // species 22: H2NO
    result += y[22] *
              (+4.67334600e+00 + 2.29883700e-03 * T - 1.77444600e-07 * T2 -
               1.10348200e-10 * T3 + 1.85976200e-14 * T4) *
              0.0312285303853601;
    // species 26: HNO2
    result += y[26] *
              (+5.47963000e+00 + 1.99527400e-03 * T - 1.74038700e-07 * T2 -
               9.69587200e-11 * T3 + 1.70148000e-14 * T4) *
              0.0212707123561568;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    result += y[27] *
              (+2.33656431e+00 + 2.67682939e-03 * T + 5.61801303e-07 * T2 -
               1.11362279e-09 * T3 + 2.84076438e-13 * T4) *
              0.0322435029341588;
  } else {
    // species 27: HON
    result += y[27] *
              (+2.78577430e+00 + 2.86062728e-03 * T - 1.02423922e-06 * T2 +
               1.64463139e-10 * T3 - 9.77943616e-15 * T4) *
              0.0322435029341588;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[30];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
    // species 1: H
    result +=
      y[1] *
      (+2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: H2
    result +=
      y[2] *
      (+2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 3: O
    result +=
      y[3] *
      (+3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+4.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
       1.44963411e-09 * T3 + 4.12474758e-13 * T4 + 3.38153812e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 8: O2
    result +=
      y[8] *
      (+3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 9: N
    result +=
      y[9] *
      (+2.50307100e+00 - 1.09000900e-05 * T + 1.80684300e-08 * T2 -
       1.41189000e-11 * T3 + 4.19980800e-15 * T4 + 5.60989000e+04 * invT) *
      0.0713928749910759;
    // species 10: NH
    result +=
      y[10] *
      (+3.49138447e+00 + 1.24052536e-04 * T - 4.07842193e-07 * T2 +
       4.94350317e-10 * T3 - 1.57842123e-13 * T4 + 4.17851517e+04 * invT) *
      0.0666000666000666;
    // species 11: NH2
    result +=
      y[11] *
      (+4.02590054e+00 - 4.76625973e-04 * T + 1.37822449e-06 * T2 -
       7.04541570e-10 * T3 + 1.34609437e-13 * T4 + 2.12447390e+04 * invT) *
      0.0624102852150034;
    // species 12: NH3
    result +=
      y[12] *
      (+2.20435200e+00 + 5.05738000e-03 * T - 4.88421667e-06 * T2 +
       3.61808750e-09 * T3 - 1.06570180e-12 * T4 - 6.52548800e+03 * invT) *
      0.0587164582232400;
    // species 13: NNH
    result +=
      y[13] *
      (+3.86231284e+00 - 2.20949349e-04 * T + 2.12840714e-06 * T2 -
       1.46034711e-09 * T3 + 3.38251644e-13 * T4 + 2.91621298e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H2
    result +=
      y[14] *
      (+4.14915878e+00 - 2.41006771e-03 * T + 7.32021750e-06 * T2 -
       5.09157255e-09 * T3 + 1.25073440e-12 * T4 + 2.32874597e+04 * invT) *
      0.0333000333000333;
    // species 15: N2H3
    result +=
      y[15] *
      (+3.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.53056139e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H4
    result +=
      y[16] *
      (+3.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 17: H2NN
    result +=
      y[17] *
      (+4.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 18: NO
    result +=
      y[18] *
      (+3.37654200e+00 + 6.26531500e-04 * T - 1.10091700e-06 * T2 +
       1.30445250e-09 * T3 - 4.89252600e-13 * T4 + 9.81796100e+03 * invT) *
      0.0333266679997334;
    // species 19: N2O
    result +=
      y[19] *
      (+2.54305800e+00 + 4.74609650e-03 * T - 3.26425833e-06 * T2 +
       1.56596125e-09 * T3 - 3.80365200e-13 * T4 + 8.76510000e+03 * invT) *
      0.0227205598345943;
    // species 20: NO2
    result +=
      y[20] *
      (+2.67060000e+00 + 3.91925050e-03 * T - 2.68795500e-06 * T2 +
       1.54042875e-09 * T3 - 4.64030000e-13 * T4 + 2.89629100e+03 * invT) *
      0.0217367677426367;
    // species 21: HNO
    result +=
      y[21] *
      (+2.78440300e+00 + 3.30482300e-03 * T - 3.10007433e-06 * T2 +
       2.35949500e-09 * T3 - 7.50629200e-13 * T4 + 1.09187800e+04 * invT) *
      0.0322435029341588;
    // species 23: HNOH
    result +=
      y[23] *
      (+3.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 24: NH2OH
    result +=
      y[24] *
      (+3.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 25: HONO
    result +=
      y[25] *
      (+2.29041300e+00 + 7.04961000e-03 * T - 4.55957333e-06 * T2 +
       1.87469500e-09 * T3 - 3.75381000e-13 * T4 - 1.04319500e+04 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+2.17359330e+00 + 5.24513425e-03 * T + 3.68242230e-06 * T2 -
       7.03904667e-09 * T3 + 2.73167920e-12 * T4 + 7.81290905e+03 * invT) *
      0.0161279917424682;
    // species 29: HNO3
    result +=
      y[29] *
      (+1.69329154e+00 + 9.50838510e-03 * T - 2.75058899e-06 * T2 -
       1.51528457e-09 * T3 + 9.30473956e-13 * T4 - 1.74198909e+04 * invT) *
      0.0158699930172031;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
    // species 1: H
    result +=
      y[1] *
      (+2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: H2
    result +=
      y[2] *
      (+3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 3: O
    result +=
      y[3] *
      (+2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+2.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
       7.63046685e-12 * T3 - 2.66391752e-16 * T4 + 3.71885774e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 8: O2
    result +=
      y[8] *
      (+3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 9: N
    result +=
      y[9] *
      (+2.45026800e+00 + 5.33073000e-05 * T - 2.48844567e-08 * T2 +
       4.69913000e-12 * T3 - 2.05196800e-16 * T4 + 5.61160400e+04 * invT) *
      0.0713928749910759;
    // species 10: NH
    result +=
      y[10] *
      (+3.38393047e+00 - 1.52200524e-04 * T + 3.59571920e-07 * T2 -
       1.34937267e-10 * T3 + 1.71314997e-14 * T4 + 4.18557586e+04 * invT) *
      0.0666000666000666;
    // species 11: NH2
    result +=
      y[11] *
      (+3.80751460e+00 + 8.70694240e-05 * T + 6.87605597e-07 * T2 -
       2.95770370e-10 * T3 + 4.01628468e-14 * T4 + 2.12757238e+04 * invT) *
      0.0624102852150034;
    // species 12: NH3
    result +=
      y[12] *
      (+2.46190400e+00 + 3.02958300e-03 * T - 6.68325667e-07 * T2 +
       7.84000750e-11 * T3 - 3.87663400e-15 * T4 - 6.49327000e+03 * invT) *
      0.0587164582232400;
    // species 13: NNH
    result +=
      y[13] *
      (+2.78024159e+00 + 2.25557059e-03 * T - 6.60490250e-07 * T2 +
       9.02903103e-11 * T3 - 3.11358484e-15 * T4 + 2.93473063e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H2
    result +=
      y[14] *
      (+2.38388380e+00 + 3.31809780e-03 * T - 6.05563560e-07 * T2 -
       2.98742577e-11 * T3 + 1.86331851e-14 * T4 + 2.34207532e+04 * invT) *
      0.0333000333000333;
    // species 15: N2H3
    result +=
      y[15] *
      (+4.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.48098603e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H4
    result +=
      y[16] *
      (+4.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 17: H2NN
    result +=
      y[17] *
      (+3.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 18: NO
    result +=
      y[18] *
      (+3.24543500e+00 + 6.34569000e-04 * T - 1.67196333e-07 * T2 +
       2.29232075e-11 * T3 - 1.25508380e-15 * T4 + 9.80084000e+03 * invT) *
      0.0333266679997334;
    // species 19: N2O
    result +=
      y[19] *
      (+4.71897700e+00 + 1.43685700e-03 * T - 3.99165333e-07 * T2 +
       5.62638000e-11 * T3 - 3.15067400e-15 * T4 + 8.16581100e+03 * invT) *
      0.0227205598345943;
    // species 20: NO2
    result +=
      y[20] *
      (+4.68285900e+00 + 1.23121450e-03 * T - 3.47419667e-07 * T2 +
       4.94225500e-11 * T3 - 2.78343400e-15 * T4 + 2.26129200e+03 * invT) *
      0.0217367677426367;
    // species 21: HNO
    result +=
      y[21] *
      (+3.61514400e+00 + 1.60624300e-03 * T - 4.20112333e-07 * T2 +
       5.66824500e-11 * T3 - 3.07247200e-15 * T4 + 1.06619100e+04 * invT) *
      0.0322435029341588;
    // species 23: HNOH
    result +=
      y[23] *
      (+3.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 24: NH2OH
    result +=
      y[24] *
      (+3.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 25: HONO
    result +=
      y[25] *
      (+5.48689300e+00 + 2.10903250e-03 * T - 5.49714333e-07 * T2 +
       7.42969250e-11 * T3 - 4.04229600e-15 * T4 - 1.12686500e+04 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+7.48347702e+00 + 1.28886032e-03 * T - 3.36486103e-07 * T2 +
       4.30785157e-11 * T3 - 2.14308016e-15 * T4 + 6.12990474e+03 * invT) *
      0.0161279917424682;
    // species 29: HNO3
    result +=
      y[29] *
      (+8.03098942e+00 + 2.23479294e-03 * T - 5.74864970e-07 * T2 +
       7.28890383e-11 * T3 - 3.60205404e-15 * T4 - 1.93138183e+04 * invT) *
      0.0158699930172031;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    result +=
      y[22] *
      (+2.53059000e+00 + 4.29801750e-03 * T - 1.82367667e-06 * T2 +
       5.69062250e-10 * T3 - 9.29614600e-14 * T4 + 6.86803000e+03 * invT) *
      0.0312285303853601;
    // species 26: HNO2
    result +=
      y[26] *
      (+1.93483800e+00 + 5.05018000e-03 * T - 1.65487200e-06 * T2 +
       2.17528000e-10 * T3 - 4.64827000e-16 * T4 - 5.91571591e+03 * invT) *
      0.0212707123561568;
  } else {
    // species 22: H2NO
    result +=
      y[22] *
      (+5.67334600e+00 + 1.14941850e-03 * T - 5.91482000e-08 * T2 -
       2.75870500e-11 * T3 + 3.71952400e-15 * T4 + 5.56932500e+03 * invT) *
      0.0312285303853601;
    // species 26: HNO2
    result +=
      y[26] *
      (+6.47963000e+00 + 9.97637000e-04 * T - 5.80129000e-08 * T2 -
       2.42396800e-11 * T3 + 3.40296000e-15 * T4 - 7.80950291e+03 * invT) *
      0.0212707123561568;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    result +=
      y[27] *
      (+3.33656431e+00 + 1.33841470e-03 * T + 1.87267101e-07 * T2 -
       2.78405697e-10 * T3 + 5.68152876e-14 * T4 + 2.95979751e+04 * invT) *
      0.0322435029341588;
  } else {
    // species 27: HON
    result +=
      y[27] *
      (+3.78577430e+00 + 1.43031364e-03 * T - 3.41413073e-07 * T2 +
       4.11157848e-11 * T3 - 1.95588723e-15 * T4 + 2.93319701e+04 * invT) *
      0.0322435029341588;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[30];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 30; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: N2
    result +=
      y[0] *
      (+2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
    // species 1: H
    result +=
      y[1] *
      (+1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: H2
    result +=
      y[2] *
      (+1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 3: O
    result +=
      y[3] *
      (+2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+3.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
       1.44963411e-09 * T3 + 4.12474758e-13 * T4 + 3.38153812e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 8: O2
    result +=
      y[8] *
      (+2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 9: N
    result +=
      y[9] *
      (+1.50307100e+00 - 1.09000900e-05 * T + 1.80684300e-08 * T2 -
       1.41189000e-11 * T3 + 4.19980800e-15 * T4 + 5.60989000e+04 * invT) *
      0.0713928749910759;
    // species 10: NH
    result +=
      y[10] *
      (+2.49138447e+00 + 1.24052536e-04 * T - 4.07842193e-07 * T2 +
       4.94350317e-10 * T3 - 1.57842123e-13 * T4 + 4.17851517e+04 * invT) *
      0.0666000666000666;
    // species 11: NH2
    result +=
      y[11] *
      (+3.02590054e+00 - 4.76625973e-04 * T + 1.37822449e-06 * T2 -
       7.04541570e-10 * T3 + 1.34609437e-13 * T4 + 2.12447390e+04 * invT) *
      0.0624102852150034;
    // species 12: NH3
    result +=
      y[12] *
      (+1.20435200e+00 + 5.05738000e-03 * T - 4.88421667e-06 * T2 +
       3.61808750e-09 * T3 - 1.06570180e-12 * T4 - 6.52548800e+03 * invT) *
      0.0587164582232400;
    // species 13: NNH
    result +=
      y[13] *
      (+2.86231284e+00 - 2.20949349e-04 * T + 2.12840714e-06 * T2 -
       1.46034711e-09 * T3 + 3.38251644e-13 * T4 + 2.91621298e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H2
    result +=
      y[14] *
      (+3.14915878e+00 - 2.41006771e-03 * T + 7.32021750e-06 * T2 -
       5.09157255e-09 * T3 + 1.25073440e-12 * T4 + 2.32874597e+04 * invT) *
      0.0333000333000333;
    // species 15: N2H3
    result +=
      y[15] *
      (+2.42125505e+00 + 6.74507950e-04 * T + 7.44863570e-06 * T2 -
       7.49319330e-09 * T3 + 2.41957940e-12 * T4 + 2.53056139e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H4
    result +=
      y[16] *
      (+2.83472149e+00 - 3.24564777e-04 * T + 1.25616154e-05 * T2 -
       1.25177296e-08 * T3 + 4.06724128e-12 * T4 + 1.00893925e+04 * invT) *
      0.0312051426075017;
    // species 17: H2NN
    result +=
      y[17] *
      (+3.53204001e+00 - 3.66209289e-03 * T + 1.00267904e-05 * T2 -
       7.60001377e-09 * T3 + 2.09401278e-12 * T4 + 3.49580003e+04 * invT) *
      0.0333000333000333;
    // species 18: NO
    result +=
      y[18] *
      (+2.37654200e+00 + 6.26531500e-04 * T - 1.10091700e-06 * T2 +
       1.30445250e-09 * T3 - 4.89252600e-13 * T4 + 9.81796100e+03 * invT) *
      0.0333266679997334;
    // species 19: N2O
    result +=
      y[19] *
      (+1.54305800e+00 + 4.74609650e-03 * T - 3.26425833e-06 * T2 +
       1.56596125e-09 * T3 - 3.80365200e-13 * T4 + 8.76510000e+03 * invT) *
      0.0227205598345943;
    // species 20: NO2
    result +=
      y[20] *
      (+1.67060000e+00 + 3.91925050e-03 * T - 2.68795500e-06 * T2 +
       1.54042875e-09 * T3 - 4.64030000e-13 * T4 + 2.89629100e+03 * invT) *
      0.0217367677426367;
    // species 21: HNO
    result +=
      y[21] *
      (+1.78440300e+00 + 3.30482300e-03 * T - 3.10007433e-06 * T2 +
       2.35949500e-09 * T3 - 7.50629200e-13 * T4 + 1.09187800e+04 * invT) *
      0.0322435029341588;
    // species 23: HNOH
    result +=
      y[23] *
      (+2.95608248e+00 - 1.51305510e-03 * T + 8.56247987e-06 * T2 -
       7.89112800e-09 * T3 + 2.48169148e-12 * T4 + 1.09199790e+04 * invT) *
      0.0312285303853601;
    // species 24: NH2OH
    result +=
      y[24] *
      (+2.21016092e+00 + 3.09835838e-03 * T + 3.68649827e-06 * T2 -
       4.91670655e-09 * T3 + 1.76503318e-12 * T4 - 6.58148481e+03 * invT) *
      0.0302755071147442;
    // species 25: HONO
    result +=
      y[25] *
      (+1.29041300e+00 + 7.04961000e-03 * T - 4.55957333e-06 * T2 +
       1.87469500e-09 * T3 - 3.75381000e-13 * T4 - 1.04319500e+04 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+1.17359330e+00 + 5.24513425e-03 * T + 3.68242230e-06 * T2 -
       7.03904667e-09 * T3 + 2.73167920e-12 * T4 + 7.81290905e+03 * invT) *
      0.0161279917424682;
    // species 29: HNO3
    result +=
      y[29] *
      (+6.93291540e-01 + 9.50838510e-03 * T - 2.75058899e-06 * T2 -
       1.51528457e-09 * T3 + 9.30473956e-13 * T4 - 1.74198909e+04 * invT) *
      0.0158699930172031;
  } else {
    // species 0: N2
    result +=
      y[0] *
      (+1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
    // species 1: H
    result +=
      y[1] *
      (+1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: H2
    result +=
      y[2] *
      (+2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 3: O
    result +=
      y[3] *
      (+1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 4: OH
    result +=
      y[4] *
      (+1.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
       7.63046685e-12 * T3 - 2.66391752e-16 * T4 + 3.71885774e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 8: O2
    result +=
      y[8] *
      (+2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 9: N
    result +=
      y[9] *
      (+1.45026800e+00 + 5.33073000e-05 * T - 2.48844567e-08 * T2 +
       4.69913000e-12 * T3 - 2.05196800e-16 * T4 + 5.61160400e+04 * invT) *
      0.0713928749910759;
    // species 10: NH
    result +=
      y[10] *
      (+2.38393047e+00 - 1.52200524e-04 * T + 3.59571920e-07 * T2 -
       1.34937267e-10 * T3 + 1.71314997e-14 * T4 + 4.18557586e+04 * invT) *
      0.0666000666000666;
    // species 11: NH2
    result +=
      y[11] *
      (+2.80751460e+00 + 8.70694240e-05 * T + 6.87605597e-07 * T2 -
       2.95770370e-10 * T3 + 4.01628468e-14 * T4 + 2.12757238e+04 * invT) *
      0.0624102852150034;
    // species 12: NH3
    result +=
      y[12] *
      (+1.46190400e+00 + 3.02958300e-03 * T - 6.68325667e-07 * T2 +
       7.84000750e-11 * T3 - 3.87663400e-15 * T4 - 6.49327000e+03 * invT) *
      0.0587164582232400;
    // species 13: NNH
    result +=
      y[13] *
      (+1.78024159e+00 + 2.25557059e-03 * T - 6.60490250e-07 * T2 +
       9.02903103e-11 * T3 - 3.11358484e-15 * T4 + 2.93473063e+04 * invT) *
      0.0344566191165323;
    // species 14: N2H2
    result +=
      y[14] *
      (+1.38388380e+00 + 3.31809780e-03 * T - 6.05563560e-07 * T2 -
       2.98742577e-11 * T3 + 1.86331851e-14 * T4 + 2.34207532e+04 * invT) *
      0.0333000333000333;
    // species 15: N2H3
    result +=
      y[15] *
      (+3.04483566e+00 + 3.65565093e-03 * T - 8.25419330e-07 * T2 +
       9.59332552e-11 * T3 - 4.46215146e-15 * T4 + 2.48098603e+04 * invT) *
      0.0322185707842000;
    // species 16: N2H4
    result +=
      y[16] *
      (+3.93957357e+00 + 4.37508594e-03 * T - 9.97996860e-07 * T2 +
       1.16819604e-10 * T3 - 5.46137198e-15 * T4 + 9.28265548e+03 * invT) *
      0.0312051426075017;
    // species 17: H2NN
    result +=
      y[17] *
      (+2.05903670e+00 + 3.09191173e-03 * T - 7.40570550e-07 * T2 +
       8.96348015e-11 * T3 - 4.29065810e-15 * T4 + 3.48530149e+04 * invT) *
      0.0333000333000333;
    // species 18: NO
    result +=
      y[18] *
      (+2.24543500e+00 + 6.34569000e-04 * T - 1.67196333e-07 * T2 +
       2.29232075e-11 * T3 - 1.25508380e-15 * T4 + 9.80084000e+03 * invT) *
      0.0333266679997334;
    // species 19: N2O
    result +=
      y[19] *
      (+3.71897700e+00 + 1.43685700e-03 * T - 3.99165333e-07 * T2 +
       5.62638000e-11 * T3 - 3.15067400e-15 * T4 + 8.16581100e+03 * invT) *
      0.0227205598345943;
    // species 20: NO2
    result +=
      y[20] *
      (+3.68285900e+00 + 1.23121450e-03 * T - 3.47419667e-07 * T2 +
       4.94225500e-11 * T3 - 2.78343400e-15 * T4 + 2.26129200e+03 * invT) *
      0.0217367677426367;
    // species 21: HNO
    result +=
      y[21] *
      (+2.61514400e+00 + 1.60624300e-03 * T - 4.20112333e-07 * T2 +
       5.66824500e-11 * T3 - 3.07247200e-15 * T4 + 1.06619100e+04 * invT) *
      0.0322435029341588;
    // species 23: HNOH
    result +=
      y[23] *
      (+2.98321933e+00 + 2.44423187e-03 * T - 5.50288790e-07 * T2 +
       6.38428615e-11 * T3 - 2.96617122e-15 * T4 + 1.05780106e+04 * invT) *
      0.0312285303853601;
    // species 24: NH2OH
    result +=
      y[24] *
      (+2.88112502e+00 + 4.07854224e-03 * T - 9.42051920e-07 * T2 +
       1.09482733e-10 * T3 - 5.05449208e-15 * T4 - 6.86018419e+03 * invT) *
      0.0302755071147442;
    // species 25: HONO
    result +=
      y[25] *
      (+4.48689300e+00 + 2.10903250e-03 * T - 5.49714333e-07 * T2 +
       7.42969250e-11 * T3 - 4.04229600e-15 * T4 - 1.12686500e+04 * invT) *
      0.0212707123561568;
    // species 28: NO3
    result +=
      y[28] *
      (+6.48347702e+00 + 1.28886032e-03 * T - 3.36486103e-07 * T2 +
       4.30785157e-11 * T3 - 2.14308016e-15 * T4 + 6.12990474e+03 * invT) *
      0.0161279917424682;
    // species 29: HNO3
    result +=
      y[29] *
      (+7.03098942e+00 + 2.23479294e-03 * T - 5.74864970e-07 * T2 +
       7.28890383e-11 * T3 - 3.60205404e-15 * T4 - 1.93138183e+04 * invT) *
      0.0158699930172031;
  }

  // species with midpoint at T=1500 kelvin
  if (T < 1500) {
    // species 22: H2NO
    result +=
      y[22] *
      (+1.53059000e+00 + 4.29801750e-03 * T - 1.82367667e-06 * T2 +
       5.69062250e-10 * T3 - 9.29614600e-14 * T4 + 6.86803000e+03 * invT) *
      0.0312285303853601;
    // species 26: HNO2
    result +=
      y[26] *
      (+9.34838000e-01 + 5.05018000e-03 * T - 1.65487200e-06 * T2 +
       2.17528000e-10 * T3 - 4.64827000e-16 * T4 - 5.91571591e+03 * invT) *
      0.0212707123561568;
  } else {
    // species 22: H2NO
    result +=
      y[22] *
      (+4.67334600e+00 + 1.14941850e-03 * T - 5.91482000e-08 * T2 -
       2.75870500e-11 * T3 + 3.71952400e-15 * T4 + 5.56932500e+03 * invT) *
      0.0312285303853601;
    // species 26: HNO2
    result +=
      y[26] *
      (+5.47963000e+00 + 9.97637000e-04 * T - 5.80129000e-08 * T2 -
       2.42396800e-11 * T3 + 3.40296000e-15 * T4 - 7.80950291e+03 * invT) *
      0.0212707123561568;
  }

  // species with midpoint at T=1671 kelvin
  if (T < 1671) {
    // species 27: HON
    result +=
      y[27] *
      (+2.33656431e+00 + 1.33841470e-03 * T + 1.87267101e-07 * T2 -
       2.78405697e-10 * T3 + 5.68152876e-14 * T4 + 2.95979751e+04 * invT) *
      0.0322435029341588;
  } else {
    // species 27: HON
    result +=
      y[27] *
      (+2.78577430e+00 + 1.43031364e-03 * T - 3.41413073e-07 * T2 +
       4.11157848e-11 * T3 - 1.95588723e-15 * T4 + 2.93319701e+04 * invT) *
      0.0322435029341588;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[30]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 30; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[30]; //  temporary storage
  amrex::Real x[30];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (28.014000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (2.016000 * YOW);
  x[3] = y[3] / (15.999000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (18.015000 * YOW);
  x[6] = y[6] / (33.006000 * YOW);
  x[7] = y[7] / (34.014000 * YOW);
  x[8] = y[8] / (31.998000 * YOW);
  x[9] = y[9] / (14.007000 * YOW);
  x[10] = y[10] / (15.015000 * YOW);
  x[11] = y[11] / (16.023000 * YOW);
  x[12] = y[12] / (17.031000 * YOW);
  x[13] = y[13] / (29.022000 * YOW);
  x[14] = y[14] / (30.030000 * YOW);
  x[15] = y[15] / (31.038000 * YOW);
  x[16] = y[16] / (32.046000 * YOW);
  x[17] = y[17] / (30.030000 * YOW);
  x[18] = y[18] / (30.006000 * YOW);
  x[19] = y[19] / (44.013000 * YOW);
  x[20] = y[20] / (46.005000 * YOW);
  x[21] = y[21] / (31.014000 * YOW);
  x[22] = y[22] / (32.022000 * YOW);
  x[23] = y[23] / (32.022000 * YOW);
  x[24] = y[24] / (33.030000 * YOW);
  x[25] = y[25] / (47.013000 * YOW);
  x[26] = y[26] / (47.013000 * YOW);
  x[27] = y[27] / (31.014000 * YOW);
  x[28] = y[28] / (62.004000 * YOW);
  x[29] = y[29] / (63.012000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 30; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 28.014000;                  // N2
  XW += x[1] * 1.008000;                   // H
  XW += x[2] * 2.016000;                   // H2
  XW += x[3] * 15.999000;                  // O
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 18.015000;                  // H2O
  XW += x[6] * 33.006000;                  // HO2
  XW += x[7] * 34.014000;                  // H2O2
  XW += x[8] * 31.998000;                  // O2
  XW += x[9] * 14.007000;                  // N
  XW += x[10] * 15.015000;                 // NH
  XW += x[11] * 16.023000;                 // NH2
  XW += x[12] * 17.031000;                 // NH3
  XW += x[13] * 29.022000;                 // NNH
  XW += x[14] * 30.030000;                 // N2H2
  XW += x[15] * 31.038000;                 // N2H3
  XW += x[16] * 32.046000;                 // N2H4
  XW += x[17] * 30.030000;                 // H2NN
  XW += x[18] * 30.006000;                 // NO
  XW += x[19] * 44.013000;                 // N2O
  XW += x[20] * 46.005000;                 // NO2
  XW += x[21] * 31.014000;                 // HNO
  XW += x[22] * 32.022000;                 // H2NO
  XW += x[23] * 32.022000;                 // HNOH
  XW += x[24] * 33.030000;                 // NH2OH
  XW += x[25] * 47.013000;                 // HONO
  XW += x[26] * 47.013000;                 // HNO2
  XW += x[27] * 31.014000;                 // HON
  XW += x[28] * 62.004000;                 // NO3
  XW += x[29] * 63.012000;                 // HNO3
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 1.008000;   // H
  W += c[2] * 2.016000;   // H2
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 31.998000;  // O2
  W += c[9] * 14.007000;  // N
  W += c[10] * 15.015000; // NH
  W += c[11] * 16.023000; // NH2
  W += c[12] * 17.031000; // NH3
  W += c[13] * 29.022000; // NNH
  W += c[14] * 30.030000; // N2H2
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 30.006000; // NO
  W += c[19] * 44.013000; // N2O
  W += c[20] * 46.005000; // NO2
  W += c[21] * 31.014000; // HNO
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 32.022000; // HNOH
  W += c[24] * 33.030000; // NH2OH
  W += c[25] * 47.013000; // HONO
  W += c[26] * 47.013000; // HNO2
  W += c[27] * 31.014000; // HON
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HNO3

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 28.014000;                    // N2
  XW += x[1] * 1.008000;                     // H
  XW += x[2] * 2.016000;                     // H2
  XW += x[3] * 15.999000;                    // O
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 18.015000;                    // H2O
  XW += x[6] * 33.006000;                    // HO2
  XW += x[7] * 34.014000;                    // H2O2
  XW += x[8] * 31.998000;                    // O2
  XW += x[9] * 14.007000;                    // N
  XW += x[10] * 15.015000;                   // NH
  XW += x[11] * 16.023000;                   // NH2
  XW += x[12] * 17.031000;                   // NH3
  XW += x[13] * 29.022000;                   // NNH
  XW += x[14] * 30.030000;                   // N2H2
  XW += x[15] * 31.038000;                   // N2H3
  XW += x[16] * 32.046000;                   // N2H4
  XW += x[17] * 30.030000;                   // H2NN
  XW += x[18] * 30.006000;                   // NO
  XW += x[19] * 44.013000;                   // N2O
  XW += x[20] * 46.005000;                   // NO2
  XW += x[21] * 31.014000;                   // HNO
  XW += x[22] * 32.022000;                   // H2NO
  XW += x[23] * 32.022000;                   // HNOH
  XW += x[24] * 33.030000;                   // NH2OH
  XW += x[25] * 47.013000;                   // HONO
  XW += x[26] * 47.013000;                   // HNO2
  XW += x[27] * 31.014000;                   // HON
  XW += x[28] * 62.004000;                   // NO3
  XW += x[29] * 63.012000;                   // HNO3
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 1.008000;   // H
  W += c[2] * 2.016000;   // H2
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 31.998000;  // O2
  W += c[9] * 14.007000;  // N
  W += c[10] * 15.015000; // NH
  W += c[11] * 16.023000; // NH2
  W += c[12] * 17.031000; // NH3
  W += c[13] * 29.022000; // NNH
  W += c[14] * 30.030000; // N2H2
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 30.006000; // NO
  W += c[19] * 44.013000; // N2O
  W += c[20] * 46.005000; // NO2
  W += c[21] * 31.014000; // HNO
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 32.022000; // HNOH
  W += c[24] * 33.030000; // NH2OH
  W += c[25] * 47.013000; // HONO
  W += c[26] * 47.013000; // HNO2
  W += c[27] * 31.014000; // HON
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HNO3

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 2.016000;   // H2
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 31.998000;  // O2
  XW += x[9] * 14.007000;  // N
  XW += x[10] * 15.015000; // NH
  XW += x[11] * 16.023000; // NH2
  XW += x[12] * 17.031000; // NH3
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 30.030000; // N2H2
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 30.006000; // NO
  XW += x[19] * 44.013000; // N2O
  XW += x[20] * 46.005000; // NO2
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 32.022000; // HNOH
  XW += x[24] * 33.030000; // NH2OH
  XW += x[25] * 47.013000; // HONO
  XW += x[26] * 47.013000; // HNO2
  XW += x[27] * 31.014000; // HON
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HNO3
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 28.014000;  // N2
  W += c[1] * 1.008000;   // H
  W += c[2] * 2.016000;   // H2
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 31.998000;  // O2
  W += c[9] * 14.007000;  // N
  W += c[10] * 15.015000; // NH
  W += c[11] * 16.023000; // NH2
  W += c[12] * 17.031000; // NH3
  W += c[13] * 29.022000; // NNH
  W += c[14] * 30.030000; // N2H2
  W += c[15] * 31.038000; // N2H3
  W += c[16] * 32.046000; // N2H4
  W += c[17] * 30.030000; // H2NN
  W += c[18] * 30.006000; // NO
  W += c[19] * 44.013000; // N2O
  W += c[20] * 46.005000; // NO2
  W += c[21] * 31.014000; // HNO
  W += c[22] * 32.022000; // H2NO
  W += c[23] * 32.022000; // HNOH
  W += c[24] * 33.030000; // NH2OH
  W += c[25] * 47.013000; // HONO
  W += c[26] * 47.013000; // HNO2
  W += c[27] * 31.014000; // HON
  W += c[28] * 62.004000; // NO3
  W += c[29] * 63.012000; // HNO3

  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 30; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 30; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 30; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 30; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 2.016000;   // H2
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 31.998000;  // O2
  XW += x[9] * 14.007000;  // N
  XW += x[10] * 15.015000; // NH
  XW += x[11] * 16.023000; // NH2
  XW += x[12] * 17.031000; // NH3
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 30.030000; // N2H2
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 30.006000; // NO
  XW += x[19] * 44.013000; // N2O
  XW += x[20] * 46.005000; // NO2
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 32.022000; // HNOH
  XW += x[24] * 33.030000; // NH2OH
  XW += x[25] * 47.013000; // HONO
  XW += x[26] * 47.013000; // HNO2
  XW += x[27] * 31.014000; // HON
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HNO3
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 28.014000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 2.016000 * XWinv;
  y[3] = x[3] * 15.999000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 18.015000 * XWinv;
  y[6] = x[6] * 33.006000 * XWinv;
  y[7] = x[7] * 34.014000 * XWinv;
  y[8] = x[8] * 31.998000 * XWinv;
  y[9] = x[9] * 14.007000 * XWinv;
  y[10] = x[10] * 15.015000 * XWinv;
  y[11] = x[11] * 16.023000 * XWinv;
  y[12] = x[12] * 17.031000 * XWinv;
  y[13] = x[13] * 29.022000 * XWinv;
  y[14] = x[14] * 30.030000 * XWinv;
  y[15] = x[15] * 31.038000 * XWinv;
  y[16] = x[16] * 32.046000 * XWinv;
  y[17] = x[17] * 30.030000 * XWinv;
  y[18] = x[18] * 30.006000 * XWinv;
  y[19] = x[19] * 44.013000 * XWinv;
  y[20] = x[20] * 46.005000 * XWinv;
  y[21] = x[21] * 31.014000 * XWinv;
  y[22] = x[22] * 32.022000 * XWinv;
  y[23] = x[23] * 32.022000 * XWinv;
  y[24] = x[24] * 33.030000 * XWinv;
  y[25] = x[25] * 47.013000 * XWinv;
  y[26] = x[26] * 47.013000 * XWinv;
  y[27] = x[27] * 31.014000 * XWinv;
  y[28] = x[28] * 62.004000 * XWinv;
  y[29] = x[29] * 63.012000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 2.016000;   // H2
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 31.998000;  // O2
  XW += x[9] * 14.007000;  // N
  XW += x[10] * 15.015000; // NH
  XW += x[11] * 16.023000; // NH2
  XW += x[12] * 17.031000; // NH3
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 30.030000; // N2H2
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 30.006000; // NO
  XW += x[19] * 44.013000; // N2O
  XW += x[20] * 46.005000; // NO2
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 32.022000; // HNOH
  XW += x[24] * 33.030000; // NH2OH
  XW += x[25] * 47.013000; // HONO
  XW += x[26] * 47.013000; // HNO2
  XW += x[27] * 31.014000; // HON
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HNO3
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 30; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 30; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 28.014000;  // N2
  CW += c[1] * 1.008000;   // H
  CW += c[2] * 2.016000;   // H2
  CW += c[3] * 15.999000;  // O
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 18.015000;  // H2O
  CW += c[6] * 33.006000;  // HO2
  CW += c[7] * 34.014000;  // H2O2
  CW += c[8] * 31.998000;  // O2
  CW += c[9] * 14.007000;  // N
  CW += c[10] * 15.015000; // NH
  CW += c[11] * 16.023000; // NH2
  CW += c[12] * 17.031000; // NH3
  CW += c[13] * 29.022000; // NNH
  CW += c[14] * 30.030000; // N2H2
  CW += c[15] * 31.038000; // N2H3
  CW += c[16] * 32.046000; // N2H4
  CW += c[17] * 30.030000; // H2NN
  CW += c[18] * 30.006000; // NO
  CW += c[19] * 44.013000; // N2O
  CW += c[20] * 46.005000; // NO2
  CW += c[21] * 31.014000; // HNO
  CW += c[22] * 32.022000; // H2NO
  CW += c[23] * 32.022000; // HNOH
  CW += c[24] * 33.030000; // NH2OH
  CW += c[25] * 47.013000; // HONO
  CW += c[26] * 47.013000; // HNO2
  CW += c[27] * 31.014000; // HON
  CW += c[28] * 62.004000; // NO3
  CW += c[29] * 63.012000; // HNO3
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 28.014000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 2.016000 * CWinv;
  y[3] = c[3] * 15.999000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 18.015000 * CWinv;
  y[6] = c[6] * 33.006000 * CWinv;
  y[7] = c[7] * 34.014000 * CWinv;
  y[8] = c[8] * 31.998000 * CWinv;
  y[9] = c[9] * 14.007000 * CWinv;
  y[10] = c[10] * 15.015000 * CWinv;
  y[11] = c[11] * 16.023000 * CWinv;
  y[12] = c[12] * 17.031000 * CWinv;
  y[13] = c[13] * 29.022000 * CWinv;
  y[14] = c[14] * 30.030000 * CWinv;
  y[15] = c[15] * 31.038000 * CWinv;
  y[16] = c[16] * 32.046000 * CWinv;
  y[17] = c[17] * 30.030000 * CWinv;
  y[18] = c[18] * 30.006000 * CWinv;
  y[19] = c[19] * 44.013000 * CWinv;
  y[20] = c[20] * 46.005000 * CWinv;
  y[21] = c[21] * 31.014000 * CWinv;
  y[22] = c[22] * 32.022000 * CWinv;
  y[23] = c[23] * 32.022000 * CWinv;
  y[24] = c[24] * 33.030000 * CWinv;
  y[25] = c[25] * 47.013000 * CWinv;
  y[26] = c[26] * 47.013000 * CWinv;
  y[27] = c[27] * 31.014000 * CWinv;
  y[28] = c[28] * 62.004000 * CWinv;
  y[29] = c[29] * 63.012000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 2.967966951578939e+06;  // N2
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 4.124237409798234e+07;  // H2
  cvms[3] *= 5.196863940342046e+06;  // O
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 4.615299815794193e+06;  // H2O
  cvms[6] *= 2.519076112874398e+06;  // HO2
  cvms[7] *= 2.444423654422661e+06;  // H2O2
  cvms[8] *= 2.598431970171023e+06;  // O2
  cvms[9] *= 5.935933903157878e+06;  // N
  cvms[10] *= 5.537437641127699e+06; // NH
  cvms[11] *= 5.189079834084279e+06; // NH2
  cvms[12] *= 4.881957969674852e+06; // NH3
  cvms[13] *= 2.864882715923520e+06; // NNH
  cvms[14] *= 2.768718820563850e+06; // N2H2
  cvms[15] *= 2.678801023955551e+06; // N2H3
  cvms[16] *= 2.594539917042139e+06; // N2H4
  cvms[17] *= 2.768718820563850e+06; // H2NN
  cvms[18] *= 2.770933352713870e+06; // NO
  cvms[19] *= 1.889092454082485e+06; // N2O
  cvms[20] *= 1.807295428356318e+06; // NO2
  cvms[21] *= 2.680873998243773e+06; // HNO
  cvms[22] *= 2.596484485089389e+06; // H2NO
  cvms[23] *= 2.596484485089389e+06; // HNOH
  cvms[24] *= 2.517245721511729e+06; // NH2OH
  cvms[25] *= 1.768545427467560e+06; // HONO
  cvms[26] *= 1.768545427467560e+06; // HNO2
  cvms[27] *= 2.680873998243773e+06; // HON
  cvms[28] *= 1.340955844486362e+06; // NO3
  cvms[29] *= 1.319504636918879e+06; // HNO3
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 2.967966951578939e+06;  // N2
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 4.124237409798234e+07;  // H2
  cpms[3] *= 5.196863940342046e+06;  // O
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 4.615299815794193e+06;  // H2O
  cpms[6] *= 2.519076112874398e+06;  // HO2
  cpms[7] *= 2.444423654422661e+06;  // H2O2
  cpms[8] *= 2.598431970171023e+06;  // O2
  cpms[9] *= 5.935933903157878e+06;  // N
  cpms[10] *= 5.537437641127699e+06; // NH
  cpms[11] *= 5.189079834084279e+06; // NH2
  cpms[12] *= 4.881957969674852e+06; // NH3
  cpms[13] *= 2.864882715923520e+06; // NNH
  cpms[14] *= 2.768718820563850e+06; // N2H2
  cpms[15] *= 2.678801023955551e+06; // N2H3
  cpms[16] *= 2.594539917042139e+06; // N2H4
  cpms[17] *= 2.768718820563850e+06; // H2NN
  cpms[18] *= 2.770933352713870e+06; // NO
  cpms[19] *= 1.889092454082485e+06; // N2O
  cpms[20] *= 1.807295428356318e+06; // NO2
  cpms[21] *= 2.680873998243773e+06; // HNO
  cpms[22] *= 2.596484485089389e+06; // H2NO
  cpms[23] *= 2.596484485089389e+06; // HNOH
  cpms[24] *= 2.517245721511729e+06; // NH2OH
  cpms[25] *= 1.768545427467560e+06; // HONO
  cpms[26] *= 1.768545427467560e+06; // HNO2
  cpms[27] *= 2.680873998243773e+06; // HON
  cpms[28] *= 1.340955844486362e+06; // NO3
  cpms[29] *= 1.319504636918879e+06; // HNO3
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 30; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 30; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 2.967966951578939e+06;  // N2
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 4.124237409798234e+07;  // H2
  sms[3] *= 5.196863940342046e+06;  // O
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 4.615299815794193e+06;  // H2O
  sms[6] *= 2.519076112874398e+06;  // HO2
  sms[7] *= 2.444423654422661e+06;  // H2O2
  sms[8] *= 2.598431970171023e+06;  // O2
  sms[9] *= 5.935933903157878e+06;  // N
  sms[10] *= 5.537437641127699e+06; // NH
  sms[11] *= 5.189079834084279e+06; // NH2
  sms[12] *= 4.881957969674852e+06; // NH3
  sms[13] *= 2.864882715923520e+06; // NNH
  sms[14] *= 2.768718820563850e+06; // N2H2
  sms[15] *= 2.678801023955551e+06; // N2H3
  sms[16] *= 2.594539917042139e+06; // N2H4
  sms[17] *= 2.768718820563850e+06; // H2NN
  sms[18] *= 2.770933352713870e+06; // NO
  sms[19] *= 1.889092454082485e+06; // N2O
  sms[20] *= 1.807295428356318e+06; // NO2
  sms[21] *= 2.680873998243773e+06; // HNO
  sms[22] *= 2.596484485089389e+06; // H2NO
  sms[23] *= 2.596484485089389e+06; // HNOH
  sms[24] *= 2.517245721511729e+06; // NH2OH
  sms[25] *= 1.768545427467560e+06; // HONO
  sms[26] *= 1.768545427467560e+06; // HNO2
  sms[27] *= 2.680873998243773e+06; // HON
  sms[28] *= 1.340955844486362e+06; // NO3
  sms[29] *= 1.319504636918879e+06; // HNO3
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[1] * sc[8];
  qr[0] = sc[6];

  // reaction 24: H2O2 (+M) <=> 2 OH (+M)
  qf[1] = sc[7];
  qr[1] = (sc[4] * sc[4]);

  // reaction 85: 2 NH2 (+M) <=> N2H4 (+M)
  qf[2] = (sc[11] * sc[11]);
  qr[2] = sc[16];

  // reaction 98: N2H3 (+M) <=> H + N2H2 (+M)
  qf[3] = sc[15];
  qr[3] = sc[1] * sc[14];

  // reaction 141: NH2OH (+M) <=> NH2 + OH (+M)
  qf[4] = sc[24];
  qr[4] = sc[4] * sc[11];

  // reaction 189: NO + OH (+M) <=> HONO (+M)
  qf[5] = sc[4] * sc[18];
  qr[5] = sc[25];

  // reaction 195: NO + O (+M) <=> NO2 (+M)
  qf[6] = sc[3] * sc[18];
  qr[6] = sc[20];

  // reaction 223: HNO2 (+M) <=> HONO (+M)
  qf[7] = sc[26];
  qr[7] = sc[25];

  // reaction 226: NO2 + O (+M) <=> NO3 (+M)
  qf[8] = sc[3] * sc[20];
  qr[8] = sc[28];

  // reaction 235: NO2 + OH (+M) <=> HNO3 (+M)
  qf[9] = sc[4] * sc[20];
  qr[9] = sc[29];

  // reaction 199: N2O (+M) <=> N2 + O (+M)
  qf[10] = sc[19];
  qr[10] = sc[0] * sc[3];

  // reaction 6: H2 + M <=> 2 H + M
  qf[11] = sc[2];
  qr[11] = (sc[1] * sc[1]);

  // reaction 7: 2 O + M <=> O2 + M
  qf[12] = (sc[3] * sc[3]);
  qr[12] = sc[8];

  // reaction 8: H + O + M <=> OH + M
  qf[13] = sc[1] * sc[3];
  qr[13] = sc[4];

  // reaction 9: H2O + M <=> H + OH + M
  qf[14] = sc[5];
  qr[14] = sc[1] * sc[4];

  // reaction 10: H2O + H2O <=> H + OH + H2O
  qf[15] = (sc[5] * sc[5]);
  qr[15] = sc[1] * sc[4] * sc[5];

  // reaction 18: 2 H + O2 <=> H2 + O2
  qf[16] = (sc[1] * sc[1]) * sc[8];
  qr[16] = sc[2] * sc[8];

  // reaction 20: H + O + O2 <=> OH + O2
  qf[17] = sc[1] * sc[3] * sc[8];
  qr[17] = sc[4] * sc[8];

  // reaction 21: H + OH + O2 <=> H2O + O2
  qf[18] = sc[1] * sc[4] * sc[8];
  qr[18] = sc[5] * sc[8];

  // reaction 30: N2 + M <=> 2 N + M
  qf[19] = sc[0];
  qr[19] = (sc[9] * sc[9]);

  // reaction 31: N + O + M <=> NO + M
  qf[20] = sc[3] * sc[9];
  qr[20] = sc[18];

  // reaction 52: NH2 + M <=> H + NH + M
  qf[21] = sc[11];
  qr[21] = sc[1] * sc[10];

  // reaction 73: N2H2 + M <=> H + NNH + M
  qf[22] = sc[14];
  qr[22] = sc[1] * sc[13];

  // reaction 128: H2NO + M <=> HNOH + M
  qf[23] = sc[22];
  qr[23] = sc[23];

  // reaction 129: HNOH + M <=> H + HNO + M
  qf[24] = sc[23];
  qr[24] = sc[1] * sc[21];

  // reaction 155: NH3 + M <=> H + NH2 + M
  qf[25] = sc[12];
  qr[25] = sc[1] * sc[11];

  // reaction 183: HON + M <=> H + NO + M
  qf[26] = sc[27];
  qr[26] = sc[1] * sc[18];

  // reaction 207: H2NO + M <=> H + HNO + M
  qf[27] = sc[22];
  qr[27] = sc[1] * sc[21];

  // reaction 232: NO3 + NO2 <=> NO + O2 + NO2
  qf[28] = sc[20] * sc[28];
  qr[28] = sc[8] * sc[18] * sc[20];

  // reaction 236: HO2 + NO + M <=> HNO3 + M
  qf[29] = sc[6] * sc[18];
  qr[29] = sc[29];

  // reaction 0: H + O2 <=> O + OH
  qf[30] = sc[1] * sc[8];
  qr[30] = sc[3] * sc[4];

  // reaction 1: H2 + O <=> H + OH
  qf[31] = sc[2] * sc[3];
  qr[31] = sc[1] * sc[4];

  // reaction 2: H2 + O <=> H + OH
  qf[32] = sc[2] * sc[3];
  qr[32] = sc[1] * sc[4];

  // reaction 3: H2 + OH <=> H + H2O
  qf[33] = sc[2] * sc[4];
  qr[33] = sc[1] * sc[5];

  // reaction 4: 2 OH <=> H2O + O
  qf[34] = (sc[4] * sc[4]);
  qr[34] = sc[3] * sc[5];

  // reaction 5: 2 OH <=> H2O + O
  qf[35] = (sc[4] * sc[4]);
  qr[35] = sc[3] * sc[5];

  // reaction 12: H + HO2 <=> H2 + O2
  qf[36] = sc[1] * sc[6];
  qr[36] = sc[2] * sc[8];

  // reaction 13: H + HO2 <=> 2 OH
  qf[37] = sc[1] * sc[6];
  qr[37] = (sc[4] * sc[4]);

  // reaction 14: H + HO2 <=> H2O + O
  qf[38] = sc[1] * sc[6];
  qr[38] = sc[3] * sc[5];

  // reaction 15: HO2 + O <=> O2 + OH
  qf[39] = sc[3] * sc[6];
  qr[39] = sc[4] * sc[8];

  // reaction 16: HO2 + OH <=> H2O + O2
  qf[40] = sc[4] * sc[6];
  qr[40] = sc[5] * sc[8];

  // reaction 17: HO2 + OH <=> H2O + O2
  qf[41] = sc[4] * sc[6];
  qr[41] = sc[5] * sc[8];

  // reaction 19: 2 H + O2 <=> 2 OH
  qf[42] = (sc[1] * sc[1]) * sc[8];
  qr[42] = (sc[4] * sc[4]);

  // reaction 22: 2 HO2 <=> H2O2 + O2
  qf[43] = (sc[6] * sc[6]);
  qr[43] = sc[7] * sc[8];

  // reaction 23: 2 HO2 <=> H2O2 + O2
  qf[44] = (sc[6] * sc[6]);
  qr[44] = sc[7] * sc[8];

  // reaction 25: H + H2O2 <=> H2O + OH
  qf[45] = sc[1] * sc[7];
  qr[45] = sc[4] * sc[5];

  // reaction 26: H + H2O2 <=> H2 + HO2
  qf[46] = sc[1] * sc[7];
  qr[46] = sc[2] * sc[6];

  // reaction 27: H2O2 + O <=> HO2 + OH
  qf[47] = sc[3] * sc[7];
  qr[47] = sc[4] * sc[6];

  // reaction 28: H2O2 + OH <=> H2O + HO2
  qf[48] = sc[4] * sc[7];
  qr[48] = sc[5] * sc[6];

  // reaction 29: H2O2 + OH <=> H2O + HO2
  qf[49] = sc[4] * sc[7];
  qr[49] = sc[5] * sc[6];

  // reaction 32: N + NO2 <=> N2O + O
  qf[50] = sc[9] * sc[20];
  qr[50] = sc[3] * sc[19];

  // reaction 33: N + O2 <=> NO + O
  qf[51] = sc[8] * sc[9];
  qr[51] = sc[3] * sc[18];

  // reaction 34: N + OH <=> H + NO
  qf[52] = sc[4] * sc[9];
  qr[52] = sc[1] * sc[18];

  // reaction 35: N + NO <=> N2 + O
  qf[53] = sc[9] * sc[18];
  qr[53] = sc[0] * sc[3];

  // reaction 36: H + NH <=> H2 + N
  qf[54] = sc[1] * sc[10];
  qr[54] = sc[2] * sc[9];

  // reaction 37: NH + O <=> H + NO
  qf[55] = sc[3] * sc[10];
  qr[55] = sc[1] * sc[18];

  // reaction 38: NH + O <=> N + OH
  qf[56] = sc[3] * sc[10];
  qr[56] = sc[4] * sc[9];

  // reaction 39: NH + OH <=> H + HNO
  qf[57] = sc[4] * sc[10];
  qr[57] = sc[1] * sc[21];

  // reaction 40: NH + OH <=> H2O + N
  qf[58] = sc[4] * sc[10];
  qr[58] = sc[5] * sc[9];

  // reaction 41: NH + O2 <=> HNO + O
  qf[59] = sc[8] * sc[10];
  qr[59] = sc[3] * sc[21];

  // reaction 42: NH + O2 <=> NO + OH
  qf[60] = sc[8] * sc[10];
  qr[60] = sc[4] * sc[18];

  // reaction 43: 2 NH => H2 + N2
  qf[61] = (sc[10] * sc[10]);
  qr[61] = 0.0;

  // reaction 44: 2 NH => 2 H + N2
  qf[62] = (sc[10] * sc[10]);
  qr[62] = 0.0;

  // reaction 45: N + NH <=> H + N2
  qf[63] = sc[9] * sc[10];
  qr[63] = sc[0] * sc[1];

  // reaction 46: NH + NO <=> H + N2O
  qf[64] = sc[10] * sc[18];
  qr[64] = sc[1] * sc[19];

  // reaction 47: NH + NO <=> N2 + OH
  qf[65] = sc[10] * sc[18];
  qr[65] = sc[0] * sc[4];

  // reaction 48: NH + NO2 <=> N2O + OH
  qf[66] = sc[10] * sc[20];
  qr[66] = sc[4] * sc[19];

  // reaction 49: NH + NO2 <=> HNO + NO
  qf[67] = sc[10] * sc[20];
  qr[67] = sc[18] * sc[21];

  // reaction 50: HONO + NH <=> NH2 + NO2
  qf[68] = sc[10] * sc[25];
  qr[68] = sc[11] * sc[20];

  // reaction 51: N2O + NH <=> HNO + N2
  qf[69] = sc[10] * sc[19];
  qr[69] = sc[0] * sc[21];

  // reaction 53: H + NH2 <=> H2 + NH
  qf[70] = sc[1] * sc[11];
  qr[70] = sc[2] * sc[10];

  // reaction 54: NH2 + O <=> NH + OH
  qf[71] = sc[3] * sc[11];
  qr[71] = sc[4] * sc[10];

  // reaction 55: NH2 + O <=> H + HNO
  qf[72] = sc[3] * sc[11];
  qr[72] = sc[1] * sc[21];

  // reaction 56: NH2 + O <=> H + HNO
  qf[73] = sc[3] * sc[11];
  qr[73] = sc[1] * sc[21];

  // reaction 57: NH2 + OH <=> H2O + NH
  qf[74] = sc[4] * sc[11];
  qr[74] = sc[5] * sc[10];

  // reaction 58: HO2 + NH2 <=> H2NO + OH
  qf[75] = sc[6] * sc[11];
  qr[75] = sc[4] * sc[22];

  // reaction 59: HO2 + NH2 <=> NH3 + O2
  qf[76] = sc[6] * sc[11];
  qr[76] = sc[8] * sc[12];

  // reaction 60: NH2 + O2 <=> H2NO + O
  qf[77] = sc[8] * sc[11];
  qr[77] = sc[3] * sc[22];

  // reaction 61: NH2 + O2 <=> HNO + OH
  qf[78] = sc[8] * sc[11];
  qr[78] = sc[4] * sc[21];

  // reaction 62: N + NH2 <=> 2 H + N2
  qf[79] = sc[9] * sc[11];
  qr[79] = sc[0] * (sc[1] * sc[1]);

  // reaction 63: NH2 + NO <=> NNH + OH
  qf[80] = sc[11] * sc[18];
  qr[80] = sc[4] * sc[13];

  // reaction 64: NH2 + NO <=> H2O + N2
  qf[81] = sc[11] * sc[18];
  qr[81] = sc[0] * sc[5];

  // reaction 65: NH2 + NO <=> H2O + N2
  qf[82] = sc[11] * sc[18];
  qr[82] = sc[0] * sc[5];

  // reaction 66: NH2 + NO2 <=> H2NO + NO
  qf[83] = sc[11] * sc[20];
  qr[83] = sc[18] * sc[22];

  // reaction 67: NH2 + NO2 <=> H2O + N2O
  qf[84] = sc[11] * sc[20];
  qr[84] = sc[5] * sc[19];

  // reaction 68: HNO + NH2 <=> NH3 + NO
  qf[85] = sc[11] * sc[21];
  qr[85] = sc[12] * sc[18];

  // reaction 69: HONO + NH2 <=> NH3 + NO2
  qf[86] = sc[11] * sc[25];
  qr[86] = sc[12] * sc[20];

  // reaction 70: 2 NH <=> N + NH2
  qf[87] = (sc[10] * sc[10]);
  qr[87] = sc[9] * sc[11];

  // reaction 71: 2 NH2 <=> NH + NH3
  qf[88] = (sc[11] * sc[11]);
  qr[88] = sc[10] * sc[12];

  // reaction 72: NH + NH2 <=> N + NH3
  qf[89] = sc[10] * sc[11];
  qr[89] = sc[9] * sc[12];

  // reaction 74: H + N2H2 <=> H2 + NNH
  qf[90] = sc[1] * sc[14];
  qr[90] = sc[2] * sc[13];

  // reaction 75: N2H2 + O <=> NH2 + NO
  qf[91] = sc[3] * sc[14];
  qr[91] = sc[11] * sc[18];

  // reaction 76: N2H2 + O <=> NNH + OH
  qf[92] = sc[3] * sc[14];
  qr[92] = sc[4] * sc[13];

  // reaction 77: N2H2 + OH <=> H2O + NNH
  qf[93] = sc[4] * sc[14];
  qr[93] = sc[5] * sc[13];

  // reaction 78: N2H2 + NO <=> N2O + NH2
  qf[94] = sc[14] * sc[18];
  qr[94] = sc[11] * sc[19];

  // reaction 79: N2H2 + NO2 <=> HONO + NNH
  qf[95] = sc[14] * sc[20];
  qr[95] = sc[13] * sc[25];

  // reaction 80: N2H2 + NH <=> NH2 + NNH
  qf[96] = sc[10] * sc[14];
  qr[96] = sc[11] * sc[13];

  // reaction 81: N2H2 + NH2 <=> NH3 + NNH
  qf[97] = sc[11] * sc[14];
  qr[97] = sc[12] * sc[13];

  // reaction 82: NH + NH2 <=> H + N2H2
  qf[98] = sc[10] * sc[11];
  qr[98] = sc[1] * sc[14];

  // reaction 83: 2 NH2 <=> H2 + N2H2
  qf[99] = (sc[11] * sc[11]);
  qr[99] = sc[2] * sc[14];

  // reaction 84: HO2 + N2H2 <=> H2O2 + NNH
  qf[100] = sc[6] * sc[14];
  qr[100] = sc[7] * sc[13];

  // reaction 86: N2H4 <=> H2 + N2H2
  qf[101] = sc[16];
  qr[101] = sc[2] * sc[14];

  // reaction 87: N2H4 <=> H + N2H3
  qf[102] = sc[16];
  qr[102] = sc[1] * sc[15];

  // reaction 88: H + N2H4 <=> H2 + N2H3
  qf[103] = sc[1] * sc[16];
  qr[103] = sc[2] * sc[15];

  // reaction 89: N2H4 + OH <=> H2O + N2H3
  qf[104] = sc[4] * sc[16];
  qr[104] = sc[5] * sc[15];

  // reaction 90: N2H4 + NH2 <=> N2H3 + NH3
  qf[105] = sc[11] * sc[16];
  qr[105] = sc[12] * sc[15];

  // reaction 91: N2H2 + N2H4 <=> 2 N2H3
  qf[106] = sc[14] * sc[16];
  qr[106] = (sc[15] * sc[15]);

  // reaction 92: N2H4 + NH <=> N2H3 + NH2
  qf[107] = sc[10] * sc[16];
  qr[107] = sc[11] * sc[15];

  // reaction 93: N2H4 + O <=> H2O + N2H2
  qf[108] = sc[3] * sc[16];
  qr[108] = sc[5] * sc[14];

  // reaction 94: N2H4 + O <=> N2H3 + OH
  qf[109] = sc[3] * sc[16];
  qr[109] = sc[4] * sc[15];

  // reaction 95: N2H4 + NO <=> HNO + N2H3
  qf[110] = sc[16] * sc[18];
  qr[110] = sc[15] * sc[21];

  // reaction 96: N2H4 + NO2 <=> HONO + N2H3
  qf[111] = sc[16] * sc[20];
  qr[111] = sc[15] * sc[25];

  // reaction 97: N2H4 + NO2 <=> HNO2 + N2H3
  qf[112] = sc[16] * sc[20];
  qr[112] = sc[15] * sc[26];

  // reaction 99: H + N2H3 <=> H2 + N2H2
  qf[113] = sc[1] * sc[15];
  qr[113] = sc[2] * sc[14];

  // reaction 100: H + N2H3 <=> H2 + H2NN
  qf[114] = sc[1] * sc[15];
  qr[114] = sc[2] * sc[17];

  // reaction 101: H + N2H3 <=> NH + NH3
  qf[115] = sc[1] * sc[15];
  qr[115] = sc[10] * sc[12];

  // reaction 102: N2H3 + O <=> N2H2 + OH
  qf[116] = sc[3] * sc[15];
  qr[116] = sc[4] * sc[14];

  // reaction 103: N2H3 + O <=> HNO + NH2
  qf[117] = sc[3] * sc[15];
  qr[117] = sc[11] * sc[21];

  // reaction 104: N2H3 + O => H + NH2 + NO
  qf[118] = sc[3] * sc[15];
  qr[118] = 0.0;

  // reaction 105: N2H3 + OH <=> H2O + N2H2
  qf[119] = sc[4] * sc[15];
  qr[119] = sc[5] * sc[14];

  // reaction 106: N2H3 + OH <=> H2NN + H2O
  qf[120] = sc[4] * sc[15];
  qr[120] = sc[5] * sc[17];

  // reaction 107: N2H3 + OH <=> HNO + NH3
  qf[121] = sc[4] * sc[15];
  qr[121] = sc[12] * sc[21];

  // reaction 108: HO2 + N2H3 <=> H2O2 + N2H2
  qf[122] = sc[6] * sc[15];
  qr[122] = sc[7] * sc[14];

  // reaction 109: HO2 + N2H3 <=> N2H4 + O2
  qf[123] = sc[6] * sc[15];
  qr[123] = sc[8] * sc[16];

  // reaction 110: N2H3 + NH2 <=> N2H2 + NH3
  qf[124] = sc[11] * sc[15];
  qr[124] = sc[12] * sc[14];

  // reaction 111: N2H3 + NH2 <=> H2NN + NH3
  qf[125] = sc[11] * sc[15];
  qr[125] = sc[12] * sc[17];

  // reaction 112: N2H3 + NH <=> N2H2 + NH2
  qf[126] = sc[10] * sc[15];
  qr[126] = sc[11] * sc[14];

  // reaction 113: N2H2 + N2H3 <=> N2H4 + NNH
  qf[127] = sc[14] * sc[15];
  qr[127] = sc[13] * sc[16];

  // reaction 114: 2 N2H3 <=> N2 + 2 NH3
  qf[128] = (sc[15] * sc[15]);
  qr[128] = sc[0] * (sc[12] * sc[12]);

  // reaction 115: 2 N2H2 <=> N2H3 + NNH
  qf[129] = (sc[14] * sc[14]);
  qr[129] = sc[13] * sc[15];

  // reaction 116: 2 NH2 <=> H2 + H2NN
  qf[130] = (sc[11] * sc[11]);
  qr[130] = sc[2] * sc[17];

  // reaction 117: H2NN <=> H + NNH
  qf[131] = sc[17];
  qr[131] = sc[1] * sc[13];

  // reaction 118: H + H2NN <=> H2 + NNH
  qf[132] = sc[1] * sc[17];
  qr[132] = sc[2] * sc[13];

  // reaction 119: H + H2NN <=> H + N2H2
  qf[133] = sc[1] * sc[17];
  qr[133] = sc[1] * sc[14];

  // reaction 120: H2NN + O <=> NNH + OH
  qf[134] = sc[3] * sc[17];
  qr[134] = sc[4] * sc[13];

  // reaction 121: H2NN + O <=> NH2 + NO
  qf[135] = sc[3] * sc[17];
  qr[135] = sc[11] * sc[18];

  // reaction 122: H2NN + OH <=> H2O + NNH
  qf[136] = sc[4] * sc[17];
  qr[136] = sc[5] * sc[13];

  // reaction 123: H2NN + OH => H + NH2 + NO
  qf[137] = sc[4] * sc[17];
  qr[137] = 0.0;

  // reaction 124: H2NN + HO2 => NH2 + NO + OH
  qf[138] = sc[6] * sc[17];
  qr[138] = 0.0;

  // reaction 125: H2NN + HO2 <=> H2O2 + NNH
  qf[139] = sc[6] * sc[17];
  qr[139] = sc[7] * sc[13];

  // reaction 126: H2NN + O2 <=> NH2 + NO2
  qf[140] = sc[8] * sc[17];
  qr[140] = sc[11] * sc[20];

  // reaction 127: H2NN + NH2 <=> NH3 + NNH
  qf[141] = sc[11] * sc[17];
  qr[141] = sc[12] * sc[13];

  // reaction 130: H + HNOH <=> NH2 + OH
  qf[142] = sc[1] * sc[23];
  qr[142] = sc[4] * sc[11];

  // reaction 131: H + HNOH <=> H2 + HNO
  qf[143] = sc[1] * sc[23];
  qr[143] = sc[2] * sc[21];

  // reaction 132: HNOH + O <=> HNO + OH
  qf[144] = sc[3] * sc[23];
  qr[144] = sc[4] * sc[21];

  // reaction 133: HNOH + O <=> HNO + OH
  qf[145] = sc[3] * sc[23];
  qr[145] = sc[4] * sc[21];

  // reaction 134: HNOH + OH <=> H2O + HNO
  qf[146] = sc[4] * sc[23];
  qr[146] = sc[5] * sc[21];

  // reaction 135: HNOH + HO2 <=> H2O2 + HNO
  qf[147] = sc[6] * sc[23];
  qr[147] = sc[7] * sc[21];

  // reaction 136: HNOH + O2 <=> HNO + HO2
  qf[148] = sc[8] * sc[23];
  qr[148] = sc[6] * sc[21];

  // reaction 137: HNOH + NH2 <=> N2H3 + OH
  qf[149] = sc[11] * sc[23];
  qr[149] = sc[4] * sc[15];

  // reaction 138: HNOH + NH2 <=> H2NN + H2O
  qf[150] = sc[11] * sc[23];
  qr[150] = sc[5] * sc[17];

  // reaction 139: HNOH + NH2 <=> HNO + NH3
  qf[151] = sc[11] * sc[23];
  qr[151] = sc[12] * sc[21];

  // reaction 140: HNOH + NO2 <=> HNO + HONO
  qf[152] = sc[20] * sc[23];
  qr[152] = sc[21] * sc[25];

  // reaction 142: H + NH2OH <=> H2 + HNOH
  qf[153] = sc[1] * sc[24];
  qr[153] = sc[2] * sc[23];

  // reaction 143: H + NH2OH <=> H2 + H2NO
  qf[154] = sc[1] * sc[24];
  qr[154] = sc[2] * sc[22];

  // reaction 144: NH2OH + O <=> HNOH + OH
  qf[155] = sc[3] * sc[24];
  qr[155] = sc[4] * sc[23];

  // reaction 145: NH2OH + O <=> H2NO + OH
  qf[156] = sc[3] * sc[24];
  qr[156] = sc[4] * sc[22];

  // reaction 146: NH2OH + OH <=> H2O + HNOH
  qf[157] = sc[4] * sc[24];
  qr[157] = sc[5] * sc[23];

  // reaction 147: NH2OH + OH <=> H2NO + H2O
  qf[158] = sc[4] * sc[24];
  qr[158] = sc[5] * sc[22];

  // reaction 148: NH2 + NH2OH <=> HNOH + NH3
  qf[159] = sc[11] * sc[24];
  qr[159] = sc[12] * sc[23];

  // reaction 149: NH2 + NH2OH <=> H2NO + NH3
  qf[160] = sc[11] * sc[24];
  qr[160] = sc[12] * sc[22];

  // reaction 150: NH + NH2OH <=> HNOH + NH2
  qf[161] = sc[10] * sc[24];
  qr[161] = sc[11] * sc[23];

  // reaction 151: NH + NH2OH <=> H2NO + NH2
  qf[162] = sc[10] * sc[24];
  qr[162] = sc[11] * sc[22];

  // reaction 152: HO2 + NH2OH <=> H2O2 + HNOH
  qf[163] = sc[6] * sc[24];
  qr[163] = sc[7] * sc[23];

  // reaction 153: HO2 + NH2OH <=> H2NO + H2O2
  qf[164] = sc[6] * sc[24];
  qr[164] = sc[7] * sc[22];

  // reaction 154: HNO + HNOH <=> NH2OH + NO
  qf[165] = sc[21] * sc[23];
  qr[165] = sc[18] * sc[24];

  // reaction 156: H + NH3 <=> H2 + NH2
  qf[166] = sc[1] * sc[12];
  qr[166] = sc[2] * sc[11];

  // reaction 157: NH3 + OH <=> H2O + NH2
  qf[167] = sc[4] * sc[12];
  qr[167] = sc[5] * sc[11];

  // reaction 158: HO2 + NH3 <=> H2O2 + NH2
  qf[168] = sc[6] * sc[12];
  qr[168] = sc[7] * sc[11];

  // reaction 159: NH3 + O <=> NH2 + OH
  qf[169] = sc[3] * sc[12];
  qr[169] = sc[4] * sc[11];

  // reaction 160: NH2 + NH3 <=> H2 + N2H3
  qf[170] = sc[11] * sc[12];
  qr[170] = sc[2] * sc[15];

  // reaction 161: NNH <=> H + N2
  qf[171] = sc[13];
  qr[171] = sc[0] * sc[1];

  // reaction 162: H + NNH <=> H2 + N2
  qf[172] = sc[1] * sc[13];
  qr[172] = sc[0] * sc[2];

  // reaction 163: NNH + OH <=> H2O + N2
  qf[173] = sc[4] * sc[13];
  qr[173] = sc[0] * sc[5];

  // reaction 164: NNH + NO <=> HNO + N2
  qf[174] = sc[13] * sc[18];
  qr[174] = sc[0] * sc[21];

  // reaction 165: NH + NNH <=> N2 + NH2
  qf[175] = sc[10] * sc[13];
  qr[175] = sc[0] * sc[11];

  // reaction 166: NH2 + NNH <=> N2 + NH3
  qf[176] = sc[11] * sc[13];
  qr[176] = sc[0] * sc[12];

  // reaction 167: NNH + O <=> H + N2O
  qf[177] = sc[3] * sc[13];
  qr[177] = sc[1] * sc[19];

  // reaction 168: NNH + O <=> NH + NO
  qf[178] = sc[3] * sc[13];
  qr[178] = sc[10] * sc[18];

  // reaction 169: NNH + O <=> N2 + OH
  qf[179] = sc[3] * sc[13];
  qr[179] = sc[0] * sc[4];

  // reaction 170: NNH + O2 <=> HO2 + N2
  qf[180] = sc[8] * sc[13];
  qr[180] = sc[0] * sc[6];

  // reaction 171: 2 NNH <=> N2 + N2H2
  qf[181] = (sc[13] * sc[13]);
  qr[181] = sc[0] * sc[14];

  // reaction 172: HNO <=> H + NO
  qf[182] = sc[21];
  qr[182] = sc[1] * sc[18];

  // reaction 173: HNO + O <=> NO + OH
  qf[183] = sc[3] * sc[21];
  qr[183] = sc[4] * sc[18];

  // reaction 174: H + HNO <=> H2 + NO
  qf[184] = sc[1] * sc[21];
  qr[184] = sc[2] * sc[18];

  // reaction 175: HNO + OH <=> H2O + NO
  qf[185] = sc[4] * sc[21];
  qr[185] = sc[5] * sc[18];

  // reaction 176: HNO + O2 <=> HO2 + NO
  qf[186] = sc[8] * sc[21];
  qr[186] = sc[6] * sc[18];

  // reaction 177: HNO + N <=> NH + NO
  qf[187] = sc[9] * sc[21];
  qr[187] = sc[10] * sc[18];

  // reaction 178: HNO + N <=> H + N2O
  qf[188] = sc[9] * sc[21];
  qr[188] = sc[1] * sc[19];

  // reaction 179: HNO + NH <=> NH2 + NO
  qf[189] = sc[10] * sc[21];
  qr[189] = sc[11] * sc[18];

  // reaction 180: HNO + NO <=> N2O + OH
  qf[190] = sc[18] * sc[21];
  qr[190] = sc[4] * sc[19];

  // reaction 181: HNO + NO2 <=> HONO + NO
  qf[191] = sc[20] * sc[21];
  qr[191] = sc[18] * sc[25];

  // reaction 182: 2 HNO <=> H2O + N2O
  qf[192] = (sc[21] * sc[21]);
  qr[192] = sc[5] * sc[19];

  // reaction 184: H + HON <=> H + HNO
  qf[193] = sc[1] * sc[27];
  qr[193] = sc[1] * sc[21];

  // reaction 185: H + HON <=> NH + OH
  qf[194] = sc[1] * sc[27];
  qr[194] = sc[4] * sc[10];

  // reaction 186: HON + O <=> NO + OH
  qf[195] = sc[3] * sc[27];
  qr[195] = sc[4] * sc[18];

  // reaction 187: HON + OH <=> H + HONO
  qf[196] = sc[4] * sc[27];
  qr[196] = sc[1] * sc[25];

  // reaction 188: HON + O2 <=> NO2 + OH
  qf[197] = sc[8] * sc[27];
  qr[197] = sc[4] * sc[20];

  // reaction 190: HO2 + NO <=> NO2 + OH
  qf[198] = sc[6] * sc[18];
  qr[198] = sc[4] * sc[20];

  // reaction 191: H2 + NO2 <=> H + HONO
  qf[199] = sc[2] * sc[20];
  qr[199] = sc[1] * sc[25];

  // reaction 192: H2 + NO2 <=> H + HNO2
  qf[200] = sc[2] * sc[20];
  qr[200] = sc[1] * sc[26];

  // reaction 193: H + NO2 <=> NO + OH
  qf[201] = sc[1] * sc[20];
  qr[201] = sc[4] * sc[18];

  // reaction 194: NO2 + O <=> NO + O2
  qf[202] = sc[3] * sc[20];
  qr[202] = sc[8] * sc[18];

  // reaction 196: 2 NO2 <=> 2 NO + O2
  qf[203] = (sc[20] * sc[20]);
  qr[203] = sc[8] * (sc[18] * sc[18]);

  // reaction 197: HO2 + NO2 <=> HONO + O2
  qf[204] = sc[6] * sc[20];
  qr[204] = sc[8] * sc[25];

  // reaction 198: HO2 + NO2 <=> HNO2 + O2
  qf[205] = sc[6] * sc[20];
  qr[205] = sc[8] * sc[26];

  // reaction 200: H + N2O <=> N2 + OH
  qf[206] = sc[1] * sc[19];
  qr[206] = sc[0] * sc[4];

  // reaction 201: H + N2O <=> N2 + OH
  qf[207] = sc[1] * sc[19];
  qr[207] = sc[0] * sc[4];

  // reaction 202: N2O + O <=> 2 NO
  qf[208] = sc[3] * sc[19];
  qr[208] = (sc[18] * sc[18]);

  // reaction 203: N2O + O <=> N2 + O2
  qf[209] = sc[3] * sc[19];
  qr[209] = sc[0] * sc[8];

  // reaction 204: N2O + OH <=> HO2 + N2
  qf[210] = sc[4] * sc[19];
  qr[210] = sc[0] * sc[6];

  // reaction 205: N2O + NO <=> N2 + NO2
  qf[211] = sc[18] * sc[19];
  qr[211] = sc[0] * sc[20];

  // reaction 206: N + N2O <=> N2 + NO
  qf[212] = sc[9] * sc[19];
  qr[212] = sc[0] * sc[18];

  // reaction 208: H + H2NO <=> H2 + HNO
  qf[213] = sc[1] * sc[22];
  qr[213] = sc[2] * sc[21];

  // reaction 209: H + H2NO <=> NH2 + OH
  qf[214] = sc[1] * sc[22];
  qr[214] = sc[4] * sc[11];

  // reaction 210: H2NO + O <=> HNO + OH
  qf[215] = sc[3] * sc[22];
  qr[215] = sc[4] * sc[21];

  // reaction 211: H2NO + OH <=> H2O + HNO
  qf[216] = sc[4] * sc[22];
  qr[216] = sc[5] * sc[21];

  // reaction 212: H2NO + NH2 <=> HNO + NH3
  qf[217] = sc[11] * sc[22];
  qr[217] = sc[12] * sc[21];

  // reaction 213: H2NO + HO2 <=> H2O2 + HNO
  qf[218] = sc[6] * sc[22];
  qr[218] = sc[7] * sc[21];

  // reaction 214: H2NO + O2 <=> HNO + HO2
  qf[219] = sc[8] * sc[22];
  qr[219] = sc[6] * sc[21];

  // reaction 215: H2NO + NO <=> 2 HNO
  qf[220] = sc[18] * sc[22];
  qr[220] = (sc[21] * sc[21]);

  // reaction 216: H2NO + NO2 <=> HNO + HONO
  qf[221] = sc[20] * sc[22];
  qr[221] = sc[21] * sc[25];

  // reaction 217: HONO + O <=> NO2 + OH
  qf[222] = sc[3] * sc[25];
  qr[222] = sc[4] * sc[20];

  // reaction 218: H + HONO <=> HNO + OH
  qf[223] = sc[1] * sc[25];
  qr[223] = sc[4] * sc[21];

  // reaction 219: H + HONO <=> H2O + NO
  qf[224] = sc[1] * sc[25];
  qr[224] = sc[5] * sc[18];

  // reaction 220: HONO + OH <=> H2O + NO2
  qf[225] = sc[4] * sc[25];
  qr[225] = sc[5] * sc[20];

  // reaction 221: HONO + NO2 <=> HNO3 + NO
  qf[226] = sc[20] * sc[25];
  qr[226] = sc[18] * sc[29];

  // reaction 222: 2 HONO <=> H2O + NO + NO2
  qf[227] = (sc[25] * sc[25]);
  qr[227] = sc[5] * sc[18] * sc[20];

  // reaction 224: HNO2 + O <=> NO2 + OH
  qf[228] = sc[3] * sc[26];
  qr[228] = sc[4] * sc[20];

  // reaction 225: HNO2 + OH <=> H2O + NO2
  qf[229] = sc[4] * sc[26];
  qr[229] = sc[5] * sc[20];

  // reaction 227: 2 NO2 <=> NO + NO3
  qf[230] = (sc[20] * sc[20]);
  qr[230] = sc[18] * sc[28];

  // reaction 228: H + NO3 <=> NO2 + OH
  qf[231] = sc[1] * sc[28];
  qr[231] = sc[4] * sc[20];

  // reaction 229: NO3 + O <=> NO2 + O2
  qf[232] = sc[3] * sc[28];
  qr[232] = sc[8] * sc[20];

  // reaction 230: NO3 + OH <=> HO2 + NO2
  qf[233] = sc[4] * sc[28];
  qr[233] = sc[6] * sc[20];

  // reaction 231: HO2 + NO3 <=> NO2 + O2 + OH
  qf[234] = sc[6] * sc[28];
  qr[234] = sc[4] * sc[8] * sc[20];

  // reaction 233: 2 NO3 <=> 2 NO2 + O2
  qf[235] = (sc[28] * sc[28]);
  qr[235] = sc[8] * (sc[20] * sc[20]);

  // reaction 234: HO2 + NO3 <=> HNO3 + O2
  qf[236] = sc[6] * sc[28];
  qr[236] = sc[8] * sc[29];

  // reaction 237: H + HNO3 <=> H2 + NO3
  qf[237] = sc[1] * sc[29];
  qr[237] = sc[2] * sc[28];

  // reaction 238: H + HNO3 <=> H2O + NO2
  qf[238] = sc[1] * sc[29];
  qr[238] = sc[5] * sc[20];

  // reaction 239: H + HNO3 <=> HONO + OH
  qf[239] = sc[1] * sc[29];
  qr[239] = sc[4] * sc[25];

  // reaction 240: HNO3 + OH <=> H2O + NO3
  qf[240] = sc[4] * sc[29];
  qr[240] = sc[5] * sc[28];

  // reaction 241: HNO3 + NH2 <=> NH3 + NO3
  qf[241] = sc[11] * sc[29];
  qr[241] = sc[12] * sc[28];

  // reaction 242: HNO3 + NH2 <=> NH3 + NO3
  qf[242] = sc[11] * sc[29];
  qr[242] = sc[12] * sc[28];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 30; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 <=> O + OH
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[4] + g_RT[8]));
  // reaction 1:  H2 + O <=> H + OH
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 2:  H2 + O <=> H + OH
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 3:  H2 + OH <=> H + H2O
  k_f = 220 * exp((1.51) * logT - (1726.03316371019) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[4] - g_RT[5]));
  // reaction 4:  2 OH <=> H2O + O
  k_f = 20 * exp((1.651) * logT - (317.529716122778) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]));
  // reaction 5:  2 OH <=> H2O + O
  k_f = 260000 * exp((-0.057) * logT - (-416.160182620503) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]));
  // reaction 6:  H2 + M <=> 2 H + M
  k_f = 46000000000000 * exp((-1.4) * logT - (52525.7555766966) * invT);
  Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(-2.000000 * g_RT[1] + g_RT[2])) * (refCinv);
  // reaction 7:  2 O + M <=> O2 + M
  k_f = 19 * exp(-(-899.751398458839) * invT);
  Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[8])) * (refC);
  // reaction 8:  H + O + M <=> OH + M
  k_f = 4700000 * exp((-1) * logT);
  Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[4])) * (refC);
  // reaction 9:  H2O + M <=> H + OH + M
  k_f = 6.1e+21 * exp((-3.322) * logT - (60783.5410625521) * invT);
  Corr = mixture + sc[0] + (2) * sc[2] + (-1) * sc[5] + (0.5) * sc[8];
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5])) * (refCinv);
  // reaction 10:  H2O + H2O <=> H + OH + H2O
  k_f = 1e+20 * exp((-2.44) * logT - (60476.5788964112) * invT);
  qf[15] *= k_f;
  qr[15] *= k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5])) * (refCinv);
  // reaction 11:  H + O2 (+M) <=> HO2 (+M)
  k_f = 4700000 * exp((0.44) * logT);
  Corr = mixture + sc[2] + (13) * sc[5] + (-0.22) * sc[8];
  redP = Corr / k_f * 636600000 * exp(-1.72 * logT - (264.088106214317) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.5) * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] - g_RT[6] + g_RT[8])) * (refC);
  // reaction 12:  H + HO2 <=> H2 + O2
  k_f = 2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[6] - g_RT[8]));
  // reaction 13:  H + HO2 <=> 2 OH
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]));
  // reaction 14:  H + HO2 <=> H2O + O
  k_f = 1400000;
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[5] + g_RT[6]));
  // reaction 15:  HO2 + O <=> O2 + OH
  k_f = 29000 * exp((1) * logT - (-364.328866042617) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[6] - g_RT[8]));
  // reaction 16:  HO2 + OH <=> H2O + O2
  k_f = 190000000000000 * exp((-2.49) * logT - (293.878532829956) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]));
  // reaction 17:  HO2 + OH <=> H2O + O2
  k_f = 1200 * exp((1.24) * logT - (-659.213832204183) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]));
  // reaction 18:  2 H + O2 <=> H2 + O2
  k_f = 88000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[16] *= k_f;
  qr[16] *= k_f * exp(-(2.000000 * g_RT[1] - g_RT[2])) * (refC);
  // reaction 19:  2 H + O2 <=> 2 OH
  k_f = 40000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[42] *= k_f;
  qr[42] *=
    k_f * exp(-(2.000000 * g_RT[1] - 2.000000 * g_RT[4] + g_RT[8])) * (refC);
  // reaction 20:  H + O + O2 <=> OH + O2
  k_f = 73500000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[17] *= k_f;
  qr[17] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[4])) * (refC);
  // reaction 21:  H + OH + O2 <=> H2O + O2
  k_f = 25600000000 * exp((-1.835) * logT - (402.573332643776) * invT);
  qf[18] *= k_f;
  qr[18] *= k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC);
  // reaction 22:  2 HO2 <=> H2O2 + O2
  k_f = 1200 * exp((0.7712) * logT - (-918.370415093613) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]));
  // reaction 23:  2 HO2 <=> H2O2 + O2
  k_f = 1300000 * exp((0.295) * logT - (3722.29367695751) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]));
  // reaction 24:  H2O2 (+M) <=> 2 OH (+M)
  k_f = 2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
  Corr = mixture + (0.5) * sc[0] + (2.7) * sc[2] + (6.5) * sc[5] +
         (6.7) * sc[7] + (0.2) * sc[8];
  redP = Corr / k_f * 2.5e+18 * exp(-2.3 * logT - (24531.3092413143) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.57) * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(-2.000000 * g_RT[4] + g_RT[7])) * (refCinv);
  // reaction 25:  H + H2O2 <=> H2O + OH
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 26:  H + H2O2 <=> H2 + HO2
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[6] + g_RT[7]));
  // reaction 27:  H2O2 + O <=> HO2 + OH
  k_f = 9.6 * exp((2) * logT - (1997.77016324474) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 28:  H2O2 + OH <=> H2O + HO2
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 29:  H2O2 + OH <=> H2O + HO2
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 30:  N2 + M <=> 2 N + M
  k_f = 1890000000000 * exp((-0.85) * logT - (113223.749806062) * invT);
  Corr = mixture + (15.25) * sc[5];
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(g_RT[0] - 2.000000 * g_RT[9])) * (refCinv);
  // reaction 31:  N + O + M <=> NO + M
  k_f = 760 * exp((-0.1) * logT - (-890.693498474354) * invT);
  Corr = mixture + (15.25) * sc[5];
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[3] + g_RT[9] - g_RT[18])) * (refC);
  // reaction 32:  N + NO2 <=> N2O + O
  k_f = 1800000;
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]));
  // reaction 33:  N + O2 <=> NO + O
  k_f = 5841 * exp((1.01) * logT - (3120.94976132087) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[18]));
  // reaction 34:  N + OH <=> H + NO
  k_f = 108400000 * exp((-0.2) * logT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]));
  // reaction 35:  N + NO <=> N2 + O
  k_f = 32000000;
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[9] + g_RT[18]));
  // reaction 36:  H + NH <=> H2 + N
  k_f = 165000 * exp((0.71) * logT - (468.494715864194) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[9] + g_RT[10]));
  // reaction 37:  NH + O <=> H + NO
  k_f = 48200000 * exp((0.023) * logT - (47.8055832514484) * invT);
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[10] - g_RT[18]));
  // reaction 38:  NH + O <=> N + OH
  k_f = 20700 * exp((0.622) * logT - (-180.15156635809) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[10]));
  // reaction 39:  NH + OH <=> H + HNO
  k_f = 325000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[21]));
  // reaction 40:  NH + OH <=> H2O + N
  k_f = 15.9 * exp((1.733) * logT - (-289.852799503519) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 41:  NH + O2 <=> HNO + O
  k_f = 3320 * exp((1.034) * logT - (5746.7343234899) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[10] - g_RT[21]));
  // reaction 42:  NH + O2 <=> NO + OH
  k_f = 450 * exp((0.79) * logT - (601.34391563664) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[18]));
  // reaction 43:  2 NH => H2 + N2
  k_f = 6260000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[0] - g_RT[2] + 2.000000 * g_RT[10]));
  // reaction 44:  2 NH => 2 H + N2
  k_f = 56340000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[1] + 2.000000 * g_RT[10])) *
            (refCinv);
  // reaction 45:  N + NH <=> H + N2
  k_f = 30000000;
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[9] + g_RT[10]));
  // reaction 46:  NH + NO <=> H + N2O
  k_f = 2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[18] - g_RT[19]));
  // reaction 47:  NH + NO <=> N2 + OH
  k_f = 680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[18]));
  // reaction 48:  NH + NO2 <=> N2O + OH
  k_f = 4100000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[4] + g_RT[10] - g_RT[19] + g_RT[20]));
  // reaction 49:  NH + NO2 <=> HNO + NO
  k_f = 5900000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(g_RT[10] - g_RT[18] + g_RT[20] - g_RT[21]));
  // reaction 50:  HONO + NH <=> NH2 + NO2
  k_f = 10000000;
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[20] + g_RT[25]));
  // reaction 51:  N2O + NH <=> HNO + N2
  k_f = 2000000 * exp(-(3019.29999482832) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(-g_RT[0] + g_RT[10] + g_RT[19] - g_RT[21]));
  // reaction 52:  NH2 + M <=> H + NH + M
  k_f = 1200000000 * exp(-(38245.8504469897) * invT);
  Corr = mixture;
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[10] + g_RT[11])) * (refCinv);
  // reaction 53:  H + NH2 <=> H2 + NH
  k_f = 0.109 * exp((2.59) * logT - (911.992848357871) * invT);
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[10] + g_RT[11]));
  // reaction 54:  NH2 + O <=> NH + OH
  k_f = 7230000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11]));
  // reaction 55:  NH2 + O <=> H + HNO
  k_f = 1500000000 * exp((-0.547) * logT - (421.041384278809) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]));
  // reaction 56:  NH2 + O <=> H + HNO
  k_f = 77300000 * exp((-0.277) * logT - (325.279252776171) * invT);
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]));
  // reaction 57:  NH2 + OH <=> H2O + NH
  k_f = 0.0404 * exp((2.52) * logT - (-309.997569069013) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[11]));
  // reaction 58:  HO2 + NH2 <=> H2NO + OH
  k_f = 50000000;
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[11] - g_RT[22]));
  // reaction 59:  HO2 + NH2 <=> NH3 + O2
  k_f = 2.18 * exp((2.08) * logT - (-2395.31132923047) * invT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[11] - g_RT[12]));
  // reaction 60:  NH2 + O2 <=> H2NO + O
  k_f = 260000 * exp((0.4872) * logT - (14643.6049749173) * invT);
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[11] - g_RT[22]));
  // reaction 61:  NH2 + O2 <=> HNO + OH
  k_f = 2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[21]));
  // reaction 62:  N + NH2 <=> 2 H + N2
  k_f = 69000000;
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[1] + g_RT[9] + g_RT[11])) *
            (refCinv);
  // reaction 63:  NH2 + NO <=> NNH + OH
  k_f = 31000000 * exp((-0.48) * logT - (593.795665649569) * invT);
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(-g_RT[4] + g_RT[11] - g_RT[13] + g_RT[18]));
  // reaction 64:  NH2 + NO <=> H2O + N2
  k_f = 13000000000 * exp((-1.25) * logT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]));
  // reaction 65:  NH2 + NO <=> H2O + N2
  k_f = -31000000 * exp((-0.48) * logT - (593.795665649569) * invT);
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]));
  // reaction 66:  NH2 + NO2 <=> H2NO + NO
  k_f = 860000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(g_RT[11] - g_RT[18] + g_RT[20] - g_RT[22]));
  // reaction 67:  NH2 + NO2 <=> H2O + N2O
  k_f = 220000 * exp((0.11) * logT - (-596.814965644398) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[5] + g_RT[11] - g_RT[19] + g_RT[20]));
  // reaction 68:  HNO + NH2 <=> NH3 + NO
  k_f = 0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[18] + g_RT[21]));
  // reaction 69:  HONO + NH2 <=> NH3 + NO2
  k_f = 4.84e-06 * exp((3.36) * logT - (-2304.73232938562) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[20] + g_RT[25]));
  // reaction 70:  2 NH <=> N + NH2
  k_f = 5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]));
  // reaction 71:  2 NH2 <=> NH + NH3
  k_f = 5.636e-06 * exp((3.53) * logT - (278.077529523688) * invT);
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]));
  // reaction 72:  NH + NH2 <=> N + NH3
  k_f = 0.009574 * exp((2.46) * logT - (53.9951482408464) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]));
  // reaction 73:  N2H2 + M <=> H + NNH + M
  k_f = 1.9e+21 * exp((-3.05) * logT - (33262.621609692) * invT);
  Corr = mixture + (6) * sc[5];
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[13] + g_RT[14])) * (refCinv);
  // reaction 74:  H + N2H2 <=> H2 + NNH
  k_f = 482 * exp((1.76) * logT - (371.997082882816) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[14]));
  // reaction 75:  N2H2 + O <=> NH2 + NO
  k_f = 10000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[3] - g_RT[11] + g_RT[14] - g_RT[18]));
  // reaction 76:  N2H2 + O <=> NNH + OH
  k_f = 111 * exp((1.62) * logT - (404.996824106291) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14]));
  // reaction 77:  N2H2 + OH <=> H2O + NNH
  k_f = 0.00674 * exp((2.8) * logT - (-255.130849562993) * invT);
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[14]));
  // reaction 78:  N2H2 + NO <=> N2O + NH2
  k_f = 4000000 * exp(-(5998.34265639226) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[11] + g_RT[14] + g_RT[18] - g_RT[19]));
  // reaction 79:  N2H2 + NO2 <=> HONO + NNH
  k_f = 1.25e-06 * exp((3.8) * logT - (5233.45332436908) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[13] + g_RT[14] + g_RT[20] - g_RT[25]));
  // reaction 80:  N2H2 + NH <=> NH2 + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[13] + g_RT[14]));
  // reaction 81:  N2H2 + NH2 <=> NH3 + NNH
  k_f = 0.271 * exp((2.226) * logT - (-518.313165778861) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]));
  // reaction 82:  NH + NH2 <=> H + N2H2
  k_f = 130000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[11] - g_RT[14]));
  // reaction 83:  2 NH2 <=> H2 + N2H2
  k_f = 170 * exp((1.62) * logT - (5929.40197317701) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[14]));
  // reaction 84:  HO2 + N2H2 <=> H2O2 + NNH
  k_f = 10000000 * exp(-(999.891514953978) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[14]));
  // reaction 85:  2 NH2 (+M) <=> N2H4 (+M)
  k_f = 560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
  Corr = mixture + (-0.31) * sc[8] + (3.87) * sc[12];
  redP = Corr / k_f * 1.6e+22 * exp(-5.49 * logT - (999.891514953978) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.69) * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(2.000000 * g_RT[11] - g_RT[16])) * (refC);
  // reaction 86:  N2H4 <=> H2 + N2H2
  k_f = 5.19e+38 * exp((-7.84) * logT - (33765.8382754967) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[2] - g_RT[14] + g_RT[16])) * (refCinv);
  // reaction 87:  N2H4 <=> H + N2H3
  k_f = 2.74e+39 * exp((-7.69) * logT - (42119.234927855) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(-g_RT[1] - g_RT[15] + g_RT[16])) * (refCinv);
  // reaction 88:  H + N2H4 <=> H2 + N2H3
  k_f = 0.276 * exp((2.56) * logT - (613.924332281758) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[15] + g_RT[16]));
  // reaction 89:  N2H4 + OH <=> H2O + N2H3
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]));
  // reaction 90:  N2H4 + NH2 <=> N2H3 + NH3
  k_f = 7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[15] + g_RT[16]));
  // reaction 91:  N2H2 + N2H4 <=> 2 N2H3
  k_f = 25000 * exp((0.5) * logT - (14995.8566409806) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(g_RT[14] - 2.000000 * g_RT[15] + g_RT[16]));
  // reaction 92:  N2H4 + NH <=> N2H3 + NH2
  k_f = 1000000 * exp(-(1001.40116495139) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[15] + g_RT[16]));
  // reaction 93:  N2H4 + O <=> H2O + N2H2
  k_f = 440000 * exp(-(-639.085165571994) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[14] + g_RT[16]));
  // reaction 94:  N2H4 + O <=> N2H3 + OH
  k_f = 670 * exp((1.5) * logT - (1434.67071420926) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[15] + g_RT[16]));
  // reaction 95:  N2H4 + NO <=> HNO + N2H3
  k_f = 6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[15] + g_RT[16] + g_RT[18] - g_RT[21]));
  // reaction 96:  N2H4 + NO2 <=> HONO + N2H3
  k_f = 8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[25]));
  // reaction 97:  N2H4 + NO2 <=> HNO2 + N2H3
  k_f = 2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[26]));
  // reaction 98:  N2H3 (+M) <=> H + N2H2 (+M)
  k_f = 128000000000 * exp((0.819) * logT - (24204.721625207) * invT);
  Corr = mixture + sc[0];
  redP = Corr / k_f * 3.84e+34 * exp(-6.88 * logT - (27425.3082863572) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.158) * exp(-T * 1.25e-05) + 0.842 * exp(-T * 0.0357142857142857) +
    exp(-7298 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[15])) * (refCinv);
  // reaction 99:  H + N2H3 <=> H2 + N2H2
  k_f = 0.007476 * exp((2.796) * logT - (2355.05399596609) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[14] + g_RT[15]));
  // reaction 100:  H + N2H3 <=> H2 + H2NN
  k_f = 6.243 * exp((1.89) * logT - (124.294516453766) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[15] - g_RT[17]));
  // reaction 101:  H + N2H3 <=> NH + NH3
  k_f = 100000;
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[1] - g_RT[10] - g_RT[12] + g_RT[15]));
  // reaction 102:  N2H3 + O <=> N2H2 + OH
  k_f = 170 * exp((1.5) * logT - (-325.077966109849) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15]));
  // reaction 103:  N2H3 + O <=> HNO + NH2
  k_f = 30000000;
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[3] - g_RT[11] + g_RT[15] - g_RT[21]));
  // reaction 104:  N2H3 + O => H + NH2 + NO
  k_f = 30000000;
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT[15] - g_RT[18])) *
             (refCinv);
  // reaction 105:  N2H3 + OH <=> H2O + N2H2
  k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[15]));
  // reaction 106:  N2H3 + OH <=> H2NN + H2O
  k_f = 30000000;
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[15] - g_RT[17]));
  // reaction 107:  N2H3 + OH <=> HNO + NH3
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(g_RT[4] - g_RT[12] + g_RT[15] - g_RT[21]));
  // reaction 108:  HO2 + N2H3 <=> H2O2 + N2H2
  k_f = 0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[14] + g_RT[15]));
  // reaction 109:  HO2 + N2H3 <=> N2H4 + O2
  k_f = 0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[15] - g_RT[16]));
  // reaction 110:  N2H3 + NH2 <=> N2H2 + NH3
  k_f = 6.08e-07 * exp((3.574) * logT - (598.827832307616) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[14] + g_RT[15]));
  // reaction 111:  N2H3 + NH2 <=> H2NN + NH3
  k_f = 1.11e-05 * exp((3.08) * logT - (106.178716484796) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[11] - g_RT[12] + g_RT[15] - g_RT[17]));
  // reaction 112:  N2H3 + NH <=> N2H2 + NH2
  k_f = 20000000;
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15]));
  // reaction 113:  N2H2 + N2H3 <=> N2H4 + NNH
  k_f = 10000000 * exp(-(5001.97365809891) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(-g_RT[13] + g_RT[14] + g_RT[15] - g_RT[16]));
  // reaction 114:  2 N2H3 <=> N2 + 2 NH3
  k_f = 3000000;
  qf[128] *= k_f;
  qr[128] *= k_f *
             exp(-(-g_RT[0] - 2.000000 * g_RT[12] + 2.000000 * g_RT[15])) *
             (refCinv);
  // reaction 115:  2 N2H2 <=> N2H3 + NNH
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[14] - g_RT[15]));
  // reaction 116:  2 NH2 <=> H2 + H2NN
  k_f = 0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[17]));
  // reaction 117:  H2NN <=> H + NNH
  k_f = 3.4e+26 * exp((-4.83) * logT - (23258.6742934941) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-g_RT[1] - g_RT[13] + g_RT[17])) * (refCinv);
  // reaction 118:  H + H2NN <=> H2 + NNH
  k_f = 480 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[17]));
  // reaction 119:  H + H2NN <=> H + N2H2
  k_f = 70000000;
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[14] + g_RT[17]));
  // reaction 120:  H2NN + O <=> NNH + OH
  k_f = 330 * exp((1.5) * logT - (-449.875699229419) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]));
  // reaction 121:  H2NN + O <=> NH2 + NO
  k_f = 70000000;
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[3] - g_RT[11] + g_RT[17] - g_RT[18]));
  // reaction 122:  H2NN + OH <=> H2O + NNH
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[17]));
  // reaction 123:  H2NN + OH => H + NH2 + NO
  k_f = 2000000;
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT[17] - g_RT[18])) *
             (refCinv);
  // reaction 124:  H2NN + HO2 => NH2 + NO + OH
  k_f = 9000000;
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[11] + g_RT[17] - g_RT[18])) *
             (refCinv);
  // reaction 125:  H2NN + HO2 <=> H2O2 + NNH
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[17]));
  // reaction 126:  H2NN + O2 <=> NH2 + NO2
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[8] - g_RT[11] + g_RT[17] - g_RT[20]));
  // reaction 127:  H2NN + NH2 <=> NH3 + NNH
  k_f = 1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[17]));
  // reaction 128:  H2NO + M <=> HNOH + M
  k_f = 1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
  Corr = mixture + (9) * sc[5];
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[22] - g_RT[23]));
  // reaction 129:  HNOH + M <=> H + HNO + M
  k_f = 2e+18 * exp((-2.8) * logT - (29654.5581158721) * invT);
  Corr = mixture + (9) * sc[5];
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[21] + g_RT[23])) * (refCinv);
  // reaction 130:  H + HNOH <=> NH2 + OH
  k_f = 40000000;
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[23]));
  // reaction 131:  H + HNOH <=> H2 + HNO
  k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[23]));
  // reaction 132:  HNOH + O <=> HNO + OH
  k_f = 70000000;
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]));
  // reaction 133:  HNOH + O <=> HNO + OH
  k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]));
  // reaction 134:  HNOH + OH <=> H2O + HNO
  k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[23]));
  // reaction 135:  HNOH + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.7) * logT - (-805.146665287552) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[23]));
  // reaction 136:  HNOH + O2 <=> HNO + HO2
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[23]));
  // reaction 137:  HNOH + NH2 <=> N2H3 + OH
  k_f = 1e-05 * exp((3.5) * logT - (-235.002182930804) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[4] + g_RT[11] - g_RT[15] + g_RT[23]));
  // reaction 138:  HNOH + NH2 <=> H2NN + H2O
  k_f = 88000000000 * exp((-1.1) * logT - (560.080149040653) * invT);
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[5] + g_RT[11] - g_RT[17] + g_RT[23]));
  // reaction 139:  HNOH + NH2 <=> HNO + NH3
  k_f = 1.8 * exp((1.9) * logT - (-579.705599007037) * invT);
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[23]));
  // reaction 140:  HNOH + NO2 <=> HNO + HONO
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[25]));
  // reaction 141:  NH2OH (+M) <=> NH2 + OH (+M)
  k_f = 1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
  Corr = mixture;
  redP = Corr / k_f * 5.4e+31 * exp(-5.96 * logT - (33604.8089424392) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.65) * exp(-T * 1e+30) + 0.35 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(-g_RT[4] - g_RT[11] + g_RT[24])) * (refCinv);
  // reaction 142:  H + NH2OH <=> H2 + HNOH
  k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[23] + g_RT[24]));
  // reaction 143:  H + NH2OH <=> H2 + H2NO
  k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[22] + g_RT[24]));
  // reaction 144:  NH2OH + O <=> HNOH + OH
  k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]));
  // reaction 145:  NH2OH + O <=> H2NO + OH
  k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[22] + g_RT[24]));
  // reaction 146:  NH2OH + OH <=> H2O + HNOH
  k_f = 0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]));
  // reaction 147:  NH2OH + OH <=> H2NO + H2O
  k_f = 0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[24]));
  // reaction 148:  NH2 + NH2OH <=> HNOH + NH3
  k_f = 1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[23] + g_RT[24]));
  // reaction 149:  NH2 + NH2OH <=> H2NO + NH3
  k_f = 9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[22] + g_RT[24]));
  // reaction 150:  NH + NH2OH <=> HNOH + NH2
  k_f = 2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[23] + g_RT[24]));
  // reaction 151:  NH + NH2OH <=> H2NO + NH2
  k_f = 1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[22] + g_RT[24]));
  // reaction 152:  HO2 + NH2OH <=> H2O2 + HNOH
  k_f = 0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[23] + g_RT[24]));
  // reaction 153:  HO2 + NH2OH <=> H2NO + H2O2
  k_f = 0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[22] + g_RT[24]));
  // reaction 154:  HNO + HNOH <=> NH2OH + NO
  k_f = 1000000 * exp(-(1509.64999741416) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[18] + g_RT[21] + g_RT[23] - g_RT[24]));
  // reaction 155:  NH3 + M <=> H + NH2 + M
  k_f = 22000000000 * exp(-(47035.6617527671) * invT);
  Corr = mixture;
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[11] + g_RT[12])) * (refCinv);
  // reaction 156:  H + NH3 <=> H2 + NH2
  k_f = 2.89 * exp((2.23) * logT - (5233.45332436908) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[11] + g_RT[12]));
  // reaction 157:  NH3 + OH <=> H2O + NH2
  k_f = 0.1559 * exp((2.372) * logT - (59.8324615641812) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]));
  // reaction 158:  HO2 + NH3 <=> H2O2 + NH2
  k_f = 1.173e-06 * exp((3.839) * logT - (8685.51965178946) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[11] + g_RT[12]));
  // reaction 159:  NH3 + O <=> NH2 + OH
  k_f = 0.000443 * exp((3.18) * logT - (3391.63000585723) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[11] + g_RT[12]));
  // reaction 160:  NH2 + NH3 <=> H2 + N2H3
  k_f = 100000 * exp((0.5) * logT - (10869.4799813819) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[15]));
  // reaction 161:  NNH <=> H + N2
  k_f = 330000000;
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[13])) * (refCinv);
  // reaction 162:  H + NNH <=> H2 + N2
  k_f = 100000000;
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[2] + g_RT[13]));
  // reaction 163:  NNH + OH <=> H2O + N2
  k_f = 50000000;
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[13]));
  // reaction 164:  NNH + NO <=> HNO + N2
  k_f = 5000000;
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(-g_RT[0] + g_RT[13] + g_RT[18] - g_RT[21]));
  // reaction 165:  NH + NNH <=> N2 + NH2
  k_f = 50000000;
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(-g_RT[0] + g_RT[10] - g_RT[11] + g_RT[13]));
  // reaction 166:  NH2 + NNH <=> N2 + NH3
  k_f = 50000000;
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(-g_RT[0] + g_RT[11] - g_RT[12] + g_RT[13]));
  // reaction 167:  NNH + O <=> H + N2O
  k_f = 187000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[13] - g_RT[19]));
  // reaction 168:  NNH + O <=> NH + NO
  k_f = 518000 * exp((0.388) * logT - (-205.81561631413) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(g_RT[3] - g_RT[10] + g_RT[13] - g_RT[18]));
  // reaction 169:  NNH + O <=> N2 + OH
  k_f = 12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[4] + g_RT[13]));
  // reaction 170:  NNH + O2 <=> HO2 + N2
  k_f = 560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[8] + g_RT[13]));
  // reaction 171:  2 NNH <=> N2 + N2H2
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[13] - g_RT[14]));
  // reaction 172:  HNO <=> H + NO
  k_f = 1.8259e+20 * exp((-3.008) * logT - (24094.01395873) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(-g_RT[1] - g_RT[18] + g_RT[21])) * (refCinv);
  // reaction 173:  HNO + O <=> NO + OH
  k_f = 23000000;
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[21]));
  // reaction 174:  H + HNO <=> H2 + NO
  k_f = 440000 * exp((0.72) * logT - (327.090832773068) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[18] + g_RT[21]));
  // reaction 175:  HNO + OH <=> H2O + NO
  k_f = 36000000;
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[21]));
  // reaction 176:  HNO + O2 <=> HO2 + NO
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[18] + g_RT[21]));
  // reaction 177:  HNO + N <=> NH + NO
  k_f = 10000000 * exp(-(1001.40116495139) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[21]));
  // reaction 178:  HNO + N <=> H + N2O
  k_f = 50000 * exp((0.5) * logT - (1509.64999741416) * invT);
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(-g_RT[1] + g_RT[9] - g_RT[19] + g_RT[21]));
  // reaction 179:  HNO + NH <=> NH2 + NO
  k_f = 500000 * exp((0.5) * logT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[21]));
  // reaction 180:  HNO + NO <=> N2O + OH
  k_f = 8510000 * exp(-(14900.2454744777) * invT);
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(-g_RT[4] + g_RT[18] - g_RT[19] + g_RT[21]));
  // reaction 181:  HNO + NO2 <=> HONO + NO
  k_f = 0.044 * exp((2.6) * logT - (2032.99532985107) * invT);
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(-g_RT[18] + g_RT[20] + g_RT[21] - g_RT[25]));
  // reaction 182:  2 HNO <=> H2O + N2O
  k_f = 900 * exp(-(1559.97166399463) * invT);
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(-g_RT[5] - g_RT[19] + 2.000000 * g_RT[21]));
  // reaction 183:  HON + M <=> H + NO + M
  k_f = 51000000000000 * exp((-1.73) * logT - (8071.5953195077) * invT);
  Corr = mixture + (6) * sc[5];
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[18] + g_RT[27])) * (refCinv);
  // reaction 184:  H + HON <=> H + HNO
  k_f = 24000000;
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[21] + g_RT[27]));
  // reaction 185:  H + HON <=> NH + OH
  k_f = 10000000;
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[10] + g_RT[27]));
  // reaction 186:  HON + O <=> NO + OH
  k_f = 70000000;
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[27]));
  // reaction 187:  HON + OH <=> H + HONO
  k_f = 40000000;
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[25] + g_RT[27]));
  // reaction 188:  HON + O2 <=> NO2 + OH
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[20] + g_RT[27]));
  // reaction 189:  NO + OH (+M) <=> HONO (+M)
  k_f = 110000000 * exp((-0.3) * logT);
  Corr = mixture;
  redP = Corr / k_f * 339200000000 * exp(-2.51 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.25) * exp(-T * 1e+30) + 0.75 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[4] + g_RT[18] - g_RT[25])) * (refC);
  // reaction 190:  HO2 + NO <=> NO2 + OH
  k_f = 2100000 * exp(-(-241.543999586265) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[18] - g_RT[20]));
  // reaction 191:  H2 + NO2 <=> H + HONO
  k_f = 0.013 * exp((2.76) * logT - (14980.7601410065) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[25]));
  // reaction 192:  H2 + NO2 <=> H + HNO2
  k_f = 2.4e-06 * exp((3.73) * logT - (16304.2199720729) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[26]));
  // reaction 193:  H + NO2 <=> NO + OH
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[18] + g_RT[20]));
  // reaction 194:  NO2 + O <=> NO + O2
  k_f = 110000000 * exp((-0.5) * logT);
  qf[202] *= k_f;
  qr[202] *= k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[18] + g_RT[20]));
  // reaction 195:  NO + O (+M) <=> NO2 (+M)
  k_f = 295000000 * exp((-0.4) * logT);
  Corr = mixture + (-0.6) * sc[0] + (5.4) * sc[5] + (-0.55) * sc[8];
  redP = Corr / k_f * 333600000 * exp(-1.6 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.2) * exp(-T * 1e+30) + 0.8 * exp(-T * 1e-30) + exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[3] + g_RT[18] - g_RT[20])) * (refC);
  // reaction 196:  2 NO2 <=> 2 NO + O2
  k_f = 4500000 * exp(-(13888.7799762103) * invT);
  qf[203] *= k_f;
  qr[203] *= k_f *
             exp(-(-g_RT[8] - 2.000000 * g_RT[18] + 2.000000 * g_RT[20])) *
             (refCinv);
  // reaction 197:  HO2 + NO2 <=> HONO + O2
  k_f = 1.91e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[25]));
  // reaction 198:  HO2 + NO2 <=> HNO2 + O2
  k_f = 1.85e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[26]));
  // reaction 199:  N2O (+M) <=> N2 + O (+M)
  k_f = 1300000000000 * exp(-(31486.2667794013) * invT);
  Corr = mixture + (0.7) * sc[0] + (11) * sc[5] + (0.4) * sc[8];
  redP = Corr / k_f * 400000000 * exp(-(28482.0632845471) * invT);
  Corr = redP / (1. + redP);
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[19])) * (refCinv);
  // reaction 200:  H + N2O <=> N2 + OH
  k_f = 25300 * exp(-(2289.63582941147) * invT);
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]));
  // reaction 201:  H + N2O <=> N2 + OH
  k_f = 500000000 * exp(-(9108.22165106543) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]));
  // reaction 202:  N2O + O <=> 2 NO
  k_f = 92000000 * exp(-(13924.0051428166) * invT);
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(g_RT[3] - 2.000000 * g_RT[18] + g_RT[19]));
  // reaction 203:  N2O + O <=> N2 + O2
  k_f = 3700000 * exp(-(8016.24148626918) * invT);
  qf[209] *= k_f;
  qr[209] *= k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[8] + g_RT[19]));
  // reaction 204:  N2O + OH <=> HO2 + N2
  k_f = 1.3e-08 * exp((4.7) * logT - (18397.6013018206) * invT);
  qf[210] *= k_f;
  qr[210] *= k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[19]));
  // reaction 205:  N2O + NO <=> N2 + NO2
  k_f = 0.53 * exp((2.2) * logT - (23288.8672934424) * invT);
  qf[211] *= k_f;
  qr[211] *= k_f * exp(-(-g_RT[0] + g_RT[18] + g_RT[19] - g_RT[20]));
  // reaction 206:  N + N2O <=> N2 + NO
  k_f = 10000000 * exp(-(9998.91514953978) * invT);
  qf[212] *= k_f;
  qr[212] *= k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[19]));
  // reaction 207:  H2NO + M <=> H + HNO + M
  k_f = 2.8e+18 * exp((-2.8) * logT - (32663.7937773844) * invT);
  Corr = mixture + (9) * sc[5];
  qf[27] *= Corr * k_f;
  qr[27] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[21] + g_RT[22])) * (refCinv);
  // reaction 208:  H + H2NO <=> H2 + HNO
  k_f = 480 * exp((1.5) * logT - (784.917355322202) * invT);
  qf[213] *= k_f;
  qr[213] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[22]));
  // reaction 209:  H + H2NO <=> NH2 + OH
  k_f = 40000000;
  qf[214] *= k_f;
  qr[214] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[22]));
  // reaction 210:  H2NO + O <=> HNO + OH
  k_f = 330 * exp((1.5) * logT - (244.965872913738) * invT);
  qf[215] *= k_f;
  qr[215] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22]));
  // reaction 211:  H2NO + OH <=> H2O + HNO
  k_f = 2.4 * exp((2) * logT - (599.934908972387) * invT);
  qf[216] *= k_f;
  qr[216] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]));
  // reaction 212:  H2NO + NH2 <=> HNO + NH3
  k_f = 1.8 * exp((1.94) * logT - (-291.865666166737) * invT);
  qf[217] *= k_f;
  qr[217] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[22]));
  // reaction 213:  H2NO + HO2 <=> H2O2 + HNO
  k_f = 0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
  qf[218] *= k_f;
  qr[218] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[22]));
  // reaction 214:  H2NO + O2 <=> HNO + HO2
  k_f = 0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
  qf[219] *= k_f;
  qr[219] *= k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[22]));
  // reaction 215:  H2NO + NO <=> 2 HNO
  k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
  qf[220] *= k_f;
  qr[220] *= k_f * exp(-(g_RT[18] - 2.000000 * g_RT[21] + g_RT[22]));
  // reaction 216:  H2NO + NO2 <=> HNO + HONO
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  qf[221] *= k_f;
  qr[221] *= k_f * exp(-(g_RT[20] - g_RT[21] + g_RT[22] - g_RT[25]));
  // reaction 217:  HONO + O <=> NO2 + OH
  k_f = 12000000 * exp(-(3019.29999482832) * invT);
  qf[222] *= k_f;
  qr[222] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[25]));
  // reaction 218:  H + HONO <=> HNO + OH
  k_f = 56000 * exp((0.9) * logT - (2516.0833290236) * invT);
  qf[223] *= k_f;
  qr[223] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[21] + g_RT[25]));
  // reaction 219:  H + HONO <=> H2O + NO
  k_f = 8.1 * exp((1.9) * logT - (1937.38416334817) * invT);
  qf[224] *= k_f;
  qr[224] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[25]));
  // reaction 220:  HONO + OH <=> H2O + NO2
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  qf[225] *= k_f;
  qr[225] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[25]));
  // reaction 221:  HONO + NO2 <=> HNO3 + NO
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  qf[226] *= k_f;
  qr[226] *= k_f * exp(-(-g_RT[18] + g_RT[20] + g_RT[25] - g_RT[29]));
  // reaction 222:  2 HONO <=> H2O + NO + NO2
  k_f = 3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
  qf[227] *= k_f;
  qr[227] *= k_f *
             exp(-(-g_RT[5] - g_RT[18] - g_RT[20] + 2.000000 * g_RT[25])) *
             (refCinv);
  // reaction 223:  HNO2 (+M) <=> HONO (+M)
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  Corr = mixture;
  redP = Corr / k_f * 3100000000000 * exp(-(15851.3249728487) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.149) * exp(-T * 1e+30) + 1.149 * exp(-T * 0.00032) +
    exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(-g_RT[25] + g_RT[26]));
  // reaction 224:  HNO2 + O <=> NO2 + OH
  k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
  qf[228] *= k_f;
  qr[228] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[26]));
  // reaction 225:  HNO2 + OH <=> H2O + NO2
  k_f = 40000000;
  qf[229] *= k_f;
  qr[229] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[26]));
  // reaction 226:  NO2 + O (+M) <=> NO3 (+M)
  k_f = 3500000 * exp((0.2) * logT);
  Corr = mixture;
  redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.29) * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
    exp(-1e+30 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[3] + g_RT[20] - g_RT[28])) * (refC);
  // reaction 227:  2 NO2 <=> NO + NO3
  k_f = 9600 * exp((0.7) * logT - (10517.2283153186) * invT);
  qf[230] *= k_f;
  qr[230] *= k_f * exp(-(-g_RT[18] + 2.000000 * g_RT[20] - g_RT[28]));
  // reaction 228:  H + NO3 <=> NO2 + OH
  k_f = 60000000;
  qf[231] *= k_f;
  qr[231] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[20] + g_RT[28]));
  // reaction 229:  NO3 + O <=> NO2 + O2
  k_f = 10000000;
  qf[232] *= k_f;
  qr[232] *= k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[20] + g_RT[28]));
  // reaction 230:  NO3 + OH <=> HO2 + NO2
  k_f = 14000000;
  qf[233] *= k_f;
  qr[233] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[20] + g_RT[28]));
  // reaction 231:  HO2 + NO3 <=> NO2 + O2 + OH
  k_f = 1500000;
  qf[234] *= k_f;
  qr[234] *= k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[8] - g_RT[20] + g_RT[28])) *
             (refCinv);
  // reaction 232:  NO3 + NO2 <=> NO + O2 + NO2
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(-g_RT[8] - g_RT[18] + g_RT[28])) * (refCinv);
  // reaction 233:  2 NO3 <=> 2 NO2 + O2
  k_f = 512000 * exp(-(2450.66516246898) * invT);
  qf[235] *= k_f;
  qr[235] *= k_f *
             exp(-(-g_RT[8] - 2.000000 * g_RT[20] + 2.000000 * g_RT[28])) *
             (refCinv);
  // reaction 234:  HO2 + NO3 <=> HNO3 + O2
  k_f = 555000;
  qf[236] *= k_f;
  qr[236] *= k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[28] - g_RT[29]));
  // reaction 235:  NO2 + OH (+M) <=> HNO3 (+M)
  k_f = 24100000;
  Corr = mixture + sc[2] + (9) * sc[5] + sc[8];
  redP = Corr / k_f * 6.42e+20 * exp(-5.49 * logT - (1182.55916464109) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 0.000856164383561644) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[4] + g_RT[20] - g_RT[29])) * (refC);
  // reaction 236:  HO2 + NO + M <=> HNO3 + M
  k_f = 1500000000000 * exp((-3.5) * logT - (1107.07666477038) * invT);
  Corr = mixture;
  qf[29] *= Corr * k_f;
  qr[29] *= Corr * k_f * exp(-(g_RT[6] + g_RT[18] - g_RT[29])) * (refC);
  // reaction 237:  H + HNO3 <=> H2 + NO3
  k_f = 556 * exp((1.53) * logT - (8252.7533191974) * invT);
  qf[237] *= k_f;
  qr[237] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[28] + g_RT[29]));
  // reaction 238:  H + HNO3 <=> H2O + NO2
  k_f = 6.08e-05 * exp((3.29) * logT - (3165.23282791169) * invT);
  qf[238] *= k_f;
  qr[238] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[20] + g_RT[29]));
  // reaction 239:  H + HNO3 <=> HONO + OH
  k_f = 0.382 * exp((2.3) * logT - (3512.45232731694) * invT);
  qf[239] *= k_f;
  qr[239] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[25] + g_RT[29]));
  // reaction 240:  HNO3 + OH <=> H2O + NO3
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  qf[240] *= k_f;
  qr[240] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[29]));
  // reaction 241:  HNO3 + NH2 <=> NH3 + NO3
  k_f = 1.03e+15 * exp((-3.85) * logT - (96.1143831687015) * invT);
  qf[241] *= k_f;
  qr[241] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]));
  // reaction 242:  HNO3 + NH2 <=> NH3 + NO3
  k_f = 3.08e-05 * exp((3.22) * logT - (-69.947116546856) * invT);
  qf[242] *= k_f;
  qr[242] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 30; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 30; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  {
    // reaction 11:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 4700000 * exp((0.44) * logT);
    amrex::Real Corr = mixture + sc[2] + (13) * sc[5] + (-0.22) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 636600000 * exp(-1.72 * logT - 264.088106214317 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[6] + g_RT[8])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 24:  H2O2 (+M) <=> 2 OH (+M)
    const amrex::Real k_f =
      2000000000000 * exp((0.9) * logT - (24531.3092413143) * invT);
    amrex::Real Corr = mixture + (0.5) * sc[0] + (2.7) * sc[2] + (6.5) * sc[5] +
                       (6.7) * sc[7] + (0.2) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 2.5e+18 * exp(-2.3 * logT - 24531.3092413143 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.57 * exp(-T * 1e+30) + 0.43 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[7]);
    const amrex::Real qr = Corr * k_f * exp(-(-2.000000 * g_RT[4] + g_RT[7])) *
                           (refCinv) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[4] += 2.000000 * qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 85:  2 NH2 (+M) <=> N2H4 (+M)
    const amrex::Real k_f =
      560000000 * exp((-0.414) * logT - (33.2122999431115) * invT);
    amrex::Real Corr = mixture + (-0.31) * sc[8] + (3.87) * sc[12];
    const amrex::Real redP =
      Corr / k_f * 1.6e+22 * exp(-5.49 * logT - 999.891514953978 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.69 * exp(-T * 1e+30) + 0.31 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[11] * sc[11]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[11] - g_RT[16])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= 2.000000 * qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 98:  N2H3 (+M) <=> H + N2H2 (+M)
    const amrex::Real k_f =
      128000000000 * exp((0.819) * logT - (24204.721625207) * invT);
    amrex::Real Corr = mixture + sc[0];
    const amrex::Real redP =
      Corr / k_f * 3.84e+34 * exp(-6.88 * logT - 27425.3082863572 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.158 * exp(-T * 1.25e-05) + 0.842 * exp(-T * 0.0357142857142857) +
      exp(-7298 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[15]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[15])) *
                           (refCinv) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 141:  NH2OH (+M) <=> NH2 + OH (+M)
    const amrex::Real k_f =
      1.4e+20 * exp((-1.31) * logT - (32246.1239447664) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 5.4e+31 * exp(-5.96 * logT - 33604.8089424392 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.65 * exp(-T * 1e+30) + 0.35 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[24]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[4] - g_RT[11] + g_RT[24])) *
                           (refCinv) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[11] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 189:  NO + OH (+M) <=> HONO (+M)
    const amrex::Real k_f = 110000000 * exp((-0.3) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 339200000000 * exp(-2.51 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.25 * exp(-T * 1e+30) + 0.75 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[18] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[18] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 195:  NO + O (+M) <=> NO2 (+M)
    const amrex::Real k_f = 295000000 * exp((-0.4) * logT);
    amrex::Real Corr =
      mixture + (-0.6) * sc[0] + (5.4) * sc[5] + (-0.55) * sc[8];
    const amrex::Real redP = Corr / k_f * 333600000 * exp(-1.6 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.2 * exp(-T * 1e+30) + 0.8 * exp(-T * 1e-30) + exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[18] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 223:  HNO2 (+M) <=> HONO (+M)
    const amrex::Real k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 3100000000000 * exp(-15851.3249728487 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.149 * exp(-T * 1e+30) + 1.149 * exp(-T * 0.00032) +
      exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[26]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[25] + g_RT[26])) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 226:  NO2 + O (+M) <=> NO3 (+M)
    const amrex::Real k_f = 3500000 * exp((0.2) * logT);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 250000000 * exp(-1.5 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.29 * exp(-T * 1e+30) + 0.71 * exp(-T * 0.000588235294117647) +
      exp(-1e+30 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[20] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[20] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 235:  NO2 + OH (+M) <=> HNO3 (+M)
    const amrex::Real k_f = 24100000;
    amrex::Real Corr = mixture + sc[2] + (9) * sc[5] + sc[8];
    const amrex::Real redP =
      Corr / k_f * 6.42e+20 * exp(-5.49 * logT - 1182.55916464109 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 0.000856164383561644) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[20] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[20] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 199:  N2O (+M) <=> N2 + O (+M)
    const amrex::Real k_f = 1300000000000 * exp(-(31486.2667794013) * invT);
    amrex::Real Corr = mixture + (0.7) * sc[0] + (11) * sc[5] + (0.4) * sc[8];
    const amrex::Real redP =
      Corr / k_f * 400000000 * exp(-28482.0632845471 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[19])) *
                           (refCinv) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 6:  H2 + M <=> 2 H + M
    const amrex::Real k_f =
      46000000000000 * exp((-1.4) * logT - (52525.7555766966) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[2]);
    const amrex::Real qr = Corr * k_f * exp(-(-2.000000 * g_RT[1] + g_RT[2])) *
                           (refCinv) * ((sc[1] * sc[1]));
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[2] -= qdot;
  }

  {
    // reaction 7:  2 O + M <=> O2 + M
    const amrex::Real k_f = 19 * exp(-(-899.751398458839) * invT);
    const amrex::Real Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= 2.000000 * qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 8:  H + O + M <=> OH + M
    const amrex::Real k_f = 4700000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.5) * sc[2] + (11) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 9:  H2O + M <=> H + OH + M
    const amrex::Real k_f =
      6.1e+21 * exp((-3.322) * logT - (60783.5410625521) * invT);
    const amrex::Real Corr =
      mixture + sc[0] + (2) * sc[2] + (-1) * sc[5] + (0.5) * sc[8];
    const amrex::Real qf = Corr * k_f * (sc[5]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5])) *
                           (refCinv) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 10:  H2O + H2O <=> H + OH + H2O
    const amrex::Real k_f =
      1e+20 * exp((-2.44) * logT - (60476.5788964112) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5])) *
                           (refCinv) * (sc[1] * sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 18:  2 H + O2 <=> H2 + O2
    const amrex::Real k_f =
      88000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[1] - g_RT[2])) * (refC) * (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[2] += qdot;
  }

  {
    // reaction 20:  H + O + O2 <=> OH + O2
    const amrex::Real k_f =
      73500000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[4])) * (refC) * (sc[4] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 21:  H + OH + O2 <=> H2O + O2
    const amrex::Real k_f =
      25600000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC) * (sc[5] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 30:  N2 + M <=> 2 N + M
    const amrex::Real k_f =
      1890000000000 * exp((-0.85) * logT - (113223.749806062) * invT);
    const amrex::Real Corr = mixture + (15.25) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[0]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[0] - 2.000000 * g_RT[9])) *
                           (refCinv) * ((sc[9] * sc[9]));
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] += 2.000000 * qdot;
  }

  {
    // reaction 31:  N + O + M <=> NO + M
    const amrex::Real k_f =
      760 * exp((-0.1) * logT - (-890.693498474354) * invT);
    const amrex::Real Corr = mixture + (15.25) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[9] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 52:  NH2 + M <=> H + NH + M
    const amrex::Real k_f = 1200000000 * exp(-(38245.8504469897) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[11]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[10] + g_RT[11])) *
                           (refCinv) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 73:  N2H2 + M <=> H + NNH + M
    const amrex::Real k_f =
      1.9e+21 * exp((-3.05) * logT - (33262.621609692) * invT);
    const amrex::Real Corr = mixture + (6) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[14]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[13] + g_RT[14])) *
                           (refCinv) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 128:  H2NO + M <=> HNOH + M
    const amrex::Real k_f =
      1.1e+23 * exp((-4) * logT - (22141.5332954077) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[22]);
    const amrex::Real qr = Corr * k_f * exp(-(g_RT[22] - g_RT[23])) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 129:  HNOH + M <=> H + HNO + M
    const amrex::Real k_f =
      2e+18 * exp((-2.8) * logT - (29654.5581158721) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[23]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[21] + g_RT[23])) *
                           (refCinv) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 155:  NH3 + M <=> H + NH2 + M
    const amrex::Real k_f = 22000000000 * exp(-(47035.6617527671) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[12]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[11] + g_RT[12])) *
                           (refCinv) * (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 183:  HON + M <=> H + NO + M
    const amrex::Real k_f =
      51000000000000 * exp((-1.73) * logT - (8071.5953195077) * invT);
    const amrex::Real Corr = mixture + (6) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[27]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[18] + g_RT[27])) *
                           (refCinv) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[18] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 207:  H2NO + M <=> H + HNO + M
    const amrex::Real k_f =
      2.8e+18 * exp((-2.8) * logT - (32663.7937773844) * invT);
    const amrex::Real Corr = mixture + (9) * sc[5];
    const amrex::Real qf = Corr * k_f * (sc[22]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[21] + g_RT[22])) *
                           (refCinv) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 232:  NO3 + NO2 <=> NO + O2 + NO2
    const amrex::Real k_f = 50000 * exp(-(1479.45699746588) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[28]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[18] + g_RT[28])) *
                           (refCinv) * (sc[8] * sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[18] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 236:  HO2 + NO + M <=> HNO3 + M
    const amrex::Real k_f =
      1500000000000 * exp((-3.5) * logT - (1107.07666477038) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] + g_RT[18] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[18] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 0:  H + O2 <=> O + OH
    const amrex::Real k_f = 100000000 * exp(-(7692.16995349094) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[4] + g_RT[8])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 1:  H2 + O <=> H + OH
    const amrex::Real k_f = 3800000 * exp(-(3999.56605981591) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 2:  H2 + O <=> H + OH
    const amrex::Real k_f = 880000000 * exp(-(9649.1795668055) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 3:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      220 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[4] - g_RT[5])) * (sc[1] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 4:  2 OH <=> H2O + O
    const amrex::Real k_f =
      20 * exp((1.651) * logT - (317.529716122778) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 5:  2 OH <=> H2O + O
    const amrex::Real k_f =
      260000 * exp((-0.057) * logT - (-416.160182620503) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 12:  H + HO2 <=> H2 + O2
    const amrex::Real k_f =
      2.8 * exp((2.09) * logT - (-730.167382082648) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[6] - g_RT[8])) * (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 13:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 71000000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 14:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 1400000;
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 15:  HO2 + O <=> O2 + OH
    const amrex::Real k_f =
      29000 * exp((1) * logT - (-364.328866042617) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[6] - g_RT[8])) * (sc[4] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 16:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      190000000000000 * exp((-2.49) * logT - (293.878532829956) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8])) * (sc[5] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 17:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1200 * exp((1.24) * logT - (-659.213832204183) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8])) * (sc[5] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 19:  2 H + O2 <=> 2 OH
    const amrex::Real k_f =
      40000000000 * exp((-1.835) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[1] - 2.000000 * g_RT[4] + g_RT[8])) * (refC) *
      ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 22:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      1200 * exp((0.7712) * logT - (-918.370415093613) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[6] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 23:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f =
      1300000 * exp((0.295) * logT - (3722.29367695751) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[6] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 25:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24000000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 26:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 48000000 * exp(-(4000.57249314752) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[6] + g_RT[7])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 27:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.6 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 28:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1700000 * exp(-(160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 29:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 76000000 * exp(-(3658.38516040031) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 32:  N + NO2 <=> N2O + O
    const amrex::Real k_f = 1800000;
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20])) * (sc[3] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 33:  N + O2 <=> NO + O
    const amrex::Real k_f =
      5841 * exp((1.01) * logT - (3120.94976132087) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[18])) * (sc[3] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 34:  N + OH <=> H + NO
    const amrex::Real k_f = 108400000 * exp((-0.2) * logT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 35:  N + NO <=> N2 + O
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[9] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[9] + g_RT[18])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 36:  H + NH <=> H2 + N
    const amrex::Real k_f =
      165000 * exp((0.71) * logT - (468.494715864194) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[9] + g_RT[10])) * (sc[2] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 37:  NH + O <=> H + NO
    const amrex::Real k_f =
      48200000 * exp((0.023) * logT - (47.8055832514484) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[10] - g_RT[18])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 38:  NH + O <=> N + OH
    const amrex::Real k_f =
      20700 * exp((0.622) * logT - (-180.15156635809) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[10])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 39:  NH + OH <=> H + HNO
    const amrex::Real k_f =
      325000000 * exp((-0.376) * logT - (-23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 40:  NH + OH <=> H2O + N
    const amrex::Real k_f =
      15.9 * exp((1.733) * logT - (-289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 41:  NH + O2 <=> HNO + O
    const amrex::Real k_f =
      3320 * exp((1.034) * logT - (5746.7343234899) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[10] - g_RT[21])) * (sc[3] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 42:  NH + O2 <=> NO + OH
    const amrex::Real k_f = 450 * exp((0.79) * logT - (601.34391563664) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[18])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 43:  2 NH => H2 + N2
    const amrex::Real k_f =
      6260000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] += qdot;
    wdot[10] -= 2.000000 * qdot;
  }

  {
    // reaction 44:  2 NH => 2 H + N2
    const amrex::Real k_f =
      56340000 * exp((-0.036) * logT - (-80.9675615279794) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += 2.000000 * qdot;
    wdot[10] -= 2.000000 * qdot;
  }

  {
    // reaction 45:  N + NH <=> H + N2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[9] + g_RT[10])) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 46:  NH + NO <=> H + N2O
    const amrex::Real k_f =
      2700000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[18] - g_RT[19])) *
                           (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 47:  NH + NO <=> N2 + OH
    const amrex::Real k_f =
      680000000 * exp((-0.78) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[18])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 48:  NH + NO2 <=> N2O + OH
    const amrex::Real k_f = 4100000;
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[10] - g_RT[19] + g_RT[20])) *
                           (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 49:  NH + NO2 <=> HNO + NO
    const amrex::Real k_f = 5900000;
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[18] + g_RT[20] - g_RT[21])) *
                           (sc[18] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 50:  HONO + NH <=> NH2 + NO2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[10] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[20] + g_RT[25])) *
                           (sc[11] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[20] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 51:  N2O + NH <=> HNO + N2
    const amrex::Real k_f = 2000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[10] + g_RT[19] - g_RT[21])) *
                           (sc[0] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 53:  H + NH2 <=> H2 + NH
    const amrex::Real k_f =
      0.109 * exp((2.59) * logT - (911.992848357871) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[10] + g_RT[11])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 54:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 7230000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 55:  NH2 + O <=> H + HNO
    const amrex::Real k_f =
      1500000000 * exp((-0.547) * logT - (421.041384278809) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 56:  NH2 + O <=> H + HNO
    const amrex::Real k_f =
      77300000 * exp((-0.277) * logT - (325.279252776171) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 57:  NH2 + OH <=> H2O + NH
    const amrex::Real k_f =
      0.0404 * exp((2.52) * logT - (-309.997569069013) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[11])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 58:  HO2 + NH2 <=> H2NO + OH
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[6] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[11] - g_RT[22])) * (sc[4] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[11] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 59:  HO2 + NH2 <=> NH3 + O2
    const amrex::Real k_f =
      2.18 * exp((2.08) * logT - (-2395.31132923047) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[11] - g_RT[12])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 60:  NH2 + O2 <=> H2NO + O
    const amrex::Real k_f =
      260000 * exp((0.4872) * logT - (14643.6049749173) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[11] - g_RT[22])) * (sc[3] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 61:  NH2 + O2 <=> HNO + OH
    const amrex::Real k_f =
      2.9e-08 * exp((3.764) * logT - (9150.99506765883) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[21])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 62:  N + NH2 <=> 2 H + N2
    const amrex::Real k_f = 69000000;
    const amrex::Real qf = k_f * (sc[9] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[1] + g_RT[9] + g_RT[11])) *
      (refCinv) * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += 2.000000 * qdot;
    wdot[9] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 63:  NH2 + NO <=> NNH + OH
    const amrex::Real k_f =
      31000000 * exp((-0.48) * logT - (593.795665649569) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[11] - g_RT[13] + g_RT[18])) *
                           (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 64:  NH2 + NO <=> H2O + N2
    const amrex::Real k_f = 13000000000 * exp((-1.25) * logT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 65:  NH2 + NO <=> H2O + N2
    const amrex::Real k_f =
      -31000000 * exp((-0.48) * logT - (593.795665649569) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 66:  NH2 + NO2 <=> H2NO + NO
    const amrex::Real k_f =
      860000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[18] + g_RT[20] - g_RT[22])) *
                           (sc[18] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 67:  NH2 + NO2 <=> H2O + N2O
    const amrex::Real k_f =
      220000 * exp((0.11) * logT - (-596.814965644398) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[11] - g_RT[19] + g_RT[20])) *
                           (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 68:  HNO + NH2 <=> NH3 + NO
    const amrex::Real k_f =
      0.00059 * exp((2.95) * logT - (-1745.65861367657) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[18] + g_RT[21])) *
                           (sc[12] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 69:  HONO + NH2 <=> NH3 + NO2
    const amrex::Real k_f =
      4.84e-06 * exp((3.36) * logT - (-2304.73232938562) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[20] + g_RT[25])) *
                           (sc[12] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[20] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 70:  2 NH <=> N + NH2
    const amrex::Real k_f =
      5.7e-07 * exp((3.88) * logT - (172.100099705214) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11])) *
                           (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 71:  2 NH2 <=> NH + NH3
    const amrex::Real k_f =
      5.636e-06 * exp((3.53) * logT - (278.077529523688) * invT);
    const amrex::Real qf = k_f * ((sc[11] * sc[11]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= 2.000000 * qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 72:  NH + NH2 <=> N + NH3
    const amrex::Real k_f =
      0.009574 * exp((2.46) * logT - (53.9951482408464) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 74:  H + N2H2 <=> H2 + NNH
    const amrex::Real k_f =
      482 * exp((1.76) * logT - (371.997082882816) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[14])) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 75:  N2H2 + O <=> NH2 + NO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[11] + g_RT[14] - g_RT[18])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[11] += qdot;
    wdot[14] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 76:  N2H2 + O <=> NNH + OH
    const amrex::Real k_f =
      111 * exp((1.62) * logT - (404.996824106291) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 77:  N2H2 + OH <=> H2O + NNH
    const amrex::Real k_f =
      0.00674 * exp((2.8) * logT - (-255.130849562993) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[14])) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 78:  N2H2 + NO <=> N2O + NH2
    const amrex::Real k_f = 4000000 * exp(-(5998.34265639226) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[14] + g_RT[18] - g_RT[19])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[14] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 79:  N2H2 + NO2 <=> HONO + NNH
    const amrex::Real k_f =
      1.25e-06 * exp((3.8) * logT - (5233.45332436908) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[14] + g_RT[20] - g_RT[25])) *
                           (sc[13] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= qdot;
    wdot[20] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 80:  N2H2 + NH <=> NH2 + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[13] + g_RT[14])) *
                           (sc[11] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 81:  N2H2 + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      0.271 * exp((2.226) * logT - (-518.313165778861) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 82:  NH + NH2 <=> H + N2H2
    const amrex::Real k_f =
      130000000 * exp((-0.272) * logT - (-38.7476832669634) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[11] - g_RT[14])) *
                           (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 83:  2 NH2 <=> H2 + N2H2
    const amrex::Real k_f =
      170 * exp((1.62) * logT - (5929.40197317701) * invT);
    const amrex::Real qf = k_f * ((sc[11] * sc[11]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[14])) *
                           (sc[2] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= 2.000000 * qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 84:  HO2 + N2H2 <=> H2O2 + NNH
    const amrex::Real k_f = 10000000 * exp(-(999.891514953978) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[14])) * (sc[7] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 86:  N2H4 <=> H2 + N2H2
    const amrex::Real k_f =
      5.19e+38 * exp((-7.84) * logT - (33765.8382754967) * invT);
    const amrex::Real qf = k_f * (sc[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[14] + g_RT[16])) *
                           (refCinv) * (sc[2] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 87:  N2H4 <=> H + N2H3
    const amrex::Real k_f =
      2.74e+39 * exp((-7.69) * logT - (42119.234927855) * invT);
    const amrex::Real qf = k_f * (sc[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[15] + g_RT[16])) *
                           (refCinv) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 88:  H + N2H4 <=> H2 + N2H3
    const amrex::Real k_f =
      0.276 * exp((2.56) * logT - (613.924332281758) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[15] + g_RT[16])) * (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 89:  N2H4 + OH <=> H2O + N2H3
    const amrex::Real k_f = 13000000 * exp(-(-160.022899725901) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16])) * (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 90:  N2H4 + NH2 <=> N2H3 + NH3
    const amrex::Real k_f =
      7.6e-07 * exp((4) * logT - (2037.02106317751) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[15] + g_RT[16])) *
                           (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 91:  N2H2 + N2H4 <=> 2 N2H3
    const amrex::Real k_f =
      25000 * exp((0.5) * logT - (14995.8566409806) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - 2.000000 * g_RT[15] + g_RT[16])) *
                           ((sc[15] * sc[15]));
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += 2.000000 * qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 92:  N2H4 + NH <=> N2H3 + NH2
    const amrex::Real k_f = 1000000 * exp(-(1001.40116495139) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[15] + g_RT[16])) *
                           (sc[11] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 93:  N2H4 + O <=> H2O + N2H2
    const amrex::Real k_f = 440000 * exp(-(-639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[14] + g_RT[16])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 94:  N2H4 + O <=> N2H3 + OH
    const amrex::Real k_f = 670 * exp((1.5) * logT - (1434.67071420926) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[15] + g_RT[16])) * (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 95:  N2H4 + NO <=> HNO + N2H3
    const amrex::Real k_f =
      6e-05 * exp((3.16) * logT - (15521.7180567466) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] + g_RT[16] + g_RT[18] - g_RT[21])) *
                           (sc[15] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[18] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 96:  N2H4 + NO2 <=> HONO + N2H3
    const amrex::Real k_f =
      8.2e-05 * exp((3.13) * logT - (4458.49965902982) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[25])) *
                           (sc[15] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 97:  N2H4 + NO2 <=> HNO2 + N2H3
    const amrex::Real k_f =
      2.4e-08 * exp((4.14) * logT - (3998.5596264843) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[26])) *
                           (sc[15] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 99:  H + N2H3 <=> H2 + N2H2
    const amrex::Real k_f =
      0.007476 * exp((2.796) * logT - (2355.05399596609) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[14] + g_RT[15])) * (sc[2] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 100:  H + N2H3 <=> H2 + H2NN
    const amrex::Real k_f =
      6.243 * exp((1.89) * logT - (124.294516453766) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[15] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 101:  H + N2H3 <=> NH + NH3
    const amrex::Real k_f = 100000;
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[10] - g_RT[12] + g_RT[15])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 102:  N2H3 + O <=> N2H2 + OH
    const amrex::Real k_f =
      170 * exp((1.5) * logT - (-325.077966109849) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 103:  N2H3 + O <=> HNO + NH2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[11] + g_RT[15] - g_RT[21])) *
                           (sc[11] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 104:  N2H3 + O => H + NH2 + NO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 105:  N2H3 + OH <=> H2O + N2H2
    const amrex::Real k_f = 1.2 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[15])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 106:  N2H3 + OH <=> H2NN + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[15] - g_RT[17])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 107:  N2H3 + OH <=> HNO + NH3
    const amrex::Real k_f = 1000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[12] + g_RT[15] - g_RT[21])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 108:  HO2 + N2H3 <=> H2O2 + N2H2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[14] + g_RT[15])) * (sc[7] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 109:  HO2 + N2H3 <=> N2H4 + O2
    const amrex::Real k_f =
      0.92 * exp((1.94) * logT - (1069.83863150083) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[15] - g_RT[16])) * (sc[8] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 110:  N2H3 + NH2 <=> N2H2 + NH3
    const amrex::Real k_f =
      6.08e-07 * exp((3.574) * logT - (598.827832307616) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[14] + g_RT[15])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 111:  N2H3 + NH2 <=> H2NN + NH3
    const amrex::Real k_f =
      1.11e-05 * exp((3.08) * logT - (106.178716484796) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] + g_RT[15] - g_RT[17])) *
                           (sc[12] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 112:  N2H3 + NH <=> N2H2 + NH2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 113:  N2H2 + N2H3 <=> N2H4 + NNH
    const amrex::Real k_f = 10000000 * exp(-(5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[14] + g_RT[15] - g_RT[16])) *
                           (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 114:  2 N2H3 <=> N2 + 2 NH3
    const amrex::Real k_f = 3000000;
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - 2.000000 * g_RT[12] + 2.000000 * g_RT[15])) *
      (refCinv) * (sc[0] * (sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[15] -= 2.000000 * qdot;
  }

  {
    // reaction 115:  2 N2H2 <=> N2H3 + NNH
    const amrex::Real k_f = 10000000 * exp(-(4999.45757476989) * invT);
    const amrex::Real qf = k_f * ((sc[14] * sc[14]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + 2.000000 * g_RT[14] - g_RT[15])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= 2.000000 * qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 116:  2 NH2 <=> H2 + H2NN
    const amrex::Real k_f =
      0.072 * exp((1.88) * logT - (4429.31309241314) * invT);
    const amrex::Real qf = k_f * ((sc[11] * sc[11]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[17])) *
                           (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= 2.000000 * qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 117:  H2NN <=> H + NNH
    const amrex::Real k_f =
      3.4e+26 * exp((-4.83) * logT - (23258.6742934941) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[13] + g_RT[17])) *
                           (refCinv) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 118:  H + H2NN <=> H2 + NNH
    const amrex::Real k_f =
      480 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[17])) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 119:  H + H2NN <=> H + N2H2
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[14] + g_RT[17])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 120:  H2NN + O <=> NNH + OH
    const amrex::Real k_f =
      330 * exp((1.5) * logT - (-449.875699229419) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 121:  H2NN + O <=> NH2 + NO
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[11] + g_RT[17] - g_RT[18])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[11] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 122:  H2NN + OH <=> H2O + NNH
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[17])) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 123:  H2NN + OH => H + NH2 + NO
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 124:  H2NN + HO2 => NH2 + NO + OH
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[11] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 125:  H2NN + HO2 <=> H2O2 + NNH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[17])) * (sc[7] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 126:  H2NN + O2 <=> NH2 + NO2
    const amrex::Real k_f = 1500000 * exp(-(2999.67454486193) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[11] + g_RT[17] - g_RT[20])) *
                           (sc[11] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[11] += qdot;
    wdot[17] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 127:  H2NN + NH2 <=> NH3 + NNH
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[17])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 130:  H + HNOH <=> NH2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[23])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[11] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 131:  H + HNOH <=> H2 + HNO
    const amrex::Real k_f = 480 * exp((1.5) * logT - (190.215899674184) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[23])) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 132:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 133:  HNOH + O <=> HNO + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (-180.15156635809) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 134:  HNOH + OH <=> H2O + HNO
    const amrex::Real k_f = 2.4 * exp((2) * logT - (-599.834265639226) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[23])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 135:  HNOH + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.7) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[23])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 136:  HNOH + O2 <=> HNO + HO2
    const amrex::Real k_f = 3000000 * exp(-(12580.416645118) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[23])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 137:  HNOH + NH2 <=> N2H3 + OH
    const amrex::Real k_f =
      1e-05 * exp((3.5) * logT - (-235.002182930804) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[11] - g_RT[15] + g_RT[23])) *
                           (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[15] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 138:  HNOH + NH2 <=> H2NN + H2O
    const amrex::Real k_f =
      88000000000 * exp((-1.1) * logT - (560.080149040653) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[11] - g_RT[17] + g_RT[23])) *
                           (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[17] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 139:  HNOH + NH2 <=> HNO + NH3
    const amrex::Real k_f =
      1.8 * exp((1.9) * logT - (-579.705599007037) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[23])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 140:  HNOH + NO2 <=> HNO + HONO
    const amrex::Real k_f = 600000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[25])) *
                           (sc[21] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[20] -= qdot;
    wdot[21] += qdot;
    wdot[23] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 142:  H + NH2OH <=> H2 + HNOH
    const amrex::Real k_f = 480 * exp((1.5) * logT - (3144.60094461369) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[23] + g_RT[24])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 143:  H + NH2OH <=> H2 + H2NO
    const amrex::Real k_f = 240 * exp((1.5) * logT - (2549.79884563251) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[22] + g_RT[24])) * (sc[2] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 144:  NH2OH + O <=> HNOH + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (1944.93241333524) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 145:  NH2OH + O <=> H2NO + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1514.68216407221) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[22] + g_RT[24])) * (sc[4] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 146:  NH2OH + OH <=> H2O + HNOH
    const amrex::Real k_f =
      0.015 * exp((2.61) * logT - (-1779.87734695129) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 147:  NH2OH + OH <=> H2NO + H2O
    const amrex::Real k_f =
      0.15 * exp((2.28) * logT - (-652.168798882917) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[24])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 148:  NH2 + NH2OH <=> HNOH + NH3
    const amrex::Real k_f =
      1.1e-07 * exp((4) * logT - (-48.8120165830578) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[23] + g_RT[24])) *
                           (sc[12] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 149:  NH2 + NH2OH <=> H2NO + NH3
    const amrex::Real k_f =
      9.5e-06 * exp((3.42) * logT - (-509.758482460181) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[22] + g_RT[24])) *
                           (sc[12] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 150:  NH + NH2OH <=> HNOH + NH2
    const amrex::Real k_f =
      2.9e-09 * exp((4.4) * logT - (787.030865318582) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[23] + g_RT[24])) *
                           (sc[11] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 151:  NH + NH2OH <=> H2NO + NH2
    const amrex::Real k_f =
      1.5e-09 * exp((4.6) * logT - (1219.79719791064) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[22] + g_RT[24])) *
                           (sc[11] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 152:  HO2 + NH2OH <=> H2O2 + HNOH
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (4809.24167509571) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[23] + g_RT[24])) * (sc[7] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 153:  HO2 + NH2OH <=> H2NO + H2O2
    const amrex::Real k_f =
      0.014 * exp((2.69) * logT - (3229.64456113469) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[22] + g_RT[24])) * (sc[7] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 154:  HNO + HNOH <=> NH2OH + NO
    const amrex::Real k_f = 1000000 * exp(-(1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[21] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[21] + g_RT[23] - g_RT[24])) *
                           (sc[18] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[21] -= qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 156:  H + NH3 <=> H2 + NH2
    const amrex::Real k_f =
      2.89 * exp((2.23) * logT - (5233.45332436908) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[11] + g_RT[12])) * (sc[2] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 157:  NH3 + OH <=> H2O + NH2
    const amrex::Real k_f =
      0.1559 * exp((2.372) * logT - (59.8324615641812) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 158:  HO2 + NH3 <=> H2O2 + NH2
    const amrex::Real k_f =
      1.173e-06 * exp((3.839) * logT - (8685.51965178946) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[11] + g_RT[12])) * (sc[7] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 159:  NH3 + O <=> NH2 + OH
    const amrex::Real k_f =
      0.000443 * exp((3.18) * logT - (3391.63000585723) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[11] + g_RT[12])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 160:  NH2 + NH3 <=> H2 + N2H3
    const amrex::Real k_f =
      100000 * exp((0.5) * logT - (10869.4799813819) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[15])) *
                           (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 161:  NNH <=> H + N2
    const amrex::Real k_f = 330000000;
    const amrex::Real qf = k_f * (sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[13])) * (refCinv) * (sc[0] * sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 162:  H + NNH <=> H2 + N2
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[2] + g_RT[13])) * (sc[0] * sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 163:  NNH + OH <=> H2O + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[13])) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 164:  NNH + NO <=> HNO + N2
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[13] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[13] + g_RT[18] - g_RT[21])) *
                           (sc[0] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[13] -= qdot;
    wdot[18] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 165:  NH + NNH <=> N2 + NH2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[10] - g_RT[11] + g_RT[13])) *
                           (sc[0] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 166:  NH2 + NNH <=> N2 + NH3
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[11] - g_RT[12] + g_RT[13])) *
                           (sc[0] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 167:  NNH + O <=> H + N2O
    const amrex::Real k_f =
      187000000 * exp((-0.274) * logT - (-11.0707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[13] - g_RT[19])) * (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[13] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 168:  NNH + O <=> NH + NO
    const amrex::Real k_f =
      518000 * exp((0.388) * logT - (-205.81561631413) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] + g_RT[13] - g_RT[18])) *
                           (sc[10] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[13] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 169:  NNH + O <=> N2 + OH
    const amrex::Real k_f =
      12000000 * exp((0.145) * logT - (-109.198016479624) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[4] + g_RT[13])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 170:  NNH + O2 <=> HO2 + N2
    const amrex::Real k_f =
      560000000 * exp((-0.385) * logT - (-6.54181665546136) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[8] + g_RT[13])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 171:  2 NNH <=> N2 + N2H2
    const amrex::Real k_f = 10000000 * exp(-(4999.45757476989) * invT);
    const amrex::Real qf = k_f * ((sc[13] * sc[13]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + 2.000000 * g_RT[13] - g_RT[14])) *
                           (sc[0] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[13] -= 2.000000 * qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 172:  HNO <=> H + NO
    const amrex::Real k_f =
      1.8259e+20 * exp((-3.008) * logT - (24094.01395873) * invT);
    const amrex::Real qf = k_f * (sc[21]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[18] + g_RT[21])) *
                           (refCinv) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 173:  HNO + O <=> NO + OH
    const amrex::Real k_f = 23000000;
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[21])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 174:  H + HNO <=> H2 + NO
    const amrex::Real k_f =
      440000 * exp((0.72) * logT - (327.090832773068) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[18] + g_RT[21])) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 175:  HNO + OH <=> H2O + NO
    const amrex::Real k_f = 36000000;
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[21])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 176:  HNO + O2 <=> HO2 + NO
    const amrex::Real k_f = 20000000 * exp(-(8051.46665287552) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[18] + g_RT[21])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 177:  HNO + N <=> NH + NO
    const amrex::Real k_f = 10000000 * exp(-(1001.40116495139) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[21])) *
                           (sc[10] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 178:  HNO + N <=> H + N2O
    const amrex::Real k_f =
      50000 * exp((0.5) * logT - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] - g_RT[19] + g_RT[21])) * (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 179:  HNO + NH <=> NH2 + NO
    const amrex::Real k_f = 500000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[10] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[21])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 180:  HNO + NO <=> N2O + OH
    const amrex::Real k_f = 8510000 * exp(-(14900.2454744777) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[18] - g_RT[19] + g_RT[21])) *
                           (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 181:  HNO + NO2 <=> HONO + NO
    const amrex::Real k_f =
      0.044 * exp((2.6) * logT - (2032.99532985107) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] + g_RT[21] - g_RT[25])) *
                           (sc[18] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[21] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 182:  2 HNO <=> H2O + N2O
    const amrex::Real k_f = 900 * exp(-(1559.97166399463) * invT);
    const amrex::Real qf = k_f * ((sc[21] * sc[21]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] - g_RT[19] + 2.000000 * g_RT[21])) *
                           (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[19] += qdot;
    wdot[21] -= 2.000000 * qdot;
  }

  {
    // reaction 184:  H + HON <=> H + HNO
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[21] + g_RT[27])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[21] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 185:  H + HON <=> NH + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[10] + g_RT[27])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 186:  HON + O <=> NO + OH
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[27])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[18] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 187:  HON + OH <=> H + HONO
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[4] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[25] + g_RT[27])) * (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[25] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 188:  HON + O2 <=> NO2 + OH
    const amrex::Real k_f = 1000000 * exp(-(2499.98039571785) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[20] + g_RT[27])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[20] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 190:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2100000 * exp(-(-241.543999586265) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[18] - g_RT[20])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 191:  H2 + NO2 <=> H + HONO
    const amrex::Real k_f =
      0.013 * exp((2.76) * logT - (14980.7601410065) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[25])) * (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 192:  H2 + NO2 <=> H + HNO2
    const amrex::Real k_f =
      2.4e-06 * exp((3.73) * logT - (16304.2199720729) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[26])) * (sc[1] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 193:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 130000000 * exp(-(182.164433021309) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[18] + g_RT[20])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 194:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 110000000 * exp((-0.5) * logT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[18] + g_RT[20])) * (sc[8] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 196:  2 NO2 <=> 2 NO + O2
    const amrex::Real k_f = 4500000 * exp(-(13888.7799762103) * invT);
    const amrex::Real qf = k_f * ((sc[20] * sc[20]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - 2.000000 * g_RT[18] + 2.000000 * g_RT[20])) *
      (refCinv) * (sc[8] * (sc[18] * sc[18]));
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[18] += 2.000000 * qdot;
    wdot[20] -= 2.000000 * qdot;
  }

  {
    // reaction 197:  HO2 + NO2 <=> HONO + O2
    const amrex::Real k_f =
      1.91e-06 * exp((3.32) * logT - (1531.79153070957) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[25])) * (sc[8] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[20] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 198:  HO2 + NO2 <=> HNO2 + O2
    const amrex::Real k_f =
      1.85e-05 * exp((3.26) * logT - (2507.52864570492) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[26])) * (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[20] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 200:  H + N2O <=> N2 + OH
    const amrex::Real k_f = 25300 * exp(-(2289.63582941147) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 201:  H + N2O <=> N2 + OH
    const amrex::Real k_f = 500000000 * exp(-(9108.22165106543) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19])) * (sc[0] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 202:  N2O + O <=> 2 NO
    const amrex::Real k_f = 92000000 * exp(-(13924.0051428166) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - 2.000000 * g_RT[18] + g_RT[19])) *
                           ((sc[18] * sc[18]));
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[18] += 2.000000 * qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 203:  N2O + O <=> N2 + O2
    const amrex::Real k_f = 3700000 * exp(-(8016.24148626918) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[8] + g_RT[19])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 204:  N2O + OH <=> HO2 + N2
    const amrex::Real k_f =
      1.3e-08 * exp((4.7) * logT - (18397.6013018206) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[19])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 205:  N2O + NO <=> N2 + NO2
    const amrex::Real k_f =
      0.53 * exp((2.2) * logT - (23288.8672934424) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[18] + g_RT[19] - g_RT[20])) *
                           (sc[0] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 206:  N + N2O <=> N2 + NO
    const amrex::Real k_f = 10000000 * exp(-(9998.91514953978) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[19])) * (sc[0] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 208:  H + H2NO <=> H2 + HNO
    const amrex::Real k_f = 480 * exp((1.5) * logT - (784.917355322202) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[22])) * (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 209:  H + H2NO <=> NH2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[22])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[11] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 210:  H2NO + O <=> HNO + OH
    const amrex::Real k_f = 330 * exp((1.5) * logT - (244.965872913738) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 211:  H2NO + OH <=> H2O + HNO
    const amrex::Real k_f = 2.4 * exp((2) * logT - (599.934908972387) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 212:  H2NO + NH2 <=> HNO + NH3
    const amrex::Real k_f =
      1.8 * exp((1.94) * logT - (-291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[22])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 213:  H2NO + HO2 <=> H2O2 + HNO
    const amrex::Real k_f =
      0.029 * exp((2.69) * logT - (-805.146665287552) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[22])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 214:  H2NO + O2 <=> HNO + HO2
    const amrex::Real k_f =
      0.00023 * exp((2.994) * logT - (8303.07498577788) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[22])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 215:  H2NO + NO <=> 2 HNO
    const amrex::Real k_f = 0.02 * exp((2) * logT - (6541.81665546136) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[18] - 2.000000 * g_RT[21] + g_RT[22])) *
                           ((sc[21] * sc[21]));
    const amrex::Real qdot = qf - qr;
    wdot[18] -= qdot;
    wdot[21] += 2.000000 * qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 216:  H2NO + NO2 <=> HNO + HONO
    const amrex::Real k_f = 600000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[20] - g_RT[21] + g_RT[22] - g_RT[25])) *
                           (sc[21] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[20] -= qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 217:  HONO + O <=> NO2 + OH
    const amrex::Real k_f = 12000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[25])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[20] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 218:  H + HONO <=> HNO + OH
    const amrex::Real k_f =
      56000 * exp((0.9) * logT - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[21] + g_RT[25])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 219:  H + HONO <=> H2O + NO
    const amrex::Real k_f = 8.1 * exp((1.9) * logT - (1937.38416334817) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[25])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 220:  HONO + OH <=> H2O + NO2
    const amrex::Real k_f = 1700000 * exp(-(-261.672666218454) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[25])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[20] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 221:  HONO + NO2 <=> HNO3 + NO
    const amrex::Real k_f = 200000 * exp(-(16455.1849718143) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] + g_RT[25] - g_RT[29])) *
                           (sc[18] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[25] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 222:  2 HONO <=> H2O + NO + NO2
    const amrex::Real k_f =
      3.5e-07 * exp((3.64) * logT - (6109.0503228693) * invT);
    const amrex::Real qf = k_f * ((sc[25] * sc[25]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] - g_RT[18] - g_RT[20] + 2.000000 * g_RT[25])) *
      (refCinv) * (sc[5] * sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[20] += qdot;
    wdot[25] -= 2.000000 * qdot;
  }

  {
    // reaction 224:  HNO2 + O <=> NO2 + OH
    const amrex::Real k_f = 170 * exp((1.5) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[26])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 225:  HNO2 + OH <=> H2O + NO2
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[4] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[26])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 227:  2 NO2 <=> NO + NO3
    const amrex::Real k_f =
      9600 * exp((0.7) * logT - (10517.2283153186) * invT);
    const amrex::Real qf = k_f * ((sc[20] * sc[20]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + 2.000000 * g_RT[20] - g_RT[28])) *
                           (sc[18] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= 2.000000 * qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 228:  H + NO3 <=> NO2 + OH
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[20] + g_RT[28])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[20] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 229:  NO3 + O <=> NO2 + O2
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[8] - g_RT[20] + g_RT[28])) * (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 230:  NO3 + OH <=> HO2 + NO2
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[20] + g_RT[28])) * (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[20] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 231:  HO2 + NO3 <=> NO2 + O2 + OH
    const amrex::Real k_f = 1500000;
    const amrex::Real qf = k_f * (sc[6] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[8] - g_RT[20] + g_RT[28])) *
      (refCinv) * (sc[4] * sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 233:  2 NO3 <=> 2 NO2 + O2
    const amrex::Real k_f = 512000 * exp(-(2450.66516246898) * invT);
    const amrex::Real qf = k_f * ((sc[28] * sc[28]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - 2.000000 * g_RT[20] + 2.000000 * g_RT[28])) *
      (refCinv) * (sc[8] * (sc[20] * sc[20]));
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[20] += 2.000000 * qdot;
    wdot[28] -= 2.000000 * qdot;
  }

  {
    // reaction 234:  HO2 + NO3 <=> HNO3 + O2
    const amrex::Real k_f = 555000;
    const amrex::Real qf = k_f * (sc[6] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] + g_RT[28] - g_RT[29])) * (sc[8] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 237:  H + HNO3 <=> H2 + NO3
    const amrex::Real k_f = 556 * exp((1.53) * logT - (8252.7533191974) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[28] + g_RT[29])) * (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 238:  H + HNO3 <=> H2O + NO2
    const amrex::Real k_f =
      6.08e-05 * exp((3.29) * logT - (3165.23282791169) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[20] + g_RT[29])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[20] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 239:  H + HNO3 <=> HONO + OH
    const amrex::Real k_f =
      0.382 * exp((2.3) * logT - (3512.45232731694) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[25] + g_RT[29])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[25] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 240:  HNO3 + OH <=> H2O + NO3
    const amrex::Real k_f = 10300 * exp(-(-623.988665597852) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[29])) * (sc[5] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 241:  HNO3 + NH2 <=> NH3 + NO3
    const amrex::Real k_f =
      1.03e+15 * exp((-3.85) * logT - (96.1143831687015) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29])) *
                           (sc[12] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 242:  HNO3 + NH2 <=> NH3 + NO3
    const amrex::Real k_f =
      3.08e-05 * exp((3.22) * logT - (-69.947116546856) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29])) *
                           (sc[12] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 30; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 30; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 30; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[30]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 30; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[30];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 28.014000;  // N2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 2.016000;   // H2
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 31.998000;  // O2
  XW += x[9] * 14.007000;  // N
  XW += x[10] * 15.015000; // NH
  XW += x[11] * 16.023000; // NH2
  XW += x[12] * 17.031000; // NH3
  XW += x[13] * 29.022000; // NNH
  XW += x[14] * 30.030000; // N2H2
  XW += x[15] * 31.038000; // N2H3
  XW += x[16] * 32.046000; // N2H4
  XW += x[17] * 30.030000; // H2NN
  XW += x[18] * 30.006000; // NO
  XW += x[19] * 44.013000; // N2O
  XW += x[20] * 46.005000; // NO2
  XW += x[21] * 31.014000; // HNO
  XW += x[22] * 32.022000; // H2NO
  XW += x[23] * 32.022000; // HNOH
  XW += x[24] * 33.030000; // NH2OH
  XW += x[25] * 47.013000; // HONO
  XW += x[26] * 47.013000; // HNO2
  XW += x[27] * 31.014000; // HON
  XW += x[28] * 62.004000; // NO3
  XW += x[29] * 63.012000; // HNO3
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 30; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 30; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // N2
  kcharge[1] = 0;  // H
  kcharge[2] = 0;  // H2
  kcharge[3] = 0;  // O
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // H2O
  kcharge[6] = 0;  // HO2
  kcharge[7] = 0;  // H2O2
  kcharge[8] = 0;  // O2
  kcharge[9] = 0;  // N
  kcharge[10] = 0; // NH
  kcharge[11] = 0; // NH2
  kcharge[12] = 0; // NH3
  kcharge[13] = 0; // NNH
  kcharge[14] = 0; // N2H2
  kcharge[15] = 0; // N2H3
  kcharge[16] = 0; // N2H4
  kcharge[17] = 0; // H2NN
  kcharge[18] = 0; // NO
  kcharge[19] = 0; // N2O
  kcharge[20] = 0; // NO2
  kcharge[21] = 0; // HNO
  kcharge[22] = 0; // H2NO
  kcharge[23] = 0; // HNOH
  kcharge[24] = 0; // NH2OH
  kcharge[25] = 0; // HONO
  kcharge[26] = 0; // HNO2
  kcharge[27] = 0; // HON
  kcharge[28] = 0; // NO3
  kcharge[29] = 0; // HNO3
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[30];
  CKCHRG(kchrg);

  for (int id = 0; id < 30; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 961; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[30];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 30; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[30];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[30];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + (14 - 1) * sc[5] + (0.78 - 1) * sc[8];
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 4700000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.366e+20 * exp(-1.72 * logT - (264.088106214317) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.72 * invT + (264.088106214317) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] - g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[8] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[8];
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 14 * dcdc_fac;
  dqdc[6] = dcdc_fac - k_r;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 0.78 * dcdc_fac + k_f * sc[1];
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] -= dqdc[k];
    J[31 * k + 6] += dqdc[k];
    J[31 * k + 8] -= dqdc[k];
  }
  J[931] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT

  // reaction 24: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[2] + (7.5 - 1) * sc[5] +
          (7.7 - 1) * sc[7] + (1.2 - 1) * sc[8];
  // forward
  phi_f = sc[7];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.5e+24 * exp(-2.3 * logT - (24531.3092413143) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3092413143) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refC * exp(-2.000000 * g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (2.000000 * h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += 2 * q; // OH
  wdot[7] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.5 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 3.7 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * 2.000000 * sc[4];
  dqdc[5] = 7.5 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = 7.7 * dcdc_fac + k_f;
  dqdc[8] = 1.2 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] += 2 * dqdc[k];
    J[31 * k + 7] -= dqdc[k];
  }
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[937] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 85: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.69 - 1) * sc[8] + (4.87 - 1) * sc[12];
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] -= 2 * q; // NH2
  wdot[16] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 0.69 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac + k_f * 2.000000 * sc[11];
  dqdc[12] = 4.87 * dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac - k_r;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 11] += -2 * dqdc[k];
    J[31 * k + 16] += dqdc[k];
  }
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[946] += dqdT;      // dwdot[N2H4]/dT

  // reaction 98: N2H3 (+M) <=> H + N2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0];
  // forward
  phi_f = sc[15];
  k_f = 128000000000 * exp(0.819 * logT - (24204.721625207) * invT);
  dlnkfdT = 0.819 * invT + (24204.721625207) * invT2;
  // pressure-fall-off
  k_0 = 3.84e+40 * exp(-6.88 * logT - (27425.3082863572) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.88 * invT + (27425.3082863572) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.842) * exp(-T / 80000);
  Fcent2 = 0.842 * exp(-T / 28);
  Fcent3 = exp(-7298 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 80000 - Fcent2 / 28 + Fcent3 * 7298 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac - k_r * sc[14];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac - k_r * sc[1];
  dqdc[15] = dcdc_fac + k_f;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 14] += dqdc[k];
    J[31 * k + 15] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 141: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[24];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33604.8089424392) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33604.8089424392) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.35) * exp(-T / 1e-30);
  Fcent2 = 0.35 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = refC * exp(-g_RT[4] - g_RT[11] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[4] + h_RT[11]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[24] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac - k_r * sc[11];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac - k_r * sc[4];
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] += dqdc[k];
    J[31 * k + 11] += dqdc[k];
    J[31 * k + 24] -= dqdc[k];
  }
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 189: NO + OH (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 110000000 * exp(-0.3 * logT);
  dlnkfdT = -0.3 * invT;
  // pressure-fall-off
  k_0 = 3.392e+23 * exp(-2.51 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.51 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1e-30);
  Fcent2 = 0.75 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[4] + g_RT[18] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[18] -= q; // NO
  wdot[25] += q; // HONO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[18];
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[4];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac - k_r;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] -= dqdc[k];
    J[31 * k + 18] -= dqdc[k];
    J[31 * k + 25] += dqdc[k];
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 195: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.4 - 1) * sc[0] + (6.4 - 1) * sc[5] + (0.45 - 1) * sc[8];
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 295000000 * exp(-0.4 * logT);
  dlnkfdT = -0.4 * invT;
  // pressure-fall-off
  k_0 = 3.336e+20 * exp(-1.6 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.6 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8) * exp(-T / 1e-30);
  Fcent2 = 0.8 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[3] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[18] -= q; // NO
  wdot[20] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 0.4 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac + k_f * sc[18];
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6.4 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 0.45 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[3];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 18] -= dqdc[k];
    J[31 * k + 20] += dqdc[k];
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 223: HNO2 (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[26];
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  dlnkfdT = (16253.8983054924) * invT2;
  // pressure-fall-off
  k_0 = 3.1e+18 * exp(-(15851.3249728487) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (15851.3249728487) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.149) * exp(-T / 1e-30);
  Fcent2 = 1.149 * exp(-T / 3125);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 3125 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = exp(-g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26]) + (h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[25] += q; // HONO
  wdot[26] -= q; // HNO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac - k_r;
  dqdc[26] = dcdc_fac + k_f;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 25] += dqdc[k];
    J[31 * k + 26] -= dqdc[k];
  }
  J[955] += dqdT; // dwdot[HONO]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 226: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 3500000 * exp(0.2 * logT);
  dlnkfdT = 0.2 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[3] + g_RT[20] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[20] -= q; // NO2
  wdot[28] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac + k_f * sc[20];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac + k_f * sc[3];
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac - k_r;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 20] -= dqdc[k];
    J[31 * k + 28] += dqdc[k];
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[NO3]/dT

  // reaction 235: NO2 + OH (+M) <=> HNO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + (10 - 1) * sc[5] + sc[8];
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 6.42e+32 * exp(-5.49 * logT - (1182.55916464109) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (1182.55916464109) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 10);
  Fcent2 = 1 * exp(-T / 1168);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 10 - Fcent2 / 1168);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[4] + g_RT[20] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[20] -= q; // NO2
  wdot[29] += q; // HNO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[20];
  dqdc[5] = 10 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 2 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac + k_f * sc[4];
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac - k_r;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 4] -= dqdc[k];
    J[31 * k + 20] -= dqdc[k];
    J[31 * k + 29] += dqdc[k];
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 199: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (12 - 1) * sc[5] + (1.4 - 1) * sc[8];
  // forward
  phi_f = sc[19];
  k_f = 1300000000000 * exp(-(31486.2667794013) * invT);
  dlnkfdT = (31486.2667794013) * invT2;
  // pressure-fall-off
  k_0 = 400000000000000 * exp(-(28482.0632845471) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28482.0632845471) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = refC * exp(-g_RT[0] - g_RT[3] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[0] + h_RT[3]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O
  wdot[19] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 1.7 * dcdc_fac - k_r * sc[3];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac - k_r * sc[0];
  dqdc[4] = dcdc_fac;
  dqdc[5] = 12 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 1.4 * dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac + k_f;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 0] += dqdc[k];
    J[31 * k + 3] += dqdc[k];
    J[31 * k + 19] -= dqdc[k];
  }
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 6: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2];
  k_f = 46000000000000 * exp(-1.4 * logT - (52525.7555766966) * invT);
  dlnkfdT = -1.4 * invT + (52525.7555766966) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]);
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2]) + (2.000000 * h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[2] -= q;     // H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * 2.000000 * sc[1];
  dqdc[2] = 2.5 * q_nocor + k_f;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += 2 * dqdc[k];
    J[31 * k + 2] -= dqdc[k];
  }
  J[931] += 2 * dqdT; // dwdot[H]/dT
  J[932] -= dqdT;     // dwdot[H2]/dT

  // reaction 7: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 19 * exp(-(-899.751398458839) * invT);
  dlnkfdT = (-899.751398458839) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[3] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= 2 * q; // O
  wdot[8] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = 2.5 * q_nocor;
  dqdc[3] = q_nocor + k_f * 2.000000 * sc[3];
  dqdc[4] = q_nocor;
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor - k_r;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] += -2 * dqdc[k];
    J[31 * k + 8] += dqdc[k];
  }
  J[933] += -2 * dqdT; // dwdot[O]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 8: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 4700000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[3];
  dqdc[2] = 2.5 * q_nocor;
  dqdc[3] = q_nocor + k_f * sc[1];
  dqdc[4] = q_nocor - k_r;
  dqdc[5] = 12 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] -= dqdc[k];
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 4] += dqdc[k];
  }
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 9: H2O + M <=> H + OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + sc[0] + (3 - 1) * sc[2] + (0 - 1) * sc[5] + (1.5 - 1) * sc[8];
  // forward
  phi_f = sc[5];
  k_f = 6.1e+21 * exp(-3.322 * logT - (60783.5410625521) * invT);
  dlnkfdT = -3.322 * invT + (60783.5410625521) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5]) + (h_RT[1] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // OH
  wdot[5] -= q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[4];
  dqdc[2] = 3 * q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor - k_r * sc[1];
  dqdc[5] = +k_f;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = 1.5 * q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 4] += dqdc[k];
    J[31 * k + 5] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[H2O]/dT

  // reaction 10: H2O + H2O <=> H + OH + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1e+20 * exp(-2.44 * logT - (60476.5788964112) * invT);
  dlnkfdT = -2.44 * invT + (60476.5788964112) * invT2;
  // reverse
  phi_r = sc[1] * sc[4] * sc[5];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[4] + h_RT[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // OH
  wdot[5] -= q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[5];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[36] -= dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[5];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * 2.000000 * sc[5] - k_r * sc[1] * sc[4];
  J[156] += dqdci; // dwdot[H]/d[H2O]
  J[159] += dqdci; // dwdot[OH]/d[H2O]
  J[160] -= dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[H2O]/dT

  // reaction 18: 2 H + O2 <=> H2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[8];
  k_f = 88000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[8]) + (h_RT[2] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[2] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[8];
  J[32] += -2 * dqdci; // dwdot[H]/d[H]
  J[33] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[63] += -2 * dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[2];
  J[249] += -2 * dqdci; // dwdot[H]/d[O2]
  J[250] += dqdci;      // dwdot[H2]/d[O2]
  // d()/dT
  J[931] += -2 * dqdT; // dwdot[H]/dT
  J[932] += dqdT;      // dwdot[H2]/dT

  // reaction 20: H + O + O2 <=> OH + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[8];
  k_f = 73500000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[8]) + (h_RT[4] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1] * sc[8];
  J[94] -= dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[4];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 21: H + OH + O2 <=> H2O + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4] * sc[8];
  k_f = 25600000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[4] + h_RT[8]) + (h_RT[5] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[4] * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[1] * sc[8];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[4] - k_r * sc[5];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT

  // reaction 30: N2 + M <=> 2 N + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (16.25 - 1) * sc[5];
  // forward
  phi_f = sc[0];
  k_f = 1890000000000 * exp(-0.85 * logT - (113223.749806062) * invT);
  dlnkfdT = -0.85 * invT + (113223.749806062) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = refC * exp(g_RT[0] - 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0]) + (2.000000 * h_RT[9]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;     // N2
  wdot[9] += 2 * q; // N
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor + k_f;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 16.25 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor - k_r * 2.000000 * sc[9];
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 0] -= dqdc[k];
    J[31 * k + 9] += 2 * dqdc[k];
  }
  J[930] -= dqdT;     // dwdot[N2]/dT
  J[939] += 2 * dqdT; // dwdot[N]/dT

  // reaction 31: N + O + M <=> NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (16.25 - 1) * sc[5];
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 760 * exp(-0.1 * logT - (-890.693498474354) * invT);
  dlnkfdT = -0.1 * invT + (-890.693498474354) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[3] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor + k_f * sc[9];
  dqdc[4] = q_nocor;
  dqdc[5] = 16.25 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor + k_f * sc[3];
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor - k_r;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 3] -= dqdc[k];
    J[31 * k + 9] -= dqdc[k];
    J[31 * k + 18] += dqdc[k];
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 52: NH2 + M <=> H + NH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[11];
  k_f = 1200000000 * exp(-(38245.8504469897) * invT);
  dlnkfdT = (38245.8504469897) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = refC * exp(-g_RT[1] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11]) + (h_RT[1] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[10];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor - k_r * sc[1];
  dqdc[11] = q_nocor + k_f;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 10] += dqdc[k];
    J[31 * k + 11] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 73: N2H2 + M <=> H + NNH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[14];
  k_f = 1.9e+21 * exp(-3.05 * logT - (33262.621609692) * invT);
  dlnkfdT = -3.05 * invT + (33262.621609692) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = refC * exp(-g_RT[1] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[1] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[13];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 7 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor - k_r * sc[1];
  dqdc[14] = q_nocor + k_f;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 13] += dqdc[k];
    J[31 * k + 14] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 128: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[23];
  Kc = exp(g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // H2NO
  wdot[23] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor + k_f;
  dqdc[23] = q_nocor - k_r;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 22] -= dqdc[k];
    J[31 * k + 23] += dqdc[k];
  }
  J[952] -= dqdT; // dwdot[H2NO]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT

  // reaction 129: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[23];
  k_f = 2e+18 * exp(-2.8 * logT - (29654.5581158721) * invT);
  dlnkfdT = -2.8 * invT + (29654.5581158721) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = refC * exp(-g_RT[1] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23]) + (h_RT[1] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[21];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor - k_r * sc[1];
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor + k_f;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 21] += dqdc[k];
    J[31 * k + 23] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 155: NH3 + M <=> H + NH2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[12];
  k_f = 22000000000 * exp(-(47035.6617527671) * invT);
  dlnkfdT = (47035.6617527671) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = refC * exp(-g_RT[1] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[1] + h_RT[11]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[11];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor - k_r * sc[1];
  dqdc[12] = q_nocor + k_f;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 11] += dqdc[k];
    J[31 * k + 12] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 183: HON + M <=> H + NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[27];
  k_f = 51000000000000 * exp(-1.73 * logT - (8071.5953195077) * invT);
  dlnkfdT = -1.73 * invT + (8071.5953195077) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = refC * exp(-g_RT[1] - g_RT[18] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27]) + (h_RT[1] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[18] += q; // NO
  wdot[27] -= q; // HON
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[18];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 7 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor - k_r * sc[1];
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor + k_f;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 18] += dqdc[k];
    J[31 * k + 27] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 207: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 2.8e+18 * exp(-2.8 * logT - (32663.7937773844) * invT);
  dlnkfdT = -2.8 * invT + (32663.7937773844) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = refC * exp(-g_RT[1] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[1] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[21];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 10 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor - k_r * sc[1];
  dqdc[22] = q_nocor + k_f;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 1] += dqdc[k];
    J[31 * k + 21] += dqdc[k];
    J[31 * k + 22] -= dqdc[k];
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 232: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[28];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[8] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[8] - g_RT[18] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[28]) + (h_RT[8] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // O2
  wdot[18] += q; // NO
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[18] * sc[20];
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8] * sc[20];
  J[566] += dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[586] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[28] - k_r * sc[8] * sc[18];
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[20];
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[886] += dqdci; // dwdot[NO]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 236: HO2 + NO + M <=> HNO3 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 1500000000000 * exp(-3.5 * logT - (1107.07666477038) * invT);
  dlnkfdT = -3.5 * invT + (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[6] + g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[18] -= q; // NO
  wdot[29] += q; // HNO3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor + k_f * sc[18];
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor + k_f * sc[6];
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor - k_r;
  for (int k = 0; k < 30; k++) {
    J[31 * k + 6] -= dqdc[k];
    J[31 * k + 18] -= dqdc[k];
    J[31 * k + 29] += dqdc[k];
  }
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // O
  wdot[4] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] += dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[39] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[94] -= dqdci;  // dwdot[H]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[127] += dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[65] -= dqdci; // dwdot[O]/d[H2]
  J[66] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[94] += dqdci; // dwdot[H]/d[O]
  J[95] -= dqdci; // dwdot[H2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[65] -= dqdci; // dwdot[O]/d[H2]
  J[66] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[94] += dqdci; // dwdot[H]/d[O]
  J[95] -= dqdci; // dwdot[H2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[66] -= dqdci; // dwdot[OH]/d[H2]
  J[67] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[OH]
  dqdci = +k_f * sc[2];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[156] += dqdci; // dwdot[H]/d[H2O]
  J[157] -= dqdci; // dwdot[H2]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT

  // reaction 4: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 20 * exp(1.651 * logT - (317.529716122778) * invT);
  dlnkfdT = 1.651 * invT + (317.529716122778) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[98] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[158] += dqdci;      // dwdot[O]/d[H2O]
  J[159] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[935] += dqdT;      // dwdot[H2O]/dT

  // reaction 5: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 260000 * exp(-0.057 * logT - (-416.160182620503) * invT);
  dlnkfdT = -0.057 * invT + (-416.160182620503) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[98] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[158] += dqdci;      // dwdot[O]/d[H2O]
  J[159] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[935] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // H2
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[37] -= dqdci; // dwdot[HO2]/d[H]
  J[39] += dqdci; // dwdot[O2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[68] -= dqdci; // dwdot[HO2]/d[H2]
  J[70] += dqdci; // dwdot[O2]/d[H2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[188] += dqdci; // dwdot[H2]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[2];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[250] += dqdci; // dwdot[H2]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 13: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci;     // dwdot[H]/d[H]
  J[35] += 2 * dqdci; // dwdot[OH]/d[H]
  J[37] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[125] -= dqdci;     // dwdot[H]/d[OH]
  J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci;     // dwdot[H]/d[HO2]
  J[190] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] -= dqdT;     // dwdot[H]/dT
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[936] -= dqdT;     // dwdot[HO2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] += dqdci; // dwdot[O]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[37] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[94] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[98] += dqdci; // dwdot[H2O]/d[O]
  J[99] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[158] += dqdci; // dwdot[O]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[189] += dqdci; // dwdot[O]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT

  // reaction 15: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[6];
  k_f = 29000 * exp(1 * logT - (-364.328866042617) * invT);
  dlnkfdT = 1 * invT + (-364.328866042617) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[99] -= dqdci;  // dwdot[HO2]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[189] -= dqdci; // dwdot[O]/d[HO2]
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 16: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 190000000000000 * exp(-2.49 * logT - (293.878532829956) * invT);
  dlnkfdT = -2.49 * invT + (293.878532829956) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  J[163] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 1200 * exp(1.24 * logT - (-659.213832204183) * invT);
  dlnkfdT = 1.24 * invT + (-659.213832204183) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  J[163] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 19: 2 H + O2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[8];
  k_f = 40000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refCinv * exp(2.000000 * g_RT[1] - 2.000000 * g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[8]) + (2.000000 * h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[4] += 2 * q; // OH
  wdot[8] -= q;     // O2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[8];
  J[32] += -2 * dqdci; // dwdot[H]/d[H]
  J[35] += 2 * dqdci;  // dwdot[OH]/d[H]
  J[39] -= dqdci;      // dwdot[O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[125] += -2 * dqdci; // dwdot[H]/d[OH]
  J[128] += 2 * dqdci;  // dwdot[OH]/d[OH]
  J[132] -= dqdci;      // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[1];
  J[249] += -2 * dqdci; // dwdot[H]/d[O2]
  J[252] += 2 * dqdci;  // dwdot[OH]/d[O2]
  J[256] -= dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[931] += -2 * dqdT; // dwdot[H]/dT
  J[934] += 2 * dqdT;  // dwdot[OH]/dT
  J[938] -= dqdT;      // dwdot[O2]/dT

  // reaction 22: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1200 * exp(0.7712 * logT - (-918.370415093613) * invT);
  dlnkfdT = 0.7712 * invT + (-918.370415093613) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[192] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[194] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[223] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[225] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[254] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[255] += dqdci;      // dwdot[H2O2]/d[O2]
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[936] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 23: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1300000 * exp(0.295 * logT - (3722.29367695751) * invT);
  dlnkfdT = 0.295 * invT + (3722.29367695751) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[192] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[194] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[223] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[225] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[254] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[255] += dqdci;      // dwdot[H2O2]/d[O2]
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[936] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 25: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[38] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[159] += dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[218] -= dqdci; // dwdot[H]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 26: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  dlnkfdT = (4000.57249314752) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // H2
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[37] += dqdci; // dwdot[HO2]/d[H]
  J[38] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[68] += dqdci; // dwdot[HO2]/d[H2]
  J[69] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[HO2]
  dqdci = -k_r * sc[2];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[188] += dqdci; // dwdot[H2]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[218] -= dqdci; // dwdot[H]/d[H2O2]
  J[219] += dqdci; // dwdot[H2]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 9.6 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[99] += dqdci;  // dwdot[HO2]/d[O]
  J[100] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[189] -= dqdci; // dwdot[O]/d[HO2]
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[220] -= dqdci; // dwdot[O]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 28: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] += dqdci; // dwdot[HO2]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 29: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  dlnkfdT = (3658.38516040031) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] += dqdci; // dwdot[HO2]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 32: N + NO2 <=> N2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 1800000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[9] -= q;  // N
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[112] += dqdci; // dwdot[N2O]/d[O]
  J[113] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[20];
  J[282] += dqdci; // dwdot[O]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[298] += dqdci; // dwdot[N2O]/d[N]
  J[299] -= dqdci; // dwdot[NO2]/d[N]
  // d()/d[N2O]
  dqdci = -k_r * sc[3];
  J[592] += dqdci; // dwdot[O]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[623] += dqdci; // dwdot[O]/d[NO2]
  J[629] -= dqdci; // dwdot[N]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 33: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 5841 * exp(1.01 * logT - (3120.94976132087) * invT);
  dlnkfdT = 1.01 * invT + (3120.94976132087) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = -k_r * sc[18];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[257] -= dqdci; // dwdot[N]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[N]
  dqdci = +k_f * sc[8];
  J[282] += dqdci; // dwdot[O]/d[N]
  J[287] -= dqdci; // dwdot[O2]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[561] += dqdci; // dwdot[O]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 34: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 108400000 * exp(-0.2 * logT);
  dlnkfdT = -0.2 * invT;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci; // dwdot[N]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[280] += dqdci; // dwdot[H]/d[N]
  J[283] -= dqdci; // dwdot[OH]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[562] -= dqdci; // dwdot[OH]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 35: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O
  wdot[9] -= q;  // N
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[111] -= dqdci; // dwdot[NO]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[18];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[282] += dqdci; // dwdot[O]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[561] += dqdci; // dwdot[O]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 36: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 165000 * exp(0.71 * logT - (468.494715864194) * invT);
  dlnkfdT = 0.71 * invT + (468.494715864194) * invT2;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[40] += dqdci; // dwdot[N]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[71] += dqdci; // dwdot[N]/d[H2]
  J[72] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[N]
  dqdci = -k_r * sc[2];
  J[280] -= dqdci; // dwdot[H]/d[N]
  J[281] += dqdci; // dwdot[H2]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[312] += dqdci; // dwdot[H2]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 37: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 48200000 * exp(0.023 * logT - (47.8055832514484) * invT);
  dlnkfdT = 0.023 * invT + (47.8055832514484) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[10] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 38: NH + O <=> N + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 20700 * exp(0.622 * logT - (-180.15156635809) * invT);
  dlnkfdT = 0.622 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[9];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[102] += dqdci; // dwdot[N]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[N]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[N]
  dqdci = -k_r * sc[4];
  J[282] -= dqdci; // dwdot[O]/d[N]
  J[283] += dqdci; // dwdot[OH]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 39: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 325000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 40: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 15.9 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[133] += dqdci; // dwdot[N]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[164] += dqdci; // dwdot[N]/d[H2O]
  J[165] -= dqdci; // dwdot[NH]/d[H2O]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[283] -= dqdci; // dwdot[OH]/d[N]
  J[284] += dqdci; // dwdot[H2O]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[315] += dqdci; // dwdot[H2O]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 41: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 3320 * exp(1.034 * logT - (5746.7343234899) * invT);
  dlnkfdT = 1.034 * invT + (5746.7343234899) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[10] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[NH]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[313] += dqdci; // dwdot[O]/d[NH]
  J[318] -= dqdci; // dwdot[O2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[3];
  J[654] += dqdci; // dwdot[O]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 42: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 450 * exp(0.79 * logT - (601.34391563664) * invT);
  dlnkfdT = 0.79 * invT + (601.34391563664) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[NH]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[318] -= dqdci; // dwdot[O2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 43: 2 NH => H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 6260000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[2] += q;      // H2
  wdot[10] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[N2]/d[NH]
  J[312] += dqdci;      // dwdot[H2]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 44: 2 NH => 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 56340000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[1] += 2 * q;  // H
  wdot[10] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[N2]/d[NH]
  J[311] += 2 * dqdci;  // dwdot[H]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[931] += 2 * dqdT;  // dwdot[H]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 45: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H
  wdot[9] -= q;  // N
  wdot[10] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] += dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[280] += dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[319] -= dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 46: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // NH
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[49] -= dqdci; // dwdot[NO]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] -= dqdci; // dwdot[NO]/d[NH]
  J[329] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 47: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] -= dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 48: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[10] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[143] += dqdci; // dwdot[N2O]/d[OH]
  J[144] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[329] += dqdci; // dwdot[N2O]/d[NH]
  J[330] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 49: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[18] * sc[21];
  Kc = exp(g_RT[10] - g_RT[18] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[18] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[330] -= dqdci; // dwdot[NO2]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[18];
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 50: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[330] += dqdci; // dwdot[NO2]/d[NH]
  J[335] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  J[366] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[631] += dqdci; // dwdot[NH2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[10];
  J[785] -= dqdci; // dwdot[NH]/d[HONO]
  J[786] += dqdci; // dwdot[NH2]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 51: N2O + NH <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 2000000 * exp(-(3019.29999482832) * invT);
  dlnkfdT = (3019.29999482832) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[10] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NH
  wdot[19] -= q; // N2O
  wdot[21] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  J[21] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NH]
  dqdci = +k_f * sc[19];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[329] -= dqdci; // dwdot[N2O]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[N2O]
  dqdci = +k_f * sc[10];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  J[610] += dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[N2]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[670] -= dqdci; // dwdot[N2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 53: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 0.109 * exp(2.59 * logT - (911.992848357871) * invT);
  dlnkfdT = 2.59 * invT + (911.992848357871) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[72] += dqdci; // dwdot[NH]/d[H2]
  J[73] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[NH]
  dqdci = -k_r * sc[2];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[312] += dqdci; // dwdot[H2]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 54: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 7230000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] += dqdci; // dwdot[NH]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 55: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 1500000000 * exp(-0.547 * logT - (421.041384278809) * invT);
  dlnkfdT = -0.547 * invT + (421.041384278809) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 56: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 77300000 * exp(-0.277 * logT - (325.279252776171) * invT);
  dlnkfdT = -0.277 * invT + (325.279252776171) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 57: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 0.0404 * exp(2.52 * logT - (-309.997569069013) * invT);
  dlnkfdT = 2.52 * invT + (-309.997569069013) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[165] += dqdci; // dwdot[NH]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[315] += dqdci; // dwdot[H2O]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[345] -= dqdci; // dwdot[OH]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 58: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[11] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[11] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[197] -= dqdci; // dwdot[NH2]/d[HO2]
  J[208] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 59: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 2.18 * exp(2.08 * logT - (-2395.31132923047) * invT);
  dlnkfdT = 2.08 * invT + (-2395.31132923047) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[197] -= dqdci; // dwdot[NH2]/d[HO2]
  J[198] += dqdci; // dwdot[NH3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[260] += dqdci; // dwdot[NH3]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[349] += dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[8];
  J[378] -= dqdci; // dwdot[HO2]/d[NH3]
  J[380] += dqdci; // dwdot[O2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT

  // reaction 60: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 260000 * exp(0.4872 * logT - (14643.6049749173) * invT);
  dlnkfdT = 0.4872 * invT + (14643.6049749173) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[11] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[11] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[O]
  dqdci = -k_r * sc[22];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[115] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[270] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[344] += dqdci; // dwdot[O]/d[NH2]
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[3];
  J[685] += dqdci; // dwdot[O]/d[H2NO]
  J[690] -= dqdci; // dwdot[O2]/d[H2NO]
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 61: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 62: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 69000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[1] * sc[1]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[1] + g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[9] + h_RT[11]) + (h_RT[0] + 2.000000 * h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // N2
  wdot[1] += 2 * q; // H
  wdot[9] -= q;     // N
  wdot[11] -= q;    // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[1];
  J[0] += dqdci;     // dwdot[N2]/d[N2]
  J[1] += 2 * dqdci; // dwdot[H]/d[N2]
  J[9] -= dqdci;     // dwdot[N]/d[N2]
  J[11] -= dqdci;    // dwdot[NH2]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0] * 2.000000 * sc[1];
  J[31] += dqdci;     // dwdot[N2]/d[H]
  J[32] += 2 * dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci;     // dwdot[N]/d[H]
  J[42] -= dqdci;     // dwdot[NH2]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[11];
  J[279] += dqdci;     // dwdot[N2]/d[N]
  J[280] += 2 * dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci;     // dwdot[N]/d[N]
  J[290] -= dqdci;     // dwdot[NH2]/d[N]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[341] += dqdci;     // dwdot[N2]/d[NH2]
  J[342] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[350] -= dqdci;     // dwdot[N]/d[NH2]
  J[352] -= dqdci;     // dwdot[NH2]/d[NH2]
  // d()/dT
  J[930] += dqdT;     // dwdot[N2]/dT
  J[931] += 2 * dqdT; // dwdot[H]/dT
  J[939] -= dqdT;     // dwdot[N]/dT
  J[941] -= dqdT;     // dwdot[NH2]/dT

  // reaction 63: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 31000000 * exp(-0.48 * logT - (593.795665649569) * invT);
  dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(-g_RT[4] + g_RT[11] - g_RT[13] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[18] -= q; // NO
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[421] -= dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[571] += dqdci; // dwdot[NNH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 64: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 13000000000 * exp(-1.25 * logT);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[173] -= dqdci; // dwdot[NO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 65: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = -31000000 * exp(-0.48 * logT - (593.795665649569) * invT);
  dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[173] -= dqdci; // dwdot[NO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 66: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[11] - g_RT[18] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[22] += q; // H2NO
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[361] -= dqdci; // dwdot[NO2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NO]
  dqdci = -k_r * sc[22];
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[580] += dqdci; // dwdot[H2NO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[642] += dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[18];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[700] += dqdci; // dwdot[NO]/d[H2NO]
  J[702] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 67: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[11] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[174] += dqdci; // dwdot[N2O]/d[H2O]
  J[175] -= dqdci; // dwdot[NO2]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[360] += dqdci; // dwdot[N2O]/d[NH2]
  J[361] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[594] += dqdci; // dwdot[H2O]/d[N2O]
  J[600] -= dqdci; // dwdot[NH2]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 68: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[21];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[12] * sc[18];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[21]) + (h_RT[12] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[362] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[390] += dqdci; // dwdot[NO]/d[NH3]
  J[393] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[570] += dqdci; // dwdot[NH3]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[11];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 69: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[25];
  k_f = 4.84e-06 * exp(3.36 * logT - (-2304.73232938562) * invT);
  dlnkfdT = 3.36 * invT + (-2304.73232938562) * invT2;
  // reverse
  phi_r = sc[12] * sc[20];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[25]) + (h_RT[12] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  J[366] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[392] += dqdci; // dwdot[NO2]/d[NH3]
  J[397] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[632] += dqdci; // dwdot[NH3]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[11];
  J[786] -= dqdci; // dwdot[NH2]/d[HONO]
  J[787] += dqdci; // dwdot[NH3]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 70: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // N
  wdot[10] -= 2 * q; // NH
  wdot[11] += q;     // NH2
  // d()/d[N]
  dqdci = -k_r * sc[11];
  J[288] += dqdci;      // dwdot[N]/d[N]
  J[289] += -2 * dqdci; // dwdot[NH]/d[N]
  J[290] += dqdci;      // dwdot[NH2]/d[N]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[319] += dqdci;      // dwdot[N]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci;      // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[350] += dqdci;      // dwdot[N]/d[NH2]
  J[351] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci;      // dwdot[NH2]/d[NH2]
  // d()/dT
  J[939] += dqdT;      // dwdot[N]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT
  J[941] += dqdT;      // dwdot[NH2]/dT

  // reaction 71: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 5.636e-06 * exp(3.53 * logT - (278.077529523688) * invT);
  dlnkfdT = 3.53 * invT + (278.077529523688) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NH
  wdot[11] -= 2 * q; // NH2
  wdot[12] += q;     // NH3
  // d()/d[NH]
  dqdci = -k_r * sc[12];
  J[320] += dqdci;      // dwdot[NH]/d[NH]
  J[321] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[322] += dqdci;      // dwdot[NH3]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[351] += dqdci;      // dwdot[NH]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci;      // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[382] += dqdci;      // dwdot[NH]/d[NH3]
  J[383] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci;      // dwdot[NH3]/d[NH3]
  // d()/dT
  J[940] += dqdT;      // dwdot[NH]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[942] += dqdT;      // dwdot[NH3]/dT

  // reaction 72: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 0.009574 * exp(2.46 * logT - (53.9951482408464) * invT);
  dlnkfdT = 2.46 * invT + (53.9951482408464) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  // d()/d[N]
  dqdci = -k_r * sc[12];
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  J[290] -= dqdci; // dwdot[NH2]/d[N]
  J[291] += dqdci; // dwdot[NH3]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[11];
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  J[322] += dqdci; // dwdot[NH3]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[350] += dqdci; // dwdot[N]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[9];
  J[381] += dqdci; // dwdot[N]/d[NH3]
  J[382] -= dqdci; // dwdot[NH]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT

  // reaction 74: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[14];
  k_f = 482 * exp(1.76 * logT - (371.997082882816) * invT);
  dlnkfdT = 1.76 * invT + (371.997082882816) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[14]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[45] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] += dqdci; // dwdot[NNH]/d[H2]
  J[76] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[1];
  J[435] -= dqdci; // dwdot[H]/d[N2H2]
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 75: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[14] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[14] -= q; // N2H2
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[107] -= dqdci; // dwdot[N2H2]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[452] += dqdci; // dwdot[NO]/d[N2H2]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[572] -= dqdci; // dwdot[N2H2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 76: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 111 * exp(1.62 * logT - (404.996824106291) * invT);
  dlnkfdT = 1.62 * invT + (404.996824106291) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[107] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[438] += dqdci; // dwdot[OH]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 77: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 0.00674 * exp(2.8 * logT - (-255.130849562993) * invT);
  dlnkfdT = 2.8 * invT + (-255.130849562993) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] += dqdci; // dwdot[NNH]/d[H2O]
  J[169] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[438] -= dqdci; // dwdot[OH]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 78: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[18];
  k_f = 4000000 * exp(-(5998.34265639226) * invT);
  dlnkfdT = (5998.34265639226) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[14] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[18]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH2
  wdot[14] -= q; // N2H2
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  // d()/d[NH2]
  dqdci = -k_r * sc[19];
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  J[360] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[18];
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[452] -= dqdci; // dwdot[NO]/d[N2H2]
  J[453] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[572] -= dqdci; // dwdot[N2H2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[11];
  J[600] += dqdci; // dwdot[NH2]/d[N2O]
  J[603] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 79: N2H2 + NO2 <=> HONO + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[20];
  k_f = 1.25e-06 * exp(3.8 * logT - (5233.45332436908) * invT);
  dlnkfdT = 3.8 * invT + (5233.45332436908) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[20]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[NNH]
  dqdci = -k_r * sc[25];
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[423] -= dqdci; // dwdot[NO2]/d[NNH]
  J[428] += dqdci; // dwdot[HONO]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[20];
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[454] -= dqdci; // dwdot[NO2]/d[N2H2]
  J[459] += dqdci; // dwdot[HONO]/d[N2H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[633] += dqdci; // dwdot[NNH]/d[NO2]
  J[634] -= dqdci; // dwdot[N2H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[13];
  J[788] += dqdci; // dwdot[NNH]/d[HONO]
  J[789] -= dqdci; // dwdot[N2H2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 80: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[NH]
  dqdci = +k_f * sc[14];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[323] += dqdci; // dwdot[NNH]/d[NH]
  J[324] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[13];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[413] -= dqdci; // dwdot[NH]/d[NNH]
  J[414] += dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 81: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 0.271 * exp(2.226 * logT - (-518.313165778861) * invT);
  dlnkfdT = 2.226 * invT + (-518.313165778861) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] += dqdci; // dwdot[NNH]/d[NH3]
  J[386] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[11];
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[446] += dqdci; // dwdot[NH3]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 82: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 130000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // NH
  wdot[11] -= q; // NH2
  wdot[14] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[11];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  J[324] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[435] += dqdci; // dwdot[H]/d[N2H2]
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT

  // reaction 83: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H2
  wdot[11] -= 2 * q; // NH2
  wdot[14] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  J[73] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[76] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[343] += dqdci;      // dwdot[H2]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[436] += dqdci;      // dwdot[H2]/d[N2H2]
  J[445] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[944] += dqdT;      // dwdot[N2H2]/dT

  // reaction 84: HO2 + N2H2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 10000000 * exp(-(999.891514953978) * invT);
  dlnkfdT = (999.891514953978) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[199] += dqdci; // dwdot[NNH]/d[HO2]
  J[200] -= dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[231] -= dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[409] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[6];
  J[440] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[441] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 86: N2H4 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 5.19e+38 * exp(-7.84 * logT - (33765.8382754967) * invT);
  dlnkfdT = -7.84 * invT + (33765.8382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = refC * exp(-g_RT[2] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[2] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H2
  wdot[14] += q; // N2H2
  wdot[16] -= q; // N2H4
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[76] += dqdci; // dwdot[N2H2]/d[H2]
  J[78] -= dqdci; // dwdot[N2H4]/d[H2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[450] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[498] += dqdci; // dwdot[H2]/d[N2H4]
  J[510] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 87: N2H4 <=> H + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 2.74e+39 * exp(-7.69 * logT - (42119.234927855) * invT);
  dlnkfdT = -7.69 * invT + (42119.234927855) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = refC * exp(-g_RT[1] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[46] += dqdci; // dwdot[N2H3]/d[H]
  J[47] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[466] += dqdci; // dwdot[H]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[497] += dqdci; // dwdot[H]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 88: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 0.276 * exp(2.56 * logT - (613.924332281758) * invT);
  dlnkfdT = 2.56 * invT + (613.924332281758) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[46] += dqdci; // dwdot[N2H3]/d[H]
  J[47] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[77] += dqdci; // dwdot[N2H3]/d[H2]
  J[78] -= dqdci; // dwdot[N2H4]/d[H2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[1];
  J[497] -= dqdci; // dwdot[H]/d[N2H4]
  J[498] += dqdci; // dwdot[H2]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 89: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[140] -= dqdci; // dwdot[N2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[170] += dqdci; // dwdot[N2H3]/d[H2O]
  J[171] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[500] -= dqdci; // dwdot[OH]/d[N2H4]
  J[501] += dqdci; // dwdot[H2O]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 90: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[357] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] += dqdci; // dwdot[N2H3]/d[NH3]
  J[388] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[N2H3]
  dqdci = -k_r * sc[12];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[11];
  J[507] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[508] += dqdci; // dwdot[NH3]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 91: N2H2 + N2H4 <=> 2 N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[16];
  k_f = 25000 * exp(0.5 * logT - (14995.8566409806) * invT);
  dlnkfdT = 0.5 * invT + (14995.8566409806) * invT2;
  // reverse
  phi_r = (sc[15] * sc[15]);
  Kc = exp(g_RT[14] - 2.000000 * g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000 * h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q;     // N2H2
  wdot[15] += 2 * q; // N2H3
  wdot[16] -= q;     // N2H4
  // d()/d[N2H2]
  dqdci = +k_f * sc[16];
  J[448] -= dqdci;     // dwdot[N2H2]/d[N2H2]
  J[449] += 2 * dqdci; // dwdot[N2H3]/d[N2H2]
  J[450] -= dqdci;     // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H3]
  dqdci = -k_r * 2.000000 * sc[15];
  J[479] -= dqdci;     // dwdot[N2H2]/d[N2H3]
  J[480] += 2 * dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci;     // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[14];
  J[510] -= dqdci;     // dwdot[N2H2]/d[N2H4]
  J[511] += 2 * dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci;     // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[944] -= dqdT;     // dwdot[N2H2]/dT
  J[945] += 2 * dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT;     // dwdot[N2H4]/dT

  // reaction 92: N2H4 + NH <=> N2H3 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 1000000 * exp(-(1001.40116495139) * invT);
  dlnkfdT = (1001.40116495139) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[325] += dqdci; // dwdot[N2H3]/d[NH]
  J[326] -= dqdci; // dwdot[N2H4]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[357] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[11];
  J[475] -= dqdci; // dwdot[NH]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[506] -= dqdci; // dwdot[NH]/d[N2H4]
  J[507] += dqdci; // dwdot[NH2]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 93: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 440000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[5] += q;  // H2O
  wdot[14] += q; // N2H2
  wdot[16] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[98] += dqdci;  // dwdot[H2O]/d[O]
  J[107] += dqdci; // dwdot[N2H2]/d[O]
  J[109] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[158] -= dqdci; // dwdot[O]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[169] += dqdci; // dwdot[N2H2]/d[H2O]
  J[171] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[450] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H4]
  J[501] += dqdci; // dwdot[H2O]/d[N2H4]
  J[510] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 94: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 670 * exp(1.5 * logT - (1434.67071420926) * invT);
  dlnkfdT = 1.5 * invT + (1434.67071420926) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[108] += dqdci; // dwdot[N2H3]/d[O]
  J[109] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[140] -= dqdci; // dwdot[N2H4]/d[OH]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H4]
  J[500] += dqdci; // dwdot[OH]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 95: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[15] * sc[21];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[15] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[18] -= q; // NO
  wdot[21] += q; // HNO
  // d()/d[N2H3]
  dqdci = -k_r * sc[21];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[483] -= dqdci; // dwdot[NO]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[18];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[514] -= dqdci; // dwdot[NO]/d[N2H4]
  J[517] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[573] += dqdci; // dwdot[N2H3]/d[NO]
  J[574] -= dqdci; // dwdot[N2H4]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[15];
  J[666] += dqdci; // dwdot[N2H3]/d[HNO]
  J[667] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 96: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[20];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[15] * sc[25];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[20]) + (h_RT[15] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[N2H3]
  dqdci = -k_r * sc[25];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[485] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[490] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[20];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[516] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[521] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[635] += dqdci; // dwdot[N2H3]/d[NO2]
  J[636] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[15];
  J[790] += dqdci; // dwdot[N2H3]/d[HONO]
  J[791] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 97: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[20];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[15] * sc[26];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[20]) + (h_RT[15] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[N2H3]
  dqdci = -k_r * sc[26];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[485] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[491] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[20];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[516] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[522] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[635] += dqdci; // dwdot[N2H3]/d[NO2]
  J[636] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[15];
  J[821] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[822] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 99: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 0.007476 * exp(2.796 * logT - (2355.05399596609) * invT);
  dlnkfdT = 2.796 * invT + (2355.05399596609) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[76] += dqdci; // dwdot[N2H2]/d[H2]
  J[77] -= dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[435] -= dqdci; // dwdot[H]/d[N2H2]
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 100: H + N2H3 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 6.243 * exp(1.89 * logT - (124.294516453766) * invT);
  dlnkfdT = 1.89 * invT + (124.294516453766) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  J[48] += dqdci; // dwdot[H2NN]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[77] -= dqdci; // dwdot[N2H3]/d[H2]
  J[79] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[2];
  J[528] -= dqdci; // dwdot[H]/d[H2NN]
  J[529] += dqdci; // dwdot[H2]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 101: H + N2H3 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[1] - g_RT[10] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] += q; // NH
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[43] += dqdci; // dwdot[NH3]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[12];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[322] += dqdci; // dwdot[NH3]/d[NH]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[373] -= dqdci; // dwdot[H]/d[NH3]
  J[382] += dqdci; // dwdot[NH]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[475] += dqdci; // dwdot[NH]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 102: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[107] += dqdci; // dwdot[N2H2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[138] += dqdci; // dwdot[N2H2]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[4];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[438] += dqdci; // dwdot[OH]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 103: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] += dqdci; // dwdot[NH2]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 104: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[466] += dqdci; // dwdot[H]/d[N2H3]
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[483] += dqdci; // dwdot[NO]/d[N2H3]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 105: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[N2H2]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[169] += dqdci; // dwdot[N2H2]/d[H2O]
  J[170] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[438] -= dqdci; // dwdot[OH]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 106: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[141] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[170] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[172] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 107: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[4] - g_RT[12] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[136] += dqdci; // dwdot[NH3]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[376] -= dqdci; // dwdot[OH]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[14];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[7] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[200] += dqdci; // dwdot[N2H2]/d[HO2]
  J[201] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[14];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[231] += dqdci; // dwdot[N2H2]/d[H2O2]
  J[232] -= dqdci; // dwdot[N2H3]/d[H2O2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[7];
  J[440] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[441] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[471] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[472] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 109: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H4
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[201] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[202] += dqdci; // dwdot[N2H4]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[263] -= dqdci; // dwdot[N2H3]/d[O2]
  J[264] += dqdci; // dwdot[N2H4]/d[O2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[471] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[473] += dqdci; // dwdot[O2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = -k_r * sc[8];
  J[502] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[504] += dqdci; // dwdot[O2]/d[N2H4]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] += dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H4]/dT

  // reaction 110: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 6.08e-07 * exp(3.574 * logT - (598.827832307616) * invT);
  dlnkfdT = 3.574 * invT + (598.827832307616) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[14];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[386] += dqdci; // dwdot[N2H2]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[12];
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[446] += dqdci; // dwdot[NH3]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 111: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 1.11e-05 * exp(3.08 * logT - (106.178716484796) * invT);
  dlnkfdT = 3.08 * invT + (106.178716484796) * invT2;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[11] - g_RT[12] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[358] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[389] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[12];
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[539] += dqdci; // dwdot[NH3]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 112: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[324] += dqdci; // dwdot[N2H2]/d[NH]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[11];
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[475] -= dqdci; // dwdot[NH]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 113: N2H2 + N2H3 <=> N2H4 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[15];
  k_f = 10000000 * exp(-(5001.97365809891) * invT);
  dlnkfdT = (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[15]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H4
  // d()/d[NNH]
  dqdci = -k_r * sc[16];
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[418] -= dqdci; // dwdot[N2H3]/d[NNH]
  J[419] += dqdci; // dwdot[N2H4]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[15];
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[450] += dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[14];
  J[478] += dqdci; // dwdot[NNH]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = -k_r * sc[13];
  J[509] += dqdci; // dwdot[NNH]/d[N2H4]
  J[510] -= dqdci; // dwdot[N2H2]/d[N2H4]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] += dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H4]/dT

  // reaction 114: 2 N2H3 <=> N2 + 2 NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[12] * sc[12]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[12] + 2.000000 * g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[15]) + (h_RT[0] + 2.000000 * h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // N2
  wdot[12] += 2 * q; // NH3
  wdot[15] -= 2 * q; // N2H3
  // d()/d[N2]
  dqdci = -k_r * sc[12] * sc[12];
  J[0] += dqdci;       // dwdot[N2]/d[N2]
  J[12] += 2 * dqdci;  // dwdot[NH3]/d[N2]
  J[15] += -2 * dqdci; // dwdot[N2H3]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0] * 2.000000 * sc[12];
  J[372] += dqdci;      // dwdot[N2]/d[NH3]
  J[384] += 2 * dqdci;  // dwdot[NH3]/d[NH3]
  J[387] += -2 * dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * 2.000000 * sc[15];
  J[465] += dqdci;      // dwdot[N2]/d[N2H3]
  J[477] += 2 * dqdci;  // dwdot[NH3]/d[N2H3]
  J[480] += -2 * dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[942] += 2 * dqdT;  // dwdot[NH3]/dT
  J[945] += -2 * dqdT; // dwdot[N2H3]/dT

  // reaction 115: 2 N2H2 <=> N2H3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[14] * sc[14]);
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  dlnkfdT = (4999.45757476989) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(-g_RT[13] + 2.000000 * g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[14]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q;     // NNH
  wdot[14] -= 2 * q; // N2H2
  wdot[15] += q;     // N2H3
  // d()/d[NNH]
  dqdci = -k_r * sc[15];
  J[416] += dqdci;      // dwdot[NNH]/d[NNH]
  J[417] += -2 * dqdci; // dwdot[N2H2]/d[NNH]
  J[418] += dqdci;      // dwdot[N2H3]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * 2.000000 * sc[14];
  J[447] += dqdci;      // dwdot[NNH]/d[N2H2]
  J[448] += -2 * dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] += dqdci;      // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[13];
  J[478] += dqdci;      // dwdot[NNH]/d[N2H3]
  J[479] += -2 * dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] += dqdci;      // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[943] += dqdT;      // dwdot[NNH]/dT
  J[944] += -2 * dqdT; // dwdot[N2H2]/dT
  J[945] += dqdT;      // dwdot[N2H3]/dT

  // reaction 116: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H2
  wdot[11] -= 2 * q; // NH2
  wdot[17] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  J[73] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[79] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[343] += dqdci;      // dwdot[H2]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[358] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[2];
  J[529] += dqdci;      // dwdot[H2]/d[H2NN]
  J[538] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[947] += dqdT;      // dwdot[H2NN]/dT

  // reaction 117: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23258.6742934941) * invT);
  dlnkfdT = -4.83 * invT + (23258.6742934941) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = refC * exp(-g_RT[1] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[1] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[528] += dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 118: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] += dqdci; // dwdot[NNH]/d[H2]
  J[79] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[528] -= dqdci; // dwdot[H]/d[H2NN]
  J[529] += dqdci; // dwdot[H2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 119: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[14] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17] - k_r * sc[14];
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[451] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[541] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 120: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 121: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[575] -= dqdci; // dwdot[H2NN]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 122: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] += dqdci; // dwdot[NNH]/d[H2O]
  J[172] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 123: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[528] += dqdci; // dwdot[H]/d[H2NN]
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 124: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[197] += dqdci; // dwdot[NH2]/d[HO2]
  J[203] -= dqdci; // dwdot[H2NN]/d[HO2]
  J[204] += dqdci; // dwdot[NO]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[533] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 125: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[199] += dqdci; // dwdot[NNH]/d[HO2]
  J[203] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[234] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[409] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[533] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[534] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 126: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[17];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(g_RT[8] - g_RT[11] + g_RT[17] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[17]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // O2
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[20] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] += dqdci; // dwdot[NH2]/d[O2]
  J[265] -= dqdci; // dwdot[H2NN]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[8];
  J[535] -= dqdci; // dwdot[O2]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[547] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[628] -= dqdci; // dwdot[O2]/d[NO2]
  J[631] += dqdci; // dwdot[NH2]/d[NO2]
  J[637] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 127: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[17];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[17]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] += dqdci; // dwdot[NNH]/d[NH3]
  J[389] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[11];
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[539] += dqdci; // dwdot[NH3]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 130: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[23] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[54] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[724] += dqdci; // dwdot[NH2]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 131: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[54] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[83] += dqdci; // dwdot[HNO]/d[H2]
  J[85] -= dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[715] += dqdci; // dwdot[H2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 132: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[116] -= dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 133: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[116] -= dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 134: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[HNO]/d[H2O]
  J[178] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[717] -= dqdci; // dwdot[OH]/d[HNOH]
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 135: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 0.029 * exp(2.7 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.7 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[209] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  J[240] -= dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[657] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[6];
  J[719] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[720] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 136: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[23];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[23]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[209] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  J[271] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[8];
  J[719] += dqdci; // dwdot[HO2]/d[HNOH]
  J[721] -= dqdci; // dwdot[O2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 137: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 1e-05 * exp(3.5 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.5 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[11] - g_RT[15] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH2
  wdot[15] += q; // N2H3
  wdot[23] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[728] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 138: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 88000000000 * exp(-1.1 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.1 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(-g_RT[5] + g_RT[11] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[17] += q; // H2NN
  wdot[23] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[172] += dqdci; // dwdot[H2NN]/d[H2O]
  J[178] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[358] += dqdci; // dwdot[H2NN]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[550] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[730] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 139: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 1.8 * exp(1.9 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.9 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  J[395] -= dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[725] += dqdci; // dwdot[NH3]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 140: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[23];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[25];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[23]) + (h_RT[21] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  wdot[25] += q; // HONO
  // d()/d[NO2]
  dqdci = +k_f * sc[23];
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  J[643] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[25];
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[20];
  J[733] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[738] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[798] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 142: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[54] += dqdci; // dwdot[HNOH]/d[H]
  J[55] -= dqdci; // dwdot[NH2OH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[85] += dqdci; // dwdot[HNOH]/d[H2]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[2];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[715] += dqdci; // dwdot[H2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[1];
  J[745] -= dqdci; // dwdot[H]/d[NH2OH]
  J[746] += dqdci; // dwdot[H2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 143: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[2] * sc[22];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[2] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[53] += dqdci; // dwdot[H2NO]/d[H]
  J[55] -= dqdci; // dwdot[NH2OH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[84] += dqdci; // dwdot[H2NO]/d[H2]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[2];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[684] += dqdci; // dwdot[H2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[1];
  J[745] -= dqdci; // dwdot[H]/d[NH2OH]
  J[746] += dqdci; // dwdot[H2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 144: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[HNOH]/d[O]
  J[117] -= dqdci; // dwdot[NH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[HNOH]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[NH2OH]
  J[748] += dqdci; // dwdot[OH]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 145: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[H2NO]/d[O]
  J[117] -= dqdci; // dwdot[NH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[685] -= dqdci; // dwdot[O]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[NH2OH]
  J[748] += dqdci; // dwdot[OH]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 146: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[HNOH]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[178] += dqdci; // dwdot[HNOH]/d[H2O]
  J[179] -= dqdci; // dwdot[NH2OH]/d[H2O]
  // d()/d[HNOH]
  dqdci = -k_r * sc[5];
  J[717] -= dqdci; // dwdot[OH]/d[HNOH]
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[749] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 147: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] += dqdci; // dwdot[H2NO]/d[H2O]
  J[179] -= dqdci; // dwdot[NH2OH]/d[H2O]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[686] -= dqdci; // dwdot[OH]/d[H2NO]
  J[687] += dqdci; // dwdot[H2O]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[749] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 148: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[12] * sc[23];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[12] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[364] += dqdci; // dwdot[HNOH]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[395] += dqdci; // dwdot[HNOH]/d[NH3]
  J[396] -= dqdci; // dwdot[NH2OH]/d[NH3]
  // d()/d[HNOH]
  dqdci = -k_r * sc[12];
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[725] += dqdci; // dwdot[NH3]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[755] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[756] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 149: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[22];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[394] += dqdci; // dwdot[H2NO]/d[NH3]
  J[396] -= dqdci; // dwdot[NH2OH]/d[NH3]
  // d()/d[H2NO]
  dqdci = -k_r * sc[12];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[694] += dqdci; // dwdot[NH3]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[755] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[756] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 150: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[333] += dqdci; // dwdot[HNOH]/d[NH]
  J[334] -= dqdci; // dwdot[NH2OH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[364] += dqdci; // dwdot[HNOH]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[11];
  J[723] -= dqdci; // dwdot[NH]/d[HNOH]
  J[724] += dqdci; // dwdot[NH2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[754] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[755] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 151: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[332] += dqdci; // dwdot[H2NO]/d[NH]
  J[334] -= dqdci; // dwdot[NH2OH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[22];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[11];
  J[692] -= dqdci; // dwdot[NH]/d[H2NO]
  J[693] += dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[754] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[755] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 152: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[7] * sc[23];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[7] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[HO2]
  dqdci = +k_f * sc[24];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[209] += dqdci; // dwdot[HNOH]/d[HO2]
  J[210] -= dqdci; // dwdot[NH2OH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[240] += dqdci; // dwdot[HNOH]/d[H2O2]
  J[241] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[7];
  J[719] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[720] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[750] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[751] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 153: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[7] * sc[22];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[7] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[HO2]
  dqdci = +k_f * sc[24];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[208] += dqdci; // dwdot[H2NO]/d[HO2]
  J[210] -= dqdci; // dwdot[NH2OH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[22];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[239] += dqdci; // dwdot[H2NO]/d[H2O2]
  J[241] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[7];
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[689] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[750] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[751] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 154: HNO + HNOH <=> NH2OH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[23];
  k_f = 1000000 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[18] * sc[24];
  Kc = exp(-g_RT[18] + g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[23]) + (h_RT[18] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  wdot[23] -= q; // HNOH
  wdot[24] += q; // NH2OH
  // d()/d[NO]
  dqdci = -k_r * sc[24];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  J[581] -= dqdci; // dwdot[HNOH]/d[NO]
  J[582] += dqdci; // dwdot[NH2OH]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[23];
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[675] += dqdci; // dwdot[NH2OH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[21];
  J[731] += dqdci; // dwdot[NO]/d[HNOH]
  J[734] -= dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] += dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[18];
  J[762] += dqdci; // dwdot[NO]/d[NH2OH]
  J[765] -= dqdci; // dwdot[HNO]/d[NH2OH]
  J[767] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT
  J[954] += dqdT; // dwdot[NH2OH]/dT

  // reaction 156: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 2.89 * exp(2.23 * logT - (5233.45332436908) * invT);
  dlnkfdT = 2.23 * invT + (5233.45332436908) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[43] -= dqdci; // dwdot[NH3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[11];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[73] += dqdci; // dwdot[NH2]/d[H2]
  J[74] -= dqdci; // dwdot[NH3]/d[H2]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[1];
  J[373] -= dqdci; // dwdot[H]/d[NH3]
  J[374] += dqdci; // dwdot[H2]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 157: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 0.1559 * exp(2.372 * logT - (59.8324615641812) * invT);
  dlnkfdT = 2.372 * invT + (59.8324615641812) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[136] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] += dqdci; // dwdot[NH2]/d[H2O]
  J[167] -= dqdci; // dwdot[NH3]/d[H2O]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[345] -= dqdci; // dwdot[OH]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[376] -= dqdci; // dwdot[OH]/d[NH3]
  J[377] += dqdci; // dwdot[H2O]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 158: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1.173e-06 * exp(3.839 * logT - (8685.51965178946) * invT);
  dlnkfdT = 3.839 * invT + (8685.51965178946) * invT2;
  // reverse
  phi_r = sc[7] * sc[11];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[197] += dqdci; // dwdot[NH2]/d[HO2]
  J[198] -= dqdci; // dwdot[NH3]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[228] += dqdci; // dwdot[NH2]/d[H2O2]
  J[229] -= dqdci; // dwdot[NH3]/d[H2O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[348] += dqdci; // dwdot[H2O2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[6];
  J[378] -= dqdci; // dwdot[HO2]/d[NH3]
  J[379] += dqdci; // dwdot[H2O2]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 159: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 0.000443 * exp(3.18 * logT - (3391.63000585723) * invT);
  dlnkfdT = 3.18 * invT + (3391.63000585723) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[105] -= dqdci; // dwdot[NH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[136] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[375] -= dqdci; // dwdot[O]/d[NH3]
  J[376] += dqdci; // dwdot[OH]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 160: NH2 + NH3 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 100000 * exp(0.5 * logT - (10869.4799813819) * invT);
  dlnkfdT = 0.5 * invT + (10869.4799813819) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H2
  wdot[11] -= q; // NH2
  wdot[12] -= q; // NH3
  wdot[15] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[73] -= dqdci; // dwdot[NH2]/d[H2]
  J[74] -= dqdci; // dwdot[NH3]/d[H2]
  J[77] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[11];
  J[374] += dqdci; // dwdot[H2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  J[387] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] -= dqdci; // dwdot[NH3]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 161: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 330000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = refC * exp(-g_RT[0] - g_RT[1] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[0] + h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 162: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[2] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[2] += dqdci;  // dwdot[H2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[62] += dqdci; // dwdot[N2]/d[H2]
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 163: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[OH]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 164: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[13] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[18]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[13] -= q; // NNH
  wdot[18] -= q; // NO
  wdot[21] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  J[21] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NNH]
  dqdci = +k_f * sc[18];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[421] -= dqdci; // dwdot[NO]/d[NNH]
  J[424] += dqdci; // dwdot[HNO]/d[NNH]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[571] -= dqdci; // dwdot[NNH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[N2]/d[HNO]
  J[664] -= dqdci; // dwdot[NNH]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 165: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[11];
  Kc = exp(-g_RT[0] + g_RT[10] - g_RT[11] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[0] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[11];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[11] += dqdci; // dwdot[NH2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH]
  dqdci = +k_f * sc[13];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[323] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[354] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[413] -= dqdci; // dwdot[NH]/d[NNH]
  J[414] += dqdci; // dwdot[NH2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 166: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[11] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[12] += dqdci; // dwdot[NH3]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[372] += dqdci; // dwdot[N2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NNH]
  dqdci = +k_f * sc[11];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 167: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 187000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[13] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[13] -= q; // NNH
  wdot[19] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[112] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[422] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[592] -= dqdci; // dwdot[O]/d[N2O]
  J[602] -= dqdci; // dwdot[NNH]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 168: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 518000 * exp(0.388 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.388 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[3] - g_RT[10] + g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[10] += q; // NH
  wdot[13] -= q; // NNH
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] += dqdci; // dwdot[NH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = -k_r * sc[18];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[323] -= dqdci; // dwdot[NNH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[413] += dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[421] += dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[568] += dqdci; // dwdot[NH]/d[NO]
  J[571] -= dqdci; // dwdot[NNH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 169: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[4] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 170: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[13];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[8] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[13]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[HO2]/d[N2]
  J[8] -= dqdci;  // dwdot[O2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[186] += dqdci; // dwdot[N2]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[199] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[248] += dqdci; // dwdot[N2]/d[O2]
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[261] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[NNH]
  dqdci = +k_f * sc[8];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[409] += dqdci; // dwdot[HO2]/d[NNH]
  J[411] -= dqdci; // dwdot[O2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 171: 2 NNH <=> N2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[13] * sc[13]);
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  dlnkfdT = (4999.45757476989) * invT2;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[13]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // N2
  wdot[13] -= 2 * q; // NNH
  wdot[14] += q;     // N2H2
  // d()/d[N2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;       // dwdot[N2]/d[N2]
  J[13] += -2 * dqdci; // dwdot[NNH]/d[N2]
  J[14] += dqdci;      // dwdot[N2H2]/d[N2]
  // d()/d[NNH]
  dqdci = +k_f * 2.000000 * sc[13];
  J[403] += dqdci;      // dwdot[N2]/d[NNH]
  J[416] += -2 * dqdci; // dwdot[NNH]/d[NNH]
  J[417] += dqdci;      // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[434] += dqdci;      // dwdot[N2]/d[N2H2]
  J[447] += -2 * dqdci; // dwdot[NNH]/d[N2H2]
  J[448] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[943] += -2 * dqdT; // dwdot[NNH]/dT
  J[944] += dqdT;      // dwdot[N2H2]/dT

  // reaction 172: HNO <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21];
  k_f = 1.8259e+20 * exp(-3.008 * logT - (24094.01395873) * invT);
  dlnkfdT = -3.008 * invT + (24094.01395873) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = refC * exp(-g_RT[1] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[1] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f;
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 173: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[114] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 174: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 440000 * exp(0.72 * logT - (327.090832773068) * invT);
  dlnkfdT = 0.72 * invT + (327.090832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[80] += dqdci; // dwdot[NO]/d[H2]
  J[83] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[560] += dqdci; // dwdot[H2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 175: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 36000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[173] += dqdci; // dwdot[NO]/d[H2O]
  J[176] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[562] -= dqdci; // dwdot[OH]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 176: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[21];
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  dlnkfdT = (8051.46665287552) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[21]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[HO2]
  dqdci = -k_r * sc[18];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[NO]/d[HO2]
  J[207] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[269] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[564] += dqdci; // dwdot[HO2]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[8];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 177: HNO + N <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 10000000 * exp(-(1001.40116495139) * invT);
  dlnkfdT = (1001.40116495139) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // N
  wdot[10] += q; // NH
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[N]
  dqdci = +k_f * sc[21];
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[289] += dqdci; // dwdot[NH]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  J[300] -= dqdci; // dwdot[HNO]/d[N]
  // d()/d[NH]
  dqdci = -k_r * sc[18];
  J[319] -= dqdci; // dwdot[N]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[331] -= dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[568] += dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[660] -= dqdci; // dwdot[N]/d[HNO]
  J[661] += dqdci; // dwdot[NH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 178: HNO + N <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 50000 * exp(0.5 * logT - (1509.64999741416) * invT);
  dlnkfdT = 0.5 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[19] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // N
  wdot[19] += q; // N2O
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[21];
  J[280] += dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[298] += dqdci; // dwdot[N2O]/d[N]
  J[300] -= dqdci; // dwdot[HNO]/d[N]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[610] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[660] -= dqdci; // dwdot[N]/d[HNO]
  J[670] += dqdci; // dwdot[N2O]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 179: HNO + NH <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[NH]
  dqdci = +k_f * sc[21];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[331] -= dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[362] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[662] += dqdci; // dwdot[NH2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 180: HNO + NO <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[21];
  k_f = 8510000 * exp(-(14900.2454744777) * invT);
  dlnkfdT = (14900.2454744777) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[18] - g_RT[19] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[21]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  J[143] += dqdci; // dwdot[N2O]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[610] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[18];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[670] += dqdci; // dwdot[N2O]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 181: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[21];
  k_f = 0.044 * exp(2.6 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.6 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[18] * sc[25];
  Kc = exp(-g_RT[18] + g_RT[20] + g_RT[21] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[21]) + (h_RT[18] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[21] -= q; // HNO
  wdot[25] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[25];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  J[583] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] -= dqdci; // dwdot[HNO]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[20];
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = -k_r * sc[18];
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] -= dqdci; // dwdot[HNO]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 182: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[21] * sc[21]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] - g_RT[19] + 2.000000 * g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[21]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[19] += q;     // N2O
  wdot[21] -= 2 * q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  J[174] += dqdci;      // dwdot[N2O]/d[H2O]
  J[176] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[594] += dqdci;      // dwdot[H2O]/d[N2O]
  J[608] += dqdci;      // dwdot[N2O]/d[N2O]
  J[610] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[21];
  J[656] += dqdci;      // dwdot[H2O]/d[HNO]
  J[670] += dqdci;      // dwdot[N2O]/d[HNO]
  J[672] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] += dqdT;      // dwdot[H2O]/dT
  J[949] += dqdT;      // dwdot[N2O]/dT
  J[951] += -2 * dqdT; // dwdot[HNO]/dT

  // reaction 184: H + HON <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 24000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[21] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] += q; // HNO
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[27] - k_r * sc[21];
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[678] -= dqdci; // dwdot[HON]/d[HNO]
  // d()/d[HON]
  dqdci = +k_f * sc[1];
  J[858] += dqdci; // dwdot[HNO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 185: H + HON <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[10] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[337] -= dqdci; // dwdot[HON]/d[NH]
  // d()/d[HON]
  dqdci = +k_f * sc[1];
  J[838] -= dqdci; // dwdot[H]/d[HON]
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[847] += dqdci; // dwdot[NH]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 186: HON + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[27] -= q; // HON
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[HON]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[585] -= dqdci; // dwdot[HON]/d[NO]
  // d()/d[HON]
  dqdci = +k_f * sc[3];
  J[840] -= dqdci; // dwdot[O]/d[HON]
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[855] += dqdci; // dwdot[NO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 187: HON + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[4] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[25] += q; // HONO
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[HONO]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[H]/d[HONO]
  J[779] -= dqdci; // dwdot[OH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  J[802] -= dqdci; // dwdot[HON]/d[HONO]
  // d()/d[HON]
  dqdci = +k_f * sc[4];
  J[838] += dqdci; // dwdot[H]/d[HON]
  J[841] -= dqdci; // dwdot[OH]/d[HON]
  J[862] += dqdci; // dwdot[HONO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 188: HON + O2 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[27];
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  dlnkfdT = (2499.98039571785) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[20] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[27]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[20] += q; // NO2
  wdot[27] -= q; // HON
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[275] -= dqdci; // dwdot[HON]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[628] -= dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[647] -= dqdci; // dwdot[HON]/d[NO2]
  // d()/d[HON]
  dqdci = +k_f * sc[8];
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[845] -= dqdci; // dwdot[O2]/d[HON]
  J[857] += dqdci; // dwdot[NO2]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 190: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 2100000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[18] -= q; // NO
  wdot[20] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[204] -= dqdci; // dwdot[NO]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[564] -= dqdci; // dwdot[HO2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[578] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[638] -= dqdci; // dwdot[NO]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 191: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.013 * exp(2.76 * logT - (14980.7601410065) * invT);
  dlnkfdT = 2.76 * invT + (14980.7601410065) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // H2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[20];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[82] -= dqdci; // dwdot[NO2]/d[H2]
  J[87] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[621] += dqdci; // dwdot[H]/d[NO2]
  J[622] -= dqdci; // dwdot[H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[H]/d[HONO]
  J[777] -= dqdci; // dwdot[H2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 192: H2 + NO2 <=> H + HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 2.4e-06 * exp(3.73 * logT - (16304.2199720729) * invT);
  dlnkfdT = 3.73 * invT + (16304.2199720729) * invT2;
  // reverse
  phi_r = sc[1] * sc[26];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // H2
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  J[57] += dqdci; // dwdot[HNO2]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[20];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[82] -= dqdci; // dwdot[NO2]/d[H2]
  J[88] += dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[621] += dqdci; // dwdot[H]/d[NO2]
  J[622] -= dqdci; // dwdot[H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[1];
  J[807] += dqdci; // dwdot[H]/d[HNO2]
  J[808] -= dqdci; // dwdot[H2]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 193: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  dlnkfdT = (182.164433021309) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[144] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[1];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 194: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 110000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[113] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[18];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[566] += dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 196: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[20] * sc[20]);
  k_f = 4500000 * exp(-(13888.7799762103) * invT);
  dlnkfdT = (13888.7799762103) * invT2;
  // reverse
  phi_r = sc[8] * (sc[18] * sc[18]);
  Kc = refC * exp(-g_RT[8] - 2.000000 * g_RT[18] + 2.000000 * g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[20]) + (h_RT[8] + 2.000000 * h_RT[18]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // O2
  wdot[18] += 2 * q; // NO
  wdot[20] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[18] * sc[18];
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  J[266] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[268] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8] * 2.000000 * sc[18];
  J[566] += dqdci;      // dwdot[O2]/d[NO]
  J[576] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[578] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[20];
  J[628] += dqdci;      // dwdot[O2]/d[NO2]
  J[638] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[640] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT;      // dwdot[O2]/dT
  J[948] += 2 * dqdT;  // dwdot[NO]/dT
  J[950] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 197: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 1.91e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[8] * sc[25];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[8] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] -= dqdci; // dwdot[NO2]/d[HO2]
  J[211] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  J[273] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[NO2]
  dqdci = +k_f * sc[6];
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[8];
  J[781] -= dqdci; // dwdot[HO2]/d[HONO]
  J[783] += dqdci; // dwdot[O2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 198: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 1.85e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[8] * sc[26];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[8] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] -= dqdci; // dwdot[NO2]/d[HO2]
  J[212] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[26];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  J[274] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[NO2]
  dqdci = +k_f * sc[6];
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[8];
  J[812] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[814] += dqdci; // dwdot[O2]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 200: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 25300 * exp(-(2289.63582941147) * invT);
  dlnkfdT = (2289.63582941147) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[50] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[590] -= dqdci; // dwdot[H]/d[N2O]
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 201: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 500000000 * exp(-(9108.22165106543) * invT);
  dlnkfdT = (9108.22165106543) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[50] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[590] -= dqdci; // dwdot[H]/d[N2O]
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 202: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 92000000 * exp(-(13924.0051428166) * invT);
  dlnkfdT = (13924.0051428166) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]);
  Kc = exp(g_RT[3] - 2.000000 * g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (2.000000 * h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O
  wdot[18] += 2 * q; // NO
  wdot[19] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[96] -= dqdci;      // dwdot[O]/d[O]
  J[111] += 2 * dqdci; // dwdot[NO]/d[O]
  J[112] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[18];
  J[561] -= dqdci;     // dwdot[O]/d[NO]
  J[576] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[592] -= dqdci;     // dwdot[O]/d[N2O]
  J[607] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[933] -= dqdT;     // dwdot[O]/dT
  J[948] += 2 * dqdT; // dwdot[NO]/dT
  J[949] -= dqdT;     // dwdot[N2O]/dT

  // reaction 203: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 3700000 * exp(-(8016.24148626918) * invT);
  dlnkfdT = (8016.24148626918) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[8] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O]/d[N2]
  J[8] += dqdci;  // dwdot[O2]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[112] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[248] += dqdci; // dwdot[N2]/d[O2]
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[267] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[592] -= dqdci; // dwdot[O]/d[N2O]
  J[597] += dqdci; // dwdot[O2]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 204: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 1.3e-08 * exp(4.7 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.7 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[OH]/d[N2]
  J[6] += dqdci;  // dwdot[HO2]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[186] += dqdci; // dwdot[N2]/d[HO2]
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[593] -= dqdci; // dwdot[OH]/d[N2O]
  J[595] += dqdci; // dwdot[HO2]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 205: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[19];
  k_f = 0.53 * exp(2.2 * logT - (23288.8672934424) * invT);
  dlnkfdT = 2.2 * invT + (23288.8672934424) * invT2;
  // reverse
  phi_r = sc[0] * sc[20];
  Kc = exp(-g_RT[0] + g_RT[18] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[19]) + (h_RT[0] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[18] -= q; // NO
  wdot[19] -= q; // N2O
  wdot[20] += q; // NO2
  // d()/d[N2]
  dqdci = -k_r * sc[20];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  J[20] += dqdci; // dwdot[NO2]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[19];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci; // dwdot[N2O]/d[NO]
  J[578] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[18];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  J[609] += dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[620] += dqdci; // dwdot[N2]/d[NO2]
  J[638] -= dqdci; // dwdot[NO]/d[NO2]
  J[639] -= dqdci; // dwdot[N2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 206: N + N2O <=> N2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 10000000 * exp(-(9998.91514953978) * invT);
  dlnkfdT = (9998.91514953978) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[18] += dqdci; // dwdot[NO]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[N]
  dqdci = +k_f * sc[19];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  J[298] -= dqdci; // dwdot[N2O]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[9];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[607] += dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 208: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 480 * exp(1.5 * logT - (784.917355322202) * invT);
  dlnkfdT = 1.5 * invT + (784.917355322202) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[53] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[83] += dqdci; // dwdot[HNO]/d[H2]
  J[84] -= dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[684] += dqdci; // dwdot[H2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 209: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[53] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[363] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[693] += dqdci; // dwdot[NH2]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 210: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 330 * exp(1.5 * logT - (244.965872913738) * invT);
  dlnkfdT = 1.5 * invT + (244.965872913738) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[115] -= dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[685] -= dqdci; // dwdot[O]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 211: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.4 * exp(2 * logT - (599.934908972387) * invT);
  dlnkfdT = 2 * invT + (599.934908972387) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[HNO]/d[H2O]
  J[177] -= dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[686] -= dqdci; // dwdot[OH]/d[H2NO]
  J[687] += dqdci; // dwdot[H2O]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 212: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-291.865666166737) * invT);
  dlnkfdT = 1.94 * invT + (-291.865666166737) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  J[363] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  J[394] -= dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[11];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[694] += dqdci; // dwdot[NH3]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 213: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[22]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[208] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  J[239] -= dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[657] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[6];
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[689] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 214: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[22];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[22]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[208] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  J[270] -= dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[8];
  J[688] += dqdci; // dwdot[HO2]/d[H2NO]
  J[690] -= dqdci; // dwdot[O2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 215: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[22];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[21] * sc[21]);
  Kc = exp(g_RT[18] - 2.000000 * g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[22]) + (2.000000 * h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] -= q;     // NO
  wdot[21] += 2 * q; // HNO
  wdot[22] -= q;     // H2NO
  // d()/d[NO]
  dqdci = +k_f * sc[22];
  J[576] -= dqdci;     // dwdot[NO]/d[NO]
  J[579] += 2 * dqdci; // dwdot[HNO]/d[NO]
  J[580] -= dqdci;     // dwdot[H2NO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[21];
  J[669] -= dqdci;     // dwdot[NO]/d[HNO]
  J[672] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci;     // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[18];
  J[700] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[703] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[948] -= dqdT;     // dwdot[NO]/dT
  J[951] += 2 * dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT;     // dwdot[H2NO]/dT

  // reaction 216: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[22];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[25];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[22] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[22]) + (h_RT[21] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  wdot[25] += q; // HONO
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  J[642] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[25];
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[20];
  J[702] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[707] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[797] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 217: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 12000000 * exp(-(3019.29999482832) * invT);
  dlnkfdT = (3019.29999482832) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[118] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[3];
  J[778] -= dqdci; // dwdot[O]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 218: H + HONO <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 56000 * exp(0.9 * logT - (2516.0833290236) * invT);
  dlnkfdT = 0.9 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[21] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[25] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[56] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[676] -= dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = +k_f * sc[1];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 219: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 8.1 * exp(1.9 * logT - (1937.38416334817) * invT);
  dlnkfdT = 1.9 * invT + (1937.38416334817) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[18] += q; // NO
  wdot[25] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[56] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[173] += dqdci; // dwdot[NO]/d[H2O]
  J[180] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[583] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[1];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[780] += dqdci; // dwdot[H2O]/d[HONO]
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 220: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[180] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[779] -= dqdci; // dwdot[OH]/d[HONO]
  J[780] += dqdci; // dwdot[H2O]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 221: HONO + NO2 <=> HNO3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[25];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[18] * sc[29];
  Kc = exp(-g_RT[18] + g_RT[20] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[25]) + (h_RT[18] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[25] -= q; // HONO
  wdot[29] += q; // HNO3
  // d()/d[NO]
  dqdci = -k_r * sc[29];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[583] -= dqdci; // dwdot[HONO]/d[NO]
  J[587] += dqdci; // dwdot[HNO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[25];
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  J[649] += dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[20];
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  J[804] += dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = -k_r * sc[18];
  J[917] += dqdci; // dwdot[NO]/d[HNO3]
  J[919] -= dqdci; // dwdot[NO2]/d[HNO3]
  J[924] -= dqdci; // dwdot[HONO]/d[HNO3]
  J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 222: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[5] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[5] - g_RT[18] - g_RT[20] + 2.000000 * g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[5] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[18] += q;     // NO
  wdot[20] += q;     // NO2
  wdot[25] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[18] * sc[20];
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  J[173] += dqdci;      // dwdot[NO]/d[H2O]
  J[175] += dqdci;      // dwdot[NO2]/d[H2O]
  J[180] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5] * sc[20];
  J[563] += dqdci;      // dwdot[H2O]/d[NO]
  J[576] += dqdci;      // dwdot[NO]/d[NO]
  J[578] += dqdci;      // dwdot[NO2]/d[NO]
  J[583] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5] * sc[18];
  J[625] += dqdci;      // dwdot[H2O]/d[NO2]
  J[638] += dqdci;      // dwdot[NO]/d[NO2]
  J[640] += dqdci;      // dwdot[NO2]/d[NO2]
  J[645] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[25];
  J[780] += dqdci;      // dwdot[H2O]/d[HONO]
  J[793] += dqdci;      // dwdot[NO]/d[HONO]
  J[795] += dqdci;      // dwdot[NO2]/d[HONO]
  J[800] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[935] += dqdT;      // dwdot[H2O]/dT
  J[948] += dqdT;      // dwdot[NO]/dT
  J[950] += dqdT;      // dwdot[NO2]/dT
  J[955] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 224: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[26];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[26]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[26] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[119] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[646] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[3];
  J[809] -= dqdci; // dwdot[O]/d[HNO2]
  J[810] += dqdci; // dwdot[OH]/d[HNO2]
  J[826] += dqdci; // dwdot[NO2]/d[HNO2]
  J[832] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 225: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[26] -= q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[181] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[646] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[810] -= dqdci; // dwdot[OH]/d[HNO2]
  J[811] += dqdci; // dwdot[H2O]/d[HNO2]
  J[826] += dqdci; // dwdot[NO2]/d[HNO2]
  J[832] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 227: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[20] * sc[20]);
  k_f = 9600 * exp(0.7 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.7 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[18] * sc[28];
  Kc = exp(-g_RT[18] + 2.000000 * g_RT[20] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[20]) + (h_RT[18] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q;     // NO
  wdot[20] -= 2 * q; // NO2
  wdot[28] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[28];
  J[576] += dqdci;      // dwdot[NO]/d[NO]
  J[578] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[586] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[20];
  J[638] += dqdci;      // dwdot[NO]/d[NO2]
  J[640] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[648] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[18];
  J[886] += dqdci;      // dwdot[NO]/d[NO3]
  J[888] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[896] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[948] += dqdT;      // dwdot[NO]/dT
  J[950] += -2 * dqdT; // dwdot[NO2]/dT
  J[958] += dqdT;      // dwdot[NO3]/dT

  // reaction 228: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[51] += dqdci; // dwdot[NO2]/d[H]
  J[59] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[1];
  J[869] -= dqdci; // dwdot[H]/d[NO3]
  J[872] += dqdci; // dwdot[OH]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 229: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[20];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (h_RT[8] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[121] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[20];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[8];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[3];
  J[871] -= dqdci; // dwdot[O]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 230: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[20];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[6] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[20];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[626] += dqdci; // dwdot[HO2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[NO3]
  J[874] += dqdci; // dwdot[HO2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 231: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[8] * sc[20];
  Kc = refC * exp(-g_RT[4] + g_RT[6] - g_RT[8] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[6] + h_RT[28]) + (h_RT[4] + h_RT[8] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = -k_r * sc[8] * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4] * sc[20];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[4] * sc[8];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[872] += dqdci; // dwdot[OH]/d[NO3]
  J[874] -= dqdci; // dwdot[HO2]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 233: 2 NO3 <=> 2 NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[28] * sc[28]);
  k_f = 512000 * exp(-(2450.66516246898) * invT);
  dlnkfdT = (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[8] * (sc[20] * sc[20]);
  Kc = refC * exp(-g_RT[8] - 2.000000 * g_RT[20] + 2.000000 * g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[28]) + (h_RT[8] + 2.000000 * h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // O2
  wdot[20] += 2 * q; // NO2
  wdot[28] -= 2 * q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[20] * sc[20];
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  J[268] += 2 * dqdci;  // dwdot[NO2]/d[O2]
  J[276] += -2 * dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[8] * 2.000000 * sc[20];
  J[628] += dqdci;      // dwdot[O2]/d[NO2]
  J[640] += 2 * dqdci;  // dwdot[NO2]/d[NO2]
  J[648] += -2 * dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * 2.000000 * sc[28];
  J[876] += dqdci;      // dwdot[O2]/d[NO3]
  J[888] += 2 * dqdci;  // dwdot[NO2]/d[NO3]
  J[896] += -2 * dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT;      // dwdot[O2]/dT
  J[950] += 2 * dqdT;  // dwdot[NO2]/dT
  J[958] += -2 * dqdT; // dwdot[NO3]/dT

  // reaction 234: HO2 + NO3 <=> HNO3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 555000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[29];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[28]) + (h_RT[8] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[28] -= q; // NO3
  wdot[29] += q; // HNO3
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  J[215] += dqdci; // dwdot[HNO3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[29];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  J[277] += dqdci; // dwdot[HNO3]/d[O2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[874] -= dqdci; // dwdot[HO2]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  J[897] += dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = -k_r * sc[8];
  J[905] -= dqdci; // dwdot[HO2]/d[HNO3]
  J[907] += dqdci; // dwdot[O2]/d[HNO3]
  J[927] -= dqdci; // dwdot[NO3]/d[HNO3]
  J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 237: H + HNO3 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 556 * exp(1.53 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.53 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[59] += dqdci; // dwdot[NO3]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[90] += dqdci; // dwdot[NO3]/d[H2]
  J[91] -= dqdci; // dwdot[HNO3]/d[H2]
  // d()/d[NO3]
  dqdci = -k_r * sc[2];
  J[869] -= dqdci; // dwdot[H]/d[NO3]
  J[870] += dqdci; // dwdot[H2]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[901] += dqdci; // dwdot[H2]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 238: H + HNO3 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 6.08e-05 * exp(3.29 * logT - (3165.23282791169) * invT);
  dlnkfdT = 3.29 * invT + (3165.23282791169) * invT2;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[20] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[51] += dqdci; // dwdot[NO2]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[184] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[649] -= dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[904] += dqdci; // dwdot[H2O]/d[HNO3]
  J[919] += dqdci; // dwdot[NO2]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 239: H + HNO3 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 0.382 * exp(2.3 * logT - (3512.45232731694) * invT);
  dlnkfdT = 2.3 * invT + (3512.45232731694) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[25] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[25] += q; // HONO
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[HONO]/d[OH]
  J[153] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[4];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  J[804] -= dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[903] += dqdci; // dwdot[OH]/d[HNO3]
  J[924] += dqdci; // dwdot[HONO]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 240: HNO3 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[29];
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[29]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[152] += dqdci; // dwdot[NO3]/d[OH]
  J[153] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[183] += dqdci; // dwdot[NO3]/d[H2O]
  J[184] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[872] -= dqdci; // dwdot[OH]/d[NO3]
  J[873] += dqdci; // dwdot[H2O]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[4];
  J[903] -= dqdci; // dwdot[OH]/d[HNO3]
  J[904] += dqdci; // dwdot[H2O]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 241: HNO3 + NH2 <=> NH3 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 1.03e+15 * exp(-3.85 * logT - (96.1143831687015) * invT);
  dlnkfdT = -3.85 * invT + (96.1143831687015) * invT2;
  // reverse
  phi_r = sc[12] * sc[28];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[12] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[NH2]
  dqdci = +k_f * sc[29];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[369] += dqdci; // dwdot[NO3]/d[NH2]
  J[370] -= dqdci; // dwdot[HNO3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[28];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[400] += dqdci; // dwdot[NO3]/d[NH3]
  J[401] -= dqdci; // dwdot[HNO3]/d[NH3]
  // d()/d[NO3]
  dqdci = -k_r * sc[12];
  J[879] -= dqdci; // dwdot[NH2]/d[NO3]
  J[880] += dqdci; // dwdot[NH3]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[11];
  J[910] -= dqdci; // dwdot[NH2]/d[HNO3]
  J[911] += dqdci; // dwdot[NH3]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 242: HNO3 + NH2 <=> NH3 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 3.08e-05 * exp(3.22 * logT - (-69.947116546856) * invT);
  dlnkfdT = 3.22 * invT + (-69.947116546856) * invT2;
  // reverse
  phi_r = sc[12] * sc[28];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[12] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[NH2]
  dqdci = +k_f * sc[29];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[369] += dqdci; // dwdot[NO3]/d[NH2]
  J[370] -= dqdci; // dwdot[HNO3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[28];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[400] += dqdci; // dwdot[NO3]/d[NH3]
  J[401] -= dqdci; // dwdot[HNO3]/d[NH3]
  // d()/d[NO3]
  dqdci = -k_r * sc[12];
  J[879] -= dqdci; // dwdot[NH2]/d[NO3]
  J[880] += dqdci; // dwdot[NH3]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[11];
  J[910] -= dqdci; // dwdot[NH2]/d[HNO3]
  J[911] += dqdci; // dwdot[NH3]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  amrex::Real c_R[30], dcRdT[30], e_RT[30];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 30; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[930 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 30; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 30; ++m) {
      dehmixdc += eh_RT[m] * J[k * 31 + m];
    }
    J[k * 31 + 30] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[960] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[30];

  for (int k = 0; k < 30; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 30; k++) {
    J[930 + k] *= 1.e-6;
    J[k * 31 + 30] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 961; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[30];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 30; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[30];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[30];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[30];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + (14 - 1) * sc[5] + (0.78 - 1) * sc[8];
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 4700000 * exp(0.44 * logT);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.366e+20 * exp(-1.72 * logT - (264.088106214317) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.72 * invT + (264.088106214317) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] - g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[8] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[8];
    J[32] -= dqdci; // dwdot[H]/d[H]
    J[37] += dqdci; // dwdot[HO2]/d[H]
    J[39] -= dqdci; // dwdot[O2]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[63] -= dqdci; // dwdot[H]/d[H2]
    J[68] += dqdci; // dwdot[HO2]/d[H2]
    J[70] -= dqdci; // dwdot[O2]/d[H2]
    // d()/d[H2O]
    dqdci = (14 - 1) * dcdc_fac;
    J[156] -= dqdci; // dwdot[H]/d[H2O]
    J[161] += dqdci; // dwdot[HO2]/d[H2O]
    J[163] -= dqdci; // dwdot[O2]/d[H2O]
    // d()/d[HO2]
    dqdci = -k_r;
    J[187] -= dqdci; // dwdot[H]/d[HO2]
    J[192] += dqdci; // dwdot[HO2]/d[HO2]
    J[194] -= dqdci; // dwdot[O2]/d[HO2]
    // d()/d[O2]
    dqdci = (0.78 - 1) * dcdc_fac + k_f * sc[1];
    J[249] -= dqdci; // dwdot[H]/d[O2]
    J[254] += dqdci; // dwdot[HO2]/d[O2]
    J[256] -= dqdci; // dwdot[O2]/d[O2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[8];
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 14 * dcdc_fac;
    dqdc[6] = dcdc_fac - k_r;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 0.78 * dcdc_fac + k_f * sc[1];
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] -= dqdc[k];
      J[31 * k + 6] += dqdc[k];
      J[31 * k + 8] -= dqdc[k];
    }
  }
  J[931] -= dqdT; // dwdot[H]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT

  // reaction 24: H2O2 (+M) <=> 2 OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.5 - 1) * sc[0] + (3.7 - 1) * sc[2] + (7.5 - 1) * sc[5] +
          (7.7 - 1) * sc[7] + (1.2 - 1) * sc[8];
  // forward
  phi_f = sc[7];
  k_f = 2000000000000 * exp(0.9 * logT - (24531.3092413143) * invT);
  dlnkfdT = 0.9 * invT + (24531.3092413143) * invT2;
  // pressure-fall-off
  k_0 = 2.5e+24 * exp(-2.3 * logT - (24531.3092413143) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.3 * invT + (24531.3092413143) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.43) * exp(-T / 1e-30);
  Fcent2 = 0.43 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refC * exp(-2.000000 * g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (2.000000 * h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += 2 * q; // OH
  wdot[7] -= q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[4] += 2 * dqdci; // dwdot[OH]/d[N2]
    J[7] -= dqdci;     // dwdot[H2O2]/d[N2]
    // d()/d[H2]
    dqdci = (3.7 - 1) * dcdc_fac;
    J[66] += 2 * dqdci; // dwdot[OH]/d[H2]
    J[69] -= dqdci;     // dwdot[H2O2]/d[H2]
    // d()/d[OH]
    dqdci = -k_r * 2.000000 * sc[4];
    J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
    J[131] -= dqdci;     // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (7.5 - 1) * dcdc_fac;
    J[159] += 2 * dqdci; // dwdot[OH]/d[H2O]
    J[162] -= dqdci;     // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = (7.7 - 1) * dcdc_fac + k_f;
    J[221] += 2 * dqdci; // dwdot[OH]/d[H2O2]
    J[224] -= dqdci;     // dwdot[H2O2]/d[H2O2]
    // d()/d[O2]
    dqdci = (1.2 - 1) * dcdc_fac;
    J[252] += 2 * dqdci; // dwdot[OH]/d[O2]
    J[255] -= dqdci;     // dwdot[H2O2]/d[O2]
  } else {
    dqdc[0] = 1.5 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 3.7 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * 2.000000 * sc[4];
    dqdc[5] = 7.5 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = 7.7 * dcdc_fac + k_f;
    dqdc[8] = 1.2 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] += 2 * dqdc[k];
      J[31 * k + 7] -= dqdc[k];
    }
  }
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[937] -= dqdT;     // dwdot[H2O2]/dT

  // reaction 85: 2 NH2 (+M) <=> N2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.69 - 1) * sc[8] + (4.87 - 1) * sc[12];
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 560000000 * exp(-0.414 * logT - (33.2122999431115) * invT);
  dlnkfdT = -0.414 * invT + (33.2122999431115) * invT2;
  // pressure-fall-off
  k_0 = 1.6e+34 * exp(-5.49 * logT - (999.891514953978) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (999.891514953978) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.31) * exp(-T / 1e-30);
  Fcent2 = 0.31 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] -= 2 * q; // NH2
  wdot[16] += q;     // N2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1 - 1) * dcdc_fac;
    J[11] += -2 * dqdci; // dwdot[NH2]/d[N2]
    J[16] += dqdci;      // dwdot[N2H4]/d[N2]
    // d()/d[O2]
    dqdci = (0.69 - 1) * dcdc_fac;
    J[259] += -2 * dqdci; // dwdot[NH2]/d[O2]
    J[264] += dqdci;      // dwdot[N2H4]/d[O2]
    // d()/d[NH2]
    dqdci = +k_f * 2.000000 * sc[11];
    J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
    J[357] += dqdci;      // dwdot[N2H4]/d[NH2]
    // d()/d[NH3]
    dqdci = (4.87 - 1) * dcdc_fac;
    J[383] += -2 * dqdci; // dwdot[NH2]/d[NH3]
    J[388] += dqdci;      // dwdot[N2H4]/d[NH3]
    // d()/d[N2H4]
    dqdci = -k_r;
    J[507] += -2 * dqdci; // dwdot[NH2]/d[N2H4]
    J[512] += dqdci;      // dwdot[N2H4]/d[N2H4]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 0.69 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac + k_f * 2.000000 * sc[11];
    dqdc[12] = 4.87 * dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac - k_r;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 11] += -2 * dqdc[k];
      J[31 * k + 16] += dqdc[k];
    }
  }
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[946] += dqdT;      // dwdot[N2H4]/dT

  // reaction 98: N2H3 (+M) <=> H + N2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0];
  // forward
  phi_f = sc[15];
  k_f = 128000000000 * exp(0.819 * logT - (24204.721625207) * invT);
  dlnkfdT = 0.819 * invT + (24204.721625207) * invT2;
  // pressure-fall-off
  k_0 = 3.84e+40 * exp(-6.88 * logT - (27425.3082863572) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.88 * invT + (27425.3082863572) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.842) * exp(-T / 80000);
  Fcent2 = 0.842 * exp(-T / 28);
  Fcent3 = exp(-7298 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 80000 - Fcent2 / 28 + Fcent3 * 7298 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] += dqdci;  // dwdot[H]/d[N2]
    J[14] += dqdci; // dwdot[N2H2]/d[N2]
    J[15] -= dqdci; // dwdot[N2H3]/d[N2]
    // d()/d[H]
    dqdci = -k_r * sc[14];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[45] += dqdci; // dwdot[N2H2]/d[H]
    J[46] -= dqdci; // dwdot[N2H3]/d[H]
    // d()/d[N2H2]
    dqdci = -k_r * sc[1];
    J[435] += dqdci; // dwdot[H]/d[N2H2]
    J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
    J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
    // d()/d[N2H3]
    dqdci = +k_f;
    J[466] += dqdci; // dwdot[H]/d[N2H3]
    J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
    J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac - k_r * sc[14];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac - k_r * sc[1];
    dqdc[15] = dcdc_fac + k_f;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 14] += dqdc[k];
      J[31 * k + 15] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 141: NH2OH (+M) <=> NH2 + OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[24];
  k_f = 1.4e+20 * exp(-1.31 * logT - (32246.1239447664) * invT);
  dlnkfdT = -1.31 * invT + (32246.1239447664) * invT2;
  // pressure-fall-off
  k_0 = 5.4e+37 * exp(-5.96 * logT - (33604.8089424392) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.96 * invT + (33604.8089424392) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.35) * exp(-T / 1e-30);
  Fcent2 = 0.35 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = refC * exp(-g_RT[4] - g_RT[11] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[4] + h_RT[11]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[24] -= q; // NH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = -k_r * sc[11];
    J[128] += dqdci; // dwdot[OH]/d[OH]
    J[135] += dqdci; // dwdot[NH2]/d[OH]
    J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
    // d()/d[NH2]
    dqdci = -k_r * sc[4];
    J[345] += dqdci; // dwdot[OH]/d[NH2]
    J[352] += dqdci; // dwdot[NH2]/d[NH2]
    J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
    // d()/d[NH2OH]
    dqdci = +k_f;
    J[748] += dqdci; // dwdot[OH]/d[NH2OH]
    J[755] += dqdci; // dwdot[NH2]/d[NH2OH]
    J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac - k_r * sc[11];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac - k_r * sc[4];
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] += dqdc[k];
      J[31 * k + 11] += dqdc[k];
      J[31 * k + 24] -= dqdc[k];
    }
  }
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 189: NO + OH (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 110000000 * exp(-0.3 * logT);
  dlnkfdT = -0.3 * invT;
  // pressure-fall-off
  k_0 = 3.392e+23 * exp(-2.51 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.51 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.75) * exp(-T / 1e-30);
  Fcent2 = 0.75 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[4] + g_RT[18] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[18] -= q; // NO
  wdot[25] += q; // HONO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[OH]
    dqdci = +k_f * sc[18];
    J[128] -= dqdci; // dwdot[OH]/d[OH]
    J[142] -= dqdci; // dwdot[NO]/d[OH]
    J[149] += dqdci; // dwdot[HONO]/d[OH]
    // d()/d[NO]
    dqdci = +k_f * sc[4];
    J[562] -= dqdci; // dwdot[OH]/d[NO]
    J[576] -= dqdci; // dwdot[NO]/d[NO]
    J[583] += dqdci; // dwdot[HONO]/d[NO]
    // d()/d[HONO]
    dqdci = -k_r;
    J[779] -= dqdci; // dwdot[OH]/d[HONO]
    J[793] -= dqdci; // dwdot[NO]/d[HONO]
    J[800] += dqdci; // dwdot[HONO]/d[HONO]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[18];
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[4];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac - k_r;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] -= dqdc[k];
      J[31 * k + 18] -= dqdc[k];
      J[31 * k + 25] += dqdc[k];
    }
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 195: NO + O (+M) <=> NO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.4 - 1) * sc[0] + (6.4 - 1) * sc[5] + (0.45 - 1) * sc[8];
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 295000000 * exp(-0.4 * logT);
  dlnkfdT = -0.4 * invT;
  // pressure-fall-off
  k_0 = 3.336e+20 * exp(-1.6 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.6 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8) * exp(-T / 1e-30);
  Fcent2 = 0.8 * exp(-T / 1e+30);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1e-30 - Fcent2 / 1e+30 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[3] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[18] -= q; // NO
  wdot[20] += q; // NO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (0.4 - 1) * dcdc_fac;
    J[3] -= dqdci;  // dwdot[O]/d[N2]
    J[18] -= dqdci; // dwdot[NO]/d[N2]
    J[20] += dqdci; // dwdot[NO2]/d[N2]
    // d()/d[H2]
    dqdci = (1 - 1) * dcdc_fac;
    J[65] -= dqdci; // dwdot[O]/d[H2]
    J[80] -= dqdci; // dwdot[NO]/d[H2]
    J[82] += dqdci; // dwdot[NO2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[18];
    J[96] -= dqdci;  // dwdot[O]/d[O]
    J[111] -= dqdci; // dwdot[NO]/d[O]
    J[113] += dqdci; // dwdot[NO2]/d[O]
    // d()/d[H2O]
    dqdci = (6.4 - 1) * dcdc_fac;
    J[158] -= dqdci; // dwdot[O]/d[H2O]
    J[173] -= dqdci; // dwdot[NO]/d[H2O]
    J[175] += dqdci; // dwdot[NO2]/d[H2O]
    // d()/d[O2]
    dqdci = (0.45 - 1) * dcdc_fac;
    J[251] -= dqdci; // dwdot[O]/d[O2]
    J[266] -= dqdci; // dwdot[NO]/d[O2]
    J[268] += dqdci; // dwdot[NO2]/d[O2]
    // d()/d[NO]
    dqdci = +k_f * sc[3];
    J[561] -= dqdci; // dwdot[O]/d[NO]
    J[576] -= dqdci; // dwdot[NO]/d[NO]
    J[578] += dqdci; // dwdot[NO2]/d[NO]
    // d()/d[NO2]
    dqdci = -k_r;
    J[623] -= dqdci; // dwdot[O]/d[NO2]
    J[638] -= dqdci; // dwdot[NO]/d[NO2]
    J[640] += dqdci; // dwdot[NO2]/d[NO2]
  } else {
    dqdc[0] = 0.4 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac + k_f * sc[18];
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6.4 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 0.45 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[3];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 18] -= dqdc[k];
      J[31 * k + 20] += dqdc[k];
    }
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 223: HNO2 (+M) <=> HONO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[26];
  k_f = 250000000000000 * exp(-(16253.8983054924) * invT);
  dlnkfdT = (16253.8983054924) * invT2;
  // pressure-fall-off
  k_0 = 3.1e+18 * exp(-(15851.3249728487) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (15851.3249728487) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.149) * exp(-T / 1e-30);
  Fcent2 = 1.149 * exp(-T / 3125);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 3125 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = exp(-g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26]) + (h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[25] += q; // HONO
  wdot[26] -= q; // HNO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[HONO]
    dqdci = -k_r;
    J[800] += dqdci; // dwdot[HONO]/d[HONO]
    J[801] -= dqdci; // dwdot[HNO2]/d[HONO]
    // d()/d[HNO2]
    dqdci = +k_f;
    J[831] += dqdci; // dwdot[HONO]/d[HNO2]
    J[832] -= dqdci; // dwdot[HNO2]/d[HNO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac - k_r;
    dqdc[26] = dcdc_fac + k_f;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 25] += dqdc[k];
      J[31 * k + 26] -= dqdc[k];
    }
  }
  J[955] += dqdT; // dwdot[HONO]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 226: NO2 + O (+M) <=> NO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 3500000 * exp(0.2 * logT);
  dlnkfdT = 0.2 * invT;
  // pressure-fall-off
  k_0 = 2.5e+20 * exp(-1.5 * logT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.5 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.71) * exp(-T / 1e-30);
  Fcent2 = 0.71 * exp(-T / 1700);
  Fcent3 = exp(-1e+30 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1700 + Fcent3 * 1e+30 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[3] + g_RT[20] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // O
  wdot[20] -= q; // NO2
  wdot[28] += q; // NO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[20];
    J[96] -= dqdci;  // dwdot[O]/d[O]
    J[113] -= dqdci; // dwdot[NO2]/d[O]
    J[121] += dqdci; // dwdot[NO3]/d[O]
    // d()/d[NO2]
    dqdci = +k_f * sc[3];
    J[623] -= dqdci; // dwdot[O]/d[NO2]
    J[640] -= dqdci; // dwdot[NO2]/d[NO2]
    J[648] += dqdci; // dwdot[NO3]/d[NO2]
    // d()/d[NO3]
    dqdci = -k_r;
    J[871] -= dqdci; // dwdot[O]/d[NO3]
    J[888] -= dqdci; // dwdot[NO2]/d[NO3]
    J[896] += dqdci; // dwdot[NO3]/d[NO3]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac + k_f * sc[20];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac + k_f * sc[3];
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac - k_r;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 20] -= dqdc[k];
      J[31 * k + 28] += dqdc[k];
    }
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[958] += dqdT; // dwdot[NO3]/dT

  // reaction 235: NO2 + OH (+M) <=> HNO3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + (10 - 1) * sc[5] + sc[8];
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 6.42e+32 * exp(-5.49 * logT - (1182.55916464109) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.49 * invT + (1182.55916464109) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 10);
  Fcent2 = 1 * exp(-T / 1168);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 10 - Fcent2 / 1168);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[4] + g_RT[20] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[20] -= q; // NO2
  wdot[29] += q; // HNO3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[66] -= dqdci; // dwdot[OH]/d[H2]
    J[82] -= dqdci; // dwdot[NO2]/d[H2]
    J[91] += dqdci; // dwdot[HNO3]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * sc[20];
    J[128] -= dqdci; // dwdot[OH]/d[OH]
    J[144] -= dqdci; // dwdot[NO2]/d[OH]
    J[153] += dqdci; // dwdot[HNO3]/d[OH]
    // d()/d[H2O]
    dqdci = (10 - 1) * dcdc_fac;
    J[159] -= dqdci; // dwdot[OH]/d[H2O]
    J[175] -= dqdci; // dwdot[NO2]/d[H2O]
    J[184] += dqdci; // dwdot[HNO3]/d[H2O]
    // d()/d[O2]
    dqdci = (2 - 1) * dcdc_fac;
    J[252] -= dqdci; // dwdot[OH]/d[O2]
    J[268] -= dqdci; // dwdot[NO2]/d[O2]
    J[277] += dqdci; // dwdot[HNO3]/d[O2]
    // d()/d[NO2]
    dqdci = +k_f * sc[4];
    J[624] -= dqdci; // dwdot[OH]/d[NO2]
    J[640] -= dqdci; // dwdot[NO2]/d[NO2]
    J[649] += dqdci; // dwdot[HNO3]/d[NO2]
    // d()/d[HNO3]
    dqdci = -k_r;
    J[903] -= dqdci; // dwdot[OH]/d[HNO3]
    J[919] -= dqdci; // dwdot[NO2]/d[HNO3]
    J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[20];
    dqdc[5] = 10 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 2 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac + k_f * sc[4];
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac - k_r;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 4] -= dqdc[k];
      J[31 * k + 20] -= dqdc[k];
      J[31 * k + 29] += dqdc[k];
    }
  }
  J[934] -= dqdT; // dwdot[OH]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 199: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (1.7 - 1) * sc[0] + (12 - 1) * sc[5] + (1.4 - 1) * sc[8];
  // forward
  phi_f = sc[19];
  k_f = 1300000000000 * exp(-(31486.2667794013) * invT);
  dlnkfdT = (31486.2667794013) * invT2;
  // pressure-fall-off
  k_0 = 400000000000000 * exp(-(28482.0632845471) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28482.0632845471) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = refC * exp(-g_RT[0] - g_RT[3] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[0] + h_RT[3]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O
  wdot[19] -= q; // N2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (1.7 - 1) * dcdc_fac - k_r * sc[3];
    J[0] += dqdci;  // dwdot[N2]/d[N2]
    J[3] += dqdci;  // dwdot[O]/d[N2]
    J[19] -= dqdci; // dwdot[N2O]/d[N2]
    // d()/d[O]
    dqdci = -k_r * sc[0];
    J[93] += dqdci;  // dwdot[N2]/d[O]
    J[96] += dqdci;  // dwdot[O]/d[O]
    J[112] -= dqdci; // dwdot[N2O]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[155] += dqdci; // dwdot[N2]/d[H2O]
    J[158] += dqdci; // dwdot[O]/d[H2O]
    J[174] -= dqdci; // dwdot[N2O]/d[H2O]
    // d()/d[O2]
    dqdci = (1.4 - 1) * dcdc_fac;
    J[248] += dqdci; // dwdot[N2]/d[O2]
    J[251] += dqdci; // dwdot[O]/d[O2]
    J[267] -= dqdci; // dwdot[N2O]/d[O2]
    // d()/d[N2O]
    dqdci = +k_f;
    J[589] += dqdci; // dwdot[N2]/d[N2O]
    J[592] += dqdci; // dwdot[O]/d[N2O]
    J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  } else {
    dqdc[0] = 1.7 * dcdc_fac - k_r * sc[3];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac - k_r * sc[0];
    dqdc[4] = dcdc_fac;
    dqdc[5] = 12 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 1.4 * dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac + k_f;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 0] += dqdc[k];
      J[31 * k + 3] += dqdc[k];
      J[31 * k + 19] -= dqdc[k];
    }
  }
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 6: H2 + M <=> 2 H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[2];
  k_f = 46000000000000 * exp(-1.4 * logT - (52525.7555766966) * invT);
  dlnkfdT = -1.4 * invT + (52525.7555766966) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]);
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2]) + (2.000000 * h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[2] -= q;     // H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * 2.000000 * sc[1];
    J[32] += 2 * dqdci; // dwdot[H]/d[H]
    J[33] -= dqdci;     // dwdot[H2]/d[H]
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor + k_f;
    J[63] += 2 * dqdci; // dwdot[H]/d[H2]
    J[64] -= dqdci;     // dwdot[H2]/d[H2]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[156] += 2 * dqdci; // dwdot[H]/d[H2O]
    J[157] -= dqdci;     // dwdot[H2]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * 2.000000 * sc[1];
    dqdc[2] = 2.5 * q_nocor + k_f;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += 2 * dqdc[k];
      J[31 * k + 2] -= dqdc[k];
    }
  }
  J[931] += 2 * dqdT; // dwdot[H]/dT
  J[932] -= dqdT;     // dwdot[H2]/dT

  // reaction 7: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 19 * exp(-(-899.751398458839) * invT);
  dlnkfdT = (-899.751398458839) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[3] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= 2 * q; // O
  wdot[8] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[65] += -2 * dqdci; // dwdot[O]/d[H2]
    J[70] += dqdci;      // dwdot[O2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[3];
    J[96] += -2 * dqdci; // dwdot[O]/d[O]
    J[101] += dqdci;     // dwdot[O2]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[158] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[163] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[O2]
    dqdci = -k_r;
    J[251] += -2 * dqdci; // dwdot[O]/d[O2]
    J[256] += dqdci;      // dwdot[O2]/d[O2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = 2.5 * q_nocor;
    dqdc[3] = q_nocor + k_f * 2.000000 * sc[3];
    dqdc[4] = q_nocor;
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor - k_r;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] += -2 * dqdc[k];
      J[31 * k + 8] += dqdc[k];
    }
  }
  J[933] += -2 * dqdT; // dwdot[O]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 8: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.5 - 1) * sc[2] + (12 - 1) * sc[5];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 4700000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[32] -= dqdci; // dwdot[H]/d[H]
    J[34] -= dqdci; // dwdot[O]/d[H]
    J[35] += dqdci; // dwdot[OH]/d[H]
    // d()/d[H2]
    dqdci = (2.5 - 1) * q_nocor;
    J[63] -= dqdci; // dwdot[H]/d[H2]
    J[65] -= dqdci; // dwdot[O]/d[H2]
    J[66] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[1];
    J[94] -= dqdci; // dwdot[H]/d[O]
    J[96] -= dqdci; // dwdot[O]/d[O]
    J[97] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[125] -= dqdci; // dwdot[H]/d[OH]
    J[127] -= dqdci; // dwdot[O]/d[OH]
    J[128] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[156] -= dqdci; // dwdot[H]/d[H2O]
    J[158] -= dqdci; // dwdot[O]/d[H2O]
    J[159] += dqdci; // dwdot[OH]/d[H2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[3];
    dqdc[2] = 2.5 * q_nocor;
    dqdc[3] = q_nocor + k_f * sc[1];
    dqdc[4] = q_nocor - k_r;
    dqdc[5] = 12 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] -= dqdc[k];
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 4] += dqdc[k];
    }
  }
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 9: H2O + M <=> H + OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + sc[0] + (3 - 1) * sc[2] + (0 - 1) * sc[5] + (1.5 - 1) * sc[8];
  // forward
  phi_f = sc[5];
  k_f = 6.1e+21 * exp(-3.322 * logT - (60783.5410625521) * invT);
  dlnkfdT = -3.322 * invT + (60783.5410625521) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5]) + (h_RT[1] + h_RT[4]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // OH
  wdot[5] -= q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[N2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci; // dwdot[H]/d[N2]
    J[4] += dqdci; // dwdot[OH]/d[N2]
    J[5] -= dqdci; // dwdot[H2O]/d[N2]
    // d()/d[H]
    dqdci = -k_r * sc[4];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[35] += dqdci; // dwdot[OH]/d[H]
    J[36] -= dqdci; // dwdot[H2O]/d[H]
    // d()/d[H2]
    dqdci = (3 - 1) * q_nocor;
    J[63] += dqdci; // dwdot[H]/d[H2]
    J[66] += dqdci; // dwdot[OH]/d[H2]
    J[67] -= dqdci; // dwdot[H2O]/d[H2]
    // d()/d[OH]
    dqdci = -k_r * sc[1];
    J[125] += dqdci; // dwdot[H]/d[OH]
    J[128] += dqdci; // dwdot[OH]/d[OH]
    J[129] -= dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor + k_f;
    J[156] += dqdci; // dwdot[H]/d[H2O]
    J[159] += dqdci; // dwdot[OH]/d[H2O]
    J[160] -= dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[O2]
    dqdci = (1.5 - 1) * q_nocor;
    J[249] += dqdci; // dwdot[H]/d[O2]
    J[252] += dqdci; // dwdot[OH]/d[O2]
    J[253] -= dqdci; // dwdot[H2O]/d[O2]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[4];
    dqdc[2] = 3 * q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor - k_r * sc[1];
    dqdc[5] = +k_f;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = 1.5 * q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 4] += dqdc[k];
      J[31 * k + 5] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[H2O]/dT

  // reaction 10: H2O + H2O <=> H + OH + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 1e+20 * exp(-2.44 * logT - (60476.5788964112) * invT);
  dlnkfdT = -2.44 * invT + (60476.5788964112) * invT2;
  // reverse
  phi_r = sc[1] * sc[4] * sc[5];
  Kc = refC * exp(-g_RT[1] - g_RT[4] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[5]) + (h_RT[1] + h_RT[4] + h_RT[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // OH
  wdot[5] -= q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[5];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[36] -= dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[5];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] -= dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * 2.000000 * sc[5] - k_r * sc[1] * sc[4];
  J[156] += dqdci; // dwdot[H]/d[H2O]
  J[159] += dqdci; // dwdot[OH]/d[H2O]
  J[160] -= dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] -= dqdT; // dwdot[H2O]/dT

  // reaction 18: 2 H + O2 <=> H2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[8];
  k_f = 88000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[2]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[8]) + (h_RT[2] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[2] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[8];
  J[32] += -2 * dqdci; // dwdot[H]/d[H]
  J[33] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[63] += -2 * dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[2];
  J[249] += -2 * dqdci; // dwdot[H]/d[O2]
  J[250] += dqdci;      // dwdot[H2]/d[O2]
  // d()/dT
  J[931] += -2 * dqdT; // dwdot[H]/dT
  J[932] += dqdT;      // dwdot[H2]/dT

  // reaction 20: H + O + O2 <=> OH + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[8];
  k_f = 73500000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[8]) + (h_RT[4] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[1] * sc[8];
  J[94] -= dqdci; // dwdot[H]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[4];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 21: H + OH + O2 <=> H2O + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4] * sc[8];
  k_f = 25600000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[4] + h_RT[8]) + (h_RT[5] + h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[4] * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[1] * sc[8];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[4] - k_r * sc[5];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT

  // reaction 30: N2 + M <=> 2 N + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (16.25 - 1) * sc[5];
  // forward
  phi_f = sc[0];
  k_f = 1890000000000 * exp(-0.85 * logT - (113223.749806062) * invT);
  dlnkfdT = -0.85 * invT + (113223.749806062) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = refC * exp(g_RT[0] - 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0]) + (2.000000 * h_RT[9]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;     // N2
  wdot[9] += 2 * q; // N
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[N2]
    dqdci = +k_f;
    J[0] -= dqdci;     // dwdot[N2]/d[N2]
    J[9] += 2 * dqdci; // dwdot[N]/d[N2]
    // d()/d[H2O]
    dqdci = (16.25 - 1) * q_nocor;
    J[155] -= dqdci;     // dwdot[N2]/d[H2O]
    J[164] += 2 * dqdci; // dwdot[N]/d[H2O]
    // d()/d[N]
    dqdci = -k_r * 2.000000 * sc[9];
    J[279] -= dqdci;     // dwdot[N2]/d[N]
    J[288] += 2 * dqdci; // dwdot[N]/d[N]
  } else {
    dqdc[0] = q_nocor + k_f;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 16.25 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor - k_r * 2.000000 * sc[9];
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 0] -= dqdc[k];
      J[31 * k + 9] += 2 * dqdc[k];
    }
  }
  J[930] -= dqdT;     // dwdot[N2]/dT
  J[939] += 2 * dqdT; // dwdot[N]/dT

  // reaction 31: N + O + M <=> NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (16.25 - 1) * sc[5];
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 760 * exp(-0.1 * logT - (-890.693498474354) * invT);
  dlnkfdT = -0.1 * invT + (-890.693498474354) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[3] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[9];
    J[96] -= dqdci;  // dwdot[O]/d[O]
    J[102] -= dqdci; // dwdot[N]/d[O]
    J[111] += dqdci; // dwdot[NO]/d[O]
    // d()/d[H2O]
    dqdci = (16.25 - 1) * q_nocor;
    J[158] -= dqdci; // dwdot[O]/d[H2O]
    J[164] -= dqdci; // dwdot[N]/d[H2O]
    J[173] += dqdci; // dwdot[NO]/d[H2O]
    // d()/d[N]
    dqdci = +k_f * sc[3];
    J[282] -= dqdci; // dwdot[O]/d[N]
    J[288] -= dqdci; // dwdot[N]/d[N]
    J[297] += dqdci; // dwdot[NO]/d[N]
    // d()/d[NO]
    dqdci = -k_r;
    J[561] -= dqdci; // dwdot[O]/d[NO]
    J[567] -= dqdci; // dwdot[N]/d[NO]
    J[576] += dqdci; // dwdot[NO]/d[NO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor + k_f * sc[9];
    dqdc[4] = q_nocor;
    dqdc[5] = 16.25 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor + k_f * sc[3];
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor - k_r;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 3] -= dqdc[k];
      J[31 * k + 9] -= dqdc[k];
      J[31 * k + 18] += dqdc[k];
    }
  }
  J[933] -= dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 52: NH2 + M <=> H + NH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[11];
  k_f = 1200000000 * exp(-(38245.8504469897) * invT);
  dlnkfdT = (38245.8504469897) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = refC * exp(-g_RT[1] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11]) + (h_RT[1] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[10];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[41] += dqdci; // dwdot[NH]/d[H]
    J[42] -= dqdci; // dwdot[NH2]/d[H]
    // d()/d[NH]
    dqdci = -k_r * sc[1];
    J[311] += dqdci; // dwdot[H]/d[NH]
    J[320] += dqdci; // dwdot[NH]/d[NH]
    J[321] -= dqdci; // dwdot[NH2]/d[NH]
    // d()/d[NH2]
    dqdci = +k_f;
    J[342] += dqdci; // dwdot[H]/d[NH2]
    J[351] += dqdci; // dwdot[NH]/d[NH2]
    J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[10];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor - k_r * sc[1];
    dqdc[11] = q_nocor + k_f;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 10] += dqdc[k];
      J[31 * k + 11] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 73: N2H2 + M <=> H + NNH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[14];
  k_f = 1.9e+21 * exp(-3.05 * logT - (33262.621609692) * invT);
  dlnkfdT = -3.05 * invT + (33262.621609692) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = refC * exp(-g_RT[1] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14]) + (h_RT[1] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[13];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[44] += dqdci; // dwdot[NNH]/d[H]
    J[45] -= dqdci; // dwdot[N2H2]/d[H]
    // d()/d[H2O]
    dqdci = (7 - 1) * q_nocor;
    J[156] += dqdci; // dwdot[H]/d[H2O]
    J[168] += dqdci; // dwdot[NNH]/d[H2O]
    J[169] -= dqdci; // dwdot[N2H2]/d[H2O]
    // d()/d[NNH]
    dqdci = -k_r * sc[1];
    J[404] += dqdci; // dwdot[H]/d[NNH]
    J[416] += dqdci; // dwdot[NNH]/d[NNH]
    J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
    // d()/d[N2H2]
    dqdci = +k_f;
    J[435] += dqdci; // dwdot[H]/d[N2H2]
    J[447] += dqdci; // dwdot[NNH]/d[N2H2]
    J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[13];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 7 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor - k_r * sc[1];
    dqdc[14] = q_nocor + k_f;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 13] += dqdc[k];
      J[31 * k + 14] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 128: H2NO + M <=> HNOH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 1.1e+23 * exp(-4 * logT - (22141.5332954077) * invT);
  dlnkfdT = -4 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[23];
  Kc = exp(g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // H2NO
  wdot[23] += q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[177] -= dqdci; // dwdot[H2NO]/d[H2O]
    J[178] += dqdci; // dwdot[HNOH]/d[H2O]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
    J[705] += dqdci; // dwdot[HNOH]/d[H2NO]
    // d()/d[HNOH]
    dqdci = -k_r;
    J[735] -= dqdci; // dwdot[H2NO]/d[HNOH]
    J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor + k_f;
    dqdc[23] = q_nocor - k_r;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 22] -= dqdc[k];
      J[31 * k + 23] += dqdc[k];
    }
  }
  J[952] -= dqdT; // dwdot[H2NO]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT

  // reaction 129: HNOH + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[23];
  k_f = 2e+18 * exp(-2.8 * logT - (29654.5581158721) * invT);
  dlnkfdT = -2.8 * invT + (29654.5581158721) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = refC * exp(-g_RT[1] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23]) + (h_RT[1] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[21];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[52] += dqdci; // dwdot[HNO]/d[H]
    J[54] -= dqdci; // dwdot[HNOH]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[156] += dqdci; // dwdot[H]/d[H2O]
    J[176] += dqdci; // dwdot[HNO]/d[H2O]
    J[178] -= dqdci; // dwdot[HNOH]/d[H2O]
    // d()/d[HNO]
    dqdci = -k_r * sc[1];
    J[652] += dqdci; // dwdot[H]/d[HNO]
    J[672] += dqdci; // dwdot[HNO]/d[HNO]
    J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
    // d()/d[HNOH]
    dqdci = +k_f;
    J[714] += dqdci; // dwdot[H]/d[HNOH]
    J[734] += dqdci; // dwdot[HNO]/d[HNOH]
    J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[21];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor - k_r * sc[1];
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor + k_f;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 21] += dqdc[k];
      J[31 * k + 23] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 155: NH3 + M <=> H + NH2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[12];
  k_f = 22000000000 * exp(-(47035.6617527671) * invT);
  dlnkfdT = (47035.6617527671) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = refC * exp(-g_RT[1] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12]) + (h_RT[1] + h_RT[11]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[11];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[42] += dqdci; // dwdot[NH2]/d[H]
    J[43] -= dqdci; // dwdot[NH3]/d[H]
    // d()/d[NH2]
    dqdci = -k_r * sc[1];
    J[342] += dqdci; // dwdot[H]/d[NH2]
    J[352] += dqdci; // dwdot[NH2]/d[NH2]
    J[353] -= dqdci; // dwdot[NH3]/d[NH2]
    // d()/d[NH3]
    dqdci = +k_f;
    J[373] += dqdci; // dwdot[H]/d[NH3]
    J[383] += dqdci; // dwdot[NH2]/d[NH3]
    J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[11];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor - k_r * sc[1];
    dqdc[12] = q_nocor + k_f;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 11] += dqdc[k];
      J[31 * k + 12] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 183: HON + M <=> H + NO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (7 - 1) * sc[5];
  // forward
  phi_f = sc[27];
  k_f = 51000000000000 * exp(-1.73 * logT - (8071.5953195077) * invT);
  dlnkfdT = -1.73 * invT + (8071.5953195077) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = refC * exp(-g_RT[1] - g_RT[18] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27]) + (h_RT[1] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[18] += q; // NO
  wdot[27] -= q; // HON
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[18];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[49] += dqdci; // dwdot[NO]/d[H]
    J[58] -= dqdci; // dwdot[HON]/d[H]
    // d()/d[H2O]
    dqdci = (7 - 1) * q_nocor;
    J[156] += dqdci; // dwdot[H]/d[H2O]
    J[173] += dqdci; // dwdot[NO]/d[H2O]
    J[182] -= dqdci; // dwdot[HON]/d[H2O]
    // d()/d[NO]
    dqdci = -k_r * sc[1];
    J[559] += dqdci; // dwdot[H]/d[NO]
    J[576] += dqdci; // dwdot[NO]/d[NO]
    J[585] -= dqdci; // dwdot[HON]/d[NO]
    // d()/d[HON]
    dqdci = +k_f;
    J[838] += dqdci; // dwdot[H]/d[HON]
    J[855] += dqdci; // dwdot[NO]/d[HON]
    J[864] -= dqdci; // dwdot[HON]/d[HON]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[18];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 7 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor - k_r * sc[1];
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor + k_f;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 18] += dqdc[k];
      J[31 * k + 27] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 207: H2NO + M <=> H + HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (10 - 1) * sc[5];
  // forward
  phi_f = sc[22];
  k_f = 2.8e+18 * exp(-2.8 * logT - (32663.7937773844) * invT);
  dlnkfdT = -2.8 * invT + (32663.7937773844) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = refC * exp(-g_RT[1] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22]) + (h_RT[1] + h_RT[21]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[21];
    J[32] += dqdci; // dwdot[H]/d[H]
    J[52] += dqdci; // dwdot[HNO]/d[H]
    J[53] -= dqdci; // dwdot[H2NO]/d[H]
    // d()/d[H2O]
    dqdci = (10 - 1) * q_nocor;
    J[156] += dqdci; // dwdot[H]/d[H2O]
    J[176] += dqdci; // dwdot[HNO]/d[H2O]
    J[177] -= dqdci; // dwdot[H2NO]/d[H2O]
    // d()/d[HNO]
    dqdci = -k_r * sc[1];
    J[652] += dqdci; // dwdot[H]/d[HNO]
    J[672] += dqdci; // dwdot[HNO]/d[HNO]
    J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
    // d()/d[H2NO]
    dqdci = +k_f;
    J[683] += dqdci; // dwdot[H]/d[H2NO]
    J[703] += dqdci; // dwdot[HNO]/d[H2NO]
    J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[21];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 10 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor - k_r * sc[1];
    dqdc[22] = q_nocor + k_f;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 1] += dqdc[k];
      J[31 * k + 21] += dqdc[k];
      J[31 * k + 22] -= dqdc[k];
    }
  }
  J[931] += dqdT; // dwdot[H]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 232: NO3 + NO2 <=> NO + O2 + NO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[28];
  k_f = 50000 * exp(-(1479.45699746588) * invT);
  dlnkfdT = (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[8] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[8] - g_RT[18] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[28]) + (h_RT[8] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // O2
  wdot[18] += q; // NO
  wdot[28] -= q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[18] * sc[20];
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8] * sc[20];
  J[566] += dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[586] -= dqdci; // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[28] - k_r * sc[8] * sc[18];
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[20];
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[886] += dqdci; // dwdot[NO]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 236: HO2 + NO + M <=> HNO3 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 1500000000000 * exp(-3.5 * logT - (1107.07666477038) * invT);
  dlnkfdT = -3.5 * invT + (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[6] + g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[18] -= q; // NO
  wdot[29] += q; // HNO3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[HO2]
    dqdci = +k_f * sc[18];
    J[192] -= dqdci; // dwdot[HO2]/d[HO2]
    J[204] -= dqdci; // dwdot[NO]/d[HO2]
    J[215] += dqdci; // dwdot[HNO3]/d[HO2]
    // d()/d[NO]
    dqdci = +k_f * sc[6];
    J[564] -= dqdci; // dwdot[HO2]/d[NO]
    J[576] -= dqdci; // dwdot[NO]/d[NO]
    J[587] += dqdci; // dwdot[HNO3]/d[NO]
    // d()/d[HNO3]
    dqdci = -k_r;
    J[905] -= dqdci; // dwdot[HO2]/d[HNO3]
    J[917] -= dqdci; // dwdot[NO]/d[HNO3]
    J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor + k_f * sc[18];
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor + k_f * sc[6];
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor - k_r;
    for (int k = 0; k < 30; k++) {
      J[31 * k + 6] -= dqdc[k];
      J[31 * k + 18] -= dqdc[k];
      J[31 * k + 29] += dqdc[k];
    }
  }
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 100000000 * exp(-(7692.16995349094) * invT);
  dlnkfdT = (7692.16995349094) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // O
  wdot[4] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] += dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[39] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[94] -= dqdci;  // dwdot[H]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[127] += dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 3800000 * exp(-(3999.56605981591) * invT);
  dlnkfdT = (3999.56605981591) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[65] -= dqdci; // dwdot[O]/d[H2]
  J[66] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[94] += dqdci; // dwdot[H]/d[O]
  J[95] -= dqdci; // dwdot[H2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[3];
  k_f = 880000000 * exp(-(9649.1795668055) * invT);
  dlnkfdT = (9649.1795668055) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[3]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[65] -= dqdci; // dwdot[O]/d[H2]
  J[66] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[94] += dqdci; // dwdot[H]/d[O]
  J[95] -= dqdci; // dwdot[H2]/d[O]
  J[96] -= dqdci; // dwdot[O]/d[O]
  J[97] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT

  // reaction 3: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 220 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // H2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[66] -= dqdci; // dwdot[OH]/d[H2]
  J[67] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[OH]
  dqdci = +k_f * sc[2];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[126] -= dqdci; // dwdot[H2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[156] += dqdci; // dwdot[H]/d[H2O]
  J[157] -= dqdci; // dwdot[H2]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT

  // reaction 4: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 20 * exp(1.651 * logT - (317.529716122778) * invT);
  dlnkfdT = 1.651 * invT + (317.529716122778) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[98] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[158] += dqdci;      // dwdot[O]/d[H2O]
  J[159] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[935] += dqdT;      // dwdot[H2O]/dT

  // reaction 5: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 260000 * exp(-0.057 * logT - (-416.160182620503) * invT);
  dlnkfdT = -0.057 * invT + (-416.160182620503) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[96] += dqdci;      // dwdot[O]/d[O]
  J[97] += -2 * dqdci; // dwdot[OH]/d[O]
  J[98] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[127] += dqdci;      // dwdot[O]/d[OH]
  J[128] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[158] += dqdci;      // dwdot[O]/d[H2O]
  J[159] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[933] += dqdT;      // dwdot[O]/dT
  J[934] += -2 * dqdT; // dwdot[OH]/dT
  J[935] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 2.8 * exp(2.09 * logT - (-730.167382082648) * invT);
  dlnkfdT = 2.09 * invT + (-730.167382082648) * invT2;
  // reverse
  phi_r = sc[2] * sc[8];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // H2
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[37] -= dqdci; // dwdot[HO2]/d[H]
  J[39] += dqdci; // dwdot[O2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[68] -= dqdci; // dwdot[HO2]/d[H2]
  J[70] += dqdci; // dwdot[O2]/d[H2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[188] += dqdci; // dwdot[H2]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[2];
  J[249] -= dqdci; // dwdot[H]/d[O2]
  J[250] += dqdci; // dwdot[H2]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 13: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 71000000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci;     // dwdot[H]/d[H]
  J[35] += 2 * dqdci; // dwdot[OH]/d[H]
  J[37] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[125] -= dqdci;     // dwdot[H]/d[OH]
  J[128] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci;     // dwdot[H]/d[HO2]
  J[190] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] -= dqdT;     // dwdot[H]/dT
  J[934] += 2 * dqdT; // dwdot[OH]/dT
  J[936] -= dqdT;     // dwdot[HO2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 1400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[34] += dqdci; // dwdot[O]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[37] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[94] -= dqdci; // dwdot[H]/d[O]
  J[96] += dqdci; // dwdot[O]/d[O]
  J[98] += dqdci; // dwdot[H2O]/d[O]
  J[99] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[158] += dqdci; // dwdot[O]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[189] += dqdci; // dwdot[O]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT

  // reaction 15: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[6];
  k_f = 29000 * exp(1 * logT - (-364.328866042617) * invT);
  dlnkfdT = 1 * invT + (-364.328866042617) * invT2;
  // reverse
  phi_r = sc[4] * sc[8];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[4] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[99] -= dqdci;  // dwdot[HO2]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[189] -= dqdci; // dwdot[O]/d[HO2]
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 16: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 190000000000000 * exp(-2.49 * logT - (293.878532829956) * invT);
  dlnkfdT = -2.49 * invT + (293.878532829956) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  J[163] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 1200 * exp(1.24 * logT - (-659.213832204183) * invT);
  dlnkfdT = 1.24 * invT + (-659.213832204183) * invT2;
  // reverse
  phi_r = sc[5] * sc[8];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[5] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] -= dqdci; // dwdot[HO2]/d[H2O]
  J[163] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[252] -= dqdci; // dwdot[OH]/d[O2]
  J[253] += dqdci; // dwdot[H2O]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT

  // reaction 19: 2 H + O2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[8];
  k_f = 40000000000 * exp(-1.835 * logT - (402.573332643776) * invT);
  dlnkfdT = -1.835 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = refCinv * exp(2.000000 * g_RT[1] - 2.000000 * g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[8]) + (2.000000 * h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[4] += 2 * q; // OH
  wdot[8] -= q;     // O2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[8];
  J[32] += -2 * dqdci; // dwdot[H]/d[H]
  J[35] += 2 * dqdci;  // dwdot[OH]/d[H]
  J[39] -= dqdci;      // dwdot[O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[125] += -2 * dqdci; // dwdot[H]/d[OH]
  J[128] += 2 * dqdci;  // dwdot[OH]/d[OH]
  J[132] -= dqdci;      // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[1];
  J[249] += -2 * dqdci; // dwdot[H]/d[O2]
  J[252] += 2 * dqdci;  // dwdot[OH]/d[O2]
  J[256] -= dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[931] += -2 * dqdT; // dwdot[H]/dT
  J[934] += 2 * dqdT;  // dwdot[OH]/dT
  J[938] -= dqdT;      // dwdot[O2]/dT

  // reaction 22: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1200 * exp(0.7712 * logT - (-918.370415093613) * invT);
  dlnkfdT = 0.7712 * invT + (-918.370415093613) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[192] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[194] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[223] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[225] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[254] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[255] += dqdci;      // dwdot[H2O2]/d[O2]
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[936] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 23: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 1300000 * exp(0.295 * logT - (3722.29367695751) * invT);
  dlnkfdT = 0.295 * invT + (3722.29367695751) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[6] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[192] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[194] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[223] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[225] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[254] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[255] += dqdci;      // dwdot[H2O2]/d[O2]
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[936] += -2 * dqdT; // dwdot[HO2]/dT
  J[937] += dqdT;      // dwdot[H2O2]/dT
  J[938] += dqdT;      // dwdot[O2]/dT

  // reaction 25: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 24000000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[38] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[159] += dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[218] -= dqdci; // dwdot[H]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 26: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 48000000 * exp(-(4000.57249314752) * invT);
  dlnkfdT = (4000.57249314752) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // H2
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[37] += dqdci; // dwdot[HO2]/d[H]
  J[38] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[68] += dqdci; // dwdot[HO2]/d[H2]
  J[69] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[HO2]
  dqdci = -k_r * sc[2];
  J[187] -= dqdci; // dwdot[H]/d[HO2]
  J[188] += dqdci; // dwdot[H2]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[218] -= dqdci; // dwdot[H]/d[H2O2]
  J[219] += dqdci; // dwdot[H2]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 9.6 * exp(2 * logT - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[99] += dqdci;  // dwdot[HO2]/d[O]
  J[100] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[189] -= dqdci; // dwdot[O]/d[HO2]
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[220] -= dqdci; // dwdot[O]/d[H2O2]
  J[221] += dqdci; // dwdot[OH]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 28: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] += dqdci; // dwdot[HO2]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 29: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 76000000 * exp(-(3658.38516040031) * invT);
  dlnkfdT = (3658.38516040031) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[131] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[161] += dqdci; // dwdot[HO2]/d[H2O]
  J[162] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[191] += dqdci; // dwdot[H2O]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[193] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[221] -= dqdci; // dwdot[OH]/d[H2O2]
  J[222] += dqdci; // dwdot[H2O]/d[H2O2]
  J[223] += dqdci; // dwdot[HO2]/d[H2O2]
  J[224] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[937] -= dqdT; // dwdot[H2O2]/dT

  // reaction 32: N + NO2 <=> N2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 1800000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[9] -= q;  // N
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[112] += dqdci; // dwdot[N2O]/d[O]
  J[113] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[20];
  J[282] += dqdci; // dwdot[O]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[298] += dqdci; // dwdot[N2O]/d[N]
  J[299] -= dqdci; // dwdot[NO2]/d[N]
  // d()/d[N2O]
  dqdci = -k_r * sc[3];
  J[592] += dqdci; // dwdot[O]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[9];
  J[623] += dqdci; // dwdot[O]/d[NO2]
  J[629] -= dqdci; // dwdot[N]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 33: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 5841 * exp(1.01 * logT - (3120.94976132087) * invT);
  dlnkfdT = 1.01 * invT + (3120.94976132087) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = -k_r * sc[18];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[257] -= dqdci; // dwdot[N]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[N]
  dqdci = +k_f * sc[8];
  J[282] += dqdci; // dwdot[O]/d[N]
  J[287] -= dqdci; // dwdot[O2]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[561] += dqdci; // dwdot[O]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 34: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 108400000 * exp(-0.2 * logT);
  dlnkfdT = -0.2 * invT;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[133] -= dqdci; // dwdot[N]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[280] += dqdci; // dwdot[H]/d[N]
  J[283] -= dqdci; // dwdot[OH]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[562] -= dqdci; // dwdot[OH]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 35: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] - g_RT[3] + g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] += q;  // O
  wdot[9] -= q;  // N
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] += dqdci;  // dwdot[O]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[O]
  dqdci = -k_r * sc[0];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[102] -= dqdci; // dwdot[N]/d[O]
  J[111] -= dqdci; // dwdot[NO]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[18];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[282] += dqdci; // dwdot[O]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[561] += dqdci; // dwdot[O]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 36: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 165000 * exp(0.71 * logT - (468.494715864194) * invT);
  dlnkfdT = 0.71 * invT + (468.494715864194) * invT2;
  // reverse
  phi_r = sc[2] * sc[9];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[2] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[40] += dqdci; // dwdot[N]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[71] += dqdci; // dwdot[N]/d[H2]
  J[72] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[N]
  dqdci = -k_r * sc[2];
  J[280] -= dqdci; // dwdot[H]/d[N]
  J[281] += dqdci; // dwdot[H2]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[312] += dqdci; // dwdot[H2]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 37: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 48200000 * exp(0.023 * logT - (47.8055832514484) * invT);
  dlnkfdT = 0.023 * invT + (47.8055832514484) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[10] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 38: NH + O <=> N + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 20700 * exp(0.622 * logT - (-180.15156635809) * invT);
  dlnkfdT = 0.622 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[9];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[102] += dqdci; // dwdot[N]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[133] += dqdci; // dwdot[N]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[N]
  dqdci = -k_r * sc[4];
  J[282] -= dqdci; // dwdot[O]/d[N]
  J[283] += dqdci; // dwdot[OH]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 39: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 325000000 * exp(-0.376 * logT - (-23.1479666270171) * invT);
  dlnkfdT = -0.376 * invT + (-23.1479666270171) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 40: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 15.9 * exp(1.733 * logT - (-289.852799503519) * invT);
  dlnkfdT = 1.733 * invT + (-289.852799503519) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[133] += dqdci; // dwdot[N]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[164] += dqdci; // dwdot[N]/d[H2O]
  J[165] -= dqdci; // dwdot[NH]/d[H2O]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[283] -= dqdci; // dwdot[OH]/d[N]
  J[284] += dqdci; // dwdot[H2O]/d[N]
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[315] += dqdci; // dwdot[H2O]/d[NH]
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 41: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 3320 * exp(1.034 * logT - (5746.7343234899) * invT);
  dlnkfdT = 1.034 * invT + (5746.7343234899) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[10] -= q; // NH
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[103] -= dqdci; // dwdot[NH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[NH]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[313] += dqdci; // dwdot[O]/d[NH]
  J[318] -= dqdci; // dwdot[O2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[3];
  J[654] += dqdci; // dwdot[O]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 42: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 450 * exp(0.79 * logT - (601.34391563664) * invT);
  dlnkfdT = 0.79 * invT + (601.34391563664) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[10] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[NH]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[8];
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[318] -= dqdci; // dwdot[O2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 43: 2 NH => H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 6260000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[2] += q;      // H2
  wdot[10] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[N2]/d[NH]
  J[312] += dqdci;      // dwdot[H2]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 44: 2 NH => 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 56340000 * exp(-0.036 * logT - (-80.9675615279794) * invT);
  dlnkfdT = -0.036 * invT + (-80.9675615279794) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;      // N2
  wdot[1] += 2 * q;  // H
  wdot[10] -= 2 * q; // NH
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[310] += dqdci;      // dwdot[N2]/d[NH]
  J[311] += 2 * dqdci;  // dwdot[H]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[931] += 2 * dqdT;  // dwdot[H]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT

  // reaction 45: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = exp(-g_RT[0] - g_RT[1] + g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[0] + h_RT[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H
  wdot[9] -= q;  // N
  wdot[10] -= q; // NH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] += dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[10];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[280] += dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[9];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[319] -= dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT

  // reaction 46: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 2700000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // NH
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[49] -= dqdci; // dwdot[NO]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] -= dqdci; // dwdot[NO]/d[NH]
  J[329] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 47: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 680000000 * exp(-0.78 * logT - (10.0643333160944) * invT);
  dlnkfdT = -0.78 * invT + (10.0643333160944) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] - g_RT[4] + g_RT[10] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[18];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] -= dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 48: NH + NO2 <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 4100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[10] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // NH
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] -= dqdci; // dwdot[NH]/d[OH]
  J[143] += dqdci; // dwdot[N2O]/d[OH]
  J[144] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[329] += dqdci; // dwdot[N2O]/d[NH]
  J[330] -= dqdci; // dwdot[NO2]/d[NH]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 49: NH + NO2 <=> HNO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 5900000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[18] * sc[21];
  Kc = exp(g_RT[10] - g_RT[18] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[18] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  // d()/d[NH]
  dqdci = +k_f * sc[20];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[330] -= dqdci; // dwdot[NO2]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[21];
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[10];
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[18];
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 50: HONO + NH <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[NH]
  dqdci = +k_f * sc[25];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[330] += dqdci; // dwdot[NO2]/d[NH]
  J[335] -= dqdci; // dwdot[HONO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  J[366] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[630] -= dqdci; // dwdot[NH]/d[NO2]
  J[631] += dqdci; // dwdot[NH2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[10];
  J[785] -= dqdci; // dwdot[NH]/d[HONO]
  J[786] += dqdci; // dwdot[NH2]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 51: N2O + NH <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 2000000 * exp(-(3019.29999482832) * invT);
  dlnkfdT = (3019.29999482832) * invT2;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[10] + g_RT[19] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NH
  wdot[19] -= q; // N2O
  wdot[21] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  J[21] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NH]
  dqdci = +k_f * sc[19];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[329] -= dqdci; // dwdot[N2O]/d[NH]
  J[331] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[N2O]
  dqdci = +k_f * sc[10];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[599] -= dqdci; // dwdot[NH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  J[610] += dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[N2]/d[HNO]
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[670] -= dqdci; // dwdot[N2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 53: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 0.109 * exp(2.59 * logT - (911.992848357871) * invT);
  dlnkfdT = 2.59 * invT + (911.992848357871) * invT2;
  // reverse
  phi_r = sc[2] * sc[10];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[2] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[72] += dqdci; // dwdot[NH]/d[H2]
  J[73] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[NH]
  dqdci = -k_r * sc[2];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[312] += dqdci; // dwdot[H2]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 54: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 7230000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[103] += dqdci; // dwdot[NH]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 55: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 1500000000 * exp(-0.547 * logT - (421.041384278809) * invT);
  dlnkfdT = -0.547 * invT + (421.041384278809) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 56: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 77300000 * exp(-0.277 * logT - (325.279252776171) * invT);
  dlnkfdT = -0.277 * invT + (325.279252776171) * invT2;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[3];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 57: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 0.0404 * exp(2.52 * logT - (-309.997569069013) * invT);
  dlnkfdT = 2.52 * invT + (-309.997569069013) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // NH
  wdot[11] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[165] += dqdci; // dwdot[NH]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[314] -= dqdci; // dwdot[OH]/d[NH]
  J[315] += dqdci; // dwdot[H2O]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[345] -= dqdci; // dwdot[OH]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[351] += dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT

  // reaction 58: HO2 + NH2 <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[11] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[11] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[197] -= dqdci; // dwdot[NH2]/d[HO2]
  J[208] += dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 59: HO2 + NH2 <=> NH3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[11];
  k_f = 2.18 * exp(2.08 * logT - (-2395.31132923047) * invT);
  dlnkfdT = 2.08 * invT + (-2395.31132923047) * invT2;
  // reverse
  phi_r = sc[8] * sc[12];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[8] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[197] -= dqdci; // dwdot[NH2]/d[HO2]
  J[198] += dqdci; // dwdot[NH3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[260] += dqdci; // dwdot[NH3]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[6];
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[349] += dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[8];
  J[378] -= dqdci; // dwdot[HO2]/d[NH3]
  J[380] += dqdci; // dwdot[O2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT

  // reaction 60: NH2 + O2 <=> H2NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 260000 * exp(0.4872 * logT - (14643.6049749173) * invT);
  dlnkfdT = 0.4872 * invT + (14643.6049749173) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[11] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O
  wdot[8] -= q;  // O2
  wdot[11] -= q; // NH2
  wdot[22] += q; // H2NO
  // d()/d[O]
  dqdci = -k_r * sc[22];
  J[96] += dqdci;  // dwdot[O]/d[O]
  J[101] -= dqdci; // dwdot[O2]/d[O]
  J[104] -= dqdci; // dwdot[NH2]/d[O]
  J[115] += dqdci; // dwdot[H2NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[251] += dqdci; // dwdot[O]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[270] += dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[344] += dqdci; // dwdot[O]/d[NH2]
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[3];
  J[685] += dqdci; // dwdot[O]/d[H2NO]
  J[690] -= dqdci; // dwdot[O2]/d[H2NO]
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] += dqdT; // dwdot[O]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 61: NH2 + O2 <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 2.9e-08 * exp(3.764 * logT - (9150.99506765883) * invT);
  dlnkfdT = 3.764 * invT + (9150.99506765883) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[11] -= q; // NH2
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] -= dqdci; // dwdot[NH2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH2]
  dqdci = +k_f * sc[8];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 62: N + NH2 <=> 2 H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 69000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[1] * sc[1]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[1] + g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[9] + h_RT[11]) + (h_RT[0] + 2.000000 * h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // N2
  wdot[1] += 2 * q; // H
  wdot[9] -= q;     // N
  wdot[11] -= q;    // NH2
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[1];
  J[0] += dqdci;     // dwdot[N2]/d[N2]
  J[1] += 2 * dqdci; // dwdot[H]/d[N2]
  J[9] -= dqdci;     // dwdot[N]/d[N2]
  J[11] -= dqdci;    // dwdot[NH2]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0] * 2.000000 * sc[1];
  J[31] += dqdci;     // dwdot[N2]/d[H]
  J[32] += 2 * dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci;     // dwdot[N]/d[H]
  J[42] -= dqdci;     // dwdot[NH2]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[11];
  J[279] += dqdci;     // dwdot[N2]/d[N]
  J[280] += 2 * dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci;     // dwdot[N]/d[N]
  J[290] -= dqdci;     // dwdot[NH2]/d[N]
  // d()/d[NH2]
  dqdci = +k_f * sc[9];
  J[341] += dqdci;     // dwdot[N2]/d[NH2]
  J[342] += 2 * dqdci; // dwdot[H]/d[NH2]
  J[350] -= dqdci;     // dwdot[N]/d[NH2]
  J[352] -= dqdci;     // dwdot[NH2]/d[NH2]
  // d()/dT
  J[930] += dqdT;     // dwdot[N2]/dT
  J[931] += 2 * dqdT; // dwdot[H]/dT
  J[939] -= dqdT;     // dwdot[N]/dT
  J[941] -= dqdT;     // dwdot[NH2]/dT

  // reaction 63: NH2 + NO <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 31000000 * exp(-0.48 * logT - (593.795665649569) * invT);
  dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(-g_RT[4] + g_RT[11] - g_RT[13] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH2
  wdot[13] += q; // NNH
  wdot[18] -= q; // NO
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[421] -= dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[571] += dqdci; // dwdot[NNH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 64: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 13000000000 * exp(-1.25 * logT);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[173] -= dqdci; // dwdot[NO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 65: NH2 + NO <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = -31000000 * exp(-0.48 * logT - (593.795665649569) * invT);
  dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] - g_RT[5] + g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[18] -= q; // NO
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[173] -= dqdci; // dwdot[NO]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[18];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT

  // reaction 66: NH2 + NO2 <=> H2NO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 860000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[11] - g_RT[18] + g_RT[20] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[22] += q; // H2NO
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[361] -= dqdci; // dwdot[NO2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NO]
  dqdci = -k_r * sc[22];
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[580] += dqdci; // dwdot[H2NO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[642] += dqdci; // dwdot[H2NO]/d[NO2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[18];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[700] += dqdci; // dwdot[NO]/d[H2NO]
  J[702] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT

  // reaction 67: NH2 + NO2 <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 220000 * exp(0.11 * logT - (-596.814965644398) * invT);
  dlnkfdT = 0.11 * invT + (-596.814965644398) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] + g_RT[11] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[19] += q; // N2O
  wdot[20] -= q; // NO2
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[174] += dqdci; // dwdot[N2O]/d[H2O]
  J[175] -= dqdci; // dwdot[NO2]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[20];
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[360] += dqdci; // dwdot[N2O]/d[NH2]
  J[361] -= dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[594] += dqdci; // dwdot[H2O]/d[N2O]
  J[600] -= dqdci; // dwdot[NH2]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[609] -= dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = +k_f * sc[11];
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[639] += dqdci; // dwdot[N2O]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 68: HNO + NH2 <=> NH3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[21];
  k_f = 0.00059 * exp(2.95 * logT - (-1745.65861367657) * invT);
  dlnkfdT = 2.95 * invT + (-1745.65861367657) * invT2;
  // reverse
  phi_r = sc[12] * sc[18];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[21]) + (h_RT[12] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[NH2]
  dqdci = +k_f * sc[21];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[362] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[18];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[390] += dqdci; // dwdot[NO]/d[NH3]
  J[393] -= dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[NO]
  dqdci = -k_r * sc[12];
  J[569] -= dqdci; // dwdot[NH2]/d[NO]
  J[570] += dqdci; // dwdot[NH3]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[11];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 69: HONO + NH2 <=> NH3 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[25];
  k_f = 4.84e-06 * exp(3.36 * logT - (-2304.73232938562) * invT);
  dlnkfdT = 3.36 * invT + (-2304.73232938562) * invT2;
  // reverse
  phi_r = sc[12] * sc[20];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[25]) + (h_RT[12] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[NH2]
  dqdci = +k_f * sc[25];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  J[366] -= dqdci; // dwdot[HONO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[20];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[392] += dqdci; // dwdot[NO2]/d[NH3]
  J[397] -= dqdci; // dwdot[HONO]/d[NH3]
  // d()/d[NO2]
  dqdci = -k_r * sc[12];
  J[631] -= dqdci; // dwdot[NH2]/d[NO2]
  J[632] += dqdci; // dwdot[NH3]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[11];
  J[786] -= dqdci; // dwdot[NH2]/d[HONO]
  J[787] += dqdci; // dwdot[NH3]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 70: 2 NH <=> N + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 5.7e-07 * exp(3.88 * logT - (172.100099705214) * invT);
  dlnkfdT = 3.88 * invT + (172.100099705214) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // N
  wdot[10] -= 2 * q; // NH
  wdot[11] += q;     // NH2
  // d()/d[N]
  dqdci = -k_r * sc[11];
  J[288] += dqdci;      // dwdot[N]/d[N]
  J[289] += -2 * dqdci; // dwdot[NH]/d[N]
  J[290] += dqdci;      // dwdot[NH2]/d[N]
  // d()/d[NH]
  dqdci = +k_f * 2.000000 * sc[10];
  J[319] += dqdci;      // dwdot[N]/d[NH]
  J[320] += -2 * dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci;      // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[9];
  J[350] += dqdci;      // dwdot[N]/d[NH2]
  J[351] += -2 * dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci;      // dwdot[NH2]/d[NH2]
  // d()/dT
  J[939] += dqdT;      // dwdot[N]/dT
  J[940] += -2 * dqdT; // dwdot[NH]/dT
  J[941] += dqdT;      // dwdot[NH2]/dT

  // reaction 71: 2 NH2 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 5.636e-06 * exp(3.53 * logT - (278.077529523688) * invT);
  dlnkfdT = 3.53 * invT + (278.077529523688) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // NH
  wdot[11] -= 2 * q; // NH2
  wdot[12] += q;     // NH3
  // d()/d[NH]
  dqdci = -k_r * sc[12];
  J[320] += dqdci;      // dwdot[NH]/d[NH]
  J[321] += -2 * dqdci; // dwdot[NH2]/d[NH]
  J[322] += dqdci;      // dwdot[NH3]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[351] += dqdci;      // dwdot[NH]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci;      // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[382] += dqdci;      // dwdot[NH]/d[NH3]
  J[383] += -2 * dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci;      // dwdot[NH3]/d[NH3]
  // d()/dT
  J[940] += dqdT;      // dwdot[NH]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[942] += dqdT;      // dwdot[NH3]/dT

  // reaction 72: NH + NH2 <=> N + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 0.009574 * exp(2.46 * logT - (53.9951482408464) * invT);
  dlnkfdT = 2.46 * invT + (53.9951482408464) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // N
  wdot[10] -= q; // NH
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  // d()/d[N]
  dqdci = -k_r * sc[12];
  J[288] += dqdci; // dwdot[N]/d[N]
  J[289] -= dqdci; // dwdot[NH]/d[N]
  J[290] -= dqdci; // dwdot[NH2]/d[N]
  J[291] += dqdci; // dwdot[NH3]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[11];
  J[319] += dqdci; // dwdot[N]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  J[322] += dqdci; // dwdot[NH3]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[350] += dqdci; // dwdot[N]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[9];
  J[381] += dqdci; // dwdot[N]/d[NH3]
  J[382] -= dqdci; // dwdot[NH]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[939] += dqdT; // dwdot[N]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT

  // reaction 74: H + N2H2 <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[14];
  k_f = 482 * exp(1.76 * logT - (371.997082882816) * invT);
  dlnkfdT = 1.76 * invT + (371.997082882816) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[14]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[45] -= dqdci; // dwdot[N2H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] += dqdci; // dwdot[NNH]/d[H2]
  J[76] -= dqdci; // dwdot[N2H2]/d[H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[1];
  J[435] -= dqdci; // dwdot[H]/d[N2H2]
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 75: N2H2 + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[14] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[14] -= q; // N2H2
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[107] -= dqdci; // dwdot[N2H2]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[452] += dqdci; // dwdot[NO]/d[N2H2]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[572] -= dqdci; // dwdot[N2H2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 76: N2H2 + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 111 * exp(1.62 * logT - (404.996824106291) * invT);
  dlnkfdT = 1.62 * invT + (404.996824106291) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[107] -= dqdci; // dwdot[N2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[3];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[438] += dqdci; // dwdot[OH]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 77: N2H2 + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 0.00674 * exp(2.8 * logT - (-255.130849562993) * invT);
  dlnkfdT = 2.8 * invT + (-255.130849562993) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[138] -= dqdci; // dwdot[N2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] += dqdci; // dwdot[NNH]/d[H2O]
  J[169] -= dqdci; // dwdot[N2H2]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[4];
  J[438] -= dqdci; // dwdot[OH]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 78: N2H2 + NO <=> N2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[18];
  k_f = 4000000 * exp(-(5998.34265639226) * invT);
  dlnkfdT = (5998.34265639226) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[14] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[18]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // NH2
  wdot[14] -= q; // N2H2
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  // d()/d[NH2]
  dqdci = -k_r * sc[19];
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  J[359] -= dqdci; // dwdot[NO]/d[NH2]
  J[360] += dqdci; // dwdot[N2O]/d[NH2]
  // d()/d[N2H2]
  dqdci = +k_f * sc[18];
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[452] -= dqdci; // dwdot[NO]/d[N2H2]
  J[453] += dqdci; // dwdot[N2O]/d[N2H2]
  // d()/d[NO]
  dqdci = +k_f * sc[14];
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[572] -= dqdci; // dwdot[N2H2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[11];
  J[600] += dqdci; // dwdot[NH2]/d[N2O]
  J[603] -= dqdci; // dwdot[N2H2]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 79: N2H2 + NO2 <=> HONO + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[20];
  k_f = 1.25e-06 * exp(3.8 * logT - (5233.45332436908) * invT);
  dlnkfdT = 3.8 * invT + (5233.45332436908) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[20]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[NNH]
  dqdci = -k_r * sc[25];
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[423] -= dqdci; // dwdot[NO2]/d[NNH]
  J[428] += dqdci; // dwdot[HONO]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[20];
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[454] -= dqdci; // dwdot[NO2]/d[N2H2]
  J[459] += dqdci; // dwdot[HONO]/d[N2H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[14];
  J[633] += dqdci; // dwdot[NNH]/d[NO2]
  J[634] -= dqdci; // dwdot[N2H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[13];
  J[788] += dqdci; // dwdot[NNH]/d[HONO]
  J[789] -= dqdci; // dwdot[N2H2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 80: N2H2 + NH <=> NH2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[NH]
  dqdci = +k_f * sc[14];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[323] += dqdci; // dwdot[NNH]/d[NH]
  J[324] -= dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[13];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NNH]
  dqdci = -k_r * sc[11];
  J[413] -= dqdci; // dwdot[NH]/d[NNH]
  J[414] += dqdci; // dwdot[NH2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[10];
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 81: N2H2 + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 0.271 * exp(2.226 * logT - (-518.313165778861) * invT);
  dlnkfdT = 2.226 * invT + (-518.313165778861) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[NH2]
  dqdci = +k_f * sc[14];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[355] -= dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] += dqdci; // dwdot[NNH]/d[NH3]
  J[386] -= dqdci; // dwdot[N2H2]/d[NH3]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[11];
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[446] += dqdci; // dwdot[NH3]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 82: NH + NH2 <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 130000000 * exp(-0.272 * logT - (-38.7476832669634) * invT);
  dlnkfdT = -0.272 * invT + (-38.7476832669634) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // NH
  wdot[11] -= q; // NH2
  wdot[14] += q; // N2H2
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[NH]/d[H]
  J[42] -= dqdci; // dwdot[NH2]/d[H]
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[11];
  J[311] += dqdci; // dwdot[H]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] -= dqdci; // dwdot[NH2]/d[NH]
  J[324] += dqdci; // dwdot[N2H2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[10];
  J[342] += dqdci; // dwdot[H]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[435] += dqdci; // dwdot[H]/d[N2H2]
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT

  // reaction 83: 2 NH2 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 170 * exp(1.62 * logT - (5929.40197317701) * invT);
  dlnkfdT = 1.62 * invT + (5929.40197317701) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H2
  wdot[11] -= 2 * q; // NH2
  wdot[14] += q;     // N2H2
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  J[73] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[76] += dqdci;      // dwdot[N2H2]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[343] += dqdci;      // dwdot[H2]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci;      // dwdot[N2H2]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[436] += dqdci;      // dwdot[H2]/d[N2H2]
  J[445] += -2 * dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[944] += dqdT;      // dwdot[N2H2]/dT

  // reaction 84: HO2 + N2H2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 10000000 * exp(-(999.891514953978) * invT);
  dlnkfdT = (999.891514953978) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[199] += dqdci; // dwdot[NNH]/d[HO2]
  J[200] -= dqdci; // dwdot[N2H2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[231] -= dqdci; // dwdot[N2H2]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[409] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[6];
  J[440] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[441] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT

  // reaction 86: N2H4 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 5.19e+38 * exp(-7.84 * logT - (33765.8382754967) * invT);
  dlnkfdT = -7.84 * invT + (33765.8382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = refC * exp(-g_RT[2] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[2] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H2
  wdot[14] += q; // N2H2
  wdot[16] -= q; // N2H4
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[76] += dqdci; // dwdot[N2H2]/d[H2]
  J[78] -= dqdci; // dwdot[N2H4]/d[H2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[450] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[498] += dqdci; // dwdot[H2]/d[N2H4]
  J[510] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 87: N2H4 <=> H + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16];
  k_f = 2.74e+39 * exp(-7.69 * logT - (42119.234927855) * invT);
  dlnkfdT = -7.69 * invT + (42119.234927855) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = refC * exp(-g_RT[1] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[46] += dqdci; // dwdot[N2H3]/d[H]
  J[47] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[N2H3]
  dqdci = -k_r * sc[1];
  J[466] += dqdci; // dwdot[H]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f;
  J[497] += dqdci; // dwdot[H]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 88: H + N2H4 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 0.276 * exp(2.56 * logT - (613.924332281758) * invT);
  dlnkfdT = 2.56 * invT + (613.924332281758) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[46] += dqdci; // dwdot[N2H3]/d[H]
  J[47] -= dqdci; // dwdot[N2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[77] += dqdci; // dwdot[N2H3]/d[H2]
  J[78] -= dqdci; // dwdot[N2H4]/d[H2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[1];
  J[497] -= dqdci; // dwdot[H]/d[N2H4]
  J[498] += dqdci; // dwdot[H2]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 89: N2H4 + OH <=> H2O + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 13000000 * exp(-(-160.022899725901) * invT);
  dlnkfdT = (-160.022899725901) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[140] -= dqdci; // dwdot[N2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[170] += dqdci; // dwdot[N2H3]/d[H2O]
  J[171] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H3]
  dqdci = -k_r * sc[5];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[4];
  J[500] -= dqdci; // dwdot[OH]/d[N2H4]
  J[501] += dqdci; // dwdot[H2O]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 90: N2H4 + NH2 <=> N2H3 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 7.6e-07 * exp(4 * logT - (2037.02106317751) * invT);
  dlnkfdT = 4 * invT + (2037.02106317751) * invT2;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[NH2]
  dqdci = +k_f * sc[16];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[357] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[15];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] += dqdci; // dwdot[N2H3]/d[NH3]
  J[388] -= dqdci; // dwdot[N2H4]/d[NH3]
  // d()/d[N2H3]
  dqdci = -k_r * sc[12];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[11];
  J[507] -= dqdci; // dwdot[NH2]/d[N2H4]
  J[508] += dqdci; // dwdot[NH3]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 91: N2H2 + N2H4 <=> 2 N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[16];
  k_f = 25000 * exp(0.5 * logT - (14995.8566409806) * invT);
  dlnkfdT = 0.5 * invT + (14995.8566409806) * invT2;
  // reverse
  phi_r = (sc[15] * sc[15]);
  Kc = exp(g_RT[14] - 2.000000 * g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000 * h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q;     // N2H2
  wdot[15] += 2 * q; // N2H3
  wdot[16] -= q;     // N2H4
  // d()/d[N2H2]
  dqdci = +k_f * sc[16];
  J[448] -= dqdci;     // dwdot[N2H2]/d[N2H2]
  J[449] += 2 * dqdci; // dwdot[N2H3]/d[N2H2]
  J[450] -= dqdci;     // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H3]
  dqdci = -k_r * 2.000000 * sc[15];
  J[479] -= dqdci;     // dwdot[N2H2]/d[N2H3]
  J[480] += 2 * dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci;     // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[14];
  J[510] -= dqdci;     // dwdot[N2H2]/d[N2H4]
  J[511] += 2 * dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci;     // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[944] -= dqdT;     // dwdot[N2H2]/dT
  J[945] += 2 * dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT;     // dwdot[N2H4]/dT

  // reaction 92: N2H4 + NH <=> N2H3 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 1000000 * exp(-(1001.40116495139) * invT);
  dlnkfdT = (1001.40116495139) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[NH]
  dqdci = +k_f * sc[16];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[325] += dqdci; // dwdot[N2H3]/d[NH]
  J[326] -= dqdci; // dwdot[N2H4]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[357] -= dqdci; // dwdot[N2H4]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[11];
  J[475] -= dqdci; // dwdot[NH]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[10];
  J[506] -= dqdci; // dwdot[NH]/d[N2H4]
  J[507] += dqdci; // dwdot[NH2]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 93: N2H4 + O <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 440000 * exp(-(-639.085165571994) * invT);
  dlnkfdT = (-639.085165571994) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[5] += q;  // H2O
  wdot[14] += q; // N2H2
  wdot[16] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[98] += dqdci;  // dwdot[H2O]/d[O]
  J[107] += dqdci; // dwdot[N2H2]/d[O]
  J[109] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[158] -= dqdci; // dwdot[O]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[169] += dqdci; // dwdot[N2H2]/d[H2O]
  J[171] -= dqdci; // dwdot[N2H4]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[450] -= dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H4]
  J[501] += dqdci; // dwdot[H2O]/d[N2H4]
  J[510] += dqdci; // dwdot[N2H2]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 94: N2H4 + O <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 670 * exp(1.5 * logT - (1434.67071420926) * invT);
  dlnkfdT = 1.5 * invT + (1434.67071420926) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[108] += dqdci; // dwdot[N2H3]/d[O]
  J[109] -= dqdci; // dwdot[N2H4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[140] -= dqdci; // dwdot[N2H4]/d[OH]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[3];
  J[499] -= dqdci; // dwdot[O]/d[N2H4]
  J[500] += dqdci; // dwdot[OH]/d[N2H4]
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT

  // reaction 95: N2H4 + NO <=> HNO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 6e-05 * exp(3.16 * logT - (15521.7180567466) * invT);
  dlnkfdT = 3.16 * invT + (15521.7180567466) * invT2;
  // reverse
  phi_r = sc[15] * sc[21];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[15] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[18] -= q; // NO
  wdot[21] += q; // HNO
  // d()/d[N2H3]
  dqdci = -k_r * sc[21];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[483] -= dqdci; // dwdot[NO]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[18];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[514] -= dqdci; // dwdot[NO]/d[N2H4]
  J[517] += dqdci; // dwdot[HNO]/d[N2H4]
  // d()/d[NO]
  dqdci = +k_f * sc[16];
  J[573] += dqdci; // dwdot[N2H3]/d[NO]
  J[574] -= dqdci; // dwdot[N2H4]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[15];
  J[666] += dqdci; // dwdot[N2H3]/d[HNO]
  J[667] -= dqdci; // dwdot[N2H4]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 96: N2H4 + NO2 <=> HONO + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[20];
  k_f = 8.2e-05 * exp(3.13 * logT - (4458.49965902982) * invT);
  dlnkfdT = 3.13 * invT + (4458.49965902982) * invT2;
  // reverse
  phi_r = sc[15] * sc[25];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[20]) + (h_RT[15] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[N2H3]
  dqdci = -k_r * sc[25];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[485] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[490] += dqdci; // dwdot[HONO]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[20];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[516] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[521] += dqdci; // dwdot[HONO]/d[N2H4]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[635] += dqdci; // dwdot[N2H3]/d[NO2]
  J[636] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[15];
  J[790] += dqdci; // dwdot[N2H3]/d[HONO]
  J[791] -= dqdci; // dwdot[N2H4]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 97: N2H4 + NO2 <=> HNO2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[20];
  k_f = 2.4e-08 * exp(4.14 * logT - (3998.5596264843) * invT);
  dlnkfdT = 4.14 * invT + (3998.5596264843) * invT2;
  // reverse
  phi_r = sc[15] * sc[26];
  Kc = exp(-g_RT[15] + g_RT[16] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[20]) + (h_RT[15] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // N2H3
  wdot[16] -= q; // N2H4
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[N2H3]
  dqdci = -k_r * sc[26];
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] -= dqdci; // dwdot[N2H4]/d[N2H3]
  J[485] -= dqdci; // dwdot[NO2]/d[N2H3]
  J[491] += dqdci; // dwdot[HNO2]/d[N2H3]
  // d()/d[N2H4]
  dqdci = +k_f * sc[20];
  J[511] += dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] -= dqdci; // dwdot[N2H4]/d[N2H4]
  J[516] -= dqdci; // dwdot[NO2]/d[N2H4]
  J[522] += dqdci; // dwdot[HNO2]/d[N2H4]
  // d()/d[NO2]
  dqdci = +k_f * sc[16];
  J[635] += dqdci; // dwdot[N2H3]/d[NO2]
  J[636] -= dqdci; // dwdot[N2H4]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[15];
  J[821] += dqdci; // dwdot[N2H3]/d[HNO2]
  J[822] -= dqdci; // dwdot[N2H4]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[946] -= dqdT; // dwdot[N2H4]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 99: H + N2H3 <=> H2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 0.007476 * exp(2.796 * logT - (2355.05399596609) * invT);
  dlnkfdT = 2.796 * invT + (2355.05399596609) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[76] += dqdci; // dwdot[N2H2]/d[H2]
  J[77] -= dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[2];
  J[435] -= dqdci; // dwdot[H]/d[N2H2]
  J[436] += dqdci; // dwdot[H2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 100: H + N2H3 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 6.243 * exp(1.89 * logT - (124.294516453766) * invT);
  dlnkfdT = 1.89 * invT + (124.294516453766) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  J[48] += dqdci; // dwdot[H2NN]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[77] -= dqdci; // dwdot[N2H3]/d[H2]
  J[79] += dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[2];
  J[528] -= dqdci; // dwdot[H]/d[H2NN]
  J[529] += dqdci; // dwdot[H2]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 101: H + N2H3 <=> NH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[1] - g_RT[10] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] += q; // NH
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[43] += dqdci; // dwdot[NH3]/d[H]
  J[46] -= dqdci; // dwdot[N2H3]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[12];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[322] += dqdci; // dwdot[NH3]/d[NH]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH]
  // d()/d[NH3]
  dqdci = -k_r * sc[10];
  J[373] -= dqdci; // dwdot[H]/d[NH3]
  J[382] += dqdci; // dwdot[NH]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[1];
  J[466] -= dqdci; // dwdot[H]/d[N2H3]
  J[475] += dqdci; // dwdot[NH]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 102: N2H3 + O <=> N2H2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 170 * exp(1.5 * logT - (-325.077966109849) * invT);
  dlnkfdT = 1.5 * invT + (-325.077966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[107] += dqdci; // dwdot[N2H2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[138] += dqdci; // dwdot[N2H2]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[4];
  J[437] -= dqdci; // dwdot[O]/d[N2H2]
  J[438] += dqdci; // dwdot[OH]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 103: N2H3 + O <=> HNO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[21];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[11];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[662] += dqdci; // dwdot[NH2]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 104: N2H3 + O => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[15] -= q; // N2H3
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[108] -= dqdci; // dwdot[N2H3]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[3];
  J[466] += dqdci; // dwdot[H]/d[N2H3]
  J[468] -= dqdci; // dwdot[O]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[483] += dqdci; // dwdot[NO]/d[N2H3]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 105: N2H3 + OH <=> H2O + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1.2 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[N2H2]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[169] += dqdci; // dwdot[N2H2]/d[H2O]
  J[170] -= dqdci; // dwdot[N2H3]/d[H2O]
  // d()/d[N2H2]
  dqdci = -k_r * sc[5];
  J[438] -= dqdci; // dwdot[OH]/d[N2H2]
  J[439] += dqdci; // dwdot[H2O]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 106: N2H3 + OH <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[141] += dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[170] -= dqdci; // dwdot[N2H3]/d[H2O]
  J[172] += dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[470] += dqdci; // dwdot[H2O]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 107: N2H3 + OH <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 1000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[4] - g_RT[12] + g_RT[15] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[15]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  wdot[21] += q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[136] += dqdci; // dwdot[NH3]/d[OH]
  J[139] -= dqdci; // dwdot[N2H3]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[376] -= dqdci; // dwdot[OH]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[4];
  J[469] -= dqdci; // dwdot[OH]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[486] += dqdci; // dwdot[HNO]/d[N2H3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[666] -= dqdci; // dwdot[N2H3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 108: HO2 + N2H3 <=> H2O2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 0.014 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[14];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[7] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[200] += dqdci; // dwdot[N2H2]/d[HO2]
  J[201] -= dqdci; // dwdot[N2H3]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[14];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[231] += dqdci; // dwdot[N2H2]/d[H2O2]
  J[232] -= dqdci; // dwdot[N2H3]/d[H2O2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[7];
  J[440] -= dqdci; // dwdot[HO2]/d[N2H2]
  J[441] += dqdci; // dwdot[H2O2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[471] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[472] += dqdci; // dwdot[H2O2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 109: HO2 + N2H3 <=> N2H4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[15];
  k_f = 0.92 * exp(1.94 * logT - (1069.83863150083) * invT);
  dlnkfdT = 1.94 * invT + (1069.83863150083) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H4
  // d()/d[HO2]
  dqdci = +k_f * sc[15];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[201] -= dqdci; // dwdot[N2H3]/d[HO2]
  J[202] += dqdci; // dwdot[N2H4]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[263] -= dqdci; // dwdot[N2H3]/d[O2]
  J[264] += dqdci; // dwdot[N2H4]/d[O2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[6];
  J[471] -= dqdci; // dwdot[HO2]/d[N2H3]
  J[473] += dqdci; // dwdot[O2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = -k_r * sc[8];
  J[502] -= dqdci; // dwdot[HO2]/d[N2H4]
  J[504] += dqdci; // dwdot[O2]/d[N2H4]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] += dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H4]/dT

  // reaction 110: N2H3 + NH2 <=> N2H2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 6.08e-07 * exp(3.574 * logT - (598.827832307616) * invT);
  dlnkfdT = 3.574 * invT + (598.827832307616) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[14];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[386] += dqdci; // dwdot[N2H2]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H2]
  dqdci = -k_r * sc[12];
  J[445] -= dqdci; // dwdot[NH2]/d[N2H2]
  J[446] += dqdci; // dwdot[NH3]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 111: N2H3 + NH2 <=> H2NN + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 1.11e-05 * exp(3.08 * logT - (106.178716484796) * invT);
  dlnkfdT = 3.08 * invT + (106.178716484796) * invT2;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[11] - g_RT[12] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[15] -= q; // N2H3
  wdot[17] += q; // H2NN
  // d()/d[NH2]
  dqdci = +k_f * sc[15];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  J[358] += dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[17];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[387] -= dqdci; // dwdot[N2H3]/d[NH3]
  J[389] += dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * sc[11];
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] += dqdci; // dwdot[NH3]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[482] += dqdci; // dwdot[H2NN]/d[N2H3]
  // d()/d[H2NN]
  dqdci = -k_r * sc[12];
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[539] += dqdci; // dwdot[NH3]/d[H2NN]
  J[542] -= dqdci; // dwdot[N2H3]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT

  // reaction 112: N2H3 + NH <=> N2H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[15];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[15]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[14] += q; // N2H2
  wdot[15] -= q; // N2H3
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[324] += dqdci; // dwdot[N2H2]/d[NH]
  J[325] -= dqdci; // dwdot[N2H3]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[355] += dqdci; // dwdot[N2H2]/d[NH2]
  J[356] -= dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[N2H2]
  dqdci = -k_r * sc[11];
  J[444] -= dqdci; // dwdot[NH]/d[N2H2]
  J[445] += dqdci; // dwdot[NH2]/d[N2H2]
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[10];
  J[475] -= dqdci; // dwdot[NH]/d[N2H3]
  J[476] += dqdci; // dwdot[NH2]/d[N2H3]
  J[479] += dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT

  // reaction 113: N2H2 + N2H3 <=> N2H4 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[15];
  k_f = 10000000 * exp(-(5001.97365809891) * invT);
  dlnkfdT = (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(-g_RT[13] + g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[15]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // NNH
  wdot[14] -= q; // N2H2
  wdot[15] -= q; // N2H3
  wdot[16] += q; // N2H4
  // d()/d[NNH]
  dqdci = -k_r * sc[16];
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[417] -= dqdci; // dwdot[N2H2]/d[NNH]
  J[418] -= dqdci; // dwdot[N2H3]/d[NNH]
  J[419] += dqdci; // dwdot[N2H4]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * sc[15];
  J[447] += dqdci; // dwdot[NNH]/d[N2H2]
  J[448] -= dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] -= dqdci; // dwdot[N2H3]/d[N2H2]
  J[450] += dqdci; // dwdot[N2H4]/d[N2H2]
  // d()/d[N2H3]
  dqdci = +k_f * sc[14];
  J[478] += dqdci; // dwdot[NNH]/d[N2H3]
  J[479] -= dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] -= dqdci; // dwdot[N2H3]/d[N2H3]
  J[481] += dqdci; // dwdot[N2H4]/d[N2H3]
  // d()/d[N2H4]
  dqdci = -k_r * sc[13];
  J[509] += dqdci; // dwdot[NNH]/d[N2H4]
  J[510] -= dqdci; // dwdot[N2H2]/d[N2H4]
  J[511] -= dqdci; // dwdot[N2H3]/d[N2H4]
  J[512] += dqdci; // dwdot[N2H4]/d[N2H4]
  // d()/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[944] -= dqdT; // dwdot[N2H2]/dT
  J[945] -= dqdT; // dwdot[N2H3]/dT
  J[946] += dqdT; // dwdot[N2H4]/dT

  // reaction 114: 2 N2H3 <=> N2 + 2 NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[15] * sc[15]);
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * (sc[12] * sc[12]);
  Kc = refC * exp(-g_RT[0] - 2.000000 * g_RT[12] + 2.000000 * g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[15]) + (h_RT[0] + 2.000000 * h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // N2
  wdot[12] += 2 * q; // NH3
  wdot[15] -= 2 * q; // N2H3
  // d()/d[N2]
  dqdci = -k_r * sc[12] * sc[12];
  J[0] += dqdci;       // dwdot[N2]/d[N2]
  J[12] += 2 * dqdci;  // dwdot[NH3]/d[N2]
  J[15] += -2 * dqdci; // dwdot[N2H3]/d[N2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0] * 2.000000 * sc[12];
  J[372] += dqdci;      // dwdot[N2]/d[NH3]
  J[384] += 2 * dqdci;  // dwdot[NH3]/d[NH3]
  J[387] += -2 * dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = +k_f * 2.000000 * sc[15];
  J[465] += dqdci;      // dwdot[N2]/d[N2H3]
  J[477] += 2 * dqdci;  // dwdot[NH3]/d[N2H3]
  J[480] += -2 * dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[942] += 2 * dqdT;  // dwdot[NH3]/dT
  J[945] += -2 * dqdT; // dwdot[N2H3]/dT

  // reaction 115: 2 N2H2 <=> N2H3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[14] * sc[14]);
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  dlnkfdT = (4999.45757476989) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(-g_RT[13] + 2.000000 * g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[14]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q;     // NNH
  wdot[14] -= 2 * q; // N2H2
  wdot[15] += q;     // N2H3
  // d()/d[NNH]
  dqdci = -k_r * sc[15];
  J[416] += dqdci;      // dwdot[NNH]/d[NNH]
  J[417] += -2 * dqdci; // dwdot[N2H2]/d[NNH]
  J[418] += dqdci;      // dwdot[N2H3]/d[NNH]
  // d()/d[N2H2]
  dqdci = +k_f * 2.000000 * sc[14];
  J[447] += dqdci;      // dwdot[NNH]/d[N2H2]
  J[448] += -2 * dqdci; // dwdot[N2H2]/d[N2H2]
  J[449] += dqdci;      // dwdot[N2H3]/d[N2H2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[13];
  J[478] += dqdci;      // dwdot[NNH]/d[N2H3]
  J[479] += -2 * dqdci; // dwdot[N2H2]/d[N2H3]
  J[480] += dqdci;      // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[943] += dqdT;      // dwdot[NNH]/dT
  J[944] += -2 * dqdT; // dwdot[N2H2]/dT
  J[945] += dqdT;      // dwdot[N2H3]/dT

  // reaction 116: 2 NH2 <=> H2 + H2NN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 0.072 * exp(1.88 * logT - (4429.31309241314) * invT);
  dlnkfdT = 1.88 * invT + (4429.31309241314) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;      // H2
  wdot[11] -= 2 * q; // NH2
  wdot[17] += q;     // H2NN
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[64] += dqdci;      // dwdot[H2]/d[H2]
  J[73] += -2 * dqdci; // dwdot[NH2]/d[H2]
  J[79] += dqdci;      // dwdot[H2NN]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * 2.000000 * sc[11];
  J[343] += dqdci;      // dwdot[H2]/d[NH2]
  J[352] += -2 * dqdci; // dwdot[NH2]/d[NH2]
  J[358] += dqdci;      // dwdot[H2NN]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[2];
  J[529] += dqdci;      // dwdot[H2]/d[H2NN]
  J[538] += -2 * dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci;      // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[932] += dqdT;      // dwdot[H2]/dT
  J[941] += -2 * dqdT; // dwdot[NH2]/dT
  J[947] += dqdT;      // dwdot[H2NN]/dT

  // reaction 117: H2NN <=> H + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 3.4e+26 * exp(-4.83 * logT - (23258.6742934941) * invT);
  dlnkfdT = -4.83 * invT + (23258.6742934941) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = refC * exp(-g_RT[1] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[1] + h_RT[13]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[NNH]
  dqdci = -k_r * sc[1];
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f;
  J[528] += dqdci; // dwdot[H]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 118: H + H2NN <=> H2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 480 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] += dqdci; // dwdot[NNH]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] += dqdci; // dwdot[NNH]/d[H2]
  J[79] -= dqdci; // dwdot[H2NN]/d[H2]
  // d()/d[NNH]
  dqdci = -k_r * sc[2];
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[528] -= dqdci; // dwdot[H]/d[H2NN]
  J[529] += dqdci; // dwdot[H2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 119: H + H2NN <=> H + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[14] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // N2H2
  wdot[17] -= q; // H2NN
  // d()/d[H]
  dqdci = +k_f * sc[17] - k_r * sc[14];
  J[45] += dqdci; // dwdot[N2H2]/d[H]
  J[48] -= dqdci; // dwdot[H2NN]/d[H]
  // d()/d[N2H2]
  dqdci = -k_r * sc[1];
  J[448] += dqdci; // dwdot[N2H2]/d[N2H2]
  J[451] -= dqdci; // dwdot[H2NN]/d[N2H2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[1];
  J[541] += dqdci; // dwdot[N2H2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[944] += dqdT; // dwdot[N2H2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 120: H2NN + O <=> NNH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 330 * exp(1.5 * logT - (-449.875699229419) * invT);
  dlnkfdT = 1.5 * invT + (-449.875699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[13];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[4] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] += dqdci; // dwdot[NNH]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[NNH]
  dqdci = -k_r * sc[4];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 121: H2NN + O <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[3] - g_RT[11] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[110] -= dqdci; // dwdot[H2NN]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[3];
  J[530] -= dqdci; // dwdot[O]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[575] -= dqdci; // dwdot[H2NN]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 122: H2NN + OH <=> H2O + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] += dqdci; // dwdot[NNH]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[13];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] += dqdci; // dwdot[NNH]/d[H2O]
  J[172] -= dqdci; // dwdot[H2NN]/d[H2O]
  // d()/d[NNH]
  dqdci = -k_r * sc[5];
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 123: H2NN + OH => H + NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[141] -= dqdci; // dwdot[H2NN]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[4];
  J[528] += dqdci; // dwdot[H]/d[H2NN]
  J[531] -= dqdci; // dwdot[OH]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 124: H2NN + HO2 => NH2 + NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[18] += q; // NO
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[197] += dqdci; // dwdot[NH2]/d[HO2]
  J[203] -= dqdci; // dwdot[H2NN]/d[HO2]
  J[204] += dqdci; // dwdot[NO]/d[HO2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[531] += dqdci; // dwdot[OH]/d[H2NN]
  J[533] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[545] += dqdci; // dwdot[NO]/d[H2NN]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 125: H2NN + HO2 <=> H2O2 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[13];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[199] += dqdci; // dwdot[NNH]/d[HO2]
  J[203] -= dqdci; // dwdot[H2NN]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[13];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[230] += dqdci; // dwdot[NNH]/d[H2O2]
  J[234] -= dqdci; // dwdot[H2NN]/d[H2O2]
  // d()/d[NNH]
  dqdci = -k_r * sc[7];
  J[409] -= dqdci; // dwdot[HO2]/d[NNH]
  J[410] += dqdci; // dwdot[H2O2]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[6];
  J[533] -= dqdci; // dwdot[HO2]/d[H2NN]
  J[534] += dqdci; // dwdot[H2O2]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 126: H2NN + O2 <=> NH2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[17];
  k_f = 1500000 * exp(-(2999.67454486193) * invT);
  dlnkfdT = (2999.67454486193) * invT2;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(g_RT[8] - g_RT[11] + g_RT[17] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[17]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // O2
  wdot[11] += q; // NH2
  wdot[17] -= q; // H2NN
  wdot[20] += q; // NO2
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[259] += dqdci; // dwdot[NH2]/d[O2]
  J[265] -= dqdci; // dwdot[H2NN]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[20];
  J[349] -= dqdci; // dwdot[O2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  J[361] += dqdci; // dwdot[NO2]/d[NH2]
  // d()/d[H2NN]
  dqdci = +k_f * sc[8];
  J[535] -= dqdci; // dwdot[O2]/d[H2NN]
  J[538] += dqdci; // dwdot[NH2]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  J[547] += dqdci; // dwdot[NO2]/d[H2NN]
  // d()/d[NO2]
  dqdci = -k_r * sc[11];
  J[628] -= dqdci; // dwdot[O2]/d[NO2]
  J[631] += dqdci; // dwdot[NH2]/d[NO2]
  J[637] -= dqdci; // dwdot[H2NN]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 127: H2NN + NH2 <=> NH3 + NNH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[17];
  k_f = 1.8 * exp(1.94 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.94 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[17]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] += q; // NNH
  wdot[17] -= q; // H2NN
  // d()/d[NH2]
  dqdci = +k_f * sc[17];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] += dqdci; // dwdot[NNH]/d[NH2]
  J[358] -= dqdci; // dwdot[H2NN]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[13];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] += dqdci; // dwdot[NNH]/d[NH3]
  J[389] -= dqdci; // dwdot[H2NN]/d[NH3]
  // d()/d[NNH]
  dqdci = -k_r * sc[12];
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] += dqdci; // dwdot[NNH]/d[NNH]
  J[420] -= dqdci; // dwdot[H2NN]/d[NNH]
  // d()/d[H2NN]
  dqdci = +k_f * sc[11];
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[539] += dqdci; // dwdot[NH3]/d[H2NN]
  J[540] += dqdci; // dwdot[NNH]/d[H2NN]
  J[544] -= dqdci; // dwdot[H2NN]/d[H2NN]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] += dqdT; // dwdot[NNH]/dT
  J[947] -= dqdT; // dwdot[H2NN]/dT

  // reaction 130: H + HNOH <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[23] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[54] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[724] += dqdci; // dwdot[NH2]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 131: H + HNOH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 480 * exp(1.5 * logT - (190.215899674184) * invT);
  dlnkfdT = 1.5 * invT + (190.215899674184) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[54] -= dqdci; // dwdot[HNOH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[83] += dqdci; // dwdot[HNO]/d[H2]
  J[85] -= dqdci; // dwdot[HNOH]/d[H2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[1];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[715] += dqdci; // dwdot[H2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 132: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[116] -= dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 133: HNOH + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 330 * exp(1.5 * logT - (-180.15156635809) * invT);
  dlnkfdT = 1.5 * invT + (-180.15156635809) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[116] -= dqdci; // dwdot[HNOH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[3];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 134: HNOH + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 2.4 * exp(2 * logT - (-599.834265639226) * invT);
  dlnkfdT = 2 * invT + (-599.834265639226) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[HNO]/d[H2O]
  J[178] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[4];
  J[717] -= dqdci; // dwdot[OH]/d[HNOH]
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 135: HNOH + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[23];
  k_f = 0.029 * exp(2.7 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.7 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[23]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[HO2]
  dqdci = +k_f * sc[23];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[209] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  J[240] -= dqdci; // dwdot[HNOH]/d[H2O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[657] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[6];
  J[719] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[720] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 136: HNOH + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[23];
  k_f = 3000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[23]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[209] -= dqdci; // dwdot[HNOH]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  J[271] -= dqdci; // dwdot[HNOH]/d[O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[8];
  J[719] += dqdci; // dwdot[HO2]/d[HNOH]
  J[721] -= dqdci; // dwdot[O2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 137: HNOH + NH2 <=> N2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 1e-05 * exp(3.5 * logT - (-235.002182930804) * invT);
  dlnkfdT = 3.5 * invT + (-235.002182930804) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[11] - g_RT[15] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // NH2
  wdot[15] += q; // N2H3
  wdot[23] -= q; // HNOH
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] -= dqdci; // dwdot[NH2]/d[OH]
  J[139] += dqdci; // dwdot[N2H3]/d[OH]
  J[147] -= dqdci; // dwdot[HNOH]/d[OH]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[N2H3]
  dqdci = -k_r * sc[4];
  J[469] += dqdci; // dwdot[OH]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  J[488] -= dqdci; // dwdot[HNOH]/d[N2H3]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[728] += dqdci; // dwdot[N2H3]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 138: HNOH + NH2 <=> H2NN + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 88000000000 * exp(-1.1 * logT - (560.080149040653) * invT);
  dlnkfdT = -1.1 * invT + (560.080149040653) * invT2;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(-g_RT[5] + g_RT[11] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[11] -= q; // NH2
  wdot[17] += q; // H2NN
  wdot[23] -= q; // HNOH
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] -= dqdci; // dwdot[NH2]/d[H2O]
  J[172] += dqdci; // dwdot[H2NN]/d[H2O]
  J[178] -= dqdci; // dwdot[HNOH]/d[H2O]
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[358] += dqdci; // dwdot[H2NN]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[H2NN]
  dqdci = -k_r * sc[5];
  J[532] += dqdci; // dwdot[H2O]/d[H2NN]
  J[538] -= dqdci; // dwdot[NH2]/d[H2NN]
  J[544] += dqdci; // dwdot[H2NN]/d[H2NN]
  J[550] -= dqdci; // dwdot[HNOH]/d[H2NN]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[730] += dqdci; // dwdot[H2NN]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[947] += dqdT; // dwdot[H2NN]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 139: HNOH + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[23];
  k_f = 1.8 * exp(1.9 * logT - (-579.705599007037) * invT);
  dlnkfdT = 1.9 * invT + (-579.705599007037) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[23]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  // d()/d[NH2]
  dqdci = +k_f * sc[23];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  J[364] -= dqdci; // dwdot[HNOH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  J[395] -= dqdci; // dwdot[HNOH]/d[NH3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[11];
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[725] += dqdci; // dwdot[NH3]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT

  // reaction 140: HNOH + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[23];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[25];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[23] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[23]) + (h_RT[21] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  wdot[23] -= q; // HNOH
  wdot[25] += q; // HONO
  // d()/d[NO2]
  dqdci = +k_f * sc[23];
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  J[643] -= dqdci; // dwdot[HNOH]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[25];
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[20];
  J[733] -= dqdci; // dwdot[NO2]/d[HNOH]
  J[734] += dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[738] += dqdci; // dwdot[HONO]/d[HNOH]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[798] -= dqdci; // dwdot[HNOH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 142: H + NH2OH <=> H2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 480 * exp(1.5 * logT - (3144.60094461369) * invT);
  dlnkfdT = 1.5 * invT + (3144.60094461369) * invT2;
  // reverse
  phi_r = sc[2] * sc[23];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[2] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[54] += dqdci; // dwdot[HNOH]/d[H]
  J[55] -= dqdci; // dwdot[NH2OH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[85] += dqdci; // dwdot[HNOH]/d[H2]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[2];
  J[714] -= dqdci; // dwdot[H]/d[HNOH]
  J[715] += dqdci; // dwdot[H2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[1];
  J[745] -= dqdci; // dwdot[H]/d[NH2OH]
  J[746] += dqdci; // dwdot[H2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 143: H + NH2OH <=> H2 + H2NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 240 * exp(1.5 * logT - (2549.79884563251) * invT);
  dlnkfdT = 1.5 * invT + (2549.79884563251) * invT2;
  // reverse
  phi_r = sc[2] * sc[22];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[2] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[53] += dqdci; // dwdot[H2NO]/d[H]
  J[55] -= dqdci; // dwdot[NH2OH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[84] += dqdci; // dwdot[H2NO]/d[H2]
  J[86] -= dqdci; // dwdot[NH2OH]/d[H2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[2];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[684] += dqdci; // dwdot[H2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[1];
  J[745] -= dqdci; // dwdot[H]/d[NH2OH]
  J[746] += dqdci; // dwdot[H2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 144: NH2OH + O <=> HNOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 330 * exp(1.5 * logT - (1944.93241333524) * invT);
  dlnkfdT = 1.5 * invT + (1944.93241333524) * invT2;
  // reverse
  phi_r = sc[4] * sc[23];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[116] += dqdci; // dwdot[HNOH]/d[O]
  J[117] -= dqdci; // dwdot[NH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[147] += dqdci; // dwdot[HNOH]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[HNOH]
  dqdci = -k_r * sc[4];
  J[716] -= dqdci; // dwdot[O]/d[HNOH]
  J[717] += dqdci; // dwdot[OH]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[NH2OH]
  J[748] += dqdci; // dwdot[OH]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 145: NH2OH + O <=> H2NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[24];
  k_f = 170 * exp(1.5 * logT - (1514.68216407221) * invT);
  dlnkfdT = 1.5 * invT + (1514.68216407221) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[24]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[115] += dqdci; // dwdot[H2NO]/d[O]
  J[117] -= dqdci; // dwdot[NH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2NO]
  dqdci = -k_r * sc[4];
  J[685] -= dqdci; // dwdot[O]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[3];
  J[747] -= dqdci; // dwdot[O]/d[NH2OH]
  J[748] += dqdci; // dwdot[OH]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 146: NH2OH + OH <=> H2O + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 0.015 * exp(2.61 * logT - (-1779.87734695129) * invT);
  dlnkfdT = 2.61 * invT + (-1779.87734695129) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[147] += dqdci; // dwdot[HNOH]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[178] += dqdci; // dwdot[HNOH]/d[H2O]
  J[179] -= dqdci; // dwdot[NH2OH]/d[H2O]
  // d()/d[HNOH]
  dqdci = -k_r * sc[5];
  J[717] -= dqdci; // dwdot[OH]/d[HNOH]
  J[718] += dqdci; // dwdot[H2O]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[749] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 147: NH2OH + OH <=> H2NO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 0.15 * exp(2.28 * logT - (-652.168798882917) * invT);
  dlnkfdT = 2.28 * invT + (-652.168798882917) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[146] += dqdci; // dwdot[H2NO]/d[OH]
  J[148] -= dqdci; // dwdot[NH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] += dqdci; // dwdot[H2NO]/d[H2O]
  J[179] -= dqdci; // dwdot[NH2OH]/d[H2O]
  // d()/d[H2NO]
  dqdci = -k_r * sc[5];
  J[686] -= dqdci; // dwdot[OH]/d[H2NO]
  J[687] += dqdci; // dwdot[H2O]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[4];
  J[748] -= dqdci; // dwdot[OH]/d[NH2OH]
  J[749] += dqdci; // dwdot[H2O]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 148: NH2 + NH2OH <=> HNOH + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 1.1e-07 * exp(4 * logT - (-48.8120165830578) * invT);
  dlnkfdT = 4 * invT + (-48.8120165830578) * invT2;
  // reverse
  phi_r = sc[12] * sc[23];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[12] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[364] += dqdci; // dwdot[HNOH]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[23];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[395] += dqdci; // dwdot[HNOH]/d[NH3]
  J[396] -= dqdci; // dwdot[NH2OH]/d[NH3]
  // d()/d[HNOH]
  dqdci = -k_r * sc[12];
  J[724] -= dqdci; // dwdot[NH2]/d[HNOH]
  J[725] += dqdci; // dwdot[NH3]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[755] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[756] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 149: NH2 + NH2OH <=> H2NO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 9.5e-06 * exp(3.42 * logT - (-509.758482460181) * invT);
  dlnkfdT = 3.42 * invT + (-509.758482460181) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[NH2]
  dqdci = +k_f * sc[24];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[22];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[394] += dqdci; // dwdot[H2NO]/d[NH3]
  J[396] -= dqdci; // dwdot[NH2OH]/d[NH3]
  // d()/d[H2NO]
  dqdci = -k_r * sc[12];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[694] += dqdci; // dwdot[NH3]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[11];
  J[755] -= dqdci; // dwdot[NH2]/d[NH2OH]
  J[756] += dqdci; // dwdot[NH3]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 150: NH + NH2OH <=> HNOH + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 2.9e-09 * exp(4.4 * logT - (787.030865318582) * invT);
  dlnkfdT = 4.4 * invT + (787.030865318582) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[333] += dqdci; // dwdot[HNOH]/d[NH]
  J[334] -= dqdci; // dwdot[NH2OH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[23];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[364] += dqdci; // dwdot[HNOH]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[11];
  J[723] -= dqdci; // dwdot[NH]/d[HNOH]
  J[724] += dqdci; // dwdot[NH2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[754] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[755] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 151: NH + NH2OH <=> H2NO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 1.5e-09 * exp(4.6 * logT - (1219.79719791064) * invT);
  dlnkfdT = 4.6 * invT + (1219.79719791064) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[NH]
  dqdci = +k_f * sc[24];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[332] += dqdci; // dwdot[H2NO]/d[NH]
  J[334] -= dqdci; // dwdot[NH2OH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[22];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[363] += dqdci; // dwdot[H2NO]/d[NH2]
  J[365] -= dqdci; // dwdot[NH2OH]/d[NH2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[11];
  J[692] -= dqdci; // dwdot[NH]/d[H2NO]
  J[693] += dqdci; // dwdot[NH2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[10];
  J[754] -= dqdci; // dwdot[NH]/d[NH2OH]
  J[755] += dqdci; // dwdot[NH2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 152: HO2 + NH2OH <=> H2O2 + HNOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 0.029 * exp(2.69 * logT - (4809.24167509571) * invT);
  dlnkfdT = 2.69 * invT + (4809.24167509571) * invT2;
  // reverse
  phi_r = sc[7] * sc[23];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[7] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[23] += q; // HNOH
  wdot[24] -= q; // NH2OH
  // d()/d[HO2]
  dqdci = +k_f * sc[24];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[209] += dqdci; // dwdot[HNOH]/d[HO2]
  J[210] -= dqdci; // dwdot[NH2OH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[23];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[240] += dqdci; // dwdot[HNOH]/d[H2O2]
  J[241] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  // d()/d[HNOH]
  dqdci = -k_r * sc[7];
  J[719] -= dqdci; // dwdot[HO2]/d[HNOH]
  J[720] += dqdci; // dwdot[H2O2]/d[HNOH]
  J[736] += dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] -= dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[750] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[751] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[767] += dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[953] += dqdT; // dwdot[HNOH]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 153: HO2 + NH2OH <=> H2NO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[24];
  k_f = 0.014 * exp(2.69 * logT - (3229.64456113469) * invT);
  dlnkfdT = 2.69 * invT + (3229.64456113469) * invT2;
  // reverse
  phi_r = sc[7] * sc[22];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[24]) + (h_RT[7] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[22] += q; // H2NO
  wdot[24] -= q; // NH2OH
  // d()/d[HO2]
  dqdci = +k_f * sc[24];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[208] += dqdci; // dwdot[H2NO]/d[HO2]
  J[210] -= dqdci; // dwdot[NH2OH]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[22];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[239] += dqdci; // dwdot[H2NO]/d[H2O2]
  J[241] -= dqdci; // dwdot[NH2OH]/d[H2O2]
  // d()/d[H2NO]
  dqdci = -k_r * sc[7];
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[689] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[704] += dqdci; // dwdot[H2NO]/d[H2NO]
  J[706] -= dqdci; // dwdot[NH2OH]/d[H2NO]
  // d()/d[NH2OH]
  dqdci = +k_f * sc[6];
  J[750] -= dqdci; // dwdot[HO2]/d[NH2OH]
  J[751] += dqdci; // dwdot[H2O2]/d[NH2OH]
  J[766] += dqdci; // dwdot[H2NO]/d[NH2OH]
  J[768] -= dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[952] += dqdT; // dwdot[H2NO]/dT
  J[954] -= dqdT; // dwdot[NH2OH]/dT

  // reaction 154: HNO + HNOH <=> NH2OH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc[23];
  k_f = 1000000 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[18] * sc[24];
  Kc = exp(-g_RT[18] + g_RT[21] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT[23]) + (h_RT[18] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  wdot[23] -= q; // HNOH
  wdot[24] += q; // NH2OH
  // d()/d[NO]
  dqdci = -k_r * sc[24];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  J[581] -= dqdci; // dwdot[HNOH]/d[NO]
  J[582] += dqdci; // dwdot[NH2OH]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[23];
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[674] -= dqdci; // dwdot[HNOH]/d[HNO]
  J[675] += dqdci; // dwdot[NH2OH]/d[HNO]
  // d()/d[HNOH]
  dqdci = +k_f * sc[21];
  J[731] += dqdci; // dwdot[NO]/d[HNOH]
  J[734] -= dqdci; // dwdot[HNO]/d[HNOH]
  J[736] -= dqdci; // dwdot[HNOH]/d[HNOH]
  J[737] += dqdci; // dwdot[NH2OH]/d[HNOH]
  // d()/d[NH2OH]
  dqdci = -k_r * sc[18];
  J[762] += dqdci; // dwdot[NO]/d[NH2OH]
  J[765] -= dqdci; // dwdot[HNO]/d[NH2OH]
  J[767] -= dqdci; // dwdot[HNOH]/d[NH2OH]
  J[768] += dqdci; // dwdot[NH2OH]/d[NH2OH]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[953] -= dqdT; // dwdot[HNOH]/dT
  J[954] += dqdT; // dwdot[NH2OH]/dT

  // reaction 156: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 2.89 * exp(2.23 * logT - (5233.45332436908) * invT);
  dlnkfdT = 2.23 * invT + (5233.45332436908) * invT2;
  // reverse
  phi_r = sc[2] * sc[11];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[2] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[43] -= dqdci; // dwdot[NH3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[11];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[73] += dqdci; // dwdot[NH2]/d[H2]
  J[74] -= dqdci; // dwdot[NH3]/d[H2]
  // d()/d[NH2]
  dqdci = -k_r * sc[2];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[1];
  J[373] -= dqdci; // dwdot[H]/d[NH3]
  J[374] += dqdci; // dwdot[H2]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 157: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 0.1559 * exp(2.372 * logT - (59.8324615641812) * invT);
  dlnkfdT = 2.372 * invT + (59.8324615641812) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[136] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[166] += dqdci; // dwdot[NH2]/d[H2O]
  J[167] -= dqdci; // dwdot[NH3]/d[H2O]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[345] -= dqdci; // dwdot[OH]/d[NH2]
  J[346] += dqdci; // dwdot[H2O]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[376] -= dqdci; // dwdot[OH]/d[NH3]
  J[377] += dqdci; // dwdot[H2O]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 158: HO2 + NH3 <=> H2O2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1.173e-06 * exp(3.839 * logT - (8685.51965178946) * invT);
  dlnkfdT = 3.839 * invT + (8685.51965178946) * invT2;
  // reverse
  phi_r = sc[7] * sc[11];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[197] += dqdci; // dwdot[NH2]/d[HO2]
  J[198] -= dqdci; // dwdot[NH3]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[228] += dqdci; // dwdot[NH2]/d[H2O2]
  J[229] -= dqdci; // dwdot[NH3]/d[H2O2]
  // d()/d[NH2]
  dqdci = -k_r * sc[7];
  J[347] -= dqdci; // dwdot[HO2]/d[NH2]
  J[348] += dqdci; // dwdot[H2O2]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[6];
  J[378] -= dqdci; // dwdot[HO2]/d[NH3]
  J[379] += dqdci; // dwdot[H2O2]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 159: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 0.000443 * exp(3.18 * logT - (3391.63000585723) * invT);
  dlnkfdT = 3.18 * invT + (3391.63000585723) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[12] -= q; // NH3
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[104] += dqdci; // dwdot[NH2]/d[O]
  J[105] -= dqdci; // dwdot[NH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[136] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[344] -= dqdci; // dwdot[O]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[3];
  J[375] -= dqdci; // dwdot[O]/d[NH3]
  J[376] += dqdci; // dwdot[OH]/d[NH3]
  J[383] += dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT

  // reaction 160: NH2 + NH3 <=> H2 + N2H3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 100000 * exp(0.5 * logT - (10869.4799813819) * invT);
  dlnkfdT = 0.5 * invT + (10869.4799813819) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // H2
  wdot[11] -= q; // NH2
  wdot[12] -= q; // NH3
  wdot[15] += q; // N2H3
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[73] -= dqdci; // dwdot[NH2]/d[H2]
  J[74] -= dqdci; // dwdot[NH3]/d[H2]
  J[77] += dqdci; // dwdot[N2H3]/d[H2]
  // d()/d[NH2]
  dqdci = +k_f * sc[12];
  J[343] += dqdci; // dwdot[H2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] -= dqdci; // dwdot[NH3]/d[NH2]
  J[356] += dqdci; // dwdot[N2H3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[11];
  J[374] += dqdci; // dwdot[H2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] -= dqdci; // dwdot[NH3]/d[NH3]
  J[387] += dqdci; // dwdot[N2H3]/d[NH3]
  // d()/d[N2H3]
  dqdci = -k_r * sc[2];
  J[467] += dqdci; // dwdot[H2]/d[N2H3]
  J[476] -= dqdci; // dwdot[NH2]/d[N2H3]
  J[477] -= dqdci; // dwdot[NH3]/d[N2H3]
  J[480] += dqdci; // dwdot[N2H3]/d[N2H3]
  // d()/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] -= dqdT; // dwdot[NH3]/dT
  J[945] += dqdT; // dwdot[N2H3]/dT

  // reaction 161: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13];
  k_f = 330000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[1];
  Kc = refC * exp(-g_RT[0] - g_RT[1] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13]) + (h_RT[0] + h_RT[1]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] += q;  // H
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] += dqdci;  // dwdot[H]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = -k_r * sc[0];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 162: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[2];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[2] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[2] += dqdci;  // dwdot[H2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[0];
  J[62] += dqdci; // dwdot[N2]/d[H2]
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[75] -= dqdci; // dwdot[NNH]/d[H2]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[404] -= dqdci; // dwdot[H]/d[NNH]
  J[405] += dqdci; // dwdot[H2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 163: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[5] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[0] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[OH]/d[N2]
  J[5] += dqdci;  // dwdot[H2O]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[0];
  J[155] += dqdci; // dwdot[N2]/d[H2O]
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[168] -= dqdci; // dwdot[NNH]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[407] -= dqdci; // dwdot[OH]/d[NNH]
  J[408] += dqdci; // dwdot[H2O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 164: NNH + NO <=> HNO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[21];
  Kc = exp(-g_RT[0] + g_RT[13] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[18]) + (h_RT[0] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[13] -= q; // NNH
  wdot[18] -= q; // NO
  wdot[21] += q; // HNO
  // d()/d[N2]
  dqdci = -k_r * sc[21];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  J[21] += dqdci; // dwdot[HNO]/d[N2]
  // d()/d[NNH]
  dqdci = +k_f * sc[18];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[421] -= dqdci; // dwdot[NO]/d[NNH]
  J[424] += dqdci; // dwdot[HNO]/d[NNH]
  // d()/d[NO]
  dqdci = +k_f * sc[13];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[571] -= dqdci; // dwdot[NNH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[579] += dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[651] += dqdci; // dwdot[N2]/d[HNO]
  J[664] -= dqdci; // dwdot[NNH]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[951] += dqdT; // dwdot[HNO]/dT

  // reaction 165: NH + NNH <=> N2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[11];
  Kc = exp(-g_RT[0] + g_RT[10] - g_RT[11] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (h_RT[0] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[11];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[10] -= dqdci; // dwdot[NH]/d[N2]
  J[11] += dqdci; // dwdot[NH2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH]
  dqdci = +k_f * sc[13];
  J[310] += dqdci; // dwdot[N2]/d[NH]
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[323] -= dqdci; // dwdot[NNH]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[354] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NNH]
  dqdci = +k_f * sc[10];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[413] -= dqdci; // dwdot[NH]/d[NNH]
  J[414] += dqdci; // dwdot[NH2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 166: NH2 + NNH <=> N2 + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[11] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[11] -= dqdci; // dwdot[NH2]/d[N2]
  J[12] += dqdci; // dwdot[NH3]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[NH2]
  dqdci = +k_f * sc[13];
  J[341] += dqdci; // dwdot[N2]/d[NH2]
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[354] -= dqdci; // dwdot[NNH]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[0];
  J[372] += dqdci; // dwdot[N2]/d[NH3]
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[385] -= dqdci; // dwdot[NNH]/d[NH3]
  // d()/d[NNH]
  dqdci = +k_f * sc[11];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[414] -= dqdci; // dwdot[NH2]/d[NNH]
  J[415] += dqdci; // dwdot[NH3]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 167: NNH + O <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 187000000 * exp(-0.274 * logT - (-11.0707666477038) * invT);
  dlnkfdT = -0.274 * invT + (-11.0707666477038) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[13] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O
  wdot[13] -= q; // NNH
  wdot[19] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[34] -= dqdci; // dwdot[O]/d[H]
  J[44] -= dqdci; // dwdot[NNH]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[94] += dqdci;  // dwdot[H]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[112] += dqdci; // dwdot[N2O]/d[O]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[404] += dqdci; // dwdot[H]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[422] += dqdci; // dwdot[N2O]/d[NNH]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[592] -= dqdci; // dwdot[O]/d[N2O]
  J[602] -= dqdci; // dwdot[NNH]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[949] += dqdT; // dwdot[N2O]/dT

  // reaction 168: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 518000 * exp(0.388 * logT - (-205.81561631413) * invT);
  dlnkfdT = 0.388 * invT + (-205.81561631413) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[3] - g_RT[10] + g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[10] += q; // NH
  wdot[13] -= q; // NNH
  wdot[18] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[103] += dqdci; // dwdot[NH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = -k_r * sc[18];
  J[313] -= dqdci; // dwdot[O]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[323] -= dqdci; // dwdot[NNH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[413] += dqdci; // dwdot[NH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  J[421] += dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[568] += dqdci; // dwdot[NH]/d[NO]
  J[571] -= dqdci; // dwdot[NNH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT
  J[948] += dqdT; // dwdot[NO]/dT

  // reaction 169: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[13];
  k_f = 12000000 * exp(0.145 * logT - (-109.198016479624) * invT);
  dlnkfdT = 0.145 * invT + (-109.198016479624) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[4] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[13]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[106] -= dqdci; // dwdot[NNH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[137] -= dqdci; // dwdot[NNH]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[406] -= dqdci; // dwdot[O]/d[NNH]
  J[407] += dqdci; // dwdot[OH]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 170: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[13];
  k_f = 560000000 * exp(-0.385 * logT - (-6.54181665546136) * invT);
  dlnkfdT = -0.385 * invT + (-6.54181665546136) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] - g_RT[6] + g_RT[8] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[13]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[13] -= q; // NNH
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[6] += dqdci;  // dwdot[HO2]/d[N2]
  J[8] -= dqdci;  // dwdot[O2]/d[N2]
  J[13] -= dqdci; // dwdot[NNH]/d[N2]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[186] += dqdci; // dwdot[N2]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[199] -= dqdci; // dwdot[NNH]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[13];
  J[248] += dqdci; // dwdot[N2]/d[O2]
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[261] -= dqdci; // dwdot[NNH]/d[O2]
  // d()/d[NNH]
  dqdci = +k_f * sc[8];
  J[403] += dqdci; // dwdot[N2]/d[NNH]
  J[409] += dqdci; // dwdot[HO2]/d[NNH]
  J[411] -= dqdci; // dwdot[O2]/d[NNH]
  J[416] -= dqdci; // dwdot[NNH]/d[NNH]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[943] -= dqdT; // dwdot[NNH]/dT

  // reaction 171: 2 NNH <=> N2 + N2H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[13] * sc[13]);
  k_f = 10000000 * exp(-(4999.45757476989) * invT);
  dlnkfdT = (4999.45757476989) * invT2;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[13] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[13]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // N2
  wdot[13] -= 2 * q; // NNH
  wdot[14] += q;     // N2H2
  // d()/d[N2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;       // dwdot[N2]/d[N2]
  J[13] += -2 * dqdci; // dwdot[NNH]/d[N2]
  J[14] += dqdci;      // dwdot[N2H2]/d[N2]
  // d()/d[NNH]
  dqdci = +k_f * 2.000000 * sc[13];
  J[403] += dqdci;      // dwdot[N2]/d[NNH]
  J[416] += -2 * dqdci; // dwdot[NNH]/d[NNH]
  J[417] += dqdci;      // dwdot[N2H2]/d[NNH]
  // d()/d[N2H2]
  dqdci = -k_r * sc[0];
  J[434] += dqdci;      // dwdot[N2]/d[N2H2]
  J[447] += -2 * dqdci; // dwdot[NNH]/d[N2H2]
  J[448] += dqdci;      // dwdot[N2H2]/d[N2H2]
  // d()/dT
  J[930] += dqdT;      // dwdot[N2]/dT
  J[943] += -2 * dqdT; // dwdot[NNH]/dT
  J[944] += dqdT;      // dwdot[N2H2]/dT

  // reaction 172: HNO <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21];
  k_f = 1.8259e+20 * exp(-3.008 * logT - (24094.01395873) * invT);
  dlnkfdT = -3.008 * invT + (24094.01395873) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = refC * exp(-g_RT[1] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21]) + (h_RT[1] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[559] += dqdci; // dwdot[H]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f;
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 173: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 23000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[114] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 174: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 440000 * exp(0.72 * logT - (327.090832773068) * invT);
  dlnkfdT = 0.72 * invT + (327.090832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[18];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[2] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[80] += dqdci; // dwdot[NO]/d[H2]
  J[83] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[560] += dqdci; // dwdot[H2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 175: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 36000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[173] += dqdci; // dwdot[NO]/d[H2O]
  J[176] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[562] -= dqdci; // dwdot[OH]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 176: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[21];
  k_f = 20000000 * exp(-(8051.46665287552) * invT);
  dlnkfdT = (8051.46665287552) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[21]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[HO2]
  dqdci = -k_r * sc[18];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[NO]/d[HO2]
  J[207] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[269] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[564] += dqdci; // dwdot[HO2]/d[NO]
  J[566] -= dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[8];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 177: HNO + N <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 10000000 * exp(-(1001.40116495139) * invT);
  dlnkfdT = (1001.40116495139) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // N
  wdot[10] += q; // NH
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[N]
  dqdci = +k_f * sc[21];
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[289] += dqdci; // dwdot[NH]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  J[300] -= dqdci; // dwdot[HNO]/d[N]
  // d()/d[NH]
  dqdci = -k_r * sc[18];
  J[319] -= dqdci; // dwdot[N]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[331] -= dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[10];
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[568] += dqdci; // dwdot[NH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[660] -= dqdci; // dwdot[N]/d[HNO]
  J[661] += dqdci; // dwdot[NH]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 178: HNO + N <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 50000 * exp(0.5 * logT - (1509.64999741416) * invT);
  dlnkfdT = 0.5 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[1] * sc[19];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[19] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[1] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // N
  wdot[19] += q; // N2O
  wdot[21] -= q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[40] -= dqdci; // dwdot[N]/d[H]
  J[50] += dqdci; // dwdot[N2O]/d[H]
  J[52] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[21];
  J[280] += dqdci; // dwdot[H]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[298] += dqdci; // dwdot[N2O]/d[N]
  J[300] -= dqdci; // dwdot[HNO]/d[N]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[590] += dqdci; // dwdot[H]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[610] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[9];
  J[652] += dqdci; // dwdot[H]/d[HNO]
  J[660] -= dqdci; // dwdot[N]/d[HNO]
  J[670] += dqdci; // dwdot[N2O]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 179: HNO + NH <=> NH2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[21];
  k_f = 500000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[21]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // NH
  wdot[11] += q; // NH2
  wdot[18] += q; // NO
  wdot[21] -= q; // HNO
  // d()/d[NH]
  dqdci = +k_f * sc[21];
  J[320] -= dqdci; // dwdot[NH]/d[NH]
  J[321] += dqdci; // dwdot[NH2]/d[NH]
  J[328] += dqdci; // dwdot[NO]/d[NH]
  J[331] -= dqdci; // dwdot[HNO]/d[NH]
  // d()/d[NH2]
  dqdci = -k_r * sc[18];
  J[351] -= dqdci; // dwdot[NH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[359] += dqdci; // dwdot[NO]/d[NH2]
  J[362] -= dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[NO]
  dqdci = -k_r * sc[11];
  J[568] -= dqdci; // dwdot[NH]/d[NO]
  J[569] += dqdci; // dwdot[NH2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[10];
  J[661] -= dqdci; // dwdot[NH]/d[HNO]
  J[662] += dqdci; // dwdot[NH2]/d[HNO]
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[940] -= dqdT; // dwdot[NH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 180: HNO + NO <=> N2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[21];
  k_f = 8510000 * exp(-(14900.2454744777) * invT);
  dlnkfdT = (14900.2454744777) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[18] - g_RT[19] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[21]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[18] -= q; // NO
  wdot[19] += q; // N2O
  wdot[21] -= q; // HNO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  J[143] += dqdci; // dwdot[N2O]/d[OH]
  J[145] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = +k_f * sc[21];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] += dqdci; // dwdot[N2O]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[4];
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] += dqdci; // dwdot[N2O]/d[N2O]
  J[610] -= dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * sc[18];
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[669] -= dqdci; // dwdot[NO]/d[HNO]
  J[670] += dqdci; // dwdot[N2O]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] += dqdT; // dwdot[N2O]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT

  // reaction 181: HNO + NO2 <=> HONO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[21];
  k_f = 0.044 * exp(2.6 * logT - (2032.99532985107) * invT);
  dlnkfdT = 2.6 * invT + (2032.99532985107) * invT2;
  // reverse
  phi_r = sc[18] * sc[25];
  Kc = exp(-g_RT[18] + g_RT[20] + g_RT[21] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[21]) + (h_RT[18] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[21] -= q; // HNO
  wdot[25] += q; // HONO
  // d()/d[NO]
  dqdci = -k_r * sc[25];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[579] -= dqdci; // dwdot[HNO]/d[NO]
  J[583] += dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[21];
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] -= dqdci; // dwdot[HNO]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = +k_f * sc[20];
  J[669] += dqdci; // dwdot[NO]/d[HNO]
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] -= dqdci; // dwdot[HNO]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = -k_r * sc[18];
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] -= dqdci; // dwdot[HNO]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] -= dqdT; // dwdot[HNO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 182: 2 HNO <=> H2O + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[21] * sc[21]);
  k_f = 900 * exp(-(1559.97166399463) * invT);
  dlnkfdT = (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(-g_RT[5] - g_RT[19] + 2.000000 * g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[21]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[19] += q;     // N2O
  wdot[21] -= 2 * q; // HNO
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  J[174] += dqdci;      // dwdot[N2O]/d[H2O]
  J[176] += -2 * dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[N2O]
  dqdci = -k_r * sc[5];
  J[594] += dqdci;      // dwdot[H2O]/d[N2O]
  J[608] += dqdci;      // dwdot[N2O]/d[N2O]
  J[610] += -2 * dqdci; // dwdot[HNO]/d[N2O]
  // d()/d[HNO]
  dqdci = +k_f * 2.000000 * sc[21];
  J[656] += dqdci;      // dwdot[H2O]/d[HNO]
  J[670] += dqdci;      // dwdot[N2O]/d[HNO]
  J[672] += -2 * dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[935] += dqdT;      // dwdot[H2O]/dT
  J[949] += dqdT;      // dwdot[N2O]/dT
  J[951] += -2 * dqdT; // dwdot[HNO]/dT

  // reaction 184: H + HON <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 24000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[21] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[21] += q; // HNO
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[27] - k_r * sc[21];
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[678] -= dqdci; // dwdot[HON]/d[HNO]
  // d()/d[HON]
  dqdci = +k_f * sc[1];
  J[858] += dqdci; // dwdot[HNO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 185: H + HON <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[10] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[10] += q; // NH
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[41] += dqdci; // dwdot[NH]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[134] += dqdci; // dwdot[NH]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[311] -= dqdci; // dwdot[H]/d[NH]
  J[314] += dqdci; // dwdot[OH]/d[NH]
  J[320] += dqdci; // dwdot[NH]/d[NH]
  J[337] -= dqdci; // dwdot[HON]/d[NH]
  // d()/d[HON]
  dqdci = +k_f * sc[1];
  J[838] -= dqdci; // dwdot[H]/d[HON]
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[847] += dqdci; // dwdot[NH]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[940] += dqdT; // dwdot[NH]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 186: HON + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[18] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[27] -= q; // HON
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[120] -= dqdci; // dwdot[HON]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[585] -= dqdci; // dwdot[HON]/d[NO]
  // d()/d[HON]
  dqdci = +k_f * sc[3];
  J[840] -= dqdci; // dwdot[O]/d[HON]
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[855] += dqdci; // dwdot[NO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 187: HON + OH <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[27];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[4] - g_RT[25] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[27]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[25] += q; // HONO
  wdot[27] -= q; // HON
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[OH]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  J[58] -= dqdci; // dwdot[HON]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[125] += dqdci; // dwdot[H]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[HONO]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[H]/d[HONO]
  J[779] -= dqdci; // dwdot[OH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  J[802] -= dqdci; // dwdot[HON]/d[HONO]
  // d()/d[HON]
  dqdci = +k_f * sc[4];
  J[838] += dqdci; // dwdot[H]/d[HON]
  J[841] -= dqdci; // dwdot[OH]/d[HON]
  J[862] += dqdci; // dwdot[HONO]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 188: HON + O2 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[27];
  k_f = 1000000 * exp(-(2499.98039571785) * invT);
  dlnkfdT = (2499.98039571785) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[20] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[27]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[20] += q; // NO2
  wdot[27] -= q; // HON
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[132] -= dqdci; // dwdot[O2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[151] -= dqdci; // dwdot[HON]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[275] -= dqdci; // dwdot[HON]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[628] -= dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[647] -= dqdci; // dwdot[HON]/d[NO2]
  // d()/d[HON]
  dqdci = +k_f * sc[8];
  J[841] += dqdci; // dwdot[OH]/d[HON]
  J[845] -= dqdci; // dwdot[O2]/d[HON]
  J[857] += dqdci; // dwdot[NO2]/d[HON]
  J[864] -= dqdci; // dwdot[HON]/d[HON]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[957] -= dqdT; // dwdot[HON]/dT

  // reaction 190: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[18];
  k_f = 2100000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[18] -= q; // NO
  wdot[20] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[142] -= dqdci; // dwdot[NO]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[204] -= dqdci; // dwdot[NO]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[564] -= dqdci; // dwdot[HO2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[578] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[638] -= dqdci; // dwdot[NO]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 191: H2 + NO2 <=> H + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.013 * exp(2.76 * logT - (14980.7601410065) * invT);
  dlnkfdT = 2.76 * invT + (14980.7601410065) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // H2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[20];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[82] -= dqdci; // dwdot[NO2]/d[H2]
  J[87] += dqdci; // dwdot[HONO]/d[H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[621] += dqdci; // dwdot[H]/d[NO2]
  J[622] -= dqdci; // dwdot[H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[1];
  J[776] += dqdci; // dwdot[H]/d[HONO]
  J[777] -= dqdci; // dwdot[H2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 192: H2 + NO2 <=> H + HNO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 2.4e-06 * exp(3.73 * logT - (16304.2199720729) * invT);
  dlnkfdT = 3.73 * invT + (16304.2199720729) * invT2;
  // reverse
  phi_r = sc[1] * sc[26];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[1] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // H2
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[32] += dqdci; // dwdot[H]/d[H]
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  J[57] += dqdci; // dwdot[HNO2]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc[20];
  J[63] += dqdci; // dwdot[H]/d[H2]
  J[64] -= dqdci; // dwdot[H2]/d[H2]
  J[82] -= dqdci; // dwdot[NO2]/d[H2]
  J[88] += dqdci; // dwdot[HNO2]/d[H2]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[621] += dqdci; // dwdot[H]/d[NO2]
  J[622] -= dqdci; // dwdot[H2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[1];
  J[807] += dqdci; // dwdot[H]/d[HNO2]
  J[808] -= dqdci; // dwdot[H2]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[931] += dqdT; // dwdot[H]/dT
  J[932] -= dqdT; // dwdot[H2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 193: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 130000000 * exp(-(182.164433021309) * invT);
  dlnkfdT = (182.164433021309) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[51] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[142] += dqdci; // dwdot[NO]/d[OH]
  J[144] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[562] += dqdci; // dwdot[OH]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[1];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 194: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 110000000 * exp(-0.5 * logT);
  dlnkfdT = -0.5 * invT;
  // reverse
  phi_r = sc[8] * sc[18];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[8] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[111] += dqdci; // dwdot[NO]/d[O]
  J[113] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[18];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[266] += dqdci; // dwdot[NO]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8];
  J[561] -= dqdci; // dwdot[O]/d[NO]
  J[566] += dqdci; // dwdot[O2]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[3];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT

  // reaction 196: 2 NO2 <=> 2 NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[20] * sc[20]);
  k_f = 4500000 * exp(-(13888.7799762103) * invT);
  dlnkfdT = (13888.7799762103) * invT2;
  // reverse
  phi_r = sc[8] * (sc[18] * sc[18]);
  Kc = refC * exp(-g_RT[8] - 2.000000 * g_RT[18] + 2.000000 * g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[20]) + (h_RT[8] + 2.000000 * h_RT[18]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // O2
  wdot[18] += 2 * q; // NO
  wdot[20] -= 2 * q; // NO2
  // d()/d[O2]
  dqdci = -k_r * sc[18] * sc[18];
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  J[266] += 2 * dqdci;  // dwdot[NO]/d[O2]
  J[268] += -2 * dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[8] * 2.000000 * sc[18];
  J[566] += dqdci;      // dwdot[O2]/d[NO]
  J[576] += 2 * dqdci;  // dwdot[NO]/d[NO]
  J[578] += -2 * dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[20];
  J[628] += dqdci;      // dwdot[O2]/d[NO2]
  J[638] += 2 * dqdci;  // dwdot[NO]/d[NO2]
  J[640] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[938] += dqdT;      // dwdot[O2]/dT
  J[948] += 2 * dqdT;  // dwdot[NO]/dT
  J[950] += -2 * dqdT; // dwdot[NO2]/dT

  // reaction 197: HO2 + NO2 <=> HONO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 1.91e-06 * exp(3.32 * logT - (1531.79153070957) * invT);
  dlnkfdT = 3.32 * invT + (1531.79153070957) * invT2;
  // reverse
  phi_r = sc[8] * sc[25];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[8] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] -= q; // NO2
  wdot[25] += q; // HONO
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] -= dqdci; // dwdot[NO2]/d[HO2]
  J[211] += dqdci; // dwdot[HONO]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[25];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  J[273] += dqdci; // dwdot[HONO]/d[O2]
  // d()/d[NO2]
  dqdci = +k_f * sc[6];
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = -k_r * sc[8];
  J[781] -= dqdci; // dwdot[HO2]/d[HONO]
  J[783] += dqdci; // dwdot[O2]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 198: HO2 + NO2 <=> HNO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[20];
  k_f = 1.85e-05 * exp(3.26 * logT - (2507.52864570492) * invT);
  dlnkfdT = 3.26 * invT + (2507.52864570492) * invT2;
  // reverse
  phi_r = sc[8] * sc[26];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[20] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[8] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] -= q; // NO2
  wdot[26] += q; // HNO2
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] -= dqdci; // dwdot[NO2]/d[HO2]
  J[212] += dqdci; // dwdot[HNO2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[26];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] -= dqdci; // dwdot[NO2]/d[O2]
  J[274] += dqdci; // dwdot[HNO2]/d[O2]
  // d()/d[NO2]
  dqdci = +k_f * sc[6];
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[646] += dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = -k_r * sc[8];
  J[812] -= dqdci; // dwdot[HO2]/d[HNO2]
  J[814] += dqdci; // dwdot[O2]/d[HNO2]
  J[826] -= dqdci; // dwdot[NO2]/d[HNO2]
  J[832] += dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[956] += dqdT; // dwdot[HNO2]/dT

  // reaction 200: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 25300 * exp(-(2289.63582941147) * invT);
  dlnkfdT = (2289.63582941147) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[50] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[590] -= dqdci; // dwdot[H]/d[N2O]
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 201: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 500000000 * exp(-(9108.22165106543) * invT);
  dlnkfdT = (9108.22165106543) * invT2;
  // reverse
  phi_r = sc[0] * sc[4];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[4] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[1] -= dqdci;  // dwdot[H]/d[N2]
  J[4] += dqdci;  // dwdot[OH]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[31] += dqdci; // dwdot[N2]/d[H]
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[50] -= dqdci; // dwdot[N2O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[0];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[590] -= dqdci; // dwdot[H]/d[N2O]
  J[593] += dqdci; // dwdot[OH]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 202: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 92000000 * exp(-(13924.0051428166) * invT);
  dlnkfdT = (13924.0051428166) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]);
  Kc = exp(g_RT[3] - 2.000000 * g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (2.000000 * h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O
  wdot[18] += 2 * q; // NO
  wdot[19] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[96] -= dqdci;      // dwdot[O]/d[O]
  J[111] += 2 * dqdci; // dwdot[NO]/d[O]
  J[112] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[18];
  J[561] -= dqdci;     // dwdot[O]/d[NO]
  J[576] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[592] -= dqdci;     // dwdot[O]/d[N2O]
  J[607] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[933] -= dqdT;     // dwdot[O]/dT
  J[948] += 2 * dqdT; // dwdot[NO]/dT
  J[949] -= dqdT;     // dwdot[N2O]/dT

  // reaction 203: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 3700000 * exp(-(8016.24148626918) * invT);
  dlnkfdT = (8016.24148626918) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[3] - g_RT[8] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[3] -= dqdci;  // dwdot[O]/d[N2]
  J[8] += dqdci;  // dwdot[O2]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[93] += dqdci;  // dwdot[N2]/d[O]
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[112] -= dqdci; // dwdot[N2O]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[248] += dqdci; // dwdot[N2]/d[O2]
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[267] -= dqdci; // dwdot[N2O]/d[O2]
  // d()/d[N2O]
  dqdci = +k_f * sc[3];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[592] -= dqdci; // dwdot[O]/d[N2O]
  J[597] += dqdci; // dwdot[O2]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 204: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 1.3e-08 * exp(4.7 * logT - (18397.6013018206) * invT);
  dlnkfdT = 4.7 * invT + (18397.6013018206) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[4] - g_RT[6] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[4] -= dqdci;  // dwdot[OH]/d[N2]
  J[6] += dqdci;  // dwdot[HO2]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[124] += dqdci; // dwdot[N2]/d[OH]
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[143] -= dqdci; // dwdot[N2O]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[186] += dqdci; // dwdot[N2]/d[HO2]
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[N2O]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[593] -= dqdci; // dwdot[OH]/d[N2O]
  J[595] += dqdci; // dwdot[HO2]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 205: N2O + NO <=> N2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[19];
  k_f = 0.53 * exp(2.2 * logT - (23288.8672934424) * invT);
  dlnkfdT = 2.2 * invT + (23288.8672934424) * invT2;
  // reverse
  phi_r = sc[0] * sc[20];
  Kc = exp(-g_RT[0] + g_RT[18] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[19]) + (h_RT[0] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[18] -= q; // NO
  wdot[19] -= q; // N2O
  wdot[20] += q; // NO2
  // d()/d[N2]
  dqdci = -k_r * sc[20];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[18] -= dqdci; // dwdot[NO]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  J[20] += dqdci; // dwdot[NO2]/d[N2]
  // d()/d[NO]
  dqdci = +k_f * sc[19];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[576] -= dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci; // dwdot[N2O]/d[NO]
  J[578] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[18];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[607] -= dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  J[609] += dqdci; // dwdot[NO2]/d[N2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[0];
  J[620] += dqdci; // dwdot[N2]/d[NO2]
  J[638] -= dqdci; // dwdot[NO]/d[NO2]
  J[639] -= dqdci; // dwdot[N2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[948] -= dqdT; // dwdot[NO]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT

  // reaction 206: N + N2O <=> N2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 10000000 * exp(-(9998.91514953978) * invT);
  dlnkfdT = (9998.91514953978) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[9] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // N2
  wdot[9] -= q;  // N
  wdot[18] += q; // NO
  wdot[19] -= q; // N2O
  // d()/d[N2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[N2]/d[N2]
  J[9] -= dqdci;  // dwdot[N]/d[N2]
  J[18] += dqdci; // dwdot[NO]/d[N2]
  J[19] -= dqdci; // dwdot[N2O]/d[N2]
  // d()/d[N]
  dqdci = +k_f * sc[19];
  J[279] += dqdci; // dwdot[N2]/d[N]
  J[288] -= dqdci; // dwdot[N]/d[N]
  J[297] += dqdci; // dwdot[NO]/d[N]
  J[298] -= dqdci; // dwdot[N2O]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[558] += dqdci; // dwdot[N2]/d[NO]
  J[567] -= dqdci; // dwdot[N]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[577] -= dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[9];
  J[589] += dqdci; // dwdot[N2]/d[N2O]
  J[598] -= dqdci; // dwdot[N]/d[N2O]
  J[607] += dqdci; // dwdot[NO]/d[N2O]
  J[608] -= dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[930] += dqdT; // dwdot[N2]/dT
  J[939] -= dqdT; // dwdot[N]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[949] -= dqdT; // dwdot[N2O]/dT

  // reaction 208: H + H2NO <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 480 * exp(1.5 * logT - (784.917355322202) * invT);
  dlnkfdT = 1.5 * invT + (784.917355322202) * invT2;
  // reverse
  phi_r = sc[2] * sc[21];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[2] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[53] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[83] += dqdci; // dwdot[HNO]/d[H2]
  J[84] -= dqdci; // dwdot[H2NO]/d[H2]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[653] += dqdci; // dwdot[H2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[684] += dqdci; // dwdot[H2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 209: H + H2NO <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[11] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[11] += q; // NH2
  wdot[22] -= q; // H2NO
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[NH2]/d[H]
  J[53] -= dqdci; // dwdot[H2NO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[135] += dqdci; // dwdot[NH2]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[342] -= dqdci; // dwdot[H]/d[NH2]
  J[345] += dqdci; // dwdot[OH]/d[NH2]
  J[352] += dqdci; // dwdot[NH2]/d[NH2]
  J[363] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[H2NO]
  dqdci = +k_f * sc[1];
  J[683] -= dqdci; // dwdot[H]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[693] += dqdci; // dwdot[NH2]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[941] += dqdT; // dwdot[NH2]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 210: H2NO + O <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 330 * exp(1.5 * logT - (244.965872913738) * invT);
  dlnkfdT = 1.5 * invT + (244.965872913738) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[114] += dqdci; // dwdot[HNO]/d[O]
  J[115] -= dqdci; // dwdot[H2NO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[654] -= dqdci; // dwdot[O]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[3];
  J[685] -= dqdci; // dwdot[O]/d[H2NO]
  J[686] += dqdci; // dwdot[OH]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 211: H2NO + OH <=> H2O + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.4 * exp(2 * logT - (599.934908972387) * invT);
  dlnkfdT = 2 * invT + (599.934908972387) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[146] -= dqdci; // dwdot[H2NO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[HNO]/d[H2O]
  J[177] -= dqdci; // dwdot[H2NO]/d[H2O]
  // d()/d[HNO]
  dqdci = -k_r * sc[5];
  J[655] -= dqdci; // dwdot[OH]/d[HNO]
  J[656] += dqdci; // dwdot[H2O]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[4];
  J[686] -= dqdci; // dwdot[OH]/d[H2NO]
  J[687] += dqdci; // dwdot[H2O]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 212: H2NO + NH2 <=> HNO + NH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 1.8 * exp(1.94 * logT - (-291.865666166737) * invT);
  dlnkfdT = 1.94 * invT + (-291.865666166737) * invT2;
  // reverse
  phi_r = sc[12] * sc[21];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[12] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[NH2]
  dqdci = +k_f * sc[22];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[362] += dqdci; // dwdot[HNO]/d[NH2]
  J[363] -= dqdci; // dwdot[H2NO]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[21];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[393] += dqdci; // dwdot[HNO]/d[NH3]
  J[394] -= dqdci; // dwdot[H2NO]/d[NH3]
  // d()/d[HNO]
  dqdci = -k_r * sc[12];
  J[662] -= dqdci; // dwdot[NH2]/d[HNO]
  J[663] += dqdci; // dwdot[NH3]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[11];
  J[693] -= dqdci; // dwdot[NH2]/d[H2NO]
  J[694] += dqdci; // dwdot[NH3]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 213: H2NO + HO2 <=> H2O2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[22];
  k_f = 0.029 * exp(2.69 * logT - (-805.146665287552) * invT);
  dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[22]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[193] += dqdci; // dwdot[H2O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[208] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[223] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[224] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[238] += dqdci; // dwdot[HNO]/d[H2O2]
  J[239] -= dqdci; // dwdot[H2NO]/d[H2O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[7];
  J[657] -= dqdci; // dwdot[HO2]/d[HNO]
  J[658] += dqdci; // dwdot[H2O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[6];
  J[688] -= dqdci; // dwdot[HO2]/d[H2NO]
  J[689] += dqdci; // dwdot[H2O2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[937] += dqdT; // dwdot[H2O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 214: H2NO + O2 <=> HNO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[22];
  k_f = 0.00023 * exp(2.994 * logT - (8303.07498577788) * invT);
  dlnkfdT = 2.994 * invT + (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[22]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[194] -= dqdci; // dwdot[O2]/d[HO2]
  J[207] += dqdci; // dwdot[HNO]/d[HO2]
  J[208] -= dqdci; // dwdot[H2NO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[254] += dqdci; // dwdot[HO2]/d[O2]
  J[256] -= dqdci; // dwdot[O2]/d[O2]
  J[269] += dqdci; // dwdot[HNO]/d[O2]
  J[270] -= dqdci; // dwdot[H2NO]/d[O2]
  // d()/d[HNO]
  dqdci = -k_r * sc[6];
  J[657] += dqdci; // dwdot[HO2]/d[HNO]
  J[659] -= dqdci; // dwdot[O2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[8];
  J[688] += dqdci; // dwdot[HO2]/d[H2NO]
  J[690] -= dqdci; // dwdot[O2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[938] -= dqdT; // dwdot[O2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT

  // reaction 215: H2NO + NO <=> 2 HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[22];
  k_f = 0.02 * exp(2 * logT - (6541.81665546136) * invT);
  dlnkfdT = 2 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = (sc[21] * sc[21]);
  Kc = exp(g_RT[18] - 2.000000 * g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[22]) + (2.000000 * h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] -= q;     // NO
  wdot[21] += 2 * q; // HNO
  wdot[22] -= q;     // H2NO
  // d()/d[NO]
  dqdci = +k_f * sc[22];
  J[576] -= dqdci;     // dwdot[NO]/d[NO]
  J[579] += 2 * dqdci; // dwdot[HNO]/d[NO]
  J[580] -= dqdci;     // dwdot[H2NO]/d[NO]
  // d()/d[HNO]
  dqdci = -k_r * 2.000000 * sc[21];
  J[669] -= dqdci;     // dwdot[NO]/d[HNO]
  J[672] += 2 * dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci;     // dwdot[H2NO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[18];
  J[700] -= dqdci;     // dwdot[NO]/d[H2NO]
  J[703] += 2 * dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci;     // dwdot[H2NO]/d[H2NO]
  // d()/dT
  J[948] -= dqdT;     // dwdot[NO]/dT
  J[951] += 2 * dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT;     // dwdot[H2NO]/dT

  // reaction 216: H2NO + NO2 <=> HNO + HONO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[22];
  k_f = 600000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[21] * sc[25];
  Kc = exp(g_RT[20] - g_RT[21] + g_RT[22] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[22]) + (h_RT[21] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[20] -= q; // NO2
  wdot[21] += q; // HNO
  wdot[22] -= q; // H2NO
  wdot[25] += q; // HONO
  // d()/d[NO2]
  dqdci = +k_f * sc[22];
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[641] += dqdci; // dwdot[HNO]/d[NO2]
  J[642] -= dqdci; // dwdot[H2NO]/d[NO2]
  J[645] += dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HNO]
  dqdci = -k_r * sc[25];
  J[671] -= dqdci; // dwdot[NO2]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[673] -= dqdci; // dwdot[H2NO]/d[HNO]
  J[676] += dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[H2NO]
  dqdci = +k_f * sc[20];
  J[702] -= dqdci; // dwdot[NO2]/d[H2NO]
  J[703] += dqdci; // dwdot[HNO]/d[H2NO]
  J[704] -= dqdci; // dwdot[H2NO]/d[H2NO]
  J[707] += dqdci; // dwdot[HONO]/d[H2NO]
  // d()/d[HONO]
  dqdci = -k_r * sc[21];
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[797] -= dqdci; // dwdot[H2NO]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[952] -= dqdT; // dwdot[H2NO]/dT
  J[955] += dqdT; // dwdot[HONO]/dT

  // reaction 217: HONO + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 12000000 * exp(-(3019.29999482832) * invT);
  dlnkfdT = (3019.29999482832) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[118] -= dqdci; // dwdot[HONO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[3];
  J[778] -= dqdci; // dwdot[O]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 218: H + HONO <=> HNO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 56000 * exp(0.9 * logT - (2516.0833290236) * invT);
  dlnkfdT = 0.9 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[21] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[21] += q; // HNO
  wdot[25] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[52] += dqdci; // dwdot[HNO]/d[H]
  J[56] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[145] += dqdci; // dwdot[HNO]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[HNO]
  dqdci = -k_r * sc[4];
  J[652] -= dqdci; // dwdot[H]/d[HNO]
  J[655] += dqdci; // dwdot[OH]/d[HNO]
  J[672] += dqdci; // dwdot[HNO]/d[HNO]
  J[676] -= dqdci; // dwdot[HONO]/d[HNO]
  // d()/d[HONO]
  dqdci = +k_f * sc[1];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[796] += dqdci; // dwdot[HNO]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[951] += dqdT; // dwdot[HNO]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 219: H + HONO <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 8.1 * exp(1.9 * logT - (1937.38416334817) * invT);
  dlnkfdT = 1.9 * invT + (1937.38416334817) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[18] += q; // NO
  wdot[25] -= q; // HONO
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[49] += dqdci; // dwdot[NO]/d[H]
  J[56] -= dqdci; // dwdot[HONO]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[173] += dqdci; // dwdot[NO]/d[H2O]
  J[180] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[559] -= dqdci; // dwdot[H]/d[NO]
  J[563] += dqdci; // dwdot[H2O]/d[NO]
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[583] -= dqdci; // dwdot[HONO]/d[NO]
  // d()/d[HONO]
  dqdci = +k_f * sc[1];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[780] += dqdci; // dwdot[H2O]/d[HONO]
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 220: HONO + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[25];
  k_f = 1700000 * exp(-(-261.672666218454) * invT);
  dlnkfdT = (-261.672666218454) * invT2;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[25]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[25] -= q; // HONO
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[149] -= dqdci; // dwdot[HONO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[180] -= dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[4];
  J[779] -= dqdci; // dwdot[OH]/d[HONO]
  J[780] += dqdci; // dwdot[H2O]/d[HONO]
  J[795] += dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT

  // reaction 221: HONO + NO2 <=> HNO3 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[25];
  k_f = 200000 * exp(-(16455.1849718143) * invT);
  dlnkfdT = (16455.1849718143) * invT2;
  // reverse
  phi_r = sc[18] * sc[29];
  Kc = exp(-g_RT[18] + g_RT[20] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[25]) + (h_RT[18] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // NO
  wdot[20] -= q; // NO2
  wdot[25] -= q; // HONO
  wdot[29] += q; // HNO3
  // d()/d[NO]
  dqdci = -k_r * sc[29];
  J[576] += dqdci; // dwdot[NO]/d[NO]
  J[578] -= dqdci; // dwdot[NO2]/d[NO]
  J[583] -= dqdci; // dwdot[HONO]/d[NO]
  J[587] += dqdci; // dwdot[HNO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[25];
  J[638] += dqdci; // dwdot[NO]/d[NO2]
  J[640] -= dqdci; // dwdot[NO2]/d[NO2]
  J[645] -= dqdci; // dwdot[HONO]/d[NO2]
  J[649] += dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * sc[20];
  J[793] += dqdci; // dwdot[NO]/d[HONO]
  J[795] -= dqdci; // dwdot[NO2]/d[HONO]
  J[800] -= dqdci; // dwdot[HONO]/d[HONO]
  J[804] += dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = -k_r * sc[18];
  J[917] += dqdci; // dwdot[NO]/d[HNO3]
  J[919] -= dqdci; // dwdot[NO2]/d[HNO3]
  J[924] -= dqdci; // dwdot[HONO]/d[HNO3]
  J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[948] += dqdT; // dwdot[NO]/dT
  J[950] -= dqdT; // dwdot[NO2]/dT
  J[955] -= dqdT; // dwdot[HONO]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 222: 2 HONO <=> H2O + NO + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[25] * sc[25]);
  k_f = 3.5e-07 * exp(3.64 * logT - (6109.0503228693) * invT);
  dlnkfdT = 3.64 * invT + (6109.0503228693) * invT2;
  // reverse
  phi_r = sc[5] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[5] - g_RT[18] - g_RT[20] + 2.000000 * g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[25]) + (h_RT[5] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;      // H2O
  wdot[18] += q;     // NO
  wdot[20] += q;     // NO2
  wdot[25] -= 2 * q; // HONO
  // d()/d[H2O]
  dqdci = -k_r * sc[18] * sc[20];
  J[160] += dqdci;      // dwdot[H2O]/d[H2O]
  J[173] += dqdci;      // dwdot[NO]/d[H2O]
  J[175] += dqdci;      // dwdot[NO2]/d[H2O]
  J[180] += -2 * dqdci; // dwdot[HONO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5] * sc[20];
  J[563] += dqdci;      // dwdot[H2O]/d[NO]
  J[576] += dqdci;      // dwdot[NO]/d[NO]
  J[578] += dqdci;      // dwdot[NO2]/d[NO]
  J[583] += -2 * dqdci; // dwdot[HONO]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[5] * sc[18];
  J[625] += dqdci;      // dwdot[H2O]/d[NO2]
  J[638] += dqdci;      // dwdot[NO]/d[NO2]
  J[640] += dqdci;      // dwdot[NO2]/d[NO2]
  J[645] += -2 * dqdci; // dwdot[HONO]/d[NO2]
  // d()/d[HONO]
  dqdci = +k_f * 2.000000 * sc[25];
  J[780] += dqdci;      // dwdot[H2O]/d[HONO]
  J[793] += dqdci;      // dwdot[NO]/d[HONO]
  J[795] += dqdci;      // dwdot[NO2]/d[HONO]
  J[800] += -2 * dqdci; // dwdot[HONO]/d[HONO]
  // d()/dT
  J[935] += dqdT;      // dwdot[H2O]/dT
  J[948] += dqdT;      // dwdot[NO]/dT
  J[950] += dqdT;      // dwdot[NO2]/dT
  J[955] += -2 * dqdT; // dwdot[HONO]/dT

  // reaction 224: HNO2 + O <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[26];
  k_f = 170 * exp(1.5 * logT - (1006.43333160944) * invT);
  dlnkfdT = 1.5 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[26]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[26] -= q; // HNO2
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[97] += dqdci;  // dwdot[OH]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[119] -= dqdci; // dwdot[HNO2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[127] -= dqdci; // dwdot[O]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[646] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[3];
  J[809] -= dqdci; // dwdot[O]/d[HNO2]
  J[810] += dqdci; // dwdot[OH]/d[HNO2]
  J[826] += dqdci; // dwdot[NO2]/d[HNO2]
  J[832] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 225: HNO2 + OH <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[26] -= q; // HNO2
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[150] -= dqdci; // dwdot[HNO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[181] -= dqdci; // dwdot[HNO2]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[646] -= dqdci; // dwdot[HNO2]/d[NO2]
  // d()/d[HNO2]
  dqdci = +k_f * sc[4];
  J[810] -= dqdci; // dwdot[OH]/d[HNO2]
  J[811] += dqdci; // dwdot[H2O]/d[HNO2]
  J[826] += dqdci; // dwdot[NO2]/d[HNO2]
  J[832] -= dqdci; // dwdot[HNO2]/d[HNO2]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[956] -= dqdT; // dwdot[HNO2]/dT

  // reaction 227: 2 NO2 <=> NO + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[20] * sc[20]);
  k_f = 9600 * exp(0.7 * logT - (10517.2283153186) * invT);
  dlnkfdT = 0.7 * invT + (10517.2283153186) * invT2;
  // reverse
  phi_r = sc[18] * sc[28];
  Kc = exp(-g_RT[18] + 2.000000 * g_RT[20] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[20]) + (h_RT[18] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q;     // NO
  wdot[20] -= 2 * q; // NO2
  wdot[28] += q;     // NO3
  // d()/d[NO]
  dqdci = -k_r * sc[28];
  J[576] += dqdci;      // dwdot[NO]/d[NO]
  J[578] += -2 * dqdci; // dwdot[NO2]/d[NO]
  J[586] += dqdci;      // dwdot[NO3]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * 2.000000 * sc[20];
  J[638] += dqdci;      // dwdot[NO]/d[NO2]
  J[640] += -2 * dqdci; // dwdot[NO2]/d[NO2]
  J[648] += dqdci;      // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = -k_r * sc[18];
  J[886] += dqdci;      // dwdot[NO]/d[NO3]
  J[888] += -2 * dqdci; // dwdot[NO2]/d[NO3]
  J[896] += dqdci;      // dwdot[NO3]/d[NO3]
  // d()/dT
  J[948] += dqdT;      // dwdot[NO]/dT
  J[950] += -2 * dqdT; // dwdot[NO2]/dT
  J[958] += dqdT;      // dwdot[NO3]/dT

  // reaction 228: H + NO3 <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[20];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[4] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[51] += dqdci; // dwdot[NO2]/d[H]
  J[59] -= dqdci; // dwdot[NO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[1];
  J[869] -= dqdci; // dwdot[H]/d[NO3]
  J[872] += dqdci; // dwdot[OH]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 229: NO3 + O <=> NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[28];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[20];
  Kc = exp(g_RT[3] - g_RT[8] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[28]) + (h_RT[8] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O
  wdot[8] += q;  // O2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[96] -= dqdci;  // dwdot[O]/d[O]
  J[101] += dqdci; // dwdot[O2]/d[O]
  J[113] += dqdci; // dwdot[NO2]/d[O]
  J[121] -= dqdci; // dwdot[NO3]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[20];
  J[251] -= dqdci; // dwdot[O]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[8];
  J[623] -= dqdci; // dwdot[O]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[3];
  J[871] -= dqdci; // dwdot[O]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[933] -= dqdT; // dwdot[O]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 230: NO3 + OH <=> HO2 + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[20];
  Kc = exp(g_RT[4] - g_RT[6] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[6] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[130] += dqdci; // dwdot[HO2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[20];
  J[190] -= dqdci; // dwdot[OH]/d[HO2]
  J[192] += dqdci; // dwdot[HO2]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[NO2]
  dqdci = -k_r * sc[6];
  J[624] -= dqdci; // dwdot[OH]/d[NO2]
  J[626] += dqdci; // dwdot[HO2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[4];
  J[872] -= dqdci; // dwdot[OH]/d[NO3]
  J[874] += dqdci; // dwdot[HO2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[936] += dqdT; // dwdot[HO2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 231: HO2 + NO3 <=> NO2 + O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 1500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[8] * sc[20];
  Kc = refC * exp(-g_RT[4] + g_RT[6] - g_RT[8] - g_RT[20] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[6] + h_RT[28]) + (h_RT[4] + h_RT[8] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[20] += q; // NO2
  wdot[28] -= q; // NO3
  // d()/d[OH]
  dqdci = -k_r * sc[8] * sc[20];
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[130] -= dqdci; // dwdot[HO2]/d[OH]
  J[132] += dqdci; // dwdot[O2]/d[OH]
  J[144] += dqdci; // dwdot[NO2]/d[OH]
  J[152] -= dqdci; // dwdot[NO3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[190] += dqdci; // dwdot[OH]/d[HO2]
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[206] += dqdci; // dwdot[NO2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4] * sc[20];
  J[252] += dqdci; // dwdot[OH]/d[O2]
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[268] += dqdci; // dwdot[NO2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[4] * sc[8];
  J[624] += dqdci; // dwdot[OH]/d[NO2]
  J[626] -= dqdci; // dwdot[HO2]/d[NO2]
  J[628] += dqdci; // dwdot[O2]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[648] -= dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[872] += dqdci; // dwdot[OH]/d[NO3]
  J[874] -= dqdci; // dwdot[HO2]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[888] += dqdci; // dwdot[NO2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT

  // reaction 233: 2 NO3 <=> 2 NO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[28] * sc[28]);
  k_f = 512000 * exp(-(2450.66516246898) * invT);
  dlnkfdT = (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[8] * (sc[20] * sc[20]);
  Kc = refC * exp(-g_RT[8] - 2.000000 * g_RT[20] + 2.000000 * g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[28]) + (h_RT[8] + 2.000000 * h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;      // O2
  wdot[20] += 2 * q; // NO2
  wdot[28] -= 2 * q; // NO3
  // d()/d[O2]
  dqdci = -k_r * sc[20] * sc[20];
  J[256] += dqdci;      // dwdot[O2]/d[O2]
  J[268] += 2 * dqdci;  // dwdot[NO2]/d[O2]
  J[276] += -2 * dqdci; // dwdot[NO3]/d[O2]
  // d()/d[NO2]
  dqdci = -k_r * sc[8] * 2.000000 * sc[20];
  J[628] += dqdci;      // dwdot[O2]/d[NO2]
  J[640] += 2 * dqdci;  // dwdot[NO2]/d[NO2]
  J[648] += -2 * dqdci; // dwdot[NO3]/d[NO2]
  // d()/d[NO3]
  dqdci = +k_f * 2.000000 * sc[28];
  J[876] += dqdci;      // dwdot[O2]/d[NO3]
  J[888] += 2 * dqdci;  // dwdot[NO2]/d[NO3]
  J[896] += -2 * dqdci; // dwdot[NO3]/d[NO3]
  // d()/dT
  J[938] += dqdT;      // dwdot[O2]/dT
  J[950] += 2 * dqdT;  // dwdot[NO2]/dT
  J[958] += -2 * dqdT; // dwdot[NO3]/dT

  // reaction 234: HO2 + NO3 <=> HNO3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[28];
  k_f = 555000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[8] * sc[29];
  Kc = exp(g_RT[6] - g_RT[8] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[28]) + (h_RT[8] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[28] -= q; // NO3
  wdot[29] += q; // HNO3
  // d()/d[HO2]
  dqdci = +k_f * sc[28];
  J[192] -= dqdci; // dwdot[HO2]/d[HO2]
  J[194] += dqdci; // dwdot[O2]/d[HO2]
  J[214] -= dqdci; // dwdot[NO3]/d[HO2]
  J[215] += dqdci; // dwdot[HNO3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[29];
  J[254] -= dqdci; // dwdot[HO2]/d[O2]
  J[256] += dqdci; // dwdot[O2]/d[O2]
  J[276] -= dqdci; // dwdot[NO3]/d[O2]
  J[277] += dqdci; // dwdot[HNO3]/d[O2]
  // d()/d[NO3]
  dqdci = +k_f * sc[6];
  J[874] -= dqdci; // dwdot[HO2]/d[NO3]
  J[876] += dqdci; // dwdot[O2]/d[NO3]
  J[896] -= dqdci; // dwdot[NO3]/d[NO3]
  J[897] += dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = -k_r * sc[8];
  J[905] -= dqdci; // dwdot[HO2]/d[HNO3]
  J[907] += dqdci; // dwdot[O2]/d[HNO3]
  J[927] -= dqdci; // dwdot[NO3]/d[HNO3]
  J[928] += dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[936] -= dqdT; // dwdot[HO2]/dT
  J[938] += dqdT; // dwdot[O2]/dT
  J[958] -= dqdT; // dwdot[NO3]/dT
  J[959] += dqdT; // dwdot[HNO3]/dT

  // reaction 237: H + HNO3 <=> H2 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 556 * exp(1.53 * logT - (8252.7533191974) * invT);
  dlnkfdT = 1.53 * invT + (8252.7533191974) * invT2;
  // reverse
  phi_r = sc[2] * sc[28];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[2] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[2] += q;  // H2
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[59] += dqdci; // dwdot[NO3]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[63] -= dqdci; // dwdot[H]/d[H2]
  J[64] += dqdci; // dwdot[H2]/d[H2]
  J[90] += dqdci; // dwdot[NO3]/d[H2]
  J[91] -= dqdci; // dwdot[HNO3]/d[H2]
  // d()/d[NO3]
  dqdci = -k_r * sc[2];
  J[869] -= dqdci; // dwdot[H]/d[NO3]
  J[870] += dqdci; // dwdot[H2]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[901] += dqdci; // dwdot[H2]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[932] += dqdT; // dwdot[H2]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 238: H + HNO3 <=> H2O + NO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 6.08e-05 * exp(3.29 * logT - (3165.23282791169) * invT);
  dlnkfdT = 3.29 * invT + (3165.23282791169) * invT2;
  // reverse
  phi_r = sc[5] * sc[20];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[20] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[5] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[20] += q; // NO2
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[H2O]/d[H]
  J[51] += dqdci; // dwdot[NO2]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[156] -= dqdci; // dwdot[H]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[NO2]/d[H2O]
  J[184] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO2]
  dqdci = -k_r * sc[5];
  J[621] -= dqdci; // dwdot[H]/d[NO2]
  J[625] += dqdci; // dwdot[H2O]/d[NO2]
  J[640] += dqdci; // dwdot[NO2]/d[NO2]
  J[649] -= dqdci; // dwdot[HNO3]/d[NO2]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[904] += dqdci; // dwdot[H2O]/d[HNO3]
  J[919] += dqdci; // dwdot[NO2]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[950] += dqdT; // dwdot[NO2]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 239: H + HNO3 <=> HONO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 0.382 * exp(2.3 * logT - (3512.45232731694) * invT);
  dlnkfdT = 2.3 * invT + (3512.45232731694) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[25] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[25] += q; // HONO
  wdot[29] -= q; // HNO3
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[32] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[OH]/d[H]
  J[56] += dqdci; // dwdot[HONO]/d[H]
  J[60] -= dqdci; // dwdot[HNO3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[125] -= dqdci; // dwdot[H]/d[OH]
  J[128] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[HONO]/d[OH]
  J[153] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[HONO]
  dqdci = -k_r * sc[4];
  J[776] -= dqdci; // dwdot[H]/d[HONO]
  J[779] += dqdci; // dwdot[OH]/d[HONO]
  J[800] += dqdci; // dwdot[HONO]/d[HONO]
  J[804] -= dqdci; // dwdot[HNO3]/d[HONO]
  // d()/d[HNO3]
  dqdci = +k_f * sc[1];
  J[900] -= dqdci; // dwdot[H]/d[HNO3]
  J[903] += dqdci; // dwdot[OH]/d[HNO3]
  J[924] += dqdci; // dwdot[HONO]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[931] -= dqdT; // dwdot[H]/dT
  J[934] += dqdT; // dwdot[OH]/dT
  J[955] += dqdT; // dwdot[HONO]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 240: HNO3 + OH <=> H2O + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[29];
  k_f = 10300 * exp(-(-623.988665597852) * invT);
  dlnkfdT = (-623.988665597852) * invT2;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[29]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[128] -= dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[H2O]/d[OH]
  J[152] += dqdci; // dwdot[NO3]/d[OH]
  J[153] -= dqdci; // dwdot[HNO3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[159] -= dqdci; // dwdot[OH]/d[H2O]
  J[160] += dqdci; // dwdot[H2O]/d[H2O]
  J[183] += dqdci; // dwdot[NO3]/d[H2O]
  J[184] -= dqdci; // dwdot[HNO3]/d[H2O]
  // d()/d[NO3]
  dqdci = -k_r * sc[5];
  J[872] -= dqdci; // dwdot[OH]/d[NO3]
  J[873] += dqdci; // dwdot[H2O]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[4];
  J[903] -= dqdci; // dwdot[OH]/d[HNO3]
  J[904] += dqdci; // dwdot[H2O]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[934] -= dqdT; // dwdot[OH]/dT
  J[935] += dqdT; // dwdot[H2O]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 241: HNO3 + NH2 <=> NH3 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 1.03e+15 * exp(-3.85 * logT - (96.1143831687015) * invT);
  dlnkfdT = -3.85 * invT + (96.1143831687015) * invT2;
  // reverse
  phi_r = sc[12] * sc[28];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[12] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[NH2]
  dqdci = +k_f * sc[29];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[369] += dqdci; // dwdot[NO3]/d[NH2]
  J[370] -= dqdci; // dwdot[HNO3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[28];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[400] += dqdci; // dwdot[NO3]/d[NH3]
  J[401] -= dqdci; // dwdot[HNO3]/d[NH3]
  // d()/d[NO3]
  dqdci = -k_r * sc[12];
  J[879] -= dqdci; // dwdot[NH2]/d[NO3]
  J[880] += dqdci; // dwdot[NH3]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[11];
  J[910] -= dqdci; // dwdot[NH2]/d[HNO3]
  J[911] += dqdci; // dwdot[NH3]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  // reaction 242: HNO3 + NH2 <=> NH3 + NO3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 3.08e-05 * exp(3.22 * logT - (-69.947116546856) * invT);
  dlnkfdT = 3.22 * invT + (-69.947116546856) * invT2;
  // reverse
  phi_r = sc[12] * sc[28];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[12] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // NH2
  wdot[12] += q; // NH3
  wdot[28] += q; // NO3
  wdot[29] -= q; // HNO3
  // d()/d[NH2]
  dqdci = +k_f * sc[29];
  J[352] -= dqdci; // dwdot[NH2]/d[NH2]
  J[353] += dqdci; // dwdot[NH3]/d[NH2]
  J[369] += dqdci; // dwdot[NO3]/d[NH2]
  J[370] -= dqdci; // dwdot[HNO3]/d[NH2]
  // d()/d[NH3]
  dqdci = -k_r * sc[28];
  J[383] -= dqdci; // dwdot[NH2]/d[NH3]
  J[384] += dqdci; // dwdot[NH3]/d[NH3]
  J[400] += dqdci; // dwdot[NO3]/d[NH3]
  J[401] -= dqdci; // dwdot[HNO3]/d[NH3]
  // d()/d[NO3]
  dqdci = -k_r * sc[12];
  J[879] -= dqdci; // dwdot[NH2]/d[NO3]
  J[880] += dqdci; // dwdot[NH3]/d[NO3]
  J[896] += dqdci; // dwdot[NO3]/d[NO3]
  J[897] -= dqdci; // dwdot[HNO3]/d[NO3]
  // d()/d[HNO3]
  dqdci = +k_f * sc[11];
  J[910] -= dqdci; // dwdot[NH2]/d[HNO3]
  J[911] += dqdci; // dwdot[NH3]/d[HNO3]
  J[927] += dqdci; // dwdot[NO3]/d[HNO3]
  J[928] -= dqdci; // dwdot[HNO3]/d[HNO3]
  // d()/dT
  J[941] -= dqdT; // dwdot[NH2]/dT
  J[942] += dqdT; // dwdot[NH3]/dT
  J[958] += dqdT; // dwdot[NO3]/dT
  J[959] -= dqdT; // dwdot[HNO3]/dT

  amrex::Real c_R[30], dcRdT[30], e_RT[30];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 30; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[930 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 30; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 30; ++m) {
      dehmixdc += eh_RT[m] * J[k * 31 + m];
    }
    J[k * 31 + 30] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[960] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[30];

  for (int k = 0; k < 30; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 30; k++) {
    J[930 + k] *= 1.e-6;
    J[k * 31 + 30] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 122;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 18150;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 30;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.80140000E+01;
  WT[1] = 1.00800000E+00;
  WT[2] = 2.01600000E+00;
  WT[3] = 1.59990000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 1.80150000E+01;
  WT[6] = 3.30060000E+01;
  WT[7] = 3.40140000E+01;
  WT[8] = 3.19980000E+01;
  WT[9] = 1.40070000E+01;
  WT[10] = 1.50150000E+01;
  WT[11] = 1.60230000E+01;
  WT[12] = 1.70310000E+01;
  WT[13] = 2.90220000E+01;
  WT[14] = 3.00300000E+01;
  WT[15] = 3.10380000E+01;
  WT[16] = 3.20460000E+01;
  WT[17] = 3.00300000E+01;
  WT[18] = 3.00060000E+01;
  WT[19] = 4.40130000E+01;
  WT[20] = 4.60050000E+01;
  WT[21] = 3.10140000E+01;
  WT[22] = 3.20220000E+01;
  WT[23] = 3.20220000E+01;
  WT[24] = 3.30300000E+01;
  WT[25] = 4.70130000E+01;
  WT[26] = 4.70130000E+01;
  WT[27] = 3.10140000E+01;
  WT[28] = 6.20040000E+01;
  WT[29] = 6.30120000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 9.75300000E+01;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 3.80000000E+01;
  EPS[3] = 8.00000000E+01;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 5.72400000E+02;
  EPS[6] = 1.07400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 1.07400000E+02;
  EPS[9] = 7.14000000E+01;
  EPS[10] = 8.00000000E+01;
  EPS[11] = 8.00000000E+01;
  EPS[12] = 4.81000000E+02;
  EPS[13] = 7.14000000E+01;
  EPS[14] = 7.14000000E+01;
  EPS[15] = 2.00000000E+02;
  EPS[16] = 2.05000000E+02;
  EPS[17] = 7.14000000E+01;
  EPS[18] = 9.75300000E+01;
  EPS[19] = 2.32400000E+02;
  EPS[20] = 2.00000000E+02;
  EPS[21] = 1.16700000E+02;
  EPS[22] = 1.16700000E+02;
  EPS[23] = 1.16700000E+02;
  EPS[24] = 1.16700000E+02;
  EPS[25] = 2.32400000E+02;
  EPS[26] = 2.32400000E+02;
  EPS[27] = 1.16700000E+02;
  EPS[28] = 3.78400000E+02;
  EPS[29] = 3.78400000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 3.62100000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 2.92000000E+00;
  SIG[3] = 2.75000000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 2.60500000E+00;
  SIG[6] = 3.45800000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 3.45800000E+00;
  SIG[9] = 3.29800000E+00;
  SIG[10] = 2.65000000E+00;
  SIG[11] = 2.65000000E+00;
  SIG[12] = 2.92000000E+00;
  SIG[13] = 3.79800000E+00;
  SIG[14] = 3.79800000E+00;
  SIG[15] = 3.90000000E+00;
  SIG[16] = 4.23000000E+00;
  SIG[17] = 3.79800000E+00;
  SIG[18] = 3.62100000E+00;
  SIG[19] = 3.82800000E+00;
  SIG[20] = 3.50000000E+00;
  SIG[21] = 3.49200000E+00;
  SIG[22] = 3.49200000E+00;
  SIG[23] = 3.49200000E+00;
  SIG[24] = 3.49200000E+00;
  SIG[25] = 3.82800000E+00;
  SIG[26] = 3.82800000E+00;
  SIG[27] = 3.49200000E+00;
  SIG[28] = 4.17500000E+00;
  SIG[29] = 4.17500000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 1.84400000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 1.47000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 1.76000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 7.90000000E-01;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 1.60000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 2.26000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 4.26000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 1.76000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 4.00000000E+00;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 2.80000000E+02;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 4.00000000E+00;
  ZROT[6] = 1.00000000E+00;
  ZROT[7] = 3.80000000E+00;
  ZROT[8] = 3.80000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 4.00000000E+00;
  ZROT[11] = 4.00000000E+00;
  ZROT[12] = 1.00000000E+01;
  ZROT[13] = 1.00000000E+00;
  ZROT[14] = 1.00000000E+00;
  ZROT[15] = 1.00000000E+00;
  ZROT[16] = 1.50000000E+00;
  ZROT[17] = 1.00000000E+00;
  ZROT[18] = 4.00000000E+00;
  ZROT[19] = 1.00000000E+00;
  ZROT[20] = 1.00000000E+00;
  ZROT[21] = 1.00000000E+00;
  ZROT[22] = 1.00000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.00000000E+00;
  ZROT[25] = 1.00000000E+00;
  ZROT[26] = 1.00000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 1.00000000E+00;
  ZROT[29] = 1.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 0;
  NLIN[2] = 1;
  NLIN[3] = 0;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 1;
  NLIN[9] = 0;
  NLIN[10] = 1;
  NLIN[11] = 2;
  NLIN[12] = 2;
  NLIN[13] = 2;
  NLIN[14] = 2;
  NLIN[15] = 2;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 1;
  NLIN[19] = 1;
  NLIN[20] = 2;
  NLIN[21] = 2;
  NLIN[22] = 2;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.75356101E+01;
  COFETA[1] = 2.83116587E+00;
  COFETA[2] = -3.01228013E-01;
  COFETA[3] = 1.38497725E-02;
  COFETA[4] = -2.16840336E+01;
  COFETA[5] = 4.23442872E+00;
  COFETA[6] = -4.85814918E-01;
  COFETA[7] = 2.19654717E-02;
  COFETA[8] = -1.36231733E+01;
  COFETA[9] = 9.09836736E-01;
  COFETA[10] = -3.68303150E-02;
  COFETA[11] = 1.70542982E-03;
  COFETA[12] = -1.58318472E+01;
  COFETA[13] = 2.26294246E+00;
  COFETA[14] = -2.24415532E-01;
  COFETA[15] = 1.03800256E-02;
  COFETA[16] = -1.58012978E+01;
  COFETA[17] = 2.26294246E+00;
  COFETA[18] = -2.24415532E-01;
  COFETA[19] = 1.03800256E-02;
  COFETA[20] = -8.59380143E+00;
  COFETA[21] = -2.26208099E+00;
  COFETA[22] = 5.53651510E-01;
  COFETA[23] = -3.07142017E-02;
  COFETA[24] = -1.82503992E+01;
  COFETA[25] = 3.18445771E+00;
  COFETA[26] = -3.48911103E-01;
  COFETA[27] = 1.60003067E-02;
  COFETA[28] = -1.82353578E+01;
  COFETA[29] = 3.18445771E+00;
  COFETA[30] = -3.48911103E-01;
  COFETA[31] = 1.60003067E-02;
  COFETA[32] = -1.82659072E+01;
  COFETA[33] = 3.18445771E+00;
  COFETA[34] = -3.48911103E-01;
  COFETA[35] = 1.60003067E-02;
  COFETA[36] = -1.56812145E+01;
  COFETA[37] = 2.03768424E+00;
  COFETA[38] = -1.94419071E-01;
  COFETA[39] = 9.04827037E-03;
  COFETA[40] = -1.57895030E+01;
  COFETA[41] = 2.26294246E+00;
  COFETA[42] = -2.24415532E-01;
  COFETA[43] = 1.03800256E-02;
  COFETA[44] = -1.57570152E+01;
  COFETA[45] = 2.26294246E+00;
  COFETA[46] = -2.24415532E-01;
  COFETA[47] = 1.03800256E-02;
  COFETA[48] = -1.20727047E+01;
  COFETA[49] = -6.97188608E-01;
  COFETA[50] = 3.29910340E-01;
  COFETA[51] = -2.07896924E-02;
  COFETA[52] = -1.55992828E+01;
  COFETA[53] = 2.03768424E+00;
  COFETA[54] = -1.94419071E-01;
  COFETA[55] = 9.04827037E-03;
  COFETA[56] = -1.55822114E+01;
  COFETA[57] = 2.03768424E+00;
  COFETA[58] = -1.94419071E-01;
  COFETA[59] = 9.04827037E-03;
  COFETA[60] = -2.38954996E+01;
  COFETA[61] = 5.16956522E+00;
  COFETA[62] = -5.97896730E-01;
  COFETA[63] = 2.64237718E-02;
  COFETA[64] = -2.41876505E+01;
  COFETA[65] = 5.21357482E+00;
  COFETA[66] = -6.02143211E-01;
  COFETA[67] = 2.65436546E-02;
  COFETA[68] = -1.55822114E+01;
  COFETA[69] = 2.03768424E+00;
  COFETA[70] = -1.94419071E-01;
  COFETA[71] = 9.04827037E-03;
  COFETA[72] = -1.75012636E+01;
  COFETA[73] = 2.83116587E+00;
  COFETA[74] = -3.01228013E-01;
  COFETA[75] = 1.38497725E-02;
  COFETA[76] = -2.45422014E+01;
  COFETA[77] = 5.41812658E+00;
  COFETA[78] = -6.20203391E-01;
  COFETA[79] = 2.69573627E-02;
  COFETA[80] = -2.34823035E+01;
  COFETA[81] = 5.16956522E+00;
  COFETA[82] = -5.97896730E-01;
  COFETA[83] = 2.64237718E-02;
  COFETA[84] = -1.89396701E+01;
  COFETA[85] = 3.42819800E+00;
  COFETA[86] = -3.80557698E-01;
  COFETA[87] = 1.73713356E-02;
  COFETA[88] = -1.89236778E+01;
  COFETA[89] = 3.42819800E+00;
  COFETA[90] = -3.80557698E-01;
  COFETA[91] = 1.73713356E-02;
  COFETA[92] = -1.89236778E+01;
  COFETA[93] = 3.42819800E+00;
  COFETA[94] = -3.80557698E-01;
  COFETA[95] = 1.73713356E-02;
  COFETA[96] = -1.89081813E+01;
  COFETA[97] = 3.42819800E+00;
  COFETA[98] = -3.80557698E-01;
  COFETA[99] = 1.73713356E-02;
  COFETA[100] = -2.45092318E+01;
  COFETA[101] = 5.41812658E+00;
  COFETA[102] = -6.20203391E-01;
  COFETA[103] = 2.69573627E-02;
  COFETA[104] = -2.45092318E+01;
  COFETA[105] = 5.41812658E+00;
  COFETA[106] = -6.20203391E-01;
  COFETA[107] = 2.69573627E-02;
  COFETA[108] = -1.89396701E+01;
  COFETA[109] = 3.42819800E+00;
  COFETA[110] = -3.80557698E-01;
  COFETA[111] = 1.73713356E-02;
  COFETA[112] = -2.16451498E+01;
  COFETA[113] = 3.66731675E+00;
  COFETA[114] = -3.15384393E-01;
  COFETA[115] = 1.03625483E-02;
  COFETA[116] = -2.16370866E+01;
  COFETA[117] = 3.66731675E+00;
  COFETA[118] = -3.15384393E-01;
  COFETA[119] = 1.03625483E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.18728703E+01;
  COFLAM[1] = -3.01450932E+00;
  COFLAM[2] = 5.64298447E-01;
  COFLAM[3] = -2.79571788E-02;
  COFLAM[4] = -2.13415286E+00;
  COFLAM[5] = 4.23442872E+00;
  COFLAM[6] = -4.85814918E-01;
  COFLAM[7] = 2.19654717E-02;
  COFLAM[8] = 1.25828152E+00;
  COFLAM[9] = 3.08947222E+00;
  COFLAM[10] = -4.12797819E-01;
  COFLAM[11] = 2.33211098E-02;
  COFLAM[12] = 9.53475395E-01;
  COFLAM[13] = 2.26294246E+00;
  COFLAM[14] = -2.24415532E-01;
  COFLAM[15] = 1.03800256E-02;
  COFLAM[16] = 6.07807153E+00;
  COFLAM[17] = 3.63049679E-01;
  COFLAM[18] = 5.15879108E-03;
  COFLAM[19] = 2.16719996E-03;
  COFLAM[20] = 1.86744226E+01;
  COFLAM[21] = -6.72784829E+00;
  COFLAM[22] = 1.17715714E+00;
  COFLAM[23] = -5.80103337E-02;
  COFLAM[24] = -1.58050299E+00;
  COFLAM[25] = 2.68740164E+00;
  COFLAM[26] = -2.33519143E-01;
  COFLAM[27] = 9.74489161E-03;
  COFLAM[28] = 5.80528110E-01;
  COFLAM[29] = 1.57052541E+00;
  COFLAM[30] = -3.89322206E-02;
  COFLAM[31] = -9.24080417E-04;
  COFLAM[32] = 3.27544661E+00;
  COFLAM[33] = 5.99220656E-01;
  COFLAM[34] = 6.39005990E-02;
  COFLAM[35] = -4.98846995E-03;
  COFLAM[36] = 1.23707717E+00;
  COFLAM[37] = 2.03768424E+00;
  COFLAM[38] = -1.94419071E-01;
  COFLAM[39] = 9.04827037E-03;
  COFLAM[40] = 7.14184547E+00;
  COFLAM[41] = -1.64417200E-01;
  COFLAM[42] = 9.88017167E-02;
  COFLAM[43] = -3.14398603E-03;
  COFLAM[44] = 1.58237908E+01;
  COFLAM[45] = -4.24167453E+00;
  COFLAM[46] = 7.27054821E-01;
  COFLAM[47] = -3.43496695E-02;
  COFLAM[48] = 2.12162050E+01;
  COFLAM[49] = -8.46293611E+00;
  COFLAM[50] = 1.53238354E+00;
  COFLAM[51] = -8.00613704E-02;
  COFLAM[52] = 1.66188544E+01;
  COFLAM[53] = -5.44299538E+00;
  COFLAM[54] = 9.68901319E-01;
  COFLAM[55] = -4.93653354E-02;
  COFLAM[56] = 2.37162581E+01;
  COFLAM[57] = -9.10514753E+00;
  COFLAM[58] = 1.57262448E+00;
  COFLAM[59] = -8.09991903E-02;
  COFLAM[60] = -5.71187644E+00;
  COFLAM[61] = 3.43992318E+00;
  COFLAM[62] = -2.12632700E-01;
  COFLAM[63] = 3.76227296E-03;
  COFLAM[64] = -1.16149864E+01;
  COFLAM[65] = 5.82677174E+00;
  COFLAM[66] = -5.34961479E-01;
  COFLAM[67] = 1.82594907E-02;
  COFLAM[68] = 1.97366031E+01;
  COFLAM[69] = -7.30852521E+00;
  COFLAM[70] = 1.30611368E+00;
  COFLAM[71] = -6.79406784E-02;
  COFLAM[72] = 1.19782206E+01;
  COFLAM[73] = -3.18643896E+00;
  COFLAM[74] = 6.08180978E-01;
  COFLAM[75] = -3.10443173E-02;
  COFLAM[76] = -8.81191962E+00;
  COFLAM[77] = 4.91703193E+00;
  COFLAM[78] = -4.50069703E-01;
  COFLAM[79] = 1.51972624E-02;
  COFLAM[80] = -4.30806229E+00;
  COFLAM[81] = 3.04885756E+00;
  COFLAM[82] = -1.80785243E-01;
  COFLAM[83] = 2.13788933E-03;
  COFLAM[84] = 9.03519622E+00;
  COFLAM[85] = -2.25946293E+00;
  COFLAM[86] = 5.29170722E-01;
  COFLAM[87] = -2.91900812E-02;
  COFLAM[88] = 6.31872533E+00;
  COFLAM[89] = -1.25344196E+00;
  COFLAM[90] = 4.09759209E-01;
  COFLAM[91] = -2.41287791E-02;
  COFLAM[92] = -1.29488697E-01;
  COFLAM[93] = 1.59390986E+00;
  COFLAM[94] = -7.88573346E-03;
  COFLAM[95] = -3.78520223E-03;
  COFLAM[96] = -4.43669647E-01;
  COFLAM[97] = 1.73863911E+00;
  COFLAM[98] = -2.46243372E-02;
  COFLAM[99] = -2.80896715E-03;
  COFLAM[100] = -1.27979745E+01;
  COFLAM[101] = 6.61365247E+00;
  COFLAM[102] = -6.85662059E-01;
  COFLAM[103] = 2.63460372E-02;
  COFLAM[104] = -5.96512843E-02;
  COFLAM[105] = 5.33099265E-01;
  COFLAM[106] = 2.57086496E-01;
  COFLAM[107] = -2.14779893E-02;
  COFLAM[108] = 1.10547561E+01;
  COFLAM[109] = -3.14769493E+00;
  COFLAM[110] = 6.58378424E-01;
  COFLAM[111] = -3.54128740E-02;
  COFLAM[112] = -2.68130321E+01;
  COFLAM[113] = 1.19505984E+01;
  COFLAM[114] = -1.37487733E+00;
  COFLAM[115] = 5.57445704E-02;
  COFLAM[116] = -1.95213744E+01;
  COFLAM[117] = 8.67247295E+00;
  COFLAM[118] = -8.82930075E-01;
  COFLAM[119] = 3.15687202E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.57088312E+01;
  COFD[1] = 3.58908491E+00;
  COFD[2] = -2.62355672E-01;
  COFD[3] = 1.18864473E-02;
  COFD[4] = -1.51717004E+01;
  COFD[5] = 4.07525938E+00;
  COFD[6] = -3.25400860E-01;
  COFD[7] = 1.46219057E-02;
  COFD[8] = -1.22379946E+01;
  COFD[9] = 2.72351269E+00;
  COFD[10] = -1.47956351E-01;
  COFD[11] = 6.82984550E-03;
  COFD[12] = -1.46399714E+01;
  COFD[13] = 3.33278784E+00;
  COFD[14] = -2.27808884E-01;
  COFD[15] = 1.03247543E-02;
  COFD[16] = -1.46591988E+01;
  COFD[17] = 3.33278784E+00;
  COFD[18] = -2.27808884E-01;
  COFD[19] = 1.03247543E-02;
  COFD[20] = -2.14163493E+01;
  COFD[21] = 5.69468569E+00;
  COFD[22] = -5.09722690E-01;
  COFD[23] = 2.15385637E-02;
  COFD[24] = -1.60614584E+01;
  COFD[25] = 3.72962835E+00;
  COFD[26] = -2.81187017E-01;
  COFD[27] = 1.27313717E-02;
  COFD[28] = -1.60683077E+01;
  COFD[29] = 3.72962835E+00;
  COFD[30] = -2.81187017E-01;
  COFD[31] = 1.27313717E-02;
  COFD[32] = -1.60542790E+01;
  COFD[33] = 3.72962835E+00;
  COFD[34] = -2.81187017E-01;
  COFD[35] = 1.27313717E-02;
  COFD[36] = -1.43641742E+01;
  COFD[37] = 3.17464426E+00;
  COFD[38] = -2.06252242E-01;
  COFD[39] = 9.34060165E-03;
  COFD[40] = -1.45878973E+01;
  COFD[41] = 3.33278784E+00;
  COFD[42] = -2.27808884E-01;
  COFD[43] = 1.03247543E-02;
  COFD[44] = -1.46088071E+01;
  COFD[45] = 3.33278784E+00;
  COFD[46] = -2.27808884E-01;
  COFD[47] = 1.03247543E-02;
  COFD[48] = -2.11513188E+01;
  COFD[49] = 5.65971576E+00;
  COFD[50] = -5.16380328E-01;
  COFD[51] = 2.23078693E-02;
  COFD[52] = -1.47152121E+01;
  COFD[53] = 3.17464426E+00;
  COFD[54] = -2.06252242E-01;
  COFD[55] = 9.34060165E-03;
  COFD[56] = -1.47235242E+01;
  COFD[57] = 3.17464426E+00;
  COFD[58] = -2.06252242E-01;
  COFD[59] = 9.34060165E-03;
  COFD[60] = -1.84129208E+01;
  COFD[61] = 4.57783952E+00;
  COFD[62] = -3.90896592E-01;
  COFD[63] = 1.74833239E-02;
  COFD[64] = -1.85787622E+01;
  COFD[65] = 4.60313488E+00;
  COFD[66] = -3.93904902E-01;
  COFD[67] = 1.76017062E-02;
  COFD[68] = -1.47235242E+01;
  COFD[69] = 3.17464426E+00;
  COFD[70] = -2.06252242E-01;
  COFD[71] = 9.34060165E-03;
  COFD[72] = -1.57257096E+01;
  COFD[73] = 3.58908491E+00;
  COFD[74] = -2.62355672E-01;
  COFD[75] = 1.18864473E-02;
  COFD[76] = -1.88077294E+01;
  COFD[77] = 4.68604725E+00;
  COFD[78] = -4.02447850E-01;
  COFD[79] = 1.78737480E-02;
  COFD[80] = -1.83874361E+01;
  COFD[81] = 4.57783952E+00;
  COFD[82] = -3.90896592E-01;
  COFD[83] = 1.74833239E-02;
  COFD[84] = -1.63472739E+01;
  COFD[85] = 3.84116521E+00;
  COFD[86] = -2.95829275E-01;
  COFD[87] = 1.33744512E-02;
  COFD[88] = -1.63547999E+01;
  COFD[89] = 3.84116521E+00;
  COFD[90] = -2.95829275E-01;
  COFD[91] = 1.33744512E-02;
  COFD[92] = -1.63547999E+01;
  COFD[93] = 3.84116521E+00;
  COFD[94] = -2.95829275E-01;
  COFD[95] = 1.33744512E-02;
  COFD[96] = -1.63619712E+01;
  COFD[97] = 3.84116521E+00;
  COFD[98] = -2.95829275E-01;
  COFD[99] = 1.33744512E-02;
  COFD[100] = -1.88202955E+01;
  COFD[101] = 4.68604725E+00;
  COFD[102] = -4.02447850E-01;
  COFD[103] = 1.78737480E-02;
  COFD[104] = -1.88202955E+01;
  COFD[105] = 4.68604725E+00;
  COFD[106] = -4.02447850E-01;
  COFD[107] = 1.78737480E-02;
  COFD[108] = -1.63472739E+01;
  COFD[109] = 3.84116521E+00;
  COFD[110] = -2.95829275E-01;
  COFD[111] = 1.33744512E-02;
  COFD[112] = -2.07668563E+01;
  COFD[113] = 5.33334939E+00;
  COFD[114] = -4.81711199E-01;
  COFD[115] = 2.11250966E-02;
  COFD[116] = -2.07693517E+01;
  COFD[117] = 5.33334939E+00;
  COFD[118] = -4.81711199E-01;
  COFD[119] = 2.11250966E-02;
  COFD[120] = -1.51717004E+01;
  COFD[121] = 4.07525938E+00;
  COFD[122] = -3.25400860E-01;
  COFD[123] = 1.46219057E-02;
  COFD[124] = -1.57167238E+01;
  COFD[125] = 4.64812949E+00;
  COFD[126] = -3.99120489E-01;
  COFD[127] = 1.78007073E-02;
  COFD[128] = -1.19251455E+01;
  COFD[129] = 3.00550766E+00;
  COFD[130] = -1.84765984E-01;
  COFD[131] = 8.43184890E-03;
  COFD[132] = -1.42587302E+01;
  COFD[133] = 3.86790216E+00;
  COFD[134] = -2.99364050E-01;
  COFD[135] = 1.35309049E-02;
  COFD[136] = -1.42604897E+01;
  COFD[137] = 3.86790216E+00;
  COFD[138] = -2.99364050E-01;
  COFD[139] = 1.35309049E-02;
  COFD[140] = -1.95009685E+01;
  COFD[141] = 5.57432264E+00;
  COFD[142] = -4.84119394E-01;
  COFD[143] = 1.99974393E-02;
  COFD[144] = -1.55827475E+01;
  COFD[145] = 4.25889159E+00;
  COFD[146] = -3.50023998E-01;
  COFD[147] = 1.57285900E-02;
  COFD[148] = -1.55831868E+01;
  COFD[149] = 4.25889159E+00;
  COFD[150] = -3.50023998E-01;
  COFD[151] = 1.57285900E-02;
  COFD[152] = -1.55822809E+01;
  COFD[153] = 4.25889159E+00;
  COFD[154] = -3.50023998E-01;
  COFD[155] = 1.57285900E-02;
  COFD[156] = -1.40669333E+01;
  COFD[157] = 3.71267703E+00;
  COFD[158] = -2.78948958E-01;
  COFD[159] = 1.26325736E-02;
  COFD[160] = -1.42146850E+01;
  COFD[161] = 3.86790216E+00;
  COFD[162] = -2.99364050E-01;
  COFD[163] = 1.35309049E-02;
  COFD[164] = -1.42166678E+01;
  COFD[165] = 3.86790216E+00;
  COFD[166] = -2.99364050E-01;
  COFD[167] = 1.35309049E-02;
  COFD[168] = -1.97294233E+01;
  COFD[169] = 5.69216495E+00;
  COFD[170] = -5.08937578E-01;
  COFD[171] = 2.14849135E-02;
  COFD[172] = -1.42633624E+01;
  COFD[173] = 3.71267703E+00;
  COFD[174] = -2.78948958E-01;
  COFD[175] = 1.26325736E-02;
  COFD[176] = -1.42639260E+01;
  COFD[177] = 3.71267703E+00;
  COFD[178] = -2.78948958E-01;
  COFD[179] = 1.26325736E-02;
  COFD[180] = -1.78065989E+01;
  COFD[181] = 5.00115955E+00;
  COFD[182] = -4.40987437E-01;
  COFD[183] = 1.94490536E-02;
  COFD[184] = -1.80051831E+01;
  COFD[185] = 5.03314126E+00;
  COFD[186] = -4.44863324E-01;
  COFD[187] = 1.96060711E-02;
  COFD[188] = -1.42639260E+01;
  COFD[189] = 3.71267703E+00;
  COFD[190] = -2.78948958E-01;
  COFD[191] = 1.26325736E-02;
  COFD[192] = -1.51728546E+01;
  COFD[193] = 4.07525938E+00;
  COFD[194] = -3.25400860E-01;
  COFD[195] = 1.46219057E-02;
  COFD[196] = -1.82889243E+01;
  COFD[197] = 5.17547422E+00;
  COFD[198] = -4.61667656E-01;
  COFD[199] = 2.02679020E-02;
  COFD[200] = -1.76725553E+01;
  COFD[201] = 5.00115955E+00;
  COFD[202] = -4.40987437E-01;
  COFD[203] = 1.94490536E-02;
  COFD[204] = -1.59370083E+01;
  COFD[205] = 4.38984082E+00;
  COFD[206] = -3.67107065E-01;
  COFD[207] = 1.64754030E-02;
  COFD[208] = -1.59375039E+01;
  COFD[209] = 4.38984082E+00;
  COFD[210] = -3.67107065E-01;
  COFD[211] = 1.64754030E-02;
  COFD[212] = -1.59375039E+01;
  COFD[213] = 4.38984082E+00;
  COFD[214] = -3.67107065E-01;
  COFD[215] = 1.64754030E-02;
  COFD[216] = -1.59379698E+01;
  COFD[217] = 4.38984082E+00;
  COFD[218] = -3.67107065E-01;
  COFD[219] = 1.64754030E-02;
  COFD[220] = -1.82896392E+01;
  COFD[221] = 5.17547422E+00;
  COFD[222] = -4.61667656E-01;
  COFD[223] = 2.02679020E-02;
  COFD[224] = -1.82896392E+01;
  COFD[225] = 5.17547422E+00;
  COFD[226] = -4.61667656E-01;
  COFD[227] = 2.02679020E-02;
  COFD[228] = -1.59370083E+01;
  COFD[229] = 4.38984082E+00;
  COFD[230] = -3.67107065E-01;
  COFD[231] = 1.64754030E-02;
  COFD[232] = -1.99222312E+01;
  COFD[233] = 5.66778484E+00;
  COFD[234] = -5.15523663E-01;
  COFD[235] = 2.21886867E-02;
  COFD[236] = -1.99223592E+01;
  COFD[237] = 5.66778484E+00;
  COFD[238] = -5.15523663E-01;
  COFD[239] = 2.21886867E-02;
  COFD[240] = -1.22379946E+01;
  COFD[241] = 2.72351269E+00;
  COFD[242] = -1.47956351E-01;
  COFD[243] = 6.82984550E-03;
  COFD[244] = -1.19251455E+01;
  COFD[245] = 3.00550766E+00;
  COFD[246] = -1.84765984E-01;
  COFD[247] = 8.43184890E-03;
  COFD[248] = -9.98517889E+00;
  COFD[249] = 2.04336848E+00;
  COFD[250] = -5.38387626E-02;
  COFD[251] = 2.48117739E-03;
  COFD[252] = -1.16227322E+01;
  COFD[253] = 2.61014717E+00;
  COFD[254] = -1.33183711E-01;
  COFD[255] = 6.18937111E-03;
  COFD[256] = -1.16260596E+01;
  COFD[257] = 2.61014717E+00;
  COFD[258] = -1.33183711E-01;
  COFD[259] = 6.18937111E-03;
  COFD[260] = -1.79975170E+01;
  COFD[261] = 5.00313903E+00;
  COFD[262] = -4.41228726E-01;
  COFD[263] = 1.94588671E-02;
  COFD[264] = -1.24519374E+01;
  COFD[265] = 2.82692805E+00;
  COFD[266] = -1.62138652E-01;
  COFD[267] = 7.47929495E-03;
  COFD[268] = -1.24527911E+01;
  COFD[269] = 2.82692805E+00;
  COFD[270] = -1.62138652E-01;
  COFD[271] = 7.47929495E-03;
  COFD[272] = -1.24510316E+01;
  COFD[273] = 2.82692805E+00;
  COFD[274] = -1.62138652E-01;
  COFD[275] = 7.47929495E-03;
  COFD[276] = -1.16065193E+01;
  COFD[277] = 2.53598208E+00;
  COFD[278] = -1.23217180E-01;
  COFD[279] = 5.74280294E-03;
  COFD[280] = -1.15834906E+01;
  COFD[281] = 2.61014717E+00;
  COFD[282] = -1.33183711E-01;
  COFD[283] = 6.18937111E-03;
  COFD[284] = -1.15872279E+01;
  COFD[285] = 2.61014717E+00;
  COFD[286] = -1.33183711E-01;
  COFD[287] = 6.18937111E-03;
  COFD[288] = -1.70814185E+01;
  COFD[289] = 4.65031228E+00;
  COFD[290] = -3.99304155E-01;
  COFD[291] = 1.78042318E-02;
  COFD[292] = -1.17948586E+01;
  COFD[293] = 2.53598208E+00;
  COFD[294] = -1.23217180E-01;
  COFD[295] = 5.74280294E-03;
  COFD[296] = -1.17959499E+01;
  COFD[297] = 2.53598208E+00;
  COFD[298] = -1.23217180E-01;
  COFD[299] = 5.74280294E-03;
  COFD[300] = -1.38389449E+01;
  COFD[301] = 3.29450802E+00;
  COFD[302] = -2.22580000E-01;
  COFD[303] = 1.00854657E-02;
  COFD[304] = -1.40250374E+01;
  COFD[305] = 3.33069238E+00;
  COFD[306] = -2.27526050E-01;
  COFD[307] = 1.03119635E-02;
  COFD[308] = -1.17959499E+01;
  COFD[309] = 2.53598208E+00;
  COFD[310] = -1.23217180E-01;
  COFD[311] = 5.74280294E-03;
  COFD[312] = -1.22402279E+01;
  COFD[313] = 2.72351269E+00;
  COFD[314] = -1.47956351E-01;
  COFD[315] = 6.82984550E-03;
  COFD[316] = -1.43467798E+01;
  COFD[317] = 3.50071440E+00;
  COFD[318] = -2.50634617E-01;
  COFD[319] = 1.13652480E-02;
  COFD[320] = -1.37280832E+01;
  COFD[321] = 3.29450802E+00;
  COFD[322] = -2.22580000E-01;
  COFD[323] = 1.00854657E-02;
  COFD[324] = -1.26027648E+01;
  COFD[325] = 2.87965366E+00;
  COFD[326] = -1.68964954E-01;
  COFD[327] = 7.77350774E-03;
  COFD[328] = -1.26037264E+01;
  COFD[329] = 2.87965366E+00;
  COFD[330] = -1.68964954E-01;
  COFD[331] = 7.77350774E-03;
  COFD[332] = -1.26037264E+01;
  COFD[333] = 2.87965366E+00;
  COFD[334] = -1.68964954E-01;
  COFD[335] = 7.77350774E-03;
  COFD[336] = -1.26046310E+01;
  COFD[337] = 2.87965366E+00;
  COFD[338] = -1.68964954E-01;
  COFD[339] = 7.77350774E-03;
  COFD[340] = -1.43481792E+01;
  COFD[341] = 3.50071440E+00;
  COFD[342] = -2.50634617E-01;
  COFD[343] = 1.13652480E-02;
  COFD[344] = -1.43481792E+01;
  COFD[345] = 3.50071440E+00;
  COFD[346] = -2.50634617E-01;
  COFD[347] = 1.13652480E-02;
  COFD[348] = -1.26027648E+01;
  COFD[349] = 2.87965366E+00;
  COFD[350] = -1.68964954E-01;
  COFD[351] = 7.77350774E-03;
  COFD[352] = -1.60056226E+01;
  COFD[353] = 4.08811353E+00;
  COFD[354] = -3.26901548E-01;
  COFD[355] = 1.46795221E-02;
  COFD[356] = -1.60058745E+01;
  COFD[357] = 4.08811353E+00;
  COFD[358] = -3.26901548E-01;
  COFD[359] = 1.46795221E-02;
  COFD[360] = -1.46399714E+01;
  COFD[361] = 3.33278784E+00;
  COFD[362] = -2.27808884E-01;
  COFD[363] = 1.03247543E-02;
  COFD[364] = -1.42587302E+01;
  COFD[365] = 3.86790216E+00;
  COFD[366] = -2.99364050E-01;
  COFD[367] = 1.35309049E-02;
  COFD[368] = -1.16227322E+01;
  COFD[369] = 2.61014717E+00;
  COFD[370] = -1.33183711E-01;
  COFD[371] = 6.18937111E-03;
  COFD[372] = -1.36893902E+01;
  COFD[373] = 3.12661616E+00;
  COFD[374] = -2.00477206E-01;
  COFD[375] = 9.11202886E-03;
  COFD[376] = -1.37044316E+01;
  COFD[377] = 3.12661616E+00;
  COFD[378] = -2.00477206E-01;
  COFD[379] = 9.11202886E-03;
  COFD[380] = -2.02329152E+01;
  COFD[381] = 5.53415157E+00;
  COFD[382] = -5.03188882E-01;
  COFD[383] = 2.18653015E-02;
  COFD[384] = -1.49472487E+01;
  COFD[385] = 3.46399647E+00;
  COFD[386] = -2.45668465E-01;
  COFD[387] = 1.11399884E-02;
  COFD[388] = -1.49521098E+01;
  COFD[389] = 3.46399647E+00;
  COFD[390] = -2.45668465E-01;
  COFD[391] = 1.11399884E-02;
  COFD[392] = -1.49421326E+01;
  COFD[393] = 3.46399647E+00;
  COFD[394] = -2.45668465E-01;
  COFD[395] = 1.11399884E-02;
  COFD[396] = -1.35925448E+01;
  COFD[397] = 3.03161161E+00;
  COFD[398] = -1.88110637E-01;
  COFD[399] = 8.57467915E-03;
  COFD[400] = -1.36365710E+01;
  COFD[401] = 3.12661616E+00;
  COFD[402] = -2.00477206E-01;
  COFD[403] = 9.11202886E-03;
  COFD[404] = -1.36530665E+01;
  COFD[405] = 3.12661616E+00;
  COFD[406] = -2.00477206E-01;
  COFD[407] = 9.11202886E-03;
  COFD[408] = -1.98689669E+01;
  COFD[409] = 5.39137689E+00;
  COFD[410] = -4.88742975E-01;
  COFD[411] = 2.14110252E-02;
  COFD[412] = -1.39127915E+01;
  COFD[413] = 3.03161161E+00;
  COFD[414] = -1.88110637E-01;
  COFD[415] = 8.57467915E-03;
  COFD[416] = -1.39187916E+01;
  COFD[417] = 3.03161161E+00;
  COFD[418] = -1.88110637E-01;
  COFD[419] = 8.57467915E-03;
  COFD[420] = -1.72708075E+01;
  COFD[421] = 4.30596544E+00;
  COFD[422] = -3.56229965E-01;
  COFD[423] = 1.60026937E-02;
  COFD[424] = -1.74751258E+01;
  COFD[425] = 4.34493968E+00;
  COFD[426] = -3.61313068E-01;
  COFD[427] = 1.62248404E-02;
  COFD[428] = -1.39187916E+01;
  COFD[429] = 3.03161161E+00;
  COFD[430] = -1.88110637E-01;
  COFD[431] = 8.57467915E-03;
  COFD[432] = -1.46521853E+01;
  COFD[433] = 3.33278784E+00;
  COFD[434] = -2.27808884E-01;
  COFD[435] = 1.03247543E-02;
  COFD[436] = -1.78849405E+01;
  COFD[437] = 4.52608319E+00;
  COFD[438] = -3.84657523E-01;
  COFD[439] = 1.72334108E-02;
  COFD[440] = -1.72053734E+01;
  COFD[441] = 4.30596544E+00;
  COFD[442] = -3.56229965E-01;
  COFD[443] = 1.60026937E-02;
  COFD[444] = -1.52165133E+01;
  COFD[445] = 3.56876681E+00;
  COFD[446] = -2.59706051E-01;
  COFD[447] = 1.17707481E-02;
  COFD[448] = -1.52218984E+01;
  COFD[449] = 3.56876681E+00;
  COFD[450] = -2.59706051E-01;
  COFD[451] = 1.17707481E-02;
  COFD[452] = -1.52218984E+01;
  COFD[453] = 3.56876681E+00;
  COFD[454] = -2.59706051E-01;
  COFD[455] = 1.17707481E-02;
  COFD[456] = -1.52270081E+01;
  COFD[457] = 3.56876681E+00;
  COFD[458] = -2.59706051E-01;
  COFD[459] = 1.17707481E-02;
  COFD[460] = -1.78935197E+01;
  COFD[461] = 4.52608319E+00;
  COFD[462] = -3.84657523E-01;
  COFD[463] = 1.72334108E-02;
  COFD[464] = -1.78935197E+01;
  COFD[465] = 4.52608319E+00;
  COFD[466] = -3.84657523E-01;
  COFD[467] = 1.72334108E-02;
  COFD[468] = -1.52165133E+01;
  COFD[469] = 3.56876681E+00;
  COFD[470] = -2.59706051E-01;
  COFD[471] = 1.17707481E-02;
  COFD[472] = -1.95569014E+01;
  COFD[473] = 5.05986965E+00;
  COFD[474] = -4.48208767E-01;
  COFD[475] = 1.97468676E-02;
  COFD[476] = -1.95585447E+01;
  COFD[477] = 5.05986965E+00;
  COFD[478] = -4.48208767E-01;
  COFD[479] = 1.97468676E-02;
  COFD[480] = -1.46591988E+01;
  COFD[481] = 3.33278784E+00;
  COFD[482] = -2.27808884E-01;
  COFD[483] = 1.03247543E-02;
  COFD[484] = -1.42604897E+01;
  COFD[485] = 3.86790216E+00;
  COFD[486] = -2.99364050E-01;
  COFD[487] = 1.35309049E-02;
  COFD[488] = -1.16260596E+01;
  COFD[489] = 2.61014717E+00;
  COFD[490] = -1.33183711E-01;
  COFD[491] = 6.18937111E-03;
  COFD[492] = -1.37044316E+01;
  COFD[493] = 3.12661616E+00;
  COFD[494] = -2.00477206E-01;
  COFD[495] = 9.11202886E-03;
  COFD[496] = -1.37199396E+01;
  COFD[497] = 3.12661616E+00;
  COFD[498] = -2.00477206E-01;
  COFD[499] = 9.11202886E-03;
  COFD[500] = -2.02488625E+01;
  COFD[501] = 5.53415157E+00;
  COFD[502] = -5.03188882E-01;
  COFD[503] = 2.18653015E-02;
  COFD[504] = -1.49676178E+01;
  COFD[505] = 3.46399647E+00;
  COFD[506] = -2.45668465E-01;
  COFD[507] = 1.11399884E-02;
  COFD[508] = -1.49726820E+01;
  COFD[509] = 3.46399647E+00;
  COFD[510] = -2.45668465E-01;
  COFD[511] = 1.11399884E-02;
  COFD[512] = -1.49622901E+01;
  COFD[513] = 3.46399647E+00;
  COFD[514] = -2.45668465E-01;
  COFD[515] = 1.11399884E-02;
  COFD[516] = -1.36065736E+01;
  COFD[517] = 3.03161161E+00;
  COFD[518] = -1.88110637E-01;
  COFD[519] = 8.57467915E-03;
  COFD[520] = -1.36511282E+01;
  COFD[521] = 3.12661616E+00;
  COFD[522] = -2.00477206E-01;
  COFD[523] = 9.11202886E-03;
  COFD[524] = -1.36681194E+01;
  COFD[525] = 3.12661616E+00;
  COFD[526] = -2.00477206E-01;
  COFD[527] = 9.11202886E-03;
  COFD[528] = -1.98844856E+01;
  COFD[529] = 5.39137689E+00;
  COFD[530] = -4.88742975E-01;
  COFD[531] = 2.14110252E-02;
  COFD[532] = -1.39322696E+01;
  COFD[533] = 3.03161161E+00;
  COFD[534] = -1.88110637E-01;
  COFD[535] = 8.57467915E-03;
  COFD[536] = -1.39385095E+01;
  COFD[537] = 3.03161161E+00;
  COFD[538] = -1.88110637E-01;
  COFD[539] = 8.57467915E-03;
  COFD[540] = -1.72907551E+01;
  COFD[541] = 4.30596544E+00;
  COFD[542] = -3.56229965E-01;
  COFD[543] = 1.60026937E-02;
  COFD[544] = -1.74952936E+01;
  COFD[545] = 4.34493968E+00;
  COFD[546] = -3.61313068E-01;
  COFD[547] = 1.62248404E-02;
  COFD[548] = -1.39385095E+01;
  COFD[549] = 3.03161161E+00;
  COFD[550] = -1.88110637E-01;
  COFD[551] = 8.57467915E-03;
  COFD[552] = -1.46718977E+01;
  COFD[553] = 3.33278784E+00;
  COFD[554] = -2.27808884E-01;
  COFD[555] = 1.03247543E-02;
  COFD[556] = -1.79071613E+01;
  COFD[557] = 4.52608319E+00;
  COFD[558] = -3.84657523E-01;
  COFD[559] = 1.72334108E-02;
  COFD[560] = -1.72278597E+01;
  COFD[561] = 4.30596544E+00;
  COFD[562] = -3.56229965E-01;
  COFD[563] = 1.60026937E-02;
  COFD[564] = -1.52364556E+01;
  COFD[565] = 3.56876681E+00;
  COFD[566] = -2.59706051E-01;
  COFD[567] = 1.17707481E-02;
  COFD[568] = -1.52420610E+01;
  COFD[569] = 3.56876681E+00;
  COFD[570] = -2.59706051E-01;
  COFD[571] = 1.17707481E-02;
  COFD[572] = -1.52420610E+01;
  COFD[573] = 3.56876681E+00;
  COFD[574] = -2.59706051E-01;
  COFD[575] = 1.17707481E-02;
  COFD[576] = -1.52473822E+01;
  COFD[577] = 3.56876681E+00;
  COFD[578] = -2.59706051E-01;
  COFD[579] = 1.17707481E-02;
  COFD[580] = -1.79161340E+01;
  COFD[581] = 4.52608319E+00;
  COFD[582] = -3.84657523E-01;
  COFD[583] = 1.72334108E-02;
  COFD[584] = -1.79161340E+01;
  COFD[585] = 4.52608319E+00;
  COFD[586] = -3.84657523E-01;
  COFD[587] = 1.72334108E-02;
  COFD[588] = -1.52364556E+01;
  COFD[589] = 3.56876681E+00;
  COFD[590] = -2.59706051E-01;
  COFD[591] = 1.17707481E-02;
  COFD[592] = -1.95810310E+01;
  COFD[593] = 5.05986965E+00;
  COFD[594] = -4.48208767E-01;
  COFD[595] = 1.97468676E-02;
  COFD[596] = -1.95827556E+01;
  COFD[597] = 5.05986965E+00;
  COFD[598] = -4.48208767E-01;
  COFD[599] = 1.97468676E-02;
  COFD[600] = -2.14163493E+01;
  COFD[601] = 5.69468569E+00;
  COFD[602] = -5.09722690E-01;
  COFD[603] = 2.15385637E-02;
  COFD[604] = -1.95009685E+01;
  COFD[605] = 5.57432264E+00;
  COFD[606] = -4.84119394E-01;
  COFD[607] = 1.99974393E-02;
  COFD[608] = -1.79975170E+01;
  COFD[609] = 5.00313903E+00;
  COFD[610] = -4.41228726E-01;
  COFD[611] = 1.94588671E-02;
  COFD[612] = -2.02329152E+01;
  COFD[613] = 5.53415157E+00;
  COFD[614] = -5.03188882E-01;
  COFD[615] = 2.18653015E-02;
  COFD[616] = -2.02488625E+01;
  COFD[617] = 5.53415157E+00;
  COFD[618] = -5.03188882E-01;
  COFD[619] = 2.18653015E-02;
  COFD[620] = -9.22228540E+00;
  COFD[621] = -2.96089007E-01;
  COFD[622] = 4.26931760E-01;
  COFD[623] = -2.52336569E-02;
  COFD[624] = -2.11627170E+01;
  COFD[625] = 5.64896383E+00;
  COFD[626] = -5.08011587E-01;
  COFD[627] = 2.16427657E-02;
  COFD[628] = -2.11679764E+01;
  COFD[629] = 5.64896383E+00;
  COFD[630] = -5.08011587E-01;
  COFD[631] = 2.16427657E-02;
  COFD[632] = -2.13884324E+01;
  COFD[633] = 5.65488061E+00;
  COFD[634] = -4.99826791E-01;
  COFD[635] = 2.09064205E-02;
  COFD[636] = -2.01377537E+01;
  COFD[637] = 5.46412560E+00;
  COFD[638] = -4.97306676E-01;
  COFD[639] = 2.17478541E-02;
  COFD[640] = -2.01781535E+01;
  COFD[641] = 5.53415157E+00;
  COFD[642] = -5.03188882E-01;
  COFD[643] = 2.18653015E-02;
  COFD[644] = -2.05982482E+01;
  COFD[645] = 5.38835979E+00;
  COFD[646] = -4.51391863E-01;
  COFD[647] = 1.82059073E-02;
  COFD[648] = -1.16091062E+01;
  COFD[649] = 8.49399854E-01;
  COFD[650] = 2.54815341E-01;
  COFD[651] = -1.70805139E-02;
  COFD[652] = -2.04723583E+01;
  COFD[653] = 5.46412560E+00;
  COFD[654] = -4.97306676E-01;
  COFD[655] = 2.17478541E-02;
  COFD[656] = -2.04788279E+01;
  COFD[657] = 5.46412560E+00;
  COFD[658] = -4.97306676E-01;
  COFD[659] = 2.17478541E-02;
  COFD[660] = -2.05362707E+01;
  COFD[661] = 5.05016356E+00;
  COFD[662] = -3.93657996E-01;
  COFD[663] = 1.51083389E-02;
  COFD[664] = -1.96709812E+01;
  COFD[665] = 4.51025396E+00;
  COFD[666] = -3.04926831E-01;
  COFD[667] = 1.04723863E-02;
  COFD[668] = -2.04788279E+01;
  COFD[669] = 5.46412560E+00;
  COFD[670] = -4.97306676E-01;
  COFD[671] = 2.17478541E-02;
  COFD[672] = -2.14295124E+01;
  COFD[673] = 5.69468569E+00;
  COFD[674] = -5.09722690E-01;
  COFD[675] = 2.15385637E-02;
  COFD[676] = -1.99768511E+01;
  COFD[677] = 4.72476207E+00;
  COFD[678] = -3.40065621E-01;
  COFD[679] = 1.23023869E-02;
  COFD[680] = -2.04729665E+01;
  COFD[681] = 5.05016356E+00;
  COFD[682] = -3.93657996E-01;
  COFD[683] = 1.51083389E-02;
  COFD[684] = -2.13473049E+01;
  COFD[685] = 5.69594646E+00;
  COFD[686] = -5.11336009E-01;
  COFD[687] = 2.16704194E-02;
  COFD[688] = -2.13531217E+01;
  COFD[689] = 5.69594646E+00;
  COFD[690] = -5.11336009E-01;
  COFD[691] = 2.16704194E-02;
  COFD[692] = -2.13531217E+01;
  COFD[693] = 5.69594646E+00;
  COFD[694] = -5.11336009E-01;
  COFD[695] = 2.16704194E-02;
  COFD[696] = -2.13586458E+01;
  COFD[697] = 5.69594646E+00;
  COFD[698] = -5.11336009E-01;
  COFD[699] = 2.16704194E-02;
  COFD[700] = -1.99862047E+01;
  COFD[701] = 4.72476207E+00;
  COFD[702] = -3.40065621E-01;
  COFD[703] = 1.23023869E-02;
  COFD[704] = -1.99862047E+01;
  COFD[705] = 4.72476207E+00;
  COFD[706] = -3.40065621E-01;
  COFD[707] = 1.23023869E-02;
  COFD[708] = -2.13473049E+01;
  COFD[709] = 5.69594646E+00;
  COFD[710] = -5.11336009E-01;
  COFD[711] = 2.16704194E-02;
  COFD[712] = -1.72768357E+01;
  COFD[713] = 3.27911247E+00;
  COFD[714] = -1.12320068E-01;
  COFD[715] = 7.57282813E-04;
  COFD[716] = -1.72786397E+01;
  COFD[717] = 3.27911247E+00;
  COFD[718] = -1.12320068E-01;
  COFD[719] = 7.57282813E-04;
  COFD[720] = -1.60614584E+01;
  COFD[721] = 3.72962835E+00;
  COFD[722] = -2.81187017E-01;
  COFD[723] = 1.27313717E-02;
  COFD[724] = -1.55827475E+01;
  COFD[725] = 4.25889159E+00;
  COFD[726] = -3.50023998E-01;
  COFD[727] = 1.57285900E-02;
  COFD[728] = -1.24519374E+01;
  COFD[729] = 2.82692805E+00;
  COFD[730] = -1.62138652E-01;
  COFD[731] = 7.47929495E-03;
  COFD[732] = -1.49472487E+01;
  COFD[733] = 3.46399647E+00;
  COFD[734] = -2.45668465E-01;
  COFD[735] = 1.11399884E-02;
  COFD[736] = -1.49676178E+01;
  COFD[737] = 3.46399647E+00;
  COFD[738] = -2.45668465E-01;
  COFD[739] = 1.11399884E-02;
  COFD[740] = -2.11627170E+01;
  COFD[741] = 5.64896383E+00;
  COFD[742] = -5.08011587E-01;
  COFD[743] = 2.16427657E-02;
  COFD[744] = -1.63979829E+01;
  COFD[745] = 3.86041291E+00;
  COFD[746] = -2.98380064E-01;
  COFD[747] = 1.34876205E-02;
  COFD[748] = -1.64054470E+01;
  COFD[749] = 3.86041291E+00;
  COFD[750] = -2.98380064E-01;
  COFD[751] = 1.34876205E-02;
  COFD[752] = -1.63901688E+01;
  COFD[753] = 3.86041291E+00;
  COFD[754] = -2.98380064E-01;
  COFD[755] = 1.34876205E-02;
  COFD[756] = -1.46810187E+01;
  COFD[757] = 3.30956428E+00;
  COFD[758] = -2.24665181E-01;
  COFD[759] = 1.01821560E-02;
  COFD[760] = -1.48931736E+01;
  COFD[761] = 3.46399647E+00;
  COFD[762] = -2.45668465E-01;
  COFD[763] = 1.11399884E-02;
  COFD[764] = -1.49152746E+01;
  COFD[765] = 3.46399647E+00;
  COFD[766] = -2.45668465E-01;
  COFD[767] = 1.11399884E-02;
  COFD[768] = -2.11038546E+01;
  COFD[769] = 5.65566529E+00;
  COFD[770] = -5.16168558E-01;
  COFD[771] = 2.23120004E-02;
  COFD[772] = -1.50494817E+01;
  COFD[773] = 3.30956428E+00;
  COFD[774] = -2.24665181E-01;
  COFD[775] = 1.01821560E-02;
  COFD[776] = -1.50584930E+01;
  COFD[777] = 3.30956428E+00;
  COFD[778] = -2.24665181E-01;
  COFD[779] = 1.01821560E-02;
  COFD[780] = -1.86463495E+01;
  COFD[781] = 4.65610052E+00;
  COFD[782] = -3.99683336E-01;
  COFD[783] = 1.78040340E-02;
  COFD[784] = -1.87753297E+01;
  COFD[785] = 4.66365776E+00;
  COFD[786] = -4.00052038E-01;
  COFD[787] = 1.77924431E-02;
  COFD[788] = -1.50584930E+01;
  COFD[789] = 3.30956428E+00;
  COFD[790] = -2.24665181E-01;
  COFD[791] = 1.01821560E-02;
  COFD[792] = -1.60797432E+01;
  COFD[793] = 3.72962835E+00;
  COFD[794] = -2.81187017E-01;
  COFD[795] = 1.27313717E-02;
  COFD[796] = -1.91735101E+01;
  COFD[797] = 4.81815189E+00;
  COFD[798] = -4.18967582E-01;
  COFD[799] = 1.85662180E-02;
  COFD[800] = -1.86263179E+01;
  COFD[801] = 4.65610052E+00;
  COFD[802] = -3.99683336E-01;
  COFD[803] = 1.78040340E-02;
  COFD[804] = -1.66060103E+01;
  COFD[805] = 3.93739829E+00;
  COFD[806] = -3.07880174E-01;
  COFD[807] = 1.38773660E-02;
  COFD[808] = -1.66141913E+01;
  COFD[809] = 3.93739829E+00;
  COFD[810] = -3.07880174E-01;
  COFD[811] = 1.38773660E-02;
  COFD[812] = -1.66141913E+01;
  COFD[813] = 3.93739829E+00;
  COFD[814] = -3.07880174E-01;
  COFD[815] = 1.38773660E-02;
  COFD[816] = -1.66219968E+01;
  COFD[817] = 3.93739829E+00;
  COFD[818] = -3.07880174E-01;
  COFD[819] = 1.38773660E-02;
  COFD[820] = -1.91873737E+01;
  COFD[821] = 4.81815189E+00;
  COFD[822] = -4.18967582E-01;
  COFD[823] = 1.85662180E-02;
  COFD[824] = -1.91873737E+01;
  COFD[825] = 4.81815189E+00;
  COFD[826] = -4.18967582E-01;
  COFD[827] = 1.85662180E-02;
  COFD[828] = -1.66060103E+01;
  COFD[829] = 3.93739829E+00;
  COFD[830] = -3.07880174E-01;
  COFD[831] = 1.38773660E-02;
  COFD[832] = -2.11337782E+01;
  COFD[833] = 5.45685394E+00;
  COFD[834] = -4.96436585E-01;
  COFD[835] = 2.17129560E-02;
  COFD[836] = -2.11365646E+01;
  COFD[837] = 5.45685394E+00;
  COFD[838] = -4.96436585E-01;
  COFD[839] = 2.17129560E-02;
  COFD[840] = -1.60683077E+01;
  COFD[841] = 3.72962835E+00;
  COFD[842] = -2.81187017E-01;
  COFD[843] = 1.27313717E-02;
  COFD[844] = -1.55831868E+01;
  COFD[845] = 4.25889159E+00;
  COFD[846] = -3.50023998E-01;
  COFD[847] = 1.57285900E-02;
  COFD[848] = -1.24527911E+01;
  COFD[849] = 2.82692805E+00;
  COFD[850] = -1.62138652E-01;
  COFD[851] = 7.47929495E-03;
  COFD[852] = -1.49521098E+01;
  COFD[853] = 3.46399647E+00;
  COFD[854] = -2.45668465E-01;
  COFD[855] = 1.11399884E-02;
  COFD[856] = -1.49726820E+01;
  COFD[857] = 3.46399647E+00;
  COFD[858] = -2.45668465E-01;
  COFD[859] = 1.11399884E-02;
  COFD[860] = -2.11679764E+01;
  COFD[861] = 5.64896383E+00;
  COFD[862] = -5.08011587E-01;
  COFD[863] = 2.16427657E-02;
  COFD[864] = -1.64054470E+01;
  COFD[865] = 3.86041291E+00;
  COFD[866] = -2.98380064E-01;
  COFD[867] = 1.34876205E-02;
  COFD[868] = -1.64130243E+01;
  COFD[869] = 3.86041291E+00;
  COFD[870] = -2.98380064E-01;
  COFD[871] = 1.34876205E-02;
  COFD[872] = -1.63975163E+01;
  COFD[873] = 3.86041291E+00;
  COFD[874] = -2.98380064E-01;
  COFD[875] = 1.34876205E-02;
  COFD[876] = -1.46854529E+01;
  COFD[877] = 3.30956428E+00;
  COFD[878] = -2.24665181E-01;
  COFD[879] = 1.01821560E-02;
  COFD[880] = -1.48978282E+01;
  COFD[881] = 3.46399647E+00;
  COFD[882] = -2.45668465E-01;
  COFD[883] = 1.11399884E-02;
  COFD[884] = -1.49201406E+01;
  COFD[885] = 3.46399647E+00;
  COFD[886] = -2.45668465E-01;
  COFD[887] = 1.11399884E-02;
  COFD[888] = -2.11089236E+01;
  COFD[889] = 5.65566529E+00;
  COFD[890] = -5.16168558E-01;
  COFD[891] = 2.23120004E-02;
  COFD[892] = -1.50564631E+01;
  COFD[893] = 3.30956428E+00;
  COFD[894] = -2.24665181E-01;
  COFD[895] = 1.01821560E-02;
  COFD[896] = -1.50656022E+01;
  COFD[897] = 3.30956428E+00;
  COFD[898] = -2.24665181E-01;
  COFD[899] = 1.01821560E-02;
  COFD[900] = -1.86535827E+01;
  COFD[901] = 4.65610052E+00;
  COFD[902] = -3.99683336E-01;
  COFD[903] = 1.78040340E-02;
  COFD[904] = -1.87826828E+01;
  COFD[905] = 4.66365776E+00;
  COFD[906] = -4.00052038E-01;
  COFD[907] = 1.77924431E-02;
  COFD[908] = -1.50656022E+01;
  COFD[909] = 3.30956428E+00;
  COFD[910] = -2.24665181E-01;
  COFD[911] = 1.01821560E-02;
  COFD[912] = -1.60868494E+01;
  COFD[913] = 3.72962835E+00;
  COFD[914] = -2.81187017E-01;
  COFD[915] = 1.27313717E-02;
  COFD[916] = -1.91820501E+01;
  COFD[917] = 4.81815189E+00;
  COFD[918] = -4.18967582E-01;
  COFD[919] = 1.85662180E-02;
  COFD[920] = -1.86350208E+01;
  COFD[921] = 4.65610052E+00;
  COFD[922] = -3.99683336E-01;
  COFD[923] = 1.78040340E-02;
  COFD[924] = -1.66132405E+01;
  COFD[925] = 3.93739829E+00;
  COFD[926] = -3.07880174E-01;
  COFD[927] = 1.38773660E-02;
  COFD[928] = -1.66215417E+01;
  COFD[929] = 3.93739829E+00;
  COFD[930] = -3.07880174E-01;
  COFD[931] = 1.38773660E-02;
  COFD[932] = -1.66215417E+01;
  COFD[933] = 3.93739829E+00;
  COFD[934] = -3.07880174E-01;
  COFD[935] = 1.38773660E-02;
  COFD[936] = -1.66294637E+01;
  COFD[937] = 3.93739829E+00;
  COFD[938] = -3.07880174E-01;
  COFD[939] = 1.38773660E-02;
  COFD[940] = -1.91961559E+01;
  COFD[941] = 4.81815189E+00;
  COFD[942] = -4.18967582E-01;
  COFD[943] = 1.85662180E-02;
  COFD[944] = -1.91961559E+01;
  COFD[945] = 4.81815189E+00;
  COFD[946] = -4.18967582E-01;
  COFD[947] = 1.85662180E-02;
  COFD[948] = -1.66132405E+01;
  COFD[949] = 3.93739829E+00;
  COFD[950] = -3.07880174E-01;
  COFD[951] = 1.38773660E-02;
  COFD[952] = -2.11435429E+01;
  COFD[953] = 5.45685394E+00;
  COFD[954] = -4.96436585E-01;
  COFD[955] = 2.17129560E-02;
  COFD[956] = -2.11463843E+01;
  COFD[957] = 5.45685394E+00;
  COFD[958] = -4.96436585E-01;
  COFD[959] = 2.17129560E-02;
  COFD[960] = -1.60542790E+01;
  COFD[961] = 3.72962835E+00;
  COFD[962] = -2.81187017E-01;
  COFD[963] = 1.27313717E-02;
  COFD[964] = -1.55822809E+01;
  COFD[965] = 4.25889159E+00;
  COFD[966] = -3.50023998E-01;
  COFD[967] = 1.57285900E-02;
  COFD[968] = -1.24510316E+01;
  COFD[969] = 2.82692805E+00;
  COFD[970] = -1.62138652E-01;
  COFD[971] = 7.47929495E-03;
  COFD[972] = -1.49421326E+01;
  COFD[973] = 3.46399647E+00;
  COFD[974] = -2.45668465E-01;
  COFD[975] = 1.11399884E-02;
  COFD[976] = -1.49622901E+01;
  COFD[977] = 3.46399647E+00;
  COFD[978] = -2.45668465E-01;
  COFD[979] = 1.11399884E-02;
  COFD[980] = -2.13884324E+01;
  COFD[981] = 5.65488061E+00;
  COFD[982] = -4.99826791E-01;
  COFD[983] = 2.09064205E-02;
  COFD[984] = -1.63901688E+01;
  COFD[985] = 3.86041291E+00;
  COFD[986] = -2.98380064E-01;
  COFD[987] = 1.34876205E-02;
  COFD[988] = -1.63975163E+01;
  COFD[989] = 3.86041291E+00;
  COFD[990] = -2.98380064E-01;
  COFD[991] = 1.34876205E-02;
  COFD[992] = -1.63824749E+01;
  COFD[993] = 3.86041291E+00;
  COFD[994] = -2.98380064E-01;
  COFD[995] = 1.34876205E-02;
  COFD[996] = -1.46763477E+01;
  COFD[997] = 3.30956428E+00;
  COFD[998] = -2.24665181E-01;
  COFD[999] = 1.01821560E-02;
  COFD[1000] = -1.48882727E+01;
  COFD[1001] = 3.46399647E+00;
  COFD[1002] = -2.45668465E-01;
  COFD[1003] = 1.11399884E-02;
  COFD[1004] = -1.49101533E+01;
  COFD[1005] = 3.46399647E+00;
  COFD[1006] = -2.45668465E-01;
  COFD[1007] = 1.11399884E-02;
  COFD[1008] = -2.12164192E+01;
  COFD[1009] = 5.66240304E+00;
  COFD[1010] = -5.12871363E-01;
  COFD[1011] = 2.19888922E-02;
  COFD[1012] = -1.50421658E+01;
  COFD[1013] = 3.30956428E+00;
  COFD[1014] = -2.24665181E-01;
  COFD[1015] = 1.01821560E-02;
  COFD[1016] = -1.50510451E+01;
  COFD[1017] = 3.30956428E+00;
  COFD[1018] = -2.24665181E-01;
  COFD[1019] = 1.01821560E-02;
  COFD[1020] = -1.86387737E+01;
  COFD[1021] = 4.65610052E+00;
  COFD[1022] = -3.99683336E-01;
  COFD[1023] = 1.78040340E-02;
  COFD[1024] = -1.87676300E+01;
  COFD[1025] = 4.66365776E+00;
  COFD[1026] = -4.00052038E-01;
  COFD[1027] = 1.77924431E-02;
  COFD[1028] = -1.50510451E+01;
  COFD[1029] = 3.30956428E+00;
  COFD[1030] = -2.24665181E-01;
  COFD[1031] = 1.01821560E-02;
  COFD[1032] = -1.60722983E+01;
  COFD[1033] = 3.72962835E+00;
  COFD[1034] = -2.81187017E-01;
  COFD[1035] = 1.27313717E-02;
  COFD[1036] = -1.91645892E+01;
  COFD[1037] = 4.81815189E+00;
  COFD[1038] = -4.18967582E-01;
  COFD[1039] = 1.85662180E-02;
  COFD[1040] = -1.86172298E+01;
  COFD[1041] = 4.65610052E+00;
  COFD[1042] = -3.99683336E-01;
  COFD[1043] = 1.78040340E-02;
  COFD[1044] = -1.65984375E+01;
  COFD[1045] = 3.93739829E+00;
  COFD[1046] = -3.07880174E-01;
  COFD[1047] = 1.38773660E-02;
  COFD[1048] = -1.66064946E+01;
  COFD[1049] = 3.93739829E+00;
  COFD[1050] = -3.07880174E-01;
  COFD[1051] = 1.38773660E-02;
  COFD[1052] = -1.66064946E+01;
  COFD[1053] = 3.93739829E+00;
  COFD[1054] = -3.07880174E-01;
  COFD[1055] = 1.38773660E-02;
  COFD[1056] = -1.66141799E+01;
  COFD[1057] = 3.93739829E+00;
  COFD[1058] = -3.07880174E-01;
  COFD[1059] = 1.38773660E-02;
  COFD[1060] = -1.91782042E+01;
  COFD[1061] = 4.81815189E+00;
  COFD[1062] = -4.18967582E-01;
  COFD[1063] = 1.85662180E-02;
  COFD[1064] = -1.91782042E+01;
  COFD[1065] = 4.81815189E+00;
  COFD[1066] = -4.18967582E-01;
  COFD[1067] = 1.85662180E-02;
  COFD[1068] = -1.65984375E+01;
  COFD[1069] = 3.93739829E+00;
  COFD[1070] = -3.07880174E-01;
  COFD[1071] = 1.38773660E-02;
  COFD[1072] = -2.11236033E+01;
  COFD[1073] = 5.45685394E+00;
  COFD[1074] = -4.96436585E-01;
  COFD[1075] = 2.17129560E-02;
  COFD[1076] = -2.11263334E+01;
  COFD[1077] = 5.45685394E+00;
  COFD[1078] = -4.96436585E-01;
  COFD[1079] = 2.17129560E-02;
  COFD[1080] = -1.43641742E+01;
  COFD[1081] = 3.17464426E+00;
  COFD[1082] = -2.06252242E-01;
  COFD[1083] = 9.34060165E-03;
  COFD[1084] = -1.40669333E+01;
  COFD[1085] = 3.71267703E+00;
  COFD[1086] = -2.78948958E-01;
  COFD[1087] = 1.26325736E-02;
  COFD[1088] = -1.16065193E+01;
  COFD[1089] = 2.53598208E+00;
  COFD[1090] = -1.23217180E-01;
  COFD[1091] = 5.74280294E-03;
  COFD[1092] = -1.35925448E+01;
  COFD[1093] = 3.03161161E+00;
  COFD[1094] = -1.88110637E-01;
  COFD[1095] = 8.57467915E-03;
  COFD[1096] = -1.36065736E+01;
  COFD[1097] = 3.03161161E+00;
  COFD[1098] = -1.88110637E-01;
  COFD[1099] = 8.57467915E-03;
  COFD[1100] = -2.01377537E+01;
  COFD[1101] = 5.46412560E+00;
  COFD[1102] = -4.97306676E-01;
  COFD[1103] = 2.17478541E-02;
  COFD[1104] = -1.46810187E+01;
  COFD[1105] = 3.30956428E+00;
  COFD[1106] = -2.24665181E-01;
  COFD[1107] = 1.01821560E-02;
  COFD[1108] = -1.46854529E+01;
  COFD[1109] = 3.30956428E+00;
  COFD[1110] = -2.24665181E-01;
  COFD[1111] = 1.01821560E-02;
  COFD[1112] = -1.46763477E+01;
  COFD[1113] = 3.30956428E+00;
  COFD[1114] = -2.24665181E-01;
  COFD[1115] = 1.01821560E-02;
  COFD[1116] = -1.35600964E+01;
  COFD[1117] = 2.97005429E+00;
  COFD[1118] = -1.80484662E-01;
  COFD[1119] = 8.26120093E-03;
  COFD[1120] = -1.35441330E+01;
  COFD[1121] = 3.03161161E+00;
  COFD[1122] = -1.88110637E-01;
  COFD[1123] = 8.57467915E-03;
  COFD[1124] = -1.35595493E+01;
  COFD[1125] = 3.03161161E+00;
  COFD[1126] = -1.88110637E-01;
  COFD[1127] = 8.57467915E-03;
  COFD[1128] = -1.94922316E+01;
  COFD[1129] = 5.19755834E+00;
  COFD[1130] = -4.64281421E-01;
  COFD[1131] = 2.03713108E-02;
  COFD[1132] = -1.38558956E+01;
  COFD[1133] = 2.97005429E+00;
  COFD[1134] = -1.80484662E-01;
  COFD[1135] = 8.26120093E-03;
  COFD[1136] = -1.38613890E+01;
  COFD[1137] = 2.97005429E+00;
  COFD[1138] = -1.80484662E-01;
  COFD[1139] = 8.26120093E-03;
  COFD[1140] = -1.68185800E+01;
  COFD[1141] = 4.08311096E+00;
  COFD[1142] = -3.26327124E-01;
  COFD[1143] = 1.46579397E-02;
  COFD[1144] = -1.70280582E+01;
  COFD[1145] = 4.12823892E+00;
  COFD[1146] = -3.32372701E-01;
  COFD[1147] = 1.49294795E-02;
  COFD[1148] = -1.38613890E+01;
  COFD[1149] = 2.97005429E+00;
  COFD[1150] = -1.80484662E-01;
  COFD[1151] = 8.26120093E-03;
  COFD[1152] = -1.43753629E+01;
  COFD[1153] = 3.17464426E+00;
  COFD[1154] = -2.06252242E-01;
  COFD[1155] = 9.34060165E-03;
  COFD[1156] = -1.75603526E+01;
  COFD[1157] = 4.36234472E+00;
  COFD[1158] = -3.63565310E-01;
  COFD[1159] = 1.63224751E-02;
  COFD[1160] = -1.67575581E+01;
  COFD[1161] = 4.08311096E+00;
  COFD[1162] = -3.26327124E-01;
  COFD[1163] = 1.46579397E-02;
  COFD[1164] = -1.49687468E+01;
  COFD[1165] = 3.42348623E+00;
  COFD[1166] = -2.40168929E-01;
  COFD[1167] = 1.08895317E-02;
  COFD[1168] = -1.49736677E+01;
  COFD[1169] = 3.42348623E+00;
  COFD[1170] = -2.40168929E-01;
  COFD[1171] = 1.08895317E-02;
  COFD[1172] = -1.49736677E+01;
  COFD[1173] = 3.42348623E+00;
  COFD[1174] = -2.40168929E-01;
  COFD[1175] = 1.08895317E-02;
  COFD[1176] = -1.49783328E+01;
  COFD[1177] = 3.42348623E+00;
  COFD[1178] = -2.40168929E-01;
  COFD[1179] = 1.08895317E-02;
  COFD[1180] = -1.75681152E+01;
  COFD[1181] = 4.36234472E+00;
  COFD[1182] = -3.63565310E-01;
  COFD[1183] = 1.63224751E-02;
  COFD[1184] = -1.75681152E+01;
  COFD[1185] = 4.36234472E+00;
  COFD[1186] = -3.63565310E-01;
  COFD[1187] = 1.63224751E-02;
  COFD[1188] = -1.49687468E+01;
  COFD[1189] = 3.42348623E+00;
  COFD[1190] = -2.40168929E-01;
  COFD[1191] = 1.08895317E-02;
  COFD[1192] = -1.92099932E+01;
  COFD[1193] = 4.89875859E+00;
  COFD[1194] = -4.28308131E-01;
  COFD[1195] = 1.89235761E-02;
  COFD[1196] = -1.92114693E+01;
  COFD[1197] = 4.89875859E+00;
  COFD[1198] = -4.28308131E-01;
  COFD[1199] = 1.89235761E-02;
  COFD[1200] = -1.45878973E+01;
  COFD[1201] = 3.33278784E+00;
  COFD[1202] = -2.27808884E-01;
  COFD[1203] = 1.03247543E-02;
  COFD[1204] = -1.42146850E+01;
  COFD[1205] = 3.86790216E+00;
  COFD[1206] = -2.99364050E-01;
  COFD[1207] = 1.35309049E-02;
  COFD[1208] = -1.15834906E+01;
  COFD[1209] = 2.61014717E+00;
  COFD[1210] = -1.33183711E-01;
  COFD[1211] = 6.18937111E-03;
  COFD[1212] = -1.36365710E+01;
  COFD[1213] = 3.12661616E+00;
  COFD[1214] = -2.00477206E-01;
  COFD[1215] = 9.11202886E-03;
  COFD[1216] = -1.36511282E+01;
  COFD[1217] = 3.12661616E+00;
  COFD[1218] = -2.00477206E-01;
  COFD[1219] = 9.11202886E-03;
  COFD[1220] = -2.01781535E+01;
  COFD[1221] = 5.53415157E+00;
  COFD[1222] = -5.03188882E-01;
  COFD[1223] = 2.18653015E-02;
  COFD[1224] = -1.48931736E+01;
  COFD[1225] = 3.46399647E+00;
  COFD[1226] = -2.45668465E-01;
  COFD[1227] = 1.11399884E-02;
  COFD[1228] = -1.48978282E+01;
  COFD[1229] = 3.46399647E+00;
  COFD[1230] = -2.45668465E-01;
  COFD[1231] = 1.11399884E-02;
  COFD[1232] = -1.48882727E+01;
  COFD[1233] = 3.46399647E+00;
  COFD[1234] = -2.45668465E-01;
  COFD[1235] = 1.11399884E-02;
  COFD[1236] = -1.35441330E+01;
  COFD[1237] = 3.03161161E+00;
  COFD[1238] = -1.88110637E-01;
  COFD[1239] = 8.57467915E-03;
  COFD[1240] = -1.35835694E+01;
  COFD[1241] = 3.12661616E+00;
  COFD[1242] = -2.00477206E-01;
  COFD[1243] = 9.11202886E-03;
  COFD[1244] = -1.35995494E+01;
  COFD[1245] = 3.12661616E+00;
  COFD[1246] = -2.00477206E-01;
  COFD[1247] = 9.11202886E-03;
  COFD[1248] = -1.98167624E+01;
  COFD[1249] = 5.39137689E+00;
  COFD[1250] = -4.88742975E-01;
  COFD[1251] = 2.14110252E-02;
  COFD[1252] = -1.38613234E+01;
  COFD[1253] = 3.03161161E+00;
  COFD[1254] = -1.88110637E-01;
  COFD[1255] = 8.57467915E-03;
  COFD[1256] = -1.38670788E+01;
  COFD[1257] = 3.03161161E+00;
  COFD[1258] = -1.88110637E-01;
  COFD[1259] = 8.57467915E-03;
  COFD[1260] = -1.72193364E+01;
  COFD[1261] = 4.30596544E+00;
  COFD[1262] = -3.56229965E-01;
  COFD[1263] = 1.60026937E-02;
  COFD[1264] = -1.74248738E+01;
  COFD[1265] = 4.34493968E+00;
  COFD[1266] = -3.61313068E-01;
  COFD[1267] = 1.62248404E-02;
  COFD[1268] = -1.38670788E+01;
  COFD[1269] = 3.03161161E+00;
  COFD[1270] = -1.88110637E-01;
  COFD[1271] = 8.57467915E-03;
  COFD[1272] = -1.45996164E+01;
  COFD[1273] = 3.33278784E+00;
  COFD[1274] = -2.27808884E-01;
  COFD[1275] = 1.03247543E-02;
  COFD[1276] = -1.78308307E+01;
  COFD[1277] = 4.52608319E+00;
  COFD[1278] = -3.84657523E-01;
  COFD[1279] = 1.72334108E-02;
  COFD[1280] = -1.71493750E+01;
  COFD[1281] = 4.30596544E+00;
  COFD[1282] = -3.56229965E-01;
  COFD[1283] = 1.60026937E-02;
  COFD[1284] = -1.51630508E+01;
  COFD[1285] = 3.56876681E+00;
  COFD[1286] = -2.59706051E-01;
  COFD[1287] = 1.17707481E-02;
  COFD[1288] = -1.51682116E+01;
  COFD[1289] = 3.56876681E+00;
  COFD[1290] = -2.59706051E-01;
  COFD[1291] = 1.17707481E-02;
  COFD[1292] = -1.51682116E+01;
  COFD[1293] = 3.56876681E+00;
  COFD[1294] = -2.59706051E-01;
  COFD[1295] = 1.17707481E-02;
  COFD[1296] = -1.51731064E+01;
  COFD[1297] = 3.56876681E+00;
  COFD[1298] = -2.59706051E-01;
  COFD[1299] = 1.17707481E-02;
  COFD[1300] = -1.78390133E+01;
  COFD[1301] = 4.52608319E+00;
  COFD[1302] = -3.84657523E-01;
  COFD[1303] = 1.72334108E-02;
  COFD[1304] = -1.78390133E+01;
  COFD[1305] = 4.52608319E+00;
  COFD[1306] = -3.84657523E-01;
  COFD[1307] = 1.72334108E-02;
  COFD[1308] = -1.51630508E+01;
  COFD[1309] = 3.56876681E+00;
  COFD[1310] = -2.59706051E-01;
  COFD[1311] = 1.17707481E-02;
  COFD[1312] = -1.95024193E+01;
  COFD[1313] = 5.05986965E+00;
  COFD[1314] = -4.48208767E-01;
  COFD[1315] = 1.97468676E-02;
  COFD[1316] = -1.95039811E+01;
  COFD[1317] = 5.05986965E+00;
  COFD[1318] = -4.48208767E-01;
  COFD[1319] = 1.97468676E-02;
  COFD[1320] = -1.46088071E+01;
  COFD[1321] = 3.33278784E+00;
  COFD[1322] = -2.27808884E-01;
  COFD[1323] = 1.03247543E-02;
  COFD[1324] = -1.42166678E+01;
  COFD[1325] = 3.86790216E+00;
  COFD[1326] = -2.99364050E-01;
  COFD[1327] = 1.35309049E-02;
  COFD[1328] = -1.15872279E+01;
  COFD[1329] = 2.61014717E+00;
  COFD[1330] = -1.33183711E-01;
  COFD[1331] = 6.18937111E-03;
  COFD[1332] = -1.36530665E+01;
  COFD[1333] = 3.12661616E+00;
  COFD[1334] = -2.00477206E-01;
  COFD[1335] = 9.11202886E-03;
  COFD[1336] = -1.36681194E+01;
  COFD[1337] = 3.12661616E+00;
  COFD[1338] = -2.00477206E-01;
  COFD[1339] = 9.11202886E-03;
  COFD[1340] = -2.05982482E+01;
  COFD[1341] = 5.38835979E+00;
  COFD[1342] = -4.51391863E-01;
  COFD[1343] = 1.82059073E-02;
  COFD[1344] = -1.49152746E+01;
  COFD[1345] = 3.46399647E+00;
  COFD[1346] = -2.45668465E-01;
  COFD[1347] = 1.11399884E-02;
  COFD[1348] = -1.49201406E+01;
  COFD[1349] = 3.46399647E+00;
  COFD[1350] = -2.45668465E-01;
  COFD[1351] = 1.11399884E-02;
  COFD[1352] = -1.49101533E+01;
  COFD[1353] = 3.46399647E+00;
  COFD[1354] = -2.45668465E-01;
  COFD[1355] = 1.11399884E-02;
  COFD[1356] = -1.35595493E+01;
  COFD[1357] = 3.03161161E+00;
  COFD[1358] = -1.88110637E-01;
  COFD[1359] = 8.57467915E-03;
  COFD[1360] = -1.35995494E+01;
  COFD[1361] = 3.12661616E+00;
  COFD[1362] = -2.00477206E-01;
  COFD[1363] = 9.11202886E-03;
  COFD[1364] = -1.36160571E+01;
  COFD[1365] = 3.12661616E+00;
  COFD[1366] = -2.00477206E-01;
  COFD[1367] = 9.11202886E-03;
  COFD[1368] = -2.08089065E+01;
  COFD[1369] = 5.66955040E+00;
  COFD[1370] = -5.15123837E-01;
  COFD[1371] = 2.21444393E-02;
  COFD[1372] = -1.38824952E+01;
  COFD[1373] = 3.03161161E+00;
  COFD[1374] = -1.88110637E-01;
  COFD[1375] = 8.57467915E-03;
  COFD[1376] = -1.38885011E+01;
  COFD[1377] = 3.03161161E+00;
  COFD[1378] = -1.88110637E-01;
  COFD[1379] = 8.57467915E-03;
  COFD[1380] = -1.72409983E+01;
  COFD[1381] = 4.30596544E+00;
  COFD[1382] = -3.56229965E-01;
  COFD[1383] = 1.60026937E-02;
  COFD[1384] = -1.74467651E+01;
  COFD[1385] = 4.34493968E+00;
  COFD[1386] = -3.61313068E-01;
  COFD[1387] = 1.62248404E-02;
  COFD[1388] = -1.38885011E+01;
  COFD[1389] = 3.03161161E+00;
  COFD[1390] = -1.88110637E-01;
  COFD[1391] = 8.57467915E-03;
  COFD[1392] = -1.46210328E+01;
  COFD[1393] = 3.33278784E+00;
  COFD[1394] = -2.27808884E-01;
  COFD[1395] = 1.03247543E-02;
  COFD[1396] = -1.78548522E+01;
  COFD[1397] = 4.52608319E+00;
  COFD[1398] = -3.84657523E-01;
  COFD[1399] = 1.72334108E-02;
  COFD[1400] = -1.71736707E+01;
  COFD[1401] = 4.30596544E+00;
  COFD[1402] = -3.56229965E-01;
  COFD[1403] = 1.60026937E-02;
  COFD[1404] = -1.51847071E+01;
  COFD[1405] = 3.56876681E+00;
  COFD[1406] = -2.59706051E-01;
  COFD[1407] = 1.17707481E-02;
  COFD[1408] = -1.51900976E+01;
  COFD[1409] = 3.56876681E+00;
  COFD[1410] = -2.59706051E-01;
  COFD[1411] = 1.17707481E-02;
  COFD[1412] = -1.51900976E+01;
  COFD[1413] = 3.56876681E+00;
  COFD[1414] = -2.59706051E-01;
  COFD[1415] = 1.17707481E-02;
  COFD[1416] = -1.51952125E+01;
  COFD[1417] = 3.56876681E+00;
  COFD[1418] = -2.59706051E-01;
  COFD[1419] = 1.17707481E-02;
  COFD[1420] = -1.78634410E+01;
  COFD[1421] = 4.52608319E+00;
  COFD[1422] = -3.84657523E-01;
  COFD[1423] = 1.72334108E-02;
  COFD[1424] = -1.78634410E+01;
  COFD[1425] = 4.52608319E+00;
  COFD[1426] = -3.84657523E-01;
  COFD[1427] = 1.72334108E-02;
  COFD[1428] = -1.51847071E+01;
  COFD[1429] = 3.56876681E+00;
  COFD[1430] = -2.59706051E-01;
  COFD[1431] = 1.17707481E-02;
  COFD[1432] = -1.95284057E+01;
  COFD[1433] = 5.05986965E+00;
  COFD[1434] = -4.48208767E-01;
  COFD[1435] = 1.97468676E-02;
  COFD[1436] = -1.95300509E+01;
  COFD[1437] = 5.05986965E+00;
  COFD[1438] = -4.48208767E-01;
  COFD[1439] = 1.97468676E-02;
  COFD[1440] = -2.11513188E+01;
  COFD[1441] = 5.65971576E+00;
  COFD[1442] = -5.16380328E-01;
  COFD[1443] = 2.23078693E-02;
  COFD[1444] = -1.97294233E+01;
  COFD[1445] = 5.69216495E+00;
  COFD[1446] = -5.08937578E-01;
  COFD[1447] = 2.14849135E-02;
  COFD[1448] = -1.70814185E+01;
  COFD[1449] = 4.65031228E+00;
  COFD[1450] = -3.99304155E-01;
  COFD[1451] = 1.78042318E-02;
  COFD[1452] = -1.98689669E+01;
  COFD[1453] = 5.39137689E+00;
  COFD[1454] = -4.88742975E-01;
  COFD[1455] = 2.14110252E-02;
  COFD[1456] = -1.98844856E+01;
  COFD[1457] = 5.39137689E+00;
  COFD[1458] = -4.88742975E-01;
  COFD[1459] = 2.14110252E-02;
  COFD[1460] = -1.16091062E+01;
  COFD[1461] = 8.49399854E-01;
  COFD[1462] = 2.54815341E-01;
  COFD[1463] = -1.70805139E-02;
  COFD[1464] = -2.11038546E+01;
  COFD[1465] = 5.65566529E+00;
  COFD[1466] = -5.16168558E-01;
  COFD[1467] = 2.23120004E-02;
  COFD[1468] = -2.11089236E+01;
  COFD[1469] = 5.65566529E+00;
  COFD[1470] = -5.16168558E-01;
  COFD[1471] = 2.23120004E-02;
  COFD[1472] = -2.12164192E+01;
  COFD[1473] = 5.66240304E+00;
  COFD[1474] = -5.12871363E-01;
  COFD[1475] = 2.19888922E-02;
  COFD[1476] = -1.94922316E+01;
  COFD[1477] = 5.19755834E+00;
  COFD[1478] = -4.64281421E-01;
  COFD[1479] = 2.03713108E-02;
  COFD[1480] = -1.98167624E+01;
  COFD[1481] = 5.39137689E+00;
  COFD[1482] = -4.88742975E-01;
  COFD[1483] = 2.14110252E-02;
  COFD[1484] = -2.08089065E+01;
  COFD[1485] = 5.66955040E+00;
  COFD[1486] = -5.15123837E-01;
  COFD[1487] = 2.21444393E-02;
  COFD[1488] = -1.39096855E+01;
  COFD[1489] = 1.94562984E+00;
  COFD[1490] = 8.70847117E-02;
  COFD[1491] = -8.88070922E-03;
  COFD[1492] = -1.98138741E+01;
  COFD[1493] = 5.19755834E+00;
  COFD[1494] = -4.64281421E-01;
  COFD[1495] = 2.03713108E-02;
  COFD[1496] = -1.98201196E+01;
  COFD[1497] = 5.19755834E+00;
  COFD[1498] = -4.64281421E-01;
  COFD[1499] = 2.03713108E-02;
  COFD[1500] = -2.11447220E+01;
  COFD[1501] = 5.35967672E+00;
  COFD[1502] = -4.46304661E-01;
  COFD[1503] = 1.79268384E-02;
  COFD[1504] = -2.07898818E+01;
  COFD[1505] = 5.09626267E+00;
  COFD[1506] = -4.01977458E-01;
  COFD[1507] = 1.55674143E-02;
  COFD[1508] = -1.98201196E+01;
  COFD[1509] = 5.19755834E+00;
  COFD[1510] = -4.64281421E-01;
  COFD[1511] = 2.03713108E-02;
  COFD[1512] = -2.11640290E+01;
  COFD[1513] = 5.65971576E+00;
  COFD[1514] = -5.16380328E-01;
  COFD[1515] = 2.23078693E-02;
  COFD[1516] = -2.06777608E+01;
  COFD[1517] = 5.07411445E+00;
  COFD[1518] = -3.98163718E-01;
  COFD[1519] = 1.53623128E-02;
  COFD[1520] = -2.10850739E+01;
  COFD[1521] = 5.35967672E+00;
  COFD[1522] = -4.46304661E-01;
  COFD[1523] = 1.79268384E-02;
  COFD[1524] = -2.12089608E+01;
  COFD[1525] = 5.66989626E+00;
  COFD[1526] = -5.14926565E-01;
  COFD[1527] = 2.21254749E-02;
  COFD[1528] = -2.12145714E+01;
  COFD[1529] = 5.66989626E+00;
  COFD[1530] = -5.14926565E-01;
  COFD[1531] = 2.21254749E-02;
  COFD[1532] = -2.12145714E+01;
  COFD[1533] = 5.66989626E+00;
  COFD[1534] = -5.14926565E-01;
  COFD[1535] = 2.21254749E-02;
  COFD[1536] = -2.12198974E+01;
  COFD[1537] = 5.66989626E+00;
  COFD[1538] = -5.14926565E-01;
  COFD[1539] = 2.21254749E-02;
  COFD[1540] = -2.06867426E+01;
  COFD[1541] = 5.07411445E+00;
  COFD[1542] = -3.98163718E-01;
  COFD[1543] = 1.53623128E-02;
  COFD[1544] = -2.06867426E+01;
  COFD[1545] = 5.07411445E+00;
  COFD[1546] = -3.98163718E-01;
  COFD[1547] = 1.53623128E-02;
  COFD[1548] = -2.12089608E+01;
  COFD[1549] = 5.66989626E+00;
  COFD[1550] = -5.14926565E-01;
  COFD[1551] = 2.21254749E-02;
  COFD[1552] = -1.83657384E+01;
  COFD[1553] = 3.78990548E+00;
  COFD[1554] = -1.91734886E-01;
  COFD[1555] = 4.72918702E-03;
  COFD[1556] = -1.83674650E+01;
  COFD[1557] = 3.78990548E+00;
  COFD[1558] = -1.91734886E-01;
  COFD[1559] = 4.72918702E-03;
  COFD[1560] = -1.47152121E+01;
  COFD[1561] = 3.17464426E+00;
  COFD[1562] = -2.06252242E-01;
  COFD[1563] = 9.34060165E-03;
  COFD[1564] = -1.42633624E+01;
  COFD[1565] = 3.71267703E+00;
  COFD[1566] = -2.78948958E-01;
  COFD[1567] = 1.26325736E-02;
  COFD[1568] = -1.17948586E+01;
  COFD[1569] = 2.53598208E+00;
  COFD[1570] = -1.23217180E-01;
  COFD[1571] = 5.74280294E-03;
  COFD[1572] = -1.39127915E+01;
  COFD[1573] = 3.03161161E+00;
  COFD[1574] = -1.88110637E-01;
  COFD[1575] = 8.57467915E-03;
  COFD[1576] = -1.39322696E+01;
  COFD[1577] = 3.03161161E+00;
  COFD[1578] = -1.88110637E-01;
  COFD[1579] = 8.57467915E-03;
  COFD[1580] = -2.04723583E+01;
  COFD[1581] = 5.46412560E+00;
  COFD[1582] = -4.97306676E-01;
  COFD[1583] = 2.17478541E-02;
  COFD[1584] = -1.50494817E+01;
  COFD[1585] = 3.30956428E+00;
  COFD[1586] = -2.24665181E-01;
  COFD[1587] = 1.01821560E-02;
  COFD[1588] = -1.50564631E+01;
  COFD[1589] = 3.30956428E+00;
  COFD[1590] = -2.24665181E-01;
  COFD[1591] = 1.01821560E-02;
  COFD[1592] = -1.50421658E+01;
  COFD[1593] = 3.30956428E+00;
  COFD[1594] = -2.24665181E-01;
  COFD[1595] = 1.01821560E-02;
  COFD[1596] = -1.38558956E+01;
  COFD[1597] = 2.97005429E+00;
  COFD[1598] = -1.80484662E-01;
  COFD[1599] = 8.26120093E-03;
  COFD[1600] = -1.38613234E+01;
  COFD[1601] = 3.03161161E+00;
  COFD[1602] = -1.88110637E-01;
  COFD[1603] = 8.57467915E-03;
  COFD[1604] = -1.38824952E+01;
  COFD[1605] = 3.03161161E+00;
  COFD[1606] = -1.88110637E-01;
  COFD[1607] = 8.57467915E-03;
  COFD[1608] = -1.98138741E+01;
  COFD[1609] = 5.19755834E+00;
  COFD[1610] = -4.64281421E-01;
  COFD[1611] = 2.03713108E-02;
  COFD[1612] = -1.42066617E+01;
  COFD[1613] = 2.97005429E+00;
  COFD[1614] = -1.80484662E-01;
  COFD[1615] = 8.26120093E-03;
  COFD[1616] = -1.42151245E+01;
  COFD[1617] = 2.97005429E+00;
  COFD[1618] = -1.80484662E-01;
  COFD[1619] = 8.26120093E-03;
  COFD[1620] = -1.71733021E+01;
  COFD[1621] = 4.08311096E+00;
  COFD[1622] = -3.26327124E-01;
  COFD[1623] = 1.46579397E-02;
  COFD[1624] = -1.73798212E+01;
  COFD[1625] = 4.12823892E+00;
  COFD[1626] = -3.32372701E-01;
  COFD[1627] = 1.49294795E-02;
  COFD[1628] = -1.42151245E+01;
  COFD[1629] = 2.97005429E+00;
  COFD[1630] = -1.80484662E-01;
  COFD[1631] = 8.26120093E-03;
  COFD[1632] = -1.47323940E+01;
  COFD[1633] = 3.17464426E+00;
  COFD[1634] = -2.06252242E-01;
  COFD[1635] = 9.34060165E-03;
  COFD[1636] = -1.79451523E+01;
  COFD[1637] = 4.36234472E+00;
  COFD[1638] = -3.63565310E-01;
  COFD[1639] = 1.63224751E-02;
  COFD[1640] = -1.71520986E+01;
  COFD[1641] = 4.08311096E+00;
  COFD[1642] = -3.26327124E-01;
  COFD[1643] = 1.46579397E-02;
  COFD[1644] = -1.53311928E+01;
  COFD[1645] = 3.42348623E+00;
  COFD[1646] = -2.40168929E-01;
  COFD[1647] = 1.08895317E-02;
  COFD[1648] = -1.53388598E+01;
  COFD[1649] = 3.42348623E+00;
  COFD[1650] = -2.40168929E-01;
  COFD[1651] = 1.08895317E-02;
  COFD[1652] = -1.53388598E+01;
  COFD[1653] = 3.42348623E+00;
  COFD[1654] = -2.40168929E-01;
  COFD[1655] = 1.08895317E-02;
  COFD[1656] = -1.53461674E+01;
  COFD[1657] = 3.42348623E+00;
  COFD[1658] = -2.40168929E-01;
  COFD[1659] = 1.08895317E-02;
  COFD[1660] = -1.79579944E+01;
  COFD[1661] = 4.36234472E+00;
  COFD[1662] = -3.63565310E-01;
  COFD[1663] = 1.63224751E-02;
  COFD[1664] = -1.79579944E+01;
  COFD[1665] = 4.36234472E+00;
  COFD[1666] = -3.63565310E-01;
  COFD[1667] = 1.63224751E-02;
  COFD[1668] = -1.53311928E+01;
  COFD[1669] = 3.42348623E+00;
  COFD[1670] = -2.40168929E-01;
  COFD[1671] = 1.08895317E-02;
  COFD[1672] = -1.96136367E+01;
  COFD[1673] = 4.89875859E+00;
  COFD[1674] = -4.28308131E-01;
  COFD[1675] = 1.89235761E-02;
  COFD[1676] = -1.96161934E+01;
  COFD[1677] = 4.89875859E+00;
  COFD[1678] = -4.28308131E-01;
  COFD[1679] = 1.89235761E-02;
  COFD[1680] = -1.47235242E+01;
  COFD[1681] = 3.17464426E+00;
  COFD[1682] = -2.06252242E-01;
  COFD[1683] = 9.34060165E-03;
  COFD[1684] = -1.42639260E+01;
  COFD[1685] = 3.71267703E+00;
  COFD[1686] = -2.78948958E-01;
  COFD[1687] = 1.26325736E-02;
  COFD[1688] = -1.17959499E+01;
  COFD[1689] = 2.53598208E+00;
  COFD[1690] = -1.23217180E-01;
  COFD[1691] = 5.74280294E-03;
  COFD[1692] = -1.39187916E+01;
  COFD[1693] = 3.03161161E+00;
  COFD[1694] = -1.88110637E-01;
  COFD[1695] = 8.57467915E-03;
  COFD[1696] = -1.39385095E+01;
  COFD[1697] = 3.03161161E+00;
  COFD[1698] = -1.88110637E-01;
  COFD[1699] = 8.57467915E-03;
  COFD[1700] = -2.04788279E+01;
  COFD[1701] = 5.46412560E+00;
  COFD[1702] = -4.97306676E-01;
  COFD[1703] = 2.17478541E-02;
  COFD[1704] = -1.50584930E+01;
  COFD[1705] = 3.30956428E+00;
  COFD[1706] = -2.24665181E-01;
  COFD[1707] = 1.01821560E-02;
  COFD[1708] = -1.50656022E+01;
  COFD[1709] = 3.30956428E+00;
  COFD[1710] = -2.24665181E-01;
  COFD[1711] = 1.01821560E-02;
  COFD[1712] = -1.50510451E+01;
  COFD[1713] = 3.30956428E+00;
  COFD[1714] = -2.24665181E-01;
  COFD[1715] = 1.01821560E-02;
  COFD[1716] = -1.38613890E+01;
  COFD[1717] = 2.97005429E+00;
  COFD[1718] = -1.80484662E-01;
  COFD[1719] = 8.26120093E-03;
  COFD[1720] = -1.38670788E+01;
  COFD[1721] = 3.03161161E+00;
  COFD[1722] = -1.88110637E-01;
  COFD[1723] = 8.57467915E-03;
  COFD[1724] = -1.38885011E+01;
  COFD[1725] = 3.03161161E+00;
  COFD[1726] = -1.88110637E-01;
  COFD[1727] = 8.57467915E-03;
  COFD[1728] = -1.98201196E+01;
  COFD[1729] = 5.19755834E+00;
  COFD[1730] = -4.64281421E-01;
  COFD[1731] = 2.03713108E-02;
  COFD[1732] = -1.42151245E+01;
  COFD[1733] = 2.97005429E+00;
  COFD[1734] = -1.80484662E-01;
  COFD[1735] = 8.26120093E-03;
  COFD[1736] = -1.42237330E+01;
  COFD[1737] = 2.97005429E+00;
  COFD[1738] = -1.80484662E-01;
  COFD[1739] = 8.26120093E-03;
  COFD[1740] = -1.71820515E+01;
  COFD[1741] = 4.08311096E+00;
  COFD[1742] = -3.26327124E-01;
  COFD[1743] = 1.46579397E-02;
  COFD[1744] = -1.73887068E+01;
  COFD[1745] = 4.12823892E+00;
  COFD[1746] = -3.32372701E-01;
  COFD[1747] = 1.49294795E-02;
  COFD[1748] = -1.42237330E+01;
  COFD[1749] = 2.97005429E+00;
  COFD[1750] = -1.80484662E-01;
  COFD[1751] = 8.26120093E-03;
  COFD[1752] = -1.47409991E+01;
  COFD[1753] = 3.17464426E+00;
  COFD[1754] = -2.06252242E-01;
  COFD[1755] = 9.34060165E-03;
  COFD[1756] = -1.79553701E+01;
  COFD[1757] = 4.36234472E+00;
  COFD[1758] = -3.63565310E-01;
  COFD[1759] = 1.63224751E-02;
  COFD[1760] = -1.71624971E+01;
  COFD[1761] = 4.08311096E+00;
  COFD[1762] = -3.26327124E-01;
  COFD[1763] = 1.46579397E-02;
  COFD[1764] = -1.53399389E+01;
  COFD[1765] = 3.42348623E+00;
  COFD[1766] = -2.40168929E-01;
  COFD[1767] = 1.08895317E-02;
  COFD[1768] = -1.53477422E+01;
  COFD[1769] = 3.42348623E+00;
  COFD[1770] = -2.40168929E-01;
  COFD[1771] = 1.08895317E-02;
  COFD[1772] = -1.53477422E+01;
  COFD[1773] = 3.42348623E+00;
  COFD[1774] = -2.40168929E-01;
  COFD[1775] = 1.08895317E-02;
  COFD[1776] = -1.53551818E+01;
  COFD[1777] = 3.42348623E+00;
  COFD[1778] = -2.40168929E-01;
  COFD[1779] = 1.08895317E-02;
  COFD[1780] = -1.79684808E+01;
  COFD[1781] = 4.36234472E+00;
  COFD[1782] = -3.63565310E-01;
  COFD[1783] = 1.63224751E-02;
  COFD[1784] = -1.79684808E+01;
  COFD[1785] = 4.36234472E+00;
  COFD[1786] = -3.63565310E-01;
  COFD[1787] = 1.63224751E-02;
  COFD[1788] = -1.53399389E+01;
  COFD[1789] = 3.42348623E+00;
  COFD[1790] = -2.40168929E-01;
  COFD[1791] = 1.08895317E-02;
  COFD[1792] = -1.96252017E+01;
  COFD[1793] = 4.89875859E+00;
  COFD[1794] = -4.28308131E-01;
  COFD[1795] = 1.89235761E-02;
  COFD[1796] = -1.96278183E+01;
  COFD[1797] = 4.89875859E+00;
  COFD[1798] = -4.28308131E-01;
  COFD[1799] = 1.89235761E-02;
  COFD[1800] = -1.84129208E+01;
  COFD[1801] = 4.57783952E+00;
  COFD[1802] = -3.90896592E-01;
  COFD[1803] = 1.74833239E-02;
  COFD[1804] = -1.78065989E+01;
  COFD[1805] = 5.00115955E+00;
  COFD[1806] = -4.40987437E-01;
  COFD[1807] = 1.94490536E-02;
  COFD[1808] = -1.38389449E+01;
  COFD[1809] = 3.29450802E+00;
  COFD[1810] = -2.22580000E-01;
  COFD[1811] = 1.00854657E-02;
  COFD[1812] = -1.72708075E+01;
  COFD[1813] = 4.30596544E+00;
  COFD[1814] = -3.56229965E-01;
  COFD[1815] = 1.60026937E-02;
  COFD[1816] = -1.72907551E+01;
  COFD[1817] = 4.30596544E+00;
  COFD[1818] = -3.56229965E-01;
  COFD[1819] = 1.60026937E-02;
  COFD[1820] = -2.05362707E+01;
  COFD[1821] = 5.05016356E+00;
  COFD[1822] = -3.93657996E-01;
  COFD[1823] = 1.51083389E-02;
  COFD[1824] = -1.86463495E+01;
  COFD[1825] = 4.65610052E+00;
  COFD[1826] = -3.99683336E-01;
  COFD[1827] = 1.78040340E-02;
  COFD[1828] = -1.86535827E+01;
  COFD[1829] = 4.65610052E+00;
  COFD[1830] = -3.99683336E-01;
  COFD[1831] = 1.78040340E-02;
  COFD[1832] = -1.86387737E+01;
  COFD[1833] = 4.65610052E+00;
  COFD[1834] = -3.99683336E-01;
  COFD[1835] = 1.78040340E-02;
  COFD[1836] = -1.68185800E+01;
  COFD[1837] = 4.08311096E+00;
  COFD[1838] = -3.26327124E-01;
  COFD[1839] = 1.46579397E-02;
  COFD[1840] = -1.72193364E+01;
  COFD[1841] = 4.30596544E+00;
  COFD[1842] = -3.56229965E-01;
  COFD[1843] = 1.60026937E-02;
  COFD[1844] = -1.72409983E+01;
  COFD[1845] = 4.30596544E+00;
  COFD[1846] = -3.56229965E-01;
  COFD[1847] = 1.60026937E-02;
  COFD[1848] = -2.11447220E+01;
  COFD[1849] = 5.35967672E+00;
  COFD[1850] = -4.46304661E-01;
  COFD[1851] = 1.79268384E-02;
  COFD[1852] = -1.71733021E+01;
  COFD[1853] = 4.08311096E+00;
  COFD[1854] = -3.26327124E-01;
  COFD[1855] = 1.46579397E-02;
  COFD[1856] = -1.71820515E+01;
  COFD[1857] = 4.08311096E+00;
  COFD[1858] = -3.26327124E-01;
  COFD[1859] = 1.46579397E-02;
  COFD[1860] = -2.09570294E+01;
  COFD[1861] = 5.43745826E+00;
  COFD[1862] = -4.94144385E-01;
  COFD[1863] = 2.16223530E-02;
  COFD[1864] = -2.11357853E+01;
  COFD[1865] = 5.46787922E+00;
  COFD[1866] = -4.97740742E-01;
  COFD[1867] = 2.17645218E-02;
  COFD[1868] = -1.71820515E+01;
  COFD[1869] = 4.08311096E+00;
  COFD[1870] = -3.26327124E-01;
  COFD[1871] = 1.46579397E-02;
  COFD[1872] = -1.84306790E+01;
  COFD[1873] = 4.57783952E+00;
  COFD[1874] = -3.90896592E-01;
  COFD[1875] = 1.74833239E-02;
  COFD[1876] = -2.14290782E+01;
  COFD[1877] = 5.56408850E+00;
  COFD[1878] = -5.07010682E-01;
  COFD[1879] = 2.20297833E-02;
  COFD[1880] = -2.09405087E+01;
  COFD[1881] = 5.43745826E+00;
  COFD[1882] = -4.94144385E-01;
  COFD[1883] = 2.16223530E-02;
  COFD[1884] = -1.88622219E+01;
  COFD[1885] = 4.73022116E+00;
  COFD[1886] = -4.08049754E-01;
  COFD[1887] = 1.81119914E-02;
  COFD[1888] = -1.88701572E+01;
  COFD[1889] = 4.73022116E+00;
  COFD[1890] = -4.08049754E-01;
  COFD[1891] = 1.81119914E-02;
  COFD[1892] = -1.88701572E+01;
  COFD[1893] = 4.73022116E+00;
  COFD[1894] = -4.08049754E-01;
  COFD[1895] = 1.81119914E-02;
  COFD[1896] = -1.88777246E+01;
  COFD[1897] = 4.73022116E+00;
  COFD[1898] = -4.08049754E-01;
  COFD[1899] = 1.81119914E-02;
  COFD[1900] = -2.14424505E+01;
  COFD[1901] = 5.56408850E+00;
  COFD[1902] = -5.07010682E-01;
  COFD[1903] = 2.20297833E-02;
  COFD[1904] = -2.14424505E+01;
  COFD[1905] = 5.56408850E+00;
  COFD[1906] = -5.07010682E-01;
  COFD[1907] = 2.20297833E-02;
  COFD[1908] = -1.88622219E+01;
  COFD[1909] = 4.73022116E+00;
  COFD[1910] = -4.08049754E-01;
  COFD[1911] = 1.81119914E-02;
  COFD[1912] = -2.22427644E+01;
  COFD[1913] = 5.65932555E+00;
  COFD[1914] = -5.00638028E-01;
  COFD[1915] = 2.09517204E-02;
  COFD[1916] = -2.22454398E+01;
  COFD[1917] = 5.65932555E+00;
  COFD[1918] = -5.00638028E-01;
  COFD[1919] = 2.09517204E-02;
  COFD[1920] = -1.85787622E+01;
  COFD[1921] = 4.60313488E+00;
  COFD[1922] = -3.93904902E-01;
  COFD[1923] = 1.76017062E-02;
  COFD[1924] = -1.80051831E+01;
  COFD[1925] = 5.03314126E+00;
  COFD[1926] = -4.44863324E-01;
  COFD[1927] = 1.96060711E-02;
  COFD[1928] = -1.40250374E+01;
  COFD[1929] = 3.33069238E+00;
  COFD[1930] = -2.27526050E-01;
  COFD[1931] = 1.03119635E-02;
  COFD[1932] = -1.74751258E+01;
  COFD[1933] = 4.34493968E+00;
  COFD[1934] = -3.61313068E-01;
  COFD[1935] = 1.62248404E-02;
  COFD[1936] = -1.74952936E+01;
  COFD[1937] = 4.34493968E+00;
  COFD[1938] = -3.61313068E-01;
  COFD[1939] = 1.62248404E-02;
  COFD[1940] = -1.96709812E+01;
  COFD[1941] = 4.51025396E+00;
  COFD[1942] = -3.04926831E-01;
  COFD[1943] = 1.04723863E-02;
  COFD[1944] = -1.87753297E+01;
  COFD[1945] = 4.66365776E+00;
  COFD[1946] = -4.00052038E-01;
  COFD[1947] = 1.77924431E-02;
  COFD[1948] = -1.87826828E+01;
  COFD[1949] = 4.66365776E+00;
  COFD[1950] = -4.00052038E-01;
  COFD[1951] = 1.77924431E-02;
  COFD[1952] = -1.87676300E+01;
  COFD[1953] = 4.66365776E+00;
  COFD[1954] = -4.00052038E-01;
  COFD[1955] = 1.77924431E-02;
  COFD[1956] = -1.70280582E+01;
  COFD[1957] = 4.12823892E+00;
  COFD[1958] = -3.32372701E-01;
  COFD[1959] = 1.49294795E-02;
  COFD[1960] = -1.74248738E+01;
  COFD[1961] = 4.34493968E+00;
  COFD[1962] = -3.61313068E-01;
  COFD[1963] = 1.62248404E-02;
  COFD[1964] = -1.74467651E+01;
  COFD[1965] = 4.34493968E+00;
  COFD[1966] = -3.61313068E-01;
  COFD[1967] = 1.62248404E-02;
  COFD[1968] = -2.07898818E+01;
  COFD[1969] = 5.09626267E+00;
  COFD[1970] = -4.01977458E-01;
  COFD[1971] = 1.55674143E-02;
  COFD[1972] = -1.73798212E+01;
  COFD[1973] = 4.12823892E+00;
  COFD[1974] = -3.32372701E-01;
  COFD[1975] = 1.49294795E-02;
  COFD[1976] = -1.73887068E+01;
  COFD[1977] = 4.12823892E+00;
  COFD[1978] = -3.32372701E-01;
  COFD[1979] = 1.49294795E-02;
  COFD[1980] = -2.11357853E+01;
  COFD[1981] = 5.46787922E+00;
  COFD[1982] = -4.97740742E-01;
  COFD[1983] = 2.17645218E-02;
  COFD[1984] = -2.12721289E+01;
  COFD[1985] = 5.48028575E+00;
  COFD[1986] = -4.98603644E-01;
  COFD[1987] = 2.17694380E-02;
  COFD[1988] = -1.73887068E+01;
  COFD[1989] = 4.12823892E+00;
  COFD[1990] = -3.32372701E-01;
  COFD[1991] = 1.49294795E-02;
  COFD[1992] = -1.85967943E+01;
  COFD[1993] = 4.60313488E+00;
  COFD[1994] = -3.93904902E-01;
  COFD[1995] = 1.76017062E-02;
  COFD[1996] = -2.16227696E+01;
  COFD[1997] = 5.59921973E+00;
  COFD[1998] = -5.11188988E-01;
  COFD[1999] = 2.21960407E-02;
  COFD[2000] = -2.11252025E+01;
  COFD[2001] = 5.46787922E+00;
  COFD[2002] = -4.97740742E-01;
  COFD[2003] = 2.17645218E-02;
  COFD[2004] = -1.90496325E+01;
  COFD[2005] = 4.76384170E+00;
  COFD[2006] = -4.12247352E-01;
  COFD[2007] = 1.82876042E-02;
  COFD[2008] = -1.90576956E+01;
  COFD[2009] = 4.76384170E+00;
  COFD[2010] = -4.12247352E-01;
  COFD[2011] = 1.82876042E-02;
  COFD[2012] = -1.90576956E+01;
  COFD[2013] = 4.76384170E+00;
  COFD[2014] = -4.12247352E-01;
  COFD[2015] = 1.82876042E-02;
  COFD[2016] = -1.90653867E+01;
  COFD[2017] = 4.76384170E+00;
  COFD[2018] = -4.12247352E-01;
  COFD[2019] = 1.82876042E-02;
  COFD[2020] = -2.16363966E+01;
  COFD[2021] = 5.59921973E+00;
  COFD[2022] = -5.11188988E-01;
  COFD[2023] = 2.21960407E-02;
  COFD[2024] = -2.16363966E+01;
  COFD[2025] = 5.59921973E+00;
  COFD[2026] = -5.11188988E-01;
  COFD[2027] = 2.21960407E-02;
  COFD[2028] = -1.90496325E+01;
  COFD[2029] = 4.76384170E+00;
  COFD[2030] = -4.12247352E-01;
  COFD[2031] = 1.82876042E-02;
  COFD[2032] = -2.22845606E+01;
  COFD[2033] = 5.62734738E+00;
  COFD[2034] = -4.94901103E-01;
  COFD[2035] = 2.06338814E-02;
  COFD[2036] = -2.22872934E+01;
  COFD[2037] = 5.62734738E+00;
  COFD[2038] = -4.94901103E-01;
  COFD[2039] = 2.06338814E-02;
  COFD[2040] = -1.47235242E+01;
  COFD[2041] = 3.17464426E+00;
  COFD[2042] = -2.06252242E-01;
  COFD[2043] = 9.34060165E-03;
  COFD[2044] = -1.42639260E+01;
  COFD[2045] = 3.71267703E+00;
  COFD[2046] = -2.78948958E-01;
  COFD[2047] = 1.26325736E-02;
  COFD[2048] = -1.17959499E+01;
  COFD[2049] = 2.53598208E+00;
  COFD[2050] = -1.23217180E-01;
  COFD[2051] = 5.74280294E-03;
  COFD[2052] = -1.39187916E+01;
  COFD[2053] = 3.03161161E+00;
  COFD[2054] = -1.88110637E-01;
  COFD[2055] = 8.57467915E-03;
  COFD[2056] = -1.39385095E+01;
  COFD[2057] = 3.03161161E+00;
  COFD[2058] = -1.88110637E-01;
  COFD[2059] = 8.57467915E-03;
  COFD[2060] = -2.04788279E+01;
  COFD[2061] = 5.46412560E+00;
  COFD[2062] = -4.97306676E-01;
  COFD[2063] = 2.17478541E-02;
  COFD[2064] = -1.50584930E+01;
  COFD[2065] = 3.30956428E+00;
  COFD[2066] = -2.24665181E-01;
  COFD[2067] = 1.01821560E-02;
  COFD[2068] = -1.50656022E+01;
  COFD[2069] = 3.30956428E+00;
  COFD[2070] = -2.24665181E-01;
  COFD[2071] = 1.01821560E-02;
  COFD[2072] = -1.50510451E+01;
  COFD[2073] = 3.30956428E+00;
  COFD[2074] = -2.24665181E-01;
  COFD[2075] = 1.01821560E-02;
  COFD[2076] = -1.38613890E+01;
  COFD[2077] = 2.97005429E+00;
  COFD[2078] = -1.80484662E-01;
  COFD[2079] = 8.26120093E-03;
  COFD[2080] = -1.38670788E+01;
  COFD[2081] = 3.03161161E+00;
  COFD[2082] = -1.88110637E-01;
  COFD[2083] = 8.57467915E-03;
  COFD[2084] = -1.38885011E+01;
  COFD[2085] = 3.03161161E+00;
  COFD[2086] = -1.88110637E-01;
  COFD[2087] = 8.57467915E-03;
  COFD[2088] = -1.98201196E+01;
  COFD[2089] = 5.19755834E+00;
  COFD[2090] = -4.64281421E-01;
  COFD[2091] = 2.03713108E-02;
  COFD[2092] = -1.42151245E+01;
  COFD[2093] = 2.97005429E+00;
  COFD[2094] = -1.80484662E-01;
  COFD[2095] = 8.26120093E-03;
  COFD[2096] = -1.42237330E+01;
  COFD[2097] = 2.97005429E+00;
  COFD[2098] = -1.80484662E-01;
  COFD[2099] = 8.26120093E-03;
  COFD[2100] = -1.71820515E+01;
  COFD[2101] = 4.08311096E+00;
  COFD[2102] = -3.26327124E-01;
  COFD[2103] = 1.46579397E-02;
  COFD[2104] = -1.73887068E+01;
  COFD[2105] = 4.12823892E+00;
  COFD[2106] = -3.32372701E-01;
  COFD[2107] = 1.49294795E-02;
  COFD[2108] = -1.42237330E+01;
  COFD[2109] = 2.97005429E+00;
  COFD[2110] = -1.80484662E-01;
  COFD[2111] = 8.26120093E-03;
  COFD[2112] = -1.47409991E+01;
  COFD[2113] = 3.17464426E+00;
  COFD[2114] = -2.06252242E-01;
  COFD[2115] = 9.34060165E-03;
  COFD[2116] = -1.79553701E+01;
  COFD[2117] = 4.36234472E+00;
  COFD[2118] = -3.63565310E-01;
  COFD[2119] = 1.63224751E-02;
  COFD[2120] = -1.71624971E+01;
  COFD[2121] = 4.08311096E+00;
  COFD[2122] = -3.26327124E-01;
  COFD[2123] = 1.46579397E-02;
  COFD[2124] = -1.53399389E+01;
  COFD[2125] = 3.42348623E+00;
  COFD[2126] = -2.40168929E-01;
  COFD[2127] = 1.08895317E-02;
  COFD[2128] = -1.53477422E+01;
  COFD[2129] = 3.42348623E+00;
  COFD[2130] = -2.40168929E-01;
  COFD[2131] = 1.08895317E-02;
  COFD[2132] = -1.53477422E+01;
  COFD[2133] = 3.42348623E+00;
  COFD[2134] = -2.40168929E-01;
  COFD[2135] = 1.08895317E-02;
  COFD[2136] = -1.53551818E+01;
  COFD[2137] = 3.42348623E+00;
  COFD[2138] = -2.40168929E-01;
  COFD[2139] = 1.08895317E-02;
  COFD[2140] = -1.79684808E+01;
  COFD[2141] = 4.36234472E+00;
  COFD[2142] = -3.63565310E-01;
  COFD[2143] = 1.63224751E-02;
  COFD[2144] = -1.79684808E+01;
  COFD[2145] = 4.36234472E+00;
  COFD[2146] = -3.63565310E-01;
  COFD[2147] = 1.63224751E-02;
  COFD[2148] = -1.53399389E+01;
  COFD[2149] = 3.42348623E+00;
  COFD[2150] = -2.40168929E-01;
  COFD[2151] = 1.08895317E-02;
  COFD[2152] = -1.96252017E+01;
  COFD[2153] = 4.89875859E+00;
  COFD[2154] = -4.28308131E-01;
  COFD[2155] = 1.89235761E-02;
  COFD[2156] = -1.96278183E+01;
  COFD[2157] = 4.89875859E+00;
  COFD[2158] = -4.28308131E-01;
  COFD[2159] = 1.89235761E-02;
  COFD[2160] = -1.57257096E+01;
  COFD[2161] = 3.58908491E+00;
  COFD[2162] = -2.62355672E-01;
  COFD[2163] = 1.18864473E-02;
  COFD[2164] = -1.51728546E+01;
  COFD[2165] = 4.07525938E+00;
  COFD[2166] = -3.25400860E-01;
  COFD[2167] = 1.46219057E-02;
  COFD[2168] = -1.22402279E+01;
  COFD[2169] = 2.72351269E+00;
  COFD[2170] = -1.47956351E-01;
  COFD[2171] = 6.82984550E-03;
  COFD[2172] = -1.46521853E+01;
  COFD[2173] = 3.33278784E+00;
  COFD[2174] = -2.27808884E-01;
  COFD[2175] = 1.03247543E-02;
  COFD[2176] = -1.46718977E+01;
  COFD[2177] = 3.33278784E+00;
  COFD[2178] = -2.27808884E-01;
  COFD[2179] = 1.03247543E-02;
  COFD[2180] = -2.14295124E+01;
  COFD[2181] = 5.69468569E+00;
  COFD[2182] = -5.09722690E-01;
  COFD[2183] = 2.15385637E-02;
  COFD[2184] = -1.60797432E+01;
  COFD[2185] = 3.72962835E+00;
  COFD[2186] = -2.81187017E-01;
  COFD[2187] = 1.27313717E-02;
  COFD[2188] = -1.60868494E+01;
  COFD[2189] = 3.72962835E+00;
  COFD[2190] = -2.81187017E-01;
  COFD[2191] = 1.27313717E-02;
  COFD[2192] = -1.60722983E+01;
  COFD[2193] = 3.72962835E+00;
  COFD[2194] = -2.81187017E-01;
  COFD[2195] = 1.27313717E-02;
  COFD[2196] = -1.43753629E+01;
  COFD[2197] = 3.17464426E+00;
  COFD[2198] = -2.06252242E-01;
  COFD[2199] = 9.34060165E-03;
  COFD[2200] = -1.45996164E+01;
  COFD[2201] = 3.33278784E+00;
  COFD[2202] = -2.27808884E-01;
  COFD[2203] = 1.03247543E-02;
  COFD[2204] = -1.46210328E+01;
  COFD[2205] = 3.33278784E+00;
  COFD[2206] = -2.27808884E-01;
  COFD[2207] = 1.03247543E-02;
  COFD[2208] = -2.11640290E+01;
  COFD[2209] = 5.65971576E+00;
  COFD[2210] = -5.16380328E-01;
  COFD[2211] = 2.23078693E-02;
  COFD[2212] = -1.47323940E+01;
  COFD[2213] = 3.17464426E+00;
  COFD[2214] = -2.06252242E-01;
  COFD[2215] = 9.34060165E-03;
  COFD[2216] = -1.47409991E+01;
  COFD[2217] = 3.17464426E+00;
  COFD[2218] = -2.06252242E-01;
  COFD[2219] = 9.34060165E-03;
  COFD[2220] = -1.84306790E+01;
  COFD[2221] = 4.57783952E+00;
  COFD[2222] = -3.90896592E-01;
  COFD[2223] = 1.74833239E-02;
  COFD[2224] = -1.85967943E+01;
  COFD[2225] = 4.60313488E+00;
  COFD[2226] = -3.93904902E-01;
  COFD[2227] = 1.76017062E-02;
  COFD[2228] = -1.47409991E+01;
  COFD[2229] = 3.17464426E+00;
  COFD[2230] = -2.06252242E-01;
  COFD[2231] = 9.34060165E-03;
  COFD[2232] = -1.57431777E+01;
  COFD[2233] = 3.58908491E+00;
  COFD[2234] = -2.62355672E-01;
  COFD[2235] = 1.18864473E-02;
  COFD[2236] = -1.88284355E+01;
  COFD[2237] = 4.68604725E+00;
  COFD[2238] = -4.02447850E-01;
  COFD[2239] = 1.78737480E-02;
  COFD[2240] = -1.84085045E+01;
  COFD[2241] = 4.57783952E+00;
  COFD[2242] = -3.90896592E-01;
  COFD[2243] = 1.74833239E-02;
  COFD[2244] = -1.63650255E+01;
  COFD[2245] = 3.84116521E+00;
  COFD[2246] = -2.95829275E-01;
  COFD[2247] = 1.33744512E-02;
  COFD[2248] = -1.63728256E+01;
  COFD[2249] = 3.84116521E+00;
  COFD[2250] = -2.95829275E-01;
  COFD[2251] = 1.33744512E-02;
  COFD[2252] = -1.63728256E+01;
  COFD[2253] = 3.84116521E+00;
  COFD[2254] = -2.95829275E-01;
  COFD[2255] = 1.33744512E-02;
  COFD[2256] = -1.63802621E+01;
  COFD[2257] = 3.84116521E+00;
  COFD[2258] = -2.95829275E-01;
  COFD[2259] = 1.33744512E-02;
  COFD[2260] = -1.88415399E+01;
  COFD[2261] = 4.68604725E+00;
  COFD[2262] = -4.02447850E-01;
  COFD[2263] = 1.78737480E-02;
  COFD[2264] = -1.88415399E+01;
  COFD[2265] = 4.68604725E+00;
  COFD[2266] = -4.02447850E-01;
  COFD[2267] = 1.78737480E-02;
  COFD[2268] = -1.63650255E+01;
  COFD[2269] = 3.84116521E+00;
  COFD[2270] = -2.95829275E-01;
  COFD[2271] = 1.33744512E-02;
  COFD[2272] = -2.07902590E+01;
  COFD[2273] = 5.33334939E+00;
  COFD[2274] = -4.81711199E-01;
  COFD[2275] = 2.11250966E-02;
  COFD[2276] = -2.07928743E+01;
  COFD[2277] = 5.33334939E+00;
  COFD[2278] = -4.81711199E-01;
  COFD[2279] = 2.11250966E-02;
  COFD[2280] = -1.88077294E+01;
  COFD[2281] = 4.68604725E+00;
  COFD[2282] = -4.02447850E-01;
  COFD[2283] = 1.78737480E-02;
  COFD[2284] = -1.82889243E+01;
  COFD[2285] = 5.17547422E+00;
  COFD[2286] = -4.61667656E-01;
  COFD[2287] = 2.02679020E-02;
  COFD[2288] = -1.43467798E+01;
  COFD[2289] = 3.50071440E+00;
  COFD[2290] = -2.50634617E-01;
  COFD[2291] = 1.13652480E-02;
  COFD[2292] = -1.78849405E+01;
  COFD[2293] = 4.52608319E+00;
  COFD[2294] = -3.84657523E-01;
  COFD[2295] = 1.72334108E-02;
  COFD[2296] = -1.79071613E+01;
  COFD[2297] = 4.52608319E+00;
  COFD[2298] = -3.84657523E-01;
  COFD[2299] = 1.72334108E-02;
  COFD[2300] = -1.99768511E+01;
  COFD[2301] = 4.72476207E+00;
  COFD[2302] = -3.40065621E-01;
  COFD[2303] = 1.23023869E-02;
  COFD[2304] = -1.91735101E+01;
  COFD[2305] = 4.81815189E+00;
  COFD[2306] = -4.18967582E-01;
  COFD[2307] = 1.85662180E-02;
  COFD[2308] = -1.91820501E+01;
  COFD[2309] = 4.81815189E+00;
  COFD[2310] = -4.18967582E-01;
  COFD[2311] = 1.85662180E-02;
  COFD[2312] = -1.91645892E+01;
  COFD[2313] = 4.81815189E+00;
  COFD[2314] = -4.18967582E-01;
  COFD[2315] = 1.85662180E-02;
  COFD[2316] = -1.75603526E+01;
  COFD[2317] = 4.36234472E+00;
  COFD[2318] = -3.63565310E-01;
  COFD[2319] = 1.63224751E-02;
  COFD[2320] = -1.78308307E+01;
  COFD[2321] = 4.52608319E+00;
  COFD[2322] = -3.84657523E-01;
  COFD[2323] = 1.72334108E-02;
  COFD[2324] = -1.78548522E+01;
  COFD[2325] = 4.52608319E+00;
  COFD[2326] = -3.84657523E-01;
  COFD[2327] = 1.72334108E-02;
  COFD[2328] = -2.06777608E+01;
  COFD[2329] = 5.07411445E+00;
  COFD[2330] = -3.98163718E-01;
  COFD[2331] = 1.53623128E-02;
  COFD[2332] = -1.79451523E+01;
  COFD[2333] = 4.36234472E+00;
  COFD[2334] = -3.63565310E-01;
  COFD[2335] = 1.63224751E-02;
  COFD[2336] = -1.79553701E+01;
  COFD[2337] = 4.36234472E+00;
  COFD[2338] = -3.63565310E-01;
  COFD[2339] = 1.63224751E-02;
  COFD[2340] = -2.14290782E+01;
  COFD[2341] = 5.56408850E+00;
  COFD[2342] = -5.07010682E-01;
  COFD[2343] = 2.20297833E-02;
  COFD[2344] = -2.16227696E+01;
  COFD[2345] = 5.59921973E+00;
  COFD[2346] = -5.11188988E-01;
  COFD[2347] = 2.21960407E-02;
  COFD[2348] = -1.79553701E+01;
  COFD[2349] = 4.36234472E+00;
  COFD[2350] = -3.63565310E-01;
  COFD[2351] = 1.63224751E-02;
  COFD[2352] = -1.88284355E+01;
  COFD[2353] = 4.68604725E+00;
  COFD[2354] = -4.02447850E-01;
  COFD[2355] = 1.78737480E-02;
  COFD[2356] = -2.18733632E+01;
  COFD[2357] = 5.66854155E+00;
  COFD[2358] = -5.16283438E-01;
  COFD[2359] = 2.22503597E-02;
  COFD[2360] = -2.14286313E+01;
  COFD[2361] = 5.56408850E+00;
  COFD[2362] = -5.07010682E-01;
  COFD[2363] = 2.20297833E-02;
  COFD[2364] = -1.94128046E+01;
  COFD[2365] = 4.90269467E+00;
  COFD[2366] = -4.28761899E-01;
  COFD[2367] = 1.89408158E-02;
  COFD[2368] = -1.94221240E+01;
  COFD[2369] = 4.90269467E+00;
  COFD[2370] = -4.28761899E-01;
  COFD[2371] = 1.89408158E-02;
  COFD[2372] = -1.94221240E+01;
  COFD[2373] = 4.90269467E+00;
  COFD[2374] = -4.28761899E-01;
  COFD[2375] = 1.89408158E-02;
  COFD[2376] = -1.94310355E+01;
  COFD[2377] = 4.90269467E+00;
  COFD[2378] = -4.28761899E-01;
  COFD[2379] = 1.89408158E-02;
  COFD[2380] = -2.18895763E+01;
  COFD[2381] = 5.66854155E+00;
  COFD[2382] = -5.16283438E-01;
  COFD[2383] = 2.22503597E-02;
  COFD[2384] = -2.18895763E+01;
  COFD[2385] = 5.66854155E+00;
  COFD[2386] = -5.16283438E-01;
  COFD[2387] = 2.22503597E-02;
  COFD[2388] = -1.94128046E+01;
  COFD[2389] = 4.90269467E+00;
  COFD[2390] = -4.28761899E-01;
  COFD[2391] = 1.89408158E-02;
  COFD[2392] = -2.20874556E+01;
  COFD[2393] = 5.48517812E+00;
  COFD[2394] = -4.68486535E-01;
  COFD[2395] = 1.91421163E-02;
  COFD[2396] = -2.20907873E+01;
  COFD[2397] = 5.48517812E+00;
  COFD[2398] = -4.68486535E-01;
  COFD[2399] = 1.91421163E-02;
  COFD[2400] = -1.83874361E+01;
  COFD[2401] = 4.57783952E+00;
  COFD[2402] = -3.90896592E-01;
  COFD[2403] = 1.74833239E-02;
  COFD[2404] = -1.76725553E+01;
  COFD[2405] = 5.00115955E+00;
  COFD[2406] = -4.40987437E-01;
  COFD[2407] = 1.94490536E-02;
  COFD[2408] = -1.37280832E+01;
  COFD[2409] = 3.29450802E+00;
  COFD[2410] = -2.22580000E-01;
  COFD[2411] = 1.00854657E-02;
  COFD[2412] = -1.72053734E+01;
  COFD[2413] = 4.30596544E+00;
  COFD[2414] = -3.56229965E-01;
  COFD[2415] = 1.60026937E-02;
  COFD[2416] = -1.72278597E+01;
  COFD[2417] = 4.30596544E+00;
  COFD[2418] = -3.56229965E-01;
  COFD[2419] = 1.60026937E-02;
  COFD[2420] = -2.04729665E+01;
  COFD[2421] = 5.05016356E+00;
  COFD[2422] = -3.93657996E-01;
  COFD[2423] = 1.51083389E-02;
  COFD[2424] = -1.86263179E+01;
  COFD[2425] = 4.65610052E+00;
  COFD[2426] = -3.99683336E-01;
  COFD[2427] = 1.78040340E-02;
  COFD[2428] = -1.86350208E+01;
  COFD[2429] = 4.65610052E+00;
  COFD[2430] = -3.99683336E-01;
  COFD[2431] = 1.78040340E-02;
  COFD[2432] = -1.86172298E+01;
  COFD[2433] = 4.65610052E+00;
  COFD[2434] = -3.99683336E-01;
  COFD[2435] = 1.78040340E-02;
  COFD[2436] = -1.67575581E+01;
  COFD[2437] = 4.08311096E+00;
  COFD[2438] = -3.26327124E-01;
  COFD[2439] = 1.46579397E-02;
  COFD[2440] = -1.71493750E+01;
  COFD[2441] = 4.30596544E+00;
  COFD[2442] = -3.56229965E-01;
  COFD[2443] = 1.60026937E-02;
  COFD[2444] = -1.71736707E+01;
  COFD[2445] = 4.30596544E+00;
  COFD[2446] = -3.56229965E-01;
  COFD[2447] = 1.60026937E-02;
  COFD[2448] = -2.10850739E+01;
  COFD[2449] = 5.35967672E+00;
  COFD[2450] = -4.46304661E-01;
  COFD[2451] = 1.79268384E-02;
  COFD[2452] = -1.71520986E+01;
  COFD[2453] = 4.08311096E+00;
  COFD[2454] = -3.26327124E-01;
  COFD[2455] = 1.46579397E-02;
  COFD[2456] = -1.71624971E+01;
  COFD[2457] = 4.08311096E+00;
  COFD[2458] = -3.26327124E-01;
  COFD[2459] = 1.46579397E-02;
  COFD[2460] = -2.09405087E+01;
  COFD[2461] = 5.43745826E+00;
  COFD[2462] = -4.94144385E-01;
  COFD[2463] = 2.16223530E-02;
  COFD[2464] = -2.11252025E+01;
  COFD[2465] = 5.46787922E+00;
  COFD[2466] = -4.97740742E-01;
  COFD[2467] = 2.17645218E-02;
  COFD[2468] = -1.71624971E+01;
  COFD[2469] = 4.08311096E+00;
  COFD[2470] = -3.26327124E-01;
  COFD[2471] = 1.46579397E-02;
  COFD[2472] = -1.84085045E+01;
  COFD[2473] = 4.57783952E+00;
  COFD[2474] = -3.90896592E-01;
  COFD[2475] = 1.74833239E-02;
  COFD[2476] = -2.14286313E+01;
  COFD[2477] = 5.56408850E+00;
  COFD[2478] = -5.07010682E-01;
  COFD[2479] = 2.20297833E-02;
  COFD[2480] = -2.09373712E+01;
  COFD[2481] = 5.43745826E+00;
  COFD[2482] = -4.94144385E-01;
  COFD[2483] = 2.16223530E-02;
  COFD[2484] = -1.88396878E+01;
  COFD[2485] = 4.73022116E+00;
  COFD[2486] = -4.08049754E-01;
  COFD[2487] = 1.81119914E-02;
  COFD[2488] = -1.88491786E+01;
  COFD[2489] = 4.73022116E+00;
  COFD[2490] = -4.08049754E-01;
  COFD[2491] = 1.81119914E-02;
  COFD[2492] = -1.88491786E+01;
  COFD[2493] = 4.73022116E+00;
  COFD[2494] = -4.08049754E-01;
  COFD[2495] = 1.81119914E-02;
  COFD[2496] = -1.88582572E+01;
  COFD[2497] = 4.73022116E+00;
  COFD[2498] = -4.08049754E-01;
  COFD[2499] = 1.81119914E-02;
  COFD[2500] = -2.14452092E+01;
  COFD[2501] = 5.56408850E+00;
  COFD[2502] = -5.07010682E-01;
  COFD[2503] = 2.20297833E-02;
  COFD[2504] = -2.14452092E+01;
  COFD[2505] = 5.56408850E+00;
  COFD[2506] = -5.07010682E-01;
  COFD[2507] = 2.20297833E-02;
  COFD[2508] = -1.88396878E+01;
  COFD[2509] = 4.73022116E+00;
  COFD[2510] = -4.08049754E-01;
  COFD[2511] = 1.81119914E-02;
  COFD[2512] = -2.22633424E+01;
  COFD[2513] = 5.65932555E+00;
  COFD[2514] = -5.00638028E-01;
  COFD[2515] = 2.09517204E-02;
  COFD[2516] = -2.22667609E+01;
  COFD[2517] = 5.65932555E+00;
  COFD[2518] = -5.00638028E-01;
  COFD[2519] = 2.09517204E-02;
  COFD[2520] = -1.63472739E+01;
  COFD[2521] = 3.84116521E+00;
  COFD[2522] = -2.95829275E-01;
  COFD[2523] = 1.33744512E-02;
  COFD[2524] = -1.59370083E+01;
  COFD[2525] = 4.38984082E+00;
  COFD[2526] = -3.67107065E-01;
  COFD[2527] = 1.64754030E-02;
  COFD[2528] = -1.26027648E+01;
  COFD[2529] = 2.87965366E+00;
  COFD[2530] = -1.68964954E-01;
  COFD[2531] = 7.77350774E-03;
  COFD[2532] = -1.52165133E+01;
  COFD[2533] = 3.56876681E+00;
  COFD[2534] = -2.59706051E-01;
  COFD[2535] = 1.17707481E-02;
  COFD[2536] = -1.52364556E+01;
  COFD[2537] = 3.56876681E+00;
  COFD[2538] = -2.59706051E-01;
  COFD[2539] = 1.17707481E-02;
  COFD[2540] = -2.13473049E+01;
  COFD[2541] = 5.69594646E+00;
  COFD[2542] = -5.11336009E-01;
  COFD[2543] = 2.16704194E-02;
  COFD[2544] = -1.66060103E+01;
  COFD[2545] = 3.93739829E+00;
  COFD[2546] = -3.07880174E-01;
  COFD[2547] = 1.38773660E-02;
  COFD[2548] = -1.66132405E+01;
  COFD[2549] = 3.93739829E+00;
  COFD[2550] = -3.07880174E-01;
  COFD[2551] = 1.38773660E-02;
  COFD[2552] = -1.65984375E+01;
  COFD[2553] = 3.93739829E+00;
  COFD[2554] = -3.07880174E-01;
  COFD[2555] = 1.38773660E-02;
  COFD[2556] = -1.49687468E+01;
  COFD[2557] = 3.42348623E+00;
  COFD[2558] = -2.40168929E-01;
  COFD[2559] = 1.08895317E-02;
  COFD[2560] = -1.51630508E+01;
  COFD[2561] = 3.56876681E+00;
  COFD[2562] = -2.59706051E-01;
  COFD[2563] = 1.17707481E-02;
  COFD[2564] = -1.51847071E+01;
  COFD[2565] = 3.56876681E+00;
  COFD[2566] = -2.59706051E-01;
  COFD[2567] = 1.17707481E-02;
  COFD[2568] = -2.12089608E+01;
  COFD[2569] = 5.66989626E+00;
  COFD[2570] = -5.14926565E-01;
  COFD[2571] = 2.21254749E-02;
  COFD[2572] = -1.53311928E+01;
  COFD[2573] = 3.42348623E+00;
  COFD[2574] = -2.40168929E-01;
  COFD[2575] = 1.08895317E-02;
  COFD[2576] = -1.53399389E+01;
  COFD[2577] = 3.42348623E+00;
  COFD[2578] = -2.40168929E-01;
  COFD[2579] = 1.08895317E-02;
  COFD[2580] = -1.88622219E+01;
  COFD[2581] = 4.73022116E+00;
  COFD[2582] = -4.08049754E-01;
  COFD[2583] = 1.81119914E-02;
  COFD[2584] = -1.90496325E+01;
  COFD[2585] = 4.76384170E+00;
  COFD[2586] = -4.12247352E-01;
  COFD[2587] = 1.82876042E-02;
  COFD[2588] = -1.53399389E+01;
  COFD[2589] = 3.42348623E+00;
  COFD[2590] = -2.40168929E-01;
  COFD[2591] = 1.08895317E-02;
  COFD[2592] = -1.63650255E+01;
  COFD[2593] = 3.84116521E+00;
  COFD[2594] = -2.95829275E-01;
  COFD[2595] = 1.33744512E-02;
  COFD[2596] = -1.94128046E+01;
  COFD[2597] = 4.90269467E+00;
  COFD[2598] = -4.28761899E-01;
  COFD[2599] = 1.89408158E-02;
  COFD[2600] = -1.88396878E+01;
  COFD[2601] = 4.73022116E+00;
  COFD[2602] = -4.08049754E-01;
  COFD[2603] = 1.81119914E-02;
  COFD[2604] = -1.68700697E+01;
  COFD[2605] = 4.03830514E+00;
  COFD[2606] = -3.20824355E-01;
  COFD[2607] = 1.44328439E-02;
  COFD[2608] = -1.68780018E+01;
  COFD[2609] = 4.03830514E+00;
  COFD[2610] = -3.20824355E-01;
  COFD[2611] = 1.44328439E-02;
  COFD[2612] = -1.68780018E+01;
  COFD[2613] = 4.03830514E+00;
  COFD[2614] = -3.20824355E-01;
  COFD[2615] = 1.44328439E-02;
  COFD[2616] = -1.68855662E+01;
  COFD[2617] = 4.03830514E+00;
  COFD[2618] = -3.20824355E-01;
  COFD[2619] = 1.44328439E-02;
  COFD[2620] = -1.94261707E+01;
  COFD[2621] = 4.90269467E+00;
  COFD[2622] = -4.28761899E-01;
  COFD[2623] = 1.89408158E-02;
  COFD[2624] = -1.94261707E+01;
  COFD[2625] = 4.90269467E+00;
  COFD[2626] = -4.28761899E-01;
  COFD[2627] = 1.89408158E-02;
  COFD[2628] = -1.68700697E+01;
  COFD[2629] = 4.03830514E+00;
  COFD[2630] = -3.20824355E-01;
  COFD[2631] = 1.44328439E-02;
  COFD[2632] = -2.12834885E+01;
  COFD[2633] = 5.49772962E+00;
  COFD[2634] = -4.99263324E-01;
  COFD[2635] = 2.17286528E-02;
  COFD[2636] = -2.12861624E+01;
  COFD[2637] = 5.49772962E+00;
  COFD[2638] = -4.99263324E-01;
  COFD[2639] = 2.17286528E-02;
  COFD[2640] = -1.63547999E+01;
  COFD[2641] = 3.84116521E+00;
  COFD[2642] = -2.95829275E-01;
  COFD[2643] = 1.33744512E-02;
  COFD[2644] = -1.59375039E+01;
  COFD[2645] = 4.38984082E+00;
  COFD[2646] = -3.67107065E-01;
  COFD[2647] = 1.64754030E-02;
  COFD[2648] = -1.26037264E+01;
  COFD[2649] = 2.87965366E+00;
  COFD[2650] = -1.68964954E-01;
  COFD[2651] = 7.77350774E-03;
  COFD[2652] = -1.52218984E+01;
  COFD[2653] = 3.56876681E+00;
  COFD[2654] = -2.59706051E-01;
  COFD[2655] = 1.17707481E-02;
  COFD[2656] = -1.52420610E+01;
  COFD[2657] = 3.56876681E+00;
  COFD[2658] = -2.59706051E-01;
  COFD[2659] = 1.17707481E-02;
  COFD[2660] = -2.13531217E+01;
  COFD[2661] = 5.69594646E+00;
  COFD[2662] = -5.11336009E-01;
  COFD[2663] = 2.16704194E-02;
  COFD[2664] = -1.66141913E+01;
  COFD[2665] = 3.93739829E+00;
  COFD[2666] = -3.07880174E-01;
  COFD[2667] = 1.38773660E-02;
  COFD[2668] = -1.66215417E+01;
  COFD[2669] = 3.93739829E+00;
  COFD[2670] = -3.07880174E-01;
  COFD[2671] = 1.38773660E-02;
  COFD[2672] = -1.66064946E+01;
  COFD[2673] = 3.93739829E+00;
  COFD[2674] = -3.07880174E-01;
  COFD[2675] = 1.38773660E-02;
  COFD[2676] = -1.49736677E+01;
  COFD[2677] = 3.42348623E+00;
  COFD[2678] = -2.40168929E-01;
  COFD[2679] = 1.08895317E-02;
  COFD[2680] = -1.51682116E+01;
  COFD[2681] = 3.56876681E+00;
  COFD[2682] = -2.59706051E-01;
  COFD[2683] = 1.17707481E-02;
  COFD[2684] = -1.51900976E+01;
  COFD[2685] = 3.56876681E+00;
  COFD[2686] = -2.59706051E-01;
  COFD[2687] = 1.17707481E-02;
  COFD[2688] = -2.12145714E+01;
  COFD[2689] = 5.66989626E+00;
  COFD[2690] = -5.14926565E-01;
  COFD[2691] = 2.21254749E-02;
  COFD[2692] = -1.53388598E+01;
  COFD[2693] = 3.42348623E+00;
  COFD[2694] = -2.40168929E-01;
  COFD[2695] = 1.08895317E-02;
  COFD[2696] = -1.53477422E+01;
  COFD[2697] = 3.42348623E+00;
  COFD[2698] = -2.40168929E-01;
  COFD[2699] = 1.08895317E-02;
  COFD[2700] = -1.88701572E+01;
  COFD[2701] = 4.73022116E+00;
  COFD[2702] = -4.08049754E-01;
  COFD[2703] = 1.81119914E-02;
  COFD[2704] = -1.90576956E+01;
  COFD[2705] = 4.76384170E+00;
  COFD[2706] = -4.12247352E-01;
  COFD[2707] = 1.82876042E-02;
  COFD[2708] = -1.53477422E+01;
  COFD[2709] = 3.42348623E+00;
  COFD[2710] = -2.40168929E-01;
  COFD[2711] = 1.08895317E-02;
  COFD[2712] = -1.63728256E+01;
  COFD[2713] = 3.84116521E+00;
  COFD[2714] = -2.95829275E-01;
  COFD[2715] = 1.33744512E-02;
  COFD[2716] = -1.94221240E+01;
  COFD[2717] = 4.90269467E+00;
  COFD[2718] = -4.28761899E-01;
  COFD[2719] = 1.89408158E-02;
  COFD[2720] = -1.88491786E+01;
  COFD[2721] = 4.73022116E+00;
  COFD[2722] = -4.08049754E-01;
  COFD[2723] = 1.81119914E-02;
  COFD[2724] = -1.68780018E+01;
  COFD[2725] = 4.03830514E+00;
  COFD[2726] = -3.20824355E-01;
  COFD[2727] = 1.44328439E-02;
  COFD[2728] = -1.68860619E+01;
  COFD[2729] = 4.03830514E+00;
  COFD[2730] = -3.20824355E-01;
  COFD[2731] = 1.44328439E-02;
  COFD[2732] = -1.68860619E+01;
  COFD[2733] = 4.03830514E+00;
  COFD[2734] = -3.20824355E-01;
  COFD[2735] = 1.44328439E-02;
  COFD[2736] = -1.68937501E+01;
  COFD[2737] = 4.03830514E+00;
  COFD[2738] = -3.20824355E-01;
  COFD[2739] = 1.44328439E-02;
  COFD[2740] = -1.94357450E+01;
  COFD[2741] = 4.90269467E+00;
  COFD[2742] = -4.28761899E-01;
  COFD[2743] = 1.89408158E-02;
  COFD[2744] = -1.94357450E+01;
  COFD[2745] = 4.90269467E+00;
  COFD[2746] = -4.28761899E-01;
  COFD[2747] = 1.89408158E-02;
  COFD[2748] = -1.68780018E+01;
  COFD[2749] = 4.03830514E+00;
  COFD[2750] = -3.20824355E-01;
  COFD[2751] = 1.44328439E-02;
  COFD[2752] = -2.12940915E+01;
  COFD[2753] = 5.49772962E+00;
  COFD[2754] = -4.99263324E-01;
  COFD[2755] = 2.17286528E-02;
  COFD[2756] = -2.12968230E+01;
  COFD[2757] = 5.49772962E+00;
  COFD[2758] = -4.99263324E-01;
  COFD[2759] = 2.17286528E-02;
  COFD[2760] = -1.63547999E+01;
  COFD[2761] = 3.84116521E+00;
  COFD[2762] = -2.95829275E-01;
  COFD[2763] = 1.33744512E-02;
  COFD[2764] = -1.59375039E+01;
  COFD[2765] = 4.38984082E+00;
  COFD[2766] = -3.67107065E-01;
  COFD[2767] = 1.64754030E-02;
  COFD[2768] = -1.26037264E+01;
  COFD[2769] = 2.87965366E+00;
  COFD[2770] = -1.68964954E-01;
  COFD[2771] = 7.77350774E-03;
  COFD[2772] = -1.52218984E+01;
  COFD[2773] = 3.56876681E+00;
  COFD[2774] = -2.59706051E-01;
  COFD[2775] = 1.17707481E-02;
  COFD[2776] = -1.52420610E+01;
  COFD[2777] = 3.56876681E+00;
  COFD[2778] = -2.59706051E-01;
  COFD[2779] = 1.17707481E-02;
  COFD[2780] = -2.13531217E+01;
  COFD[2781] = 5.69594646E+00;
  COFD[2782] = -5.11336009E-01;
  COFD[2783] = 2.16704194E-02;
  COFD[2784] = -1.66141913E+01;
  COFD[2785] = 3.93739829E+00;
  COFD[2786] = -3.07880174E-01;
  COFD[2787] = 1.38773660E-02;
  COFD[2788] = -1.66215417E+01;
  COFD[2789] = 3.93739829E+00;
  COFD[2790] = -3.07880174E-01;
  COFD[2791] = 1.38773660E-02;
  COFD[2792] = -1.66064946E+01;
  COFD[2793] = 3.93739829E+00;
  COFD[2794] = -3.07880174E-01;
  COFD[2795] = 1.38773660E-02;
  COFD[2796] = -1.49736677E+01;
  COFD[2797] = 3.42348623E+00;
  COFD[2798] = -2.40168929E-01;
  COFD[2799] = 1.08895317E-02;
  COFD[2800] = -1.51682116E+01;
  COFD[2801] = 3.56876681E+00;
  COFD[2802] = -2.59706051E-01;
  COFD[2803] = 1.17707481E-02;
  COFD[2804] = -1.51900976E+01;
  COFD[2805] = 3.56876681E+00;
  COFD[2806] = -2.59706051E-01;
  COFD[2807] = 1.17707481E-02;
  COFD[2808] = -2.12145714E+01;
  COFD[2809] = 5.66989626E+00;
  COFD[2810] = -5.14926565E-01;
  COFD[2811] = 2.21254749E-02;
  COFD[2812] = -1.53388598E+01;
  COFD[2813] = 3.42348623E+00;
  COFD[2814] = -2.40168929E-01;
  COFD[2815] = 1.08895317E-02;
  COFD[2816] = -1.53477422E+01;
  COFD[2817] = 3.42348623E+00;
  COFD[2818] = -2.40168929E-01;
  COFD[2819] = 1.08895317E-02;
  COFD[2820] = -1.88701572E+01;
  COFD[2821] = 4.73022116E+00;
  COFD[2822] = -4.08049754E-01;
  COFD[2823] = 1.81119914E-02;
  COFD[2824] = -1.90576956E+01;
  COFD[2825] = 4.76384170E+00;
  COFD[2826] = -4.12247352E-01;
  COFD[2827] = 1.82876042E-02;
  COFD[2828] = -1.53477422E+01;
  COFD[2829] = 3.42348623E+00;
  COFD[2830] = -2.40168929E-01;
  COFD[2831] = 1.08895317E-02;
  COFD[2832] = -1.63728256E+01;
  COFD[2833] = 3.84116521E+00;
  COFD[2834] = -2.95829275E-01;
  COFD[2835] = 1.33744512E-02;
  COFD[2836] = -1.94221240E+01;
  COFD[2837] = 4.90269467E+00;
  COFD[2838] = -4.28761899E-01;
  COFD[2839] = 1.89408158E-02;
  COFD[2840] = -1.88491786E+01;
  COFD[2841] = 4.73022116E+00;
  COFD[2842] = -4.08049754E-01;
  COFD[2843] = 1.81119914E-02;
  COFD[2844] = -1.68780018E+01;
  COFD[2845] = 4.03830514E+00;
  COFD[2846] = -3.20824355E-01;
  COFD[2847] = 1.44328439E-02;
  COFD[2848] = -1.68860619E+01;
  COFD[2849] = 4.03830514E+00;
  COFD[2850] = -3.20824355E-01;
  COFD[2851] = 1.44328439E-02;
  COFD[2852] = -1.68860619E+01;
  COFD[2853] = 4.03830514E+00;
  COFD[2854] = -3.20824355E-01;
  COFD[2855] = 1.44328439E-02;
  COFD[2856] = -1.68937501E+01;
  COFD[2857] = 4.03830514E+00;
  COFD[2858] = -3.20824355E-01;
  COFD[2859] = 1.44328439E-02;
  COFD[2860] = -1.94357450E+01;
  COFD[2861] = 4.90269467E+00;
  COFD[2862] = -4.28761899E-01;
  COFD[2863] = 1.89408158E-02;
  COFD[2864] = -1.94357450E+01;
  COFD[2865] = 4.90269467E+00;
  COFD[2866] = -4.28761899E-01;
  COFD[2867] = 1.89408158E-02;
  COFD[2868] = -1.68780018E+01;
  COFD[2869] = 4.03830514E+00;
  COFD[2870] = -3.20824355E-01;
  COFD[2871] = 1.44328439E-02;
  COFD[2872] = -2.12940915E+01;
  COFD[2873] = 5.49772962E+00;
  COFD[2874] = -4.99263324E-01;
  COFD[2875] = 2.17286528E-02;
  COFD[2876] = -2.12968230E+01;
  COFD[2877] = 5.49772962E+00;
  COFD[2878] = -4.99263324E-01;
  COFD[2879] = 2.17286528E-02;
  COFD[2880] = -1.63619712E+01;
  COFD[2881] = 3.84116521E+00;
  COFD[2882] = -2.95829275E-01;
  COFD[2883] = 1.33744512E-02;
  COFD[2884] = -1.59379698E+01;
  COFD[2885] = 4.38984082E+00;
  COFD[2886] = -3.67107065E-01;
  COFD[2887] = 1.64754030E-02;
  COFD[2888] = -1.26046310E+01;
  COFD[2889] = 2.87965366E+00;
  COFD[2890] = -1.68964954E-01;
  COFD[2891] = 7.77350774E-03;
  COFD[2892] = -1.52270081E+01;
  COFD[2893] = 3.56876681E+00;
  COFD[2894] = -2.59706051E-01;
  COFD[2895] = 1.17707481E-02;
  COFD[2896] = -1.52473822E+01;
  COFD[2897] = 3.56876681E+00;
  COFD[2898] = -2.59706051E-01;
  COFD[2899] = 1.17707481E-02;
  COFD[2900] = -2.13586458E+01;
  COFD[2901] = 5.69594646E+00;
  COFD[2902] = -5.11336009E-01;
  COFD[2903] = 2.16704194E-02;
  COFD[2904] = -1.66219968E+01;
  COFD[2905] = 3.93739829E+00;
  COFD[2906] = -3.07880174E-01;
  COFD[2907] = 1.38773660E-02;
  COFD[2908] = -1.66294637E+01;
  COFD[2909] = 3.93739829E+00;
  COFD[2910] = -3.07880174E-01;
  COFD[2911] = 1.38773660E-02;
  COFD[2912] = -1.66141799E+01;
  COFD[2913] = 3.93739829E+00;
  COFD[2914] = -3.07880174E-01;
  COFD[2915] = 1.38773660E-02;
  COFD[2916] = -1.49783328E+01;
  COFD[2917] = 3.42348623E+00;
  COFD[2918] = -2.40168929E-01;
  COFD[2919] = 1.08895317E-02;
  COFD[2920] = -1.51731064E+01;
  COFD[2921] = 3.56876681E+00;
  COFD[2922] = -2.59706051E-01;
  COFD[2923] = 1.17707481E-02;
  COFD[2924] = -1.51952125E+01;
  COFD[2925] = 3.56876681E+00;
  COFD[2926] = -2.59706051E-01;
  COFD[2927] = 1.17707481E-02;
  COFD[2928] = -2.12198974E+01;
  COFD[2929] = 5.66989626E+00;
  COFD[2930] = -5.14926565E-01;
  COFD[2931] = 2.21254749E-02;
  COFD[2932] = -1.53461674E+01;
  COFD[2933] = 3.42348623E+00;
  COFD[2934] = -2.40168929E-01;
  COFD[2935] = 1.08895317E-02;
  COFD[2936] = -1.53551818E+01;
  COFD[2937] = 3.42348623E+00;
  COFD[2938] = -2.40168929E-01;
  COFD[2939] = 1.08895317E-02;
  COFD[2940] = -1.88777246E+01;
  COFD[2941] = 4.73022116E+00;
  COFD[2942] = -4.08049754E-01;
  COFD[2943] = 1.81119914E-02;
  COFD[2944] = -1.90653867E+01;
  COFD[2945] = 4.76384170E+00;
  COFD[2946] = -4.12247352E-01;
  COFD[2947] = 1.82876042E-02;
  COFD[2948] = -1.53551818E+01;
  COFD[2949] = 3.42348623E+00;
  COFD[2950] = -2.40168929E-01;
  COFD[2951] = 1.08895317E-02;
  COFD[2952] = -1.63802621E+01;
  COFD[2953] = 3.84116521E+00;
  COFD[2954] = -2.95829275E-01;
  COFD[2955] = 1.33744512E-02;
  COFD[2956] = -1.94310355E+01;
  COFD[2957] = 4.90269467E+00;
  COFD[2958] = -4.28761899E-01;
  COFD[2959] = 1.89408158E-02;
  COFD[2960] = -1.88582572E+01;
  COFD[2961] = 4.73022116E+00;
  COFD[2962] = -4.08049754E-01;
  COFD[2963] = 1.81119914E-02;
  COFD[2964] = -1.68855662E+01;
  COFD[2965] = 4.03830514E+00;
  COFD[2966] = -3.20824355E-01;
  COFD[2967] = 1.44328439E-02;
  COFD[2968] = -1.68937501E+01;
  COFD[2969] = 4.03830514E+00;
  COFD[2970] = -3.20824355E-01;
  COFD[2971] = 1.44328439E-02;
  COFD[2972] = -1.68937501E+01;
  COFD[2973] = 4.03830514E+00;
  COFD[2974] = -3.20824355E-01;
  COFD[2975] = 1.44328439E-02;
  COFD[2976] = -1.69015584E+01;
  COFD[2977] = 4.03830514E+00;
  COFD[2978] = -3.20824355E-01;
  COFD[2979] = 1.44328439E-02;
  COFD[2980] = -1.94449050E+01;
  COFD[2981] = 4.90269467E+00;
  COFD[2982] = -4.28761899E-01;
  COFD[2983] = 1.89408158E-02;
  COFD[2984] = -1.94449050E+01;
  COFD[2985] = 4.90269467E+00;
  COFD[2986] = -4.28761899E-01;
  COFD[2987] = 1.89408158E-02;
  COFD[2988] = -1.68855662E+01;
  COFD[2989] = 4.03830514E+00;
  COFD[2990] = -3.20824355E-01;
  COFD[2991] = 1.44328439E-02;
  COFD[2992] = -2.13042564E+01;
  COFD[2993] = 5.49772962E+00;
  COFD[2994] = -4.99263324E-01;
  COFD[2995] = 2.17286528E-02;
  COFD[2996] = -2.13070441E+01;
  COFD[2997] = 5.49772962E+00;
  COFD[2998] = -4.99263324E-01;
  COFD[2999] = 2.17286528E-02;
  COFD[3000] = -1.88202955E+01;
  COFD[3001] = 4.68604725E+00;
  COFD[3002] = -4.02447850E-01;
  COFD[3003] = 1.78737480E-02;
  COFD[3004] = -1.82896392E+01;
  COFD[3005] = 5.17547422E+00;
  COFD[3006] = -4.61667656E-01;
  COFD[3007] = 2.02679020E-02;
  COFD[3008] = -1.43481792E+01;
  COFD[3009] = 3.50071440E+00;
  COFD[3010] = -2.50634617E-01;
  COFD[3011] = 1.13652480E-02;
  COFD[3012] = -1.78935197E+01;
  COFD[3013] = 4.52608319E+00;
  COFD[3014] = -3.84657523E-01;
  COFD[3015] = 1.72334108E-02;
  COFD[3016] = -1.79161340E+01;
  COFD[3017] = 4.52608319E+00;
  COFD[3018] = -3.84657523E-01;
  COFD[3019] = 1.72334108E-02;
  COFD[3020] = -1.99862047E+01;
  COFD[3021] = 4.72476207E+00;
  COFD[3022] = -3.40065621E-01;
  COFD[3023] = 1.23023869E-02;
  COFD[3024] = -1.91873737E+01;
  COFD[3025] = 4.81815189E+00;
  COFD[3026] = -4.18967582E-01;
  COFD[3027] = 1.85662180E-02;
  COFD[3028] = -1.91961559E+01;
  COFD[3029] = 4.81815189E+00;
  COFD[3030] = -4.18967582E-01;
  COFD[3031] = 1.85662180E-02;
  COFD[3032] = -1.91782042E+01;
  COFD[3033] = 4.81815189E+00;
  COFD[3034] = -4.18967582E-01;
  COFD[3035] = 1.85662180E-02;
  COFD[3036] = -1.75681152E+01;
  COFD[3037] = 4.36234472E+00;
  COFD[3038] = -3.63565310E-01;
  COFD[3039] = 1.63224751E-02;
  COFD[3040] = -1.78390133E+01;
  COFD[3041] = 4.52608319E+00;
  COFD[3042] = -3.84657523E-01;
  COFD[3043] = 1.72334108E-02;
  COFD[3044] = -1.78634410E+01;
  COFD[3045] = 4.52608319E+00;
  COFD[3046] = -3.84657523E-01;
  COFD[3047] = 1.72334108E-02;
  COFD[3048] = -2.06867426E+01;
  COFD[3049] = 5.07411445E+00;
  COFD[3050] = -3.98163718E-01;
  COFD[3051] = 1.53623128E-02;
  COFD[3052] = -1.79579944E+01;
  COFD[3053] = 4.36234472E+00;
  COFD[3054] = -3.63565310E-01;
  COFD[3055] = 1.63224751E-02;
  COFD[3056] = -1.79684808E+01;
  COFD[3057] = 4.36234472E+00;
  COFD[3058] = -3.63565310E-01;
  COFD[3059] = 1.63224751E-02;
  COFD[3060] = -2.14424505E+01;
  COFD[3061] = 5.56408850E+00;
  COFD[3062] = -5.07010682E-01;
  COFD[3063] = 2.20297833E-02;
  COFD[3064] = -2.16363966E+01;
  COFD[3065] = 5.59921973E+00;
  COFD[3066] = -5.11188988E-01;
  COFD[3067] = 2.21960407E-02;
  COFD[3068] = -1.79684808E+01;
  COFD[3069] = 4.36234472E+00;
  COFD[3070] = -3.63565310E-01;
  COFD[3071] = 1.63224751E-02;
  COFD[3072] = -1.88415399E+01;
  COFD[3073] = 4.68604725E+00;
  COFD[3074] = -4.02447850E-01;
  COFD[3075] = 1.78737480E-02;
  COFD[3076] = -2.18895763E+01;
  COFD[3077] = 5.66854155E+00;
  COFD[3078] = -5.16283438E-01;
  COFD[3079] = 2.22503597E-02;
  COFD[3080] = -2.14452092E+01;
  COFD[3081] = 5.56408850E+00;
  COFD[3082] = -5.07010682E-01;
  COFD[3083] = 2.20297833E-02;
  COFD[3084] = -1.94261707E+01;
  COFD[3085] = 4.90269467E+00;
  COFD[3086] = -4.28761899E-01;
  COFD[3087] = 1.89408158E-02;
  COFD[3088] = -1.94357450E+01;
  COFD[3089] = 4.90269467E+00;
  COFD[3090] = -4.28761899E-01;
  COFD[3091] = 1.89408158E-02;
  COFD[3092] = -1.94357450E+01;
  COFD[3093] = 4.90269467E+00;
  COFD[3094] = -4.28761899E-01;
  COFD[3095] = 1.89408158E-02;
  COFD[3096] = -1.94449050E+01;
  COFD[3097] = 4.90269467E+00;
  COFD[3098] = -4.28761899E-01;
  COFD[3099] = 1.89408158E-02;
  COFD[3100] = -2.19063328E+01;
  COFD[3101] = 5.66854155E+00;
  COFD[3102] = -5.16283438E-01;
  COFD[3103] = 2.22503597E-02;
  COFD[3104] = -2.19063328E+01;
  COFD[3105] = 5.66854155E+00;
  COFD[3106] = -5.16283438E-01;
  COFD[3107] = 2.22503597E-02;
  COFD[3108] = -1.94261707E+01;
  COFD[3109] = 4.90269467E+00;
  COFD[3110] = -4.28761899E-01;
  COFD[3111] = 1.89408158E-02;
  COFD[3112] = -2.21064730E+01;
  COFD[3113] = 5.48517812E+00;
  COFD[3114] = -4.68486535E-01;
  COFD[3115] = 1.91421163E-02;
  COFD[3116] = -2.21099343E+01;
  COFD[3117] = 5.48517812E+00;
  COFD[3118] = -4.68486535E-01;
  COFD[3119] = 1.91421163E-02;
  COFD[3120] = -1.88202955E+01;
  COFD[3121] = 4.68604725E+00;
  COFD[3122] = -4.02447850E-01;
  COFD[3123] = 1.78737480E-02;
  COFD[3124] = -1.82896392E+01;
  COFD[3125] = 5.17547422E+00;
  COFD[3126] = -4.61667656E-01;
  COFD[3127] = 2.02679020E-02;
  COFD[3128] = -1.43481792E+01;
  COFD[3129] = 3.50071440E+00;
  COFD[3130] = -2.50634617E-01;
  COFD[3131] = 1.13652480E-02;
  COFD[3132] = -1.78935197E+01;
  COFD[3133] = 4.52608319E+00;
  COFD[3134] = -3.84657523E-01;
  COFD[3135] = 1.72334108E-02;
  COFD[3136] = -1.79161340E+01;
  COFD[3137] = 4.52608319E+00;
  COFD[3138] = -3.84657523E-01;
  COFD[3139] = 1.72334108E-02;
  COFD[3140] = -1.99862047E+01;
  COFD[3141] = 4.72476207E+00;
  COFD[3142] = -3.40065621E-01;
  COFD[3143] = 1.23023869E-02;
  COFD[3144] = -1.91873737E+01;
  COFD[3145] = 4.81815189E+00;
  COFD[3146] = -4.18967582E-01;
  COFD[3147] = 1.85662180E-02;
  COFD[3148] = -1.91961559E+01;
  COFD[3149] = 4.81815189E+00;
  COFD[3150] = -4.18967582E-01;
  COFD[3151] = 1.85662180E-02;
  COFD[3152] = -1.91782042E+01;
  COFD[3153] = 4.81815189E+00;
  COFD[3154] = -4.18967582E-01;
  COFD[3155] = 1.85662180E-02;
  COFD[3156] = -1.75681152E+01;
  COFD[3157] = 4.36234472E+00;
  COFD[3158] = -3.63565310E-01;
  COFD[3159] = 1.63224751E-02;
  COFD[3160] = -1.78390133E+01;
  COFD[3161] = 4.52608319E+00;
  COFD[3162] = -3.84657523E-01;
  COFD[3163] = 1.72334108E-02;
  COFD[3164] = -1.78634410E+01;
  COFD[3165] = 4.52608319E+00;
  COFD[3166] = -3.84657523E-01;
  COFD[3167] = 1.72334108E-02;
  COFD[3168] = -2.06867426E+01;
  COFD[3169] = 5.07411445E+00;
  COFD[3170] = -3.98163718E-01;
  COFD[3171] = 1.53623128E-02;
  COFD[3172] = -1.79579944E+01;
  COFD[3173] = 4.36234472E+00;
  COFD[3174] = -3.63565310E-01;
  COFD[3175] = 1.63224751E-02;
  COFD[3176] = -1.79684808E+01;
  COFD[3177] = 4.36234472E+00;
  COFD[3178] = -3.63565310E-01;
  COFD[3179] = 1.63224751E-02;
  COFD[3180] = -2.14424505E+01;
  COFD[3181] = 5.56408850E+00;
  COFD[3182] = -5.07010682E-01;
  COFD[3183] = 2.20297833E-02;
  COFD[3184] = -2.16363966E+01;
  COFD[3185] = 5.59921973E+00;
  COFD[3186] = -5.11188988E-01;
  COFD[3187] = 2.21960407E-02;
  COFD[3188] = -1.79684808E+01;
  COFD[3189] = 4.36234472E+00;
  COFD[3190] = -3.63565310E-01;
  COFD[3191] = 1.63224751E-02;
  COFD[3192] = -1.88415399E+01;
  COFD[3193] = 4.68604725E+00;
  COFD[3194] = -4.02447850E-01;
  COFD[3195] = 1.78737480E-02;
  COFD[3196] = -2.18895763E+01;
  COFD[3197] = 5.66854155E+00;
  COFD[3198] = -5.16283438E-01;
  COFD[3199] = 2.22503597E-02;
  COFD[3200] = -2.14452092E+01;
  COFD[3201] = 5.56408850E+00;
  COFD[3202] = -5.07010682E-01;
  COFD[3203] = 2.20297833E-02;
  COFD[3204] = -1.94261707E+01;
  COFD[3205] = 4.90269467E+00;
  COFD[3206] = -4.28761899E-01;
  COFD[3207] = 1.89408158E-02;
  COFD[3208] = -1.94357450E+01;
  COFD[3209] = 4.90269467E+00;
  COFD[3210] = -4.28761899E-01;
  COFD[3211] = 1.89408158E-02;
  COFD[3212] = -1.94357450E+01;
  COFD[3213] = 4.90269467E+00;
  COFD[3214] = -4.28761899E-01;
  COFD[3215] = 1.89408158E-02;
  COFD[3216] = -1.94449050E+01;
  COFD[3217] = 4.90269467E+00;
  COFD[3218] = -4.28761899E-01;
  COFD[3219] = 1.89408158E-02;
  COFD[3220] = -2.19063328E+01;
  COFD[3221] = 5.66854155E+00;
  COFD[3222] = -5.16283438E-01;
  COFD[3223] = 2.22503597E-02;
  COFD[3224] = -2.19063328E+01;
  COFD[3225] = 5.66854155E+00;
  COFD[3226] = -5.16283438E-01;
  COFD[3227] = 2.22503597E-02;
  COFD[3228] = -1.94261707E+01;
  COFD[3229] = 4.90269467E+00;
  COFD[3230] = -4.28761899E-01;
  COFD[3231] = 1.89408158E-02;
  COFD[3232] = -2.21064730E+01;
  COFD[3233] = 5.48517812E+00;
  COFD[3234] = -4.68486535E-01;
  COFD[3235] = 1.91421163E-02;
  COFD[3236] = -2.21099343E+01;
  COFD[3237] = 5.48517812E+00;
  COFD[3238] = -4.68486535E-01;
  COFD[3239] = 1.91421163E-02;
  COFD[3240] = -1.63472739E+01;
  COFD[3241] = 3.84116521E+00;
  COFD[3242] = -2.95829275E-01;
  COFD[3243] = 1.33744512E-02;
  COFD[3244] = -1.59370083E+01;
  COFD[3245] = 4.38984082E+00;
  COFD[3246] = -3.67107065E-01;
  COFD[3247] = 1.64754030E-02;
  COFD[3248] = -1.26027648E+01;
  COFD[3249] = 2.87965366E+00;
  COFD[3250] = -1.68964954E-01;
  COFD[3251] = 7.77350774E-03;
  COFD[3252] = -1.52165133E+01;
  COFD[3253] = 3.56876681E+00;
  COFD[3254] = -2.59706051E-01;
  COFD[3255] = 1.17707481E-02;
  COFD[3256] = -1.52364556E+01;
  COFD[3257] = 3.56876681E+00;
  COFD[3258] = -2.59706051E-01;
  COFD[3259] = 1.17707481E-02;
  COFD[3260] = -2.13473049E+01;
  COFD[3261] = 5.69594646E+00;
  COFD[3262] = -5.11336009E-01;
  COFD[3263] = 2.16704194E-02;
  COFD[3264] = -1.66060103E+01;
  COFD[3265] = 3.93739829E+00;
  COFD[3266] = -3.07880174E-01;
  COFD[3267] = 1.38773660E-02;
  COFD[3268] = -1.66132405E+01;
  COFD[3269] = 3.93739829E+00;
  COFD[3270] = -3.07880174E-01;
  COFD[3271] = 1.38773660E-02;
  COFD[3272] = -1.65984375E+01;
  COFD[3273] = 3.93739829E+00;
  COFD[3274] = -3.07880174E-01;
  COFD[3275] = 1.38773660E-02;
  COFD[3276] = -1.49687468E+01;
  COFD[3277] = 3.42348623E+00;
  COFD[3278] = -2.40168929E-01;
  COFD[3279] = 1.08895317E-02;
  COFD[3280] = -1.51630508E+01;
  COFD[3281] = 3.56876681E+00;
  COFD[3282] = -2.59706051E-01;
  COFD[3283] = 1.17707481E-02;
  COFD[3284] = -1.51847071E+01;
  COFD[3285] = 3.56876681E+00;
  COFD[3286] = -2.59706051E-01;
  COFD[3287] = 1.17707481E-02;
  COFD[3288] = -2.12089608E+01;
  COFD[3289] = 5.66989626E+00;
  COFD[3290] = -5.14926565E-01;
  COFD[3291] = 2.21254749E-02;
  COFD[3292] = -1.53311928E+01;
  COFD[3293] = 3.42348623E+00;
  COFD[3294] = -2.40168929E-01;
  COFD[3295] = 1.08895317E-02;
  COFD[3296] = -1.53399389E+01;
  COFD[3297] = 3.42348623E+00;
  COFD[3298] = -2.40168929E-01;
  COFD[3299] = 1.08895317E-02;
  COFD[3300] = -1.88622219E+01;
  COFD[3301] = 4.73022116E+00;
  COFD[3302] = -4.08049754E-01;
  COFD[3303] = 1.81119914E-02;
  COFD[3304] = -1.90496325E+01;
  COFD[3305] = 4.76384170E+00;
  COFD[3306] = -4.12247352E-01;
  COFD[3307] = 1.82876042E-02;
  COFD[3308] = -1.53399389E+01;
  COFD[3309] = 3.42348623E+00;
  COFD[3310] = -2.40168929E-01;
  COFD[3311] = 1.08895317E-02;
  COFD[3312] = -1.63650255E+01;
  COFD[3313] = 3.84116521E+00;
  COFD[3314] = -2.95829275E-01;
  COFD[3315] = 1.33744512E-02;
  COFD[3316] = -1.94128046E+01;
  COFD[3317] = 4.90269467E+00;
  COFD[3318] = -4.28761899E-01;
  COFD[3319] = 1.89408158E-02;
  COFD[3320] = -1.88396878E+01;
  COFD[3321] = 4.73022116E+00;
  COFD[3322] = -4.08049754E-01;
  COFD[3323] = 1.81119914E-02;
  COFD[3324] = -1.68700697E+01;
  COFD[3325] = 4.03830514E+00;
  COFD[3326] = -3.20824355E-01;
  COFD[3327] = 1.44328439E-02;
  COFD[3328] = -1.68780018E+01;
  COFD[3329] = 4.03830514E+00;
  COFD[3330] = -3.20824355E-01;
  COFD[3331] = 1.44328439E-02;
  COFD[3332] = -1.68780018E+01;
  COFD[3333] = 4.03830514E+00;
  COFD[3334] = -3.20824355E-01;
  COFD[3335] = 1.44328439E-02;
  COFD[3336] = -1.68855662E+01;
  COFD[3337] = 4.03830514E+00;
  COFD[3338] = -3.20824355E-01;
  COFD[3339] = 1.44328439E-02;
  COFD[3340] = -1.94261707E+01;
  COFD[3341] = 4.90269467E+00;
  COFD[3342] = -4.28761899E-01;
  COFD[3343] = 1.89408158E-02;
  COFD[3344] = -1.94261707E+01;
  COFD[3345] = 4.90269467E+00;
  COFD[3346] = -4.28761899E-01;
  COFD[3347] = 1.89408158E-02;
  COFD[3348] = -1.68700697E+01;
  COFD[3349] = 4.03830514E+00;
  COFD[3350] = -3.20824355E-01;
  COFD[3351] = 1.44328439E-02;
  COFD[3352] = -2.12834885E+01;
  COFD[3353] = 5.49772962E+00;
  COFD[3354] = -4.99263324E-01;
  COFD[3355] = 2.17286528E-02;
  COFD[3356] = -2.12861624E+01;
  COFD[3357] = 5.49772962E+00;
  COFD[3358] = -4.99263324E-01;
  COFD[3359] = 2.17286528E-02;
  COFD[3360] = -2.07668563E+01;
  COFD[3361] = 5.33334939E+00;
  COFD[3362] = -4.81711199E-01;
  COFD[3363] = 2.11250966E-02;
  COFD[3364] = -1.99222312E+01;
  COFD[3365] = 5.66778484E+00;
  COFD[3366] = -5.15523663E-01;
  COFD[3367] = 2.21886867E-02;
  COFD[3368] = -1.60056226E+01;
  COFD[3369] = 4.08811353E+00;
  COFD[3370] = -3.26901548E-01;
  COFD[3371] = 1.46795221E-02;
  COFD[3372] = -1.95569014E+01;
  COFD[3373] = 5.05986965E+00;
  COFD[3374] = -4.48208767E-01;
  COFD[3375] = 1.97468676E-02;
  COFD[3376] = -1.95810310E+01;
  COFD[3377] = 5.05986965E+00;
  COFD[3378] = -4.48208767E-01;
  COFD[3379] = 1.97468676E-02;
  COFD[3380] = -1.72768357E+01;
  COFD[3381] = 3.27911247E+00;
  COFD[3382] = -1.12320068E-01;
  COFD[3383] = 7.57282813E-04;
  COFD[3384] = -2.11337782E+01;
  COFD[3385] = 5.45685394E+00;
  COFD[3386] = -4.96436585E-01;
  COFD[3387] = 2.17129560E-02;
  COFD[3388] = -2.11435429E+01;
  COFD[3389] = 5.45685394E+00;
  COFD[3390] = -4.96436585E-01;
  COFD[3391] = 2.17129560E-02;
  COFD[3392] = -2.11236033E+01;
  COFD[3393] = 5.45685394E+00;
  COFD[3394] = -4.96436585E-01;
  COFD[3395] = 2.17129560E-02;
  COFD[3396] = -1.92099932E+01;
  COFD[3397] = 4.89875859E+00;
  COFD[3398] = -4.28308131E-01;
  COFD[3399] = 1.89235761E-02;
  COFD[3400] = -1.95024193E+01;
  COFD[3401] = 5.05986965E+00;
  COFD[3402] = -4.48208767E-01;
  COFD[3403] = 1.97468676E-02;
  COFD[3404] = -1.95284057E+01;
  COFD[3405] = 5.05986965E+00;
  COFD[3406] = -4.48208767E-01;
  COFD[3407] = 1.97468676E-02;
  COFD[3408] = -1.83657384E+01;
  COFD[3409] = 3.78990548E+00;
  COFD[3410] = -1.91734886E-01;
  COFD[3411] = 4.72918702E-03;
  COFD[3412] = -1.96136367E+01;
  COFD[3413] = 4.89875859E+00;
  COFD[3414] = -4.28308131E-01;
  COFD[3415] = 1.89235761E-02;
  COFD[3416] = -1.96252017E+01;
  COFD[3417] = 4.89875859E+00;
  COFD[3418] = -4.28308131E-01;
  COFD[3419] = 1.89235761E-02;
  COFD[3420] = -2.22427644E+01;
  COFD[3421] = 5.65932555E+00;
  COFD[3422] = -5.00638028E-01;
  COFD[3423] = 2.09517204E-02;
  COFD[3424] = -2.22845606E+01;
  COFD[3425] = 5.62734738E+00;
  COFD[3426] = -4.94901103E-01;
  COFD[3427] = 2.06338814E-02;
  COFD[3428] = -1.96252017E+01;
  COFD[3429] = 4.89875859E+00;
  COFD[3430] = -4.28308131E-01;
  COFD[3431] = 1.89235761E-02;
  COFD[3432] = -2.07902590E+01;
  COFD[3433] = 5.33334939E+00;
  COFD[3434] = -4.81711199E-01;
  COFD[3435] = 2.11250966E-02;
  COFD[3436] = -2.20874556E+01;
  COFD[3437] = 5.48517812E+00;
  COFD[3438] = -4.68486535E-01;
  COFD[3439] = 1.91421163E-02;
  COFD[3440] = -2.22633424E+01;
  COFD[3441] = 5.65932555E+00;
  COFD[3442] = -5.00638028E-01;
  COFD[3443] = 2.09517204E-02;
  COFD[3444] = -2.12834885E+01;
  COFD[3445] = 5.49772962E+00;
  COFD[3446] = -4.99263324E-01;
  COFD[3447] = 2.17286528E-02;
  COFD[3448] = -2.12940915E+01;
  COFD[3449] = 5.49772962E+00;
  COFD[3450] = -4.99263324E-01;
  COFD[3451] = 2.17286528E-02;
  COFD[3452] = -2.12940915E+01;
  COFD[3453] = 5.49772962E+00;
  COFD[3454] = -4.99263324E-01;
  COFD[3455] = 2.17286528E-02;
  COFD[3456] = -2.13042564E+01;
  COFD[3457] = 5.49772962E+00;
  COFD[3458] = -4.99263324E-01;
  COFD[3459] = 2.17286528E-02;
  COFD[3460] = -2.21064730E+01;
  COFD[3461] = 5.48517812E+00;
  COFD[3462] = -4.68486535E-01;
  COFD[3463] = 1.91421163E-02;
  COFD[3464] = -2.21064730E+01;
  COFD[3465] = 5.48517812E+00;
  COFD[3466] = -4.68486535E-01;
  COFD[3467] = 1.91421163E-02;
  COFD[3468] = -2.12834885E+01;
  COFD[3469] = 5.49772962E+00;
  COFD[3470] = -4.99263324E-01;
  COFD[3471] = 2.17286528E-02;
  COFD[3472] = -2.06138837E+01;
  COFD[3473] = 4.54931550E+00;
  COFD[3474] = -3.11524054E-01;
  COFD[3475] = 1.08212931E-02;
  COFD[3476] = -2.06178991E+01;
  COFD[3477] = 4.54931550E+00;
  COFD[3478] = -3.11524054E-01;
  COFD[3479] = 1.08212931E-02;
  COFD[3480] = -2.07693517E+01;
  COFD[3481] = 5.33334939E+00;
  COFD[3482] = -4.81711199E-01;
  COFD[3483] = 2.11250966E-02;
  COFD[3484] = -1.99223592E+01;
  COFD[3485] = 5.66778484E+00;
  COFD[3486] = -5.15523663E-01;
  COFD[3487] = 2.21886867E-02;
  COFD[3488] = -1.60058745E+01;
  COFD[3489] = 4.08811353E+00;
  COFD[3490] = -3.26901548E-01;
  COFD[3491] = 1.46795221E-02;
  COFD[3492] = -1.95585447E+01;
  COFD[3493] = 5.05986965E+00;
  COFD[3494] = -4.48208767E-01;
  COFD[3495] = 1.97468676E-02;
  COFD[3496] = -1.95827556E+01;
  COFD[3497] = 5.05986965E+00;
  COFD[3498] = -4.48208767E-01;
  COFD[3499] = 1.97468676E-02;
  COFD[3500] = -1.72786397E+01;
  COFD[3501] = 3.27911247E+00;
  COFD[3502] = -1.12320068E-01;
  COFD[3503] = 7.57282813E-04;
  COFD[3504] = -2.11365646E+01;
  COFD[3505] = 5.45685394E+00;
  COFD[3506] = -4.96436585E-01;
  COFD[3507] = 2.17129560E-02;
  COFD[3508] = -2.11463843E+01;
  COFD[3509] = 5.45685394E+00;
  COFD[3510] = -4.96436585E-01;
  COFD[3511] = 2.17129560E-02;
  COFD[3512] = -2.11263334E+01;
  COFD[3513] = 5.45685394E+00;
  COFD[3514] = -4.96436585E-01;
  COFD[3515] = 2.17129560E-02;
  COFD[3516] = -1.92114693E+01;
  COFD[3517] = 4.89875859E+00;
  COFD[3518] = -4.28308131E-01;
  COFD[3519] = 1.89235761E-02;
  COFD[3520] = -1.95039811E+01;
  COFD[3521] = 5.05986965E+00;
  COFD[3522] = -4.48208767E-01;
  COFD[3523] = 1.97468676E-02;
  COFD[3524] = -1.95300509E+01;
  COFD[3525] = 5.05986965E+00;
  COFD[3526] = -4.48208767E-01;
  COFD[3527] = 1.97468676E-02;
  COFD[3528] = -1.83674650E+01;
  COFD[3529] = 3.78990548E+00;
  COFD[3530] = -1.91734886E-01;
  COFD[3531] = 4.72918702E-03;
  COFD[3532] = -1.96161934E+01;
  COFD[3533] = 4.89875859E+00;
  COFD[3534] = -4.28308131E-01;
  COFD[3535] = 1.89235761E-02;
  COFD[3536] = -1.96278183E+01;
  COFD[3537] = 4.89875859E+00;
  COFD[3538] = -4.28308131E-01;
  COFD[3539] = 1.89235761E-02;
  COFD[3540] = -2.22454398E+01;
  COFD[3541] = 5.65932555E+00;
  COFD[3542] = -5.00638028E-01;
  COFD[3543] = 2.09517204E-02;
  COFD[3544] = -2.22872934E+01;
  COFD[3545] = 5.62734738E+00;
  COFD[3546] = -4.94901103E-01;
  COFD[3547] = 2.06338814E-02;
  COFD[3548] = -1.96278183E+01;
  COFD[3549] = 4.89875859E+00;
  COFD[3550] = -4.28308131E-01;
  COFD[3551] = 1.89235761E-02;
  COFD[3552] = -2.07928743E+01;
  COFD[3553] = 5.33334939E+00;
  COFD[3554] = -4.81711199E-01;
  COFD[3555] = 2.11250966E-02;
  COFD[3556] = -2.20907873E+01;
  COFD[3557] = 5.48517812E+00;
  COFD[3558] = -4.68486535E-01;
  COFD[3559] = 1.91421163E-02;
  COFD[3560] = -2.22667609E+01;
  COFD[3561] = 5.65932555E+00;
  COFD[3562] = -5.00638028E-01;
  COFD[3563] = 2.09517204E-02;
  COFD[3564] = -2.12861624E+01;
  COFD[3565] = 5.49772962E+00;
  COFD[3566] = -4.99263324E-01;
  COFD[3567] = 2.17286528E-02;
  COFD[3568] = -2.12968230E+01;
  COFD[3569] = 5.49772962E+00;
  COFD[3570] = -4.99263324E-01;
  COFD[3571] = 2.17286528E-02;
  COFD[3572] = -2.12968230E+01;
  COFD[3573] = 5.49772962E+00;
  COFD[3574] = -4.99263324E-01;
  COFD[3575] = 2.17286528E-02;
  COFD[3576] = -2.13070441E+01;
  COFD[3577] = 5.49772962E+00;
  COFD[3578] = -4.99263324E-01;
  COFD[3579] = 2.17286528E-02;
  COFD[3580] = -2.21099343E+01;
  COFD[3581] = 5.48517812E+00;
  COFD[3582] = -4.68486535E-01;
  COFD[3583] = 1.91421163E-02;
  COFD[3584] = -2.21099343E+01;
  COFD[3585] = 5.48517812E+00;
  COFD[3586] = -4.68486535E-01;
  COFD[3587] = 1.91421163E-02;
  COFD[3588] = -2.12861624E+01;
  COFD[3589] = 5.49772962E+00;
  COFD[3590] = -4.99263324E-01;
  COFD[3591] = 2.17286528E-02;
  COFD[3592] = -2.06178991E+01;
  COFD[3593] = 4.54931550E+00;
  COFD[3594] = -3.11524054E-01;
  COFD[3595] = 1.08212931E-02;
  COFD[3596] = -2.06219469E+01;
  COFD[3597] = 4.54931550E+00;
  COFD[3598] = -3.11524054E-01;
  COFD[3599] = 1.08212931E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 1;
  KTDIF[1] = 2;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 8.94248926E-02;
  COFTD[1] = 9.59272316E-04;
  COFTD[2] = -6.91613109E-07;
  COFTD[3] = 1.60096781E-10;
  COFTD[4] = 0.00000000E+00;
  COFTD[5] = 0.00000000E+00;
  COFTD[6] = 0.00000000E+00;
  COFTD[7] = 0.00000000E+00;
  COFTD[8] = 1.15570296E-01;
  COFTD[9] = 1.82012403E-04;
  COFTD[10] = -1.48317762E-07;
  COFTD[11] = 3.73110256E-11;
  COFTD[12] = 1.33057181E-01;
  COFTD[13] = 8.27852352E-04;
  COFTD[14] = -6.11356852E-07;
  COFTD[15] = 1.43680475E-10;
  COFTD[16] = 1.34058390E-01;
  COFTD[17] = 8.34081649E-04;
  COFTD[18] = -6.15957098E-07;
  COFTD[19] = 1.44761620E-10;
  COFTD[20] = -2.41001157E-01;
  COFTD[21] = 1.09298402E-03;
  COFTD[22] = -5.98082581E-07;
  COFTD[23] = 1.16371915E-10;
  COFTD[24] = 6.54077851E-02;
  COFTD[25] = 1.00858699E-03;
  COFTD[26] = -7.18752451E-07;
  COFTD[27] = 1.65180980E-10;
  COFTD[28] = 6.55263939E-02;
  COFTD[29] = 1.01041593E-03;
  COFTD[30] = -7.20055818E-07;
  COFTD[31] = 1.65480515E-10;
  COFTD[32] = 6.52819318E-02;
  COFTD[33] = 1.00664633E-03;
  COFTD[34] = -7.17369475E-07;
  COFTD[35] = 1.64863150E-10;
  COFTD[36] = 1.57829506E-01;
  COFTD[37] = 7.64453736E-04;
  COFTD[38] = -5.72463522E-07;
  COFTD[39] = 1.35756835E-10;
  COFTD[40] = 1.31958303E-01;
  COFTD[41] = 8.21015376E-04;
  COFTD[42] = -6.06307845E-07;
  COFTD[43] = 1.42493863E-10;
  COFTD[44] = 1.33082397E-01;
  COFTD[45] = 8.28009238E-04;
  COFTD[46] = -6.11472710E-07;
  COFTD[47] = 1.43707704E-10;
  COFTD[48] = -2.24243990E-01;
  COFTD[49] = 1.12595657E-03;
  COFTD[50] = -6.41884765E-07;
  COFTD[51] = 1.28460863E-10;
  COFTD[52] = 1.70068304E-01;
  COFTD[53] = 8.23732862E-04;
  COFTD[54] = -6.16854878E-07;
  COFTD[55] = 1.46284021E-10;
  COFTD[56] = 1.70465775E-01;
  COFTD[57] = 8.25658030E-04;
  COFTD[58] = -6.18296545E-07;
  COFTD[59] = 1.46625905E-10;
  COFTD[60] = -8.63677374E-02;
  COFTD[61] = 1.18810709E-03;
  COFTD[62] = -7.83102034E-07;
  COFTD[63] = 1.71649014E-10;
  COFTD[64] = -9.20345553E-02;
  COFTD[65] = 1.19505405E-03;
  COFTD[66] = -7.85070510E-07;
  COFTD[67] = 1.71736827E-10;
  COFTD[68] = 1.70465775E-01;
  COFTD[69] = 8.25658030E-04;
  COFTD[70] = -6.18296545E-07;
  COFTD[71] = 1.46625905E-10;
  COFTD[72] = 8.98536585E-02;
  COFTD[73] = 9.63871743E-04;
  COFTD[74] = -6.94929190E-07;
  COFTD[75] = 1.60864398E-10;
  COFTD[76] = -1.21085328E-01;
  COFTD[77] = 1.23521359E-03;
  COFTD[78] = -7.97544950E-07;
  COFTD[79] = 1.72655137E-10;
  COFTD[80] = -8.82136176E-02;
  COFTD[81] = 1.21349971E-03;
  COFTD[82] = -7.99838753E-07;
  COFTD[83] = 1.75317554E-10;
  COFTD[84] = 4.38590721E-02;
  COFTD[85] = 1.03604145E-03;
  COFTD[86] = -7.30929099E-07;
  COFTD[87] = 1.66942702E-10;
  COFTD[88] = 4.39489999E-02;
  COFTD[89] = 1.03816573E-03;
  COFTD[90] = -7.32427782E-07;
  COFTD[91] = 1.67284998E-10;
  COFTD[92] = 4.39489999E-02;
  COFTD[93] = 1.03816573E-03;
  COFTD[94] = -7.32427782E-07;
  COFTD[95] = 1.67284998E-10;
  COFTD[96] = 4.40336014E-02;
  COFTD[97] = 1.04016419E-03;
  COFTD[98] = -7.33837700E-07;
  COFTD[99] = 1.67607020E-10;
  COFTD[100] = -1.21439940E-01;
  COFTD[101] = 1.23883105E-03;
  COFTD[102] = -7.99880649E-07;
  COFTD[103] = 1.73160777E-10;
  COFTD[104] = -1.21439940E-01;
  COFTD[105] = 1.23883105E-03;
  COFTD[106] = -7.99880649E-07;
  COFTD[107] = 1.73160777E-10;
  COFTD[108] = 4.38590721E-02;
  COFTD[109] = 1.03604145E-03;
  COFTD[110] = -7.30929099E-07;
  COFTD[111] = 1.66942702E-10;
  COFTD[112] = -2.12893859E-01;
  COFTD[113] = 1.26281139E-03;
  COFTD[114] = -7.54862938E-07;
  COFTD[115] = 1.55814481E-10;
  COFTD[116] = -2.13004648E-01;
  COFTD[117] = 1.26346855E-03;
  COFTD[118] = -7.55255766E-07;
  COFTD[119] = 1.55895567E-10;
  COFTD[120] = 3.76300857E-01;
  COFTD[121] = 2.89716506E-04;
  COFTD[122] = -2.53025596E-07;
  COFTD[123] = 6.73103796E-11;
  COFTD[124] = -1.15570296E-01;
  COFTD[125] = -1.82012403E-04;
  COFTD[126] = 1.48317762E-07;
  COFTD[127] = -3.73110256E-11;
  COFTD[128] = 0.00000000E+00;
  COFTD[129] = 0.00000000E+00;
  COFTD[130] = 0.00000000E+00;
  COFTD[131] = 0.00000000E+00;
  COFTD[132] = 3.66599164E-01;
  COFTD[133] = 1.83133456E-04;
  COFTD[134] = -1.67760224E-07;
  COFTD[135] = 4.65669946E-11;
  COFTD[136] = 3.72200520E-01;
  COFTD[137] = 1.85931595E-04;
  COFTD[138] = -1.70323472E-07;
  COFTD[139] = 4.72785028E-11;
  COFTD[140] = -7.38835413E-02;
  COFTD[141] = 1.01288758E-03;
  COFTD[142] = -6.67484942E-07;
  COFTD[143] = 1.46290033E-10;
  COFTD[144] = 3.66989891E-01;
  COFTD[145] = 3.40426613E-04;
  COFTD[146] = -2.91690454E-07;
  COFTD[147] = 7.63539544E-11;
  COFTD[148] = 3.68325715E-01;
  COFTD[149] = 3.41665749E-04;
  COFTD[150] = -2.92752192E-07;
  COFTD[151] = 7.66318789E-11;
  COFTD[152] = 3.65574893E-01;
  COFTD[153] = 3.39114035E-04;
  COFTD[154] = -2.90565787E-07;
  COFTD[155] = 7.60595575E-11;
  COFTD[156] = 3.68032880E-01;
  COFTD[157] = 1.36535641E-04;
  COFTD[158] = -1.29725789E-07;
  COFTD[159] = 3.72574704E-11;
  COFTD[160] = 3.60491621E-01;
  COFTD[161] = 1.80082451E-04;
  COFTD[162] = -1.64965338E-07;
  COFTD[163] = 4.57911882E-11;
  COFTD[164] = 3.66739805E-01;
  COFTD[165] = 1.83203712E-04;
  COFTD[166] = -1.67824582E-07;
  COFTD[167] = 4.65848593E-11;
  COFTD[168] = -9.97068049E-03;
  COFTD[169] = 9.34091582E-04;
  COFTD[170] = -6.41288509E-07;
  COFTD[171] = 1.44059757E-10;
  COFTD[172] = 4.27899309E-01;
  COFTD[173] = 1.58745345E-04;
  COFTD[174] = -1.50827762E-07;
  COFTD[175] = 4.33179933E-11;
  COFTD[176] = 4.29908811E-01;
  COFTD[177] = 1.59490846E-04;
  COFTD[178] = -1.51536080E-07;
  COFTD[179] = 4.35214234E-11;
  COFTD[180] = 2.33201397E-01;
  COFTD[181] = 6.33217466E-04;
  COFTD[182] = -4.93204727E-07;
  COFTD[183] = 1.20089647E-10;
  COFTD[184] = 2.28428917E-01;
  COFTD[185] = 6.47529866E-04;
  COFTD[186] = -5.02715811E-07;
  COFTD[187] = 1.22130923E-10;
  COFTD[188] = 4.29908811E-01;
  COFTD[189] = 1.59490846E-04;
  COFTD[190] = -1.51536080E-07;
  COFTD[191] = 4.35214234E-11;
  COFTD[192] = 3.79931275E-01;
  COFTD[193] = 2.92511589E-04;
  COFTD[194] = -2.55466697E-07;
  COFTD[195] = 6.79597665E-11;
  COFTD[196] = 2.05849501E-01;
  COFTD[197] = 7.30962426E-04;
  COFTD[198] = -5.58380161E-07;
  COFTD[199] = 1.34169971E-10;
  COFTD[200] = 2.43299224E-01;
  COFTD[201] = 6.60636341E-04;
  COFTD[202] = -5.14560927E-07;
  COFTD[203] = 1.25289635E-10;
  COFTD[204] = 3.48351193E-01;
  COFTD[205] = 3.76348814E-04;
  COFTD[206] = -3.17650195E-07;
  COFTD[207] = 8.21301102E-11;
  COFTD[208] = 3.49785579E-01;
  COFTD[209] = 3.77898485E-04;
  COFTD[210] = -3.18958166E-07;
  COFTD[211] = 8.24682929E-11;
  COFTD[212] = 3.49785579E-01;
  COFTD[213] = 3.77898485E-04;
  COFTD[214] = -3.18958166E-07;
  COFTD[215] = 8.24682929E-11;
  COFTD[216] = 3.51137454E-01;
  COFTD[217] = 3.79359013E-04;
  COFTD[218] = -3.20190897E-07;
  COFTD[219] = 8.27870218E-11;
  COFTD[220] = 2.07058762E-01;
  COFTD[221] = 7.35256460E-04;
  COFTD[222] = -5.61660361E-07;
  COFTD[223] = 1.34958151E-10;
  COFTD[224] = 2.07058762E-01;
  COFTD[225] = 7.35256460E-04;
  COFTD[226] = -5.61660361E-07;
  COFTD[227] = 1.34958151E-10;
  COFTD[228] = 3.48351193E-01;
  COFTD[229] = 3.76348814E-04;
  COFTD[230] = -3.17650195E-07;
  COFTD[231] = 8.21301102E-11;
  COFTD[232] = 8.57390284E-02;
  COFTD[233] = 9.72789891E-04;
  COFTD[234] = -6.99951376E-07;
  COFTD[235] = 1.61824128E-10;
  COFTD[236] = 8.58283579E-02;
  COFTD[237] = 9.73803418E-04;
  COFTD[238] = -7.00680639E-07;
  COFTD[239] = 1.61992729E-10;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[30];
  amrex::Real SIG[30];
  amrex::Real wt[30];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: N2
  // Imported from NIST
  Tci[0] = 126.192000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (28.013400 * 28.013400 * 33.958000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (28.013400 * 33.958000);
  acentric_i[0] = 0.037200;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: H2
  // Imported from NIST
  Tci[2] = 33.145000;
  ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] /
          (2.015880 * 2.015880 * 12.964000);
  bi[2] = 0.08664 * Rcst * Tci[2] / (2.015880 * 12.964000);
  acentric_i[2] = -0.219000;

  // species 3: O
  Tci[3] = 1.316 * EPS[3];
  ai[3] = (5.55 * avogadro * avogadro * EPS[3] * boltzmann * 1e-24 * SIG[3] *
           SIG[3] * SIG[3]) /
          (wt[3] * wt[3]);
  bi[3] = 0.855 * avogadro * 1e-24 * SIG[3] * SIG[3] * SIG[3] / (wt[3]);
  acentric_i[3] = 0.0;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2O
  // Imported from NIST
  Tci[5] = 647.096000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (18.015340 * 18.015340 * 220.640000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (18.015340 * 220.640000);
  acentric_i[5] = 0.344300;

  // species 6: HO2
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: H2O2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: O2
  // Imported from NIST
  Tci[8] = 154.581000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (31.998800 * 31.998800 * 50.430466);
  bi[8] = 0.08664 * Rcst * Tci[8] / (31.998800 * 50.430466);
  acentric_i[8] = 0.022200;

  // species 9: N
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: NH
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: NH2
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: NH3
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: NNH
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: N2H2
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: N2H3
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;

  // species 16: N2H4
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: H2NN
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: NO
  // Imported from NIST
  Tci[18] = 180.000000;
  ai[18] = 1e6 * 0.42748 * Rcst * Rcst * Tci[18] * Tci[18] /
           (30.006000 * 30.006000 * 64.800000);
  bi[18] = 0.08664 * Rcst * Tci[18] / (30.006000 * 64.800000);
  acentric_i[18] = 0.582000;

  // species 19: N2O
  // Imported from NIST
  Tci[19] = 309.600000;
  ai[19] = 1e6 * 0.42748 * Rcst * Rcst * Tci[19] * Tci[19] /
           (44.013000 * 44.013000 * 72.550000);
  bi[19] = 0.08664 * Rcst * Tci[19] / (44.013000 * 72.550000);
  acentric_i[19] = 0.162000;

  // species 20: NO2
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann * 1e-24 * SIG[20] *
            SIG[20] * SIG[20]) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: HNO
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: H2NO
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann * 1e-24 * SIG[22] *
            SIG[22] * SIG[22]) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * 1e-24 * SIG[22] * SIG[22] * SIG[22] / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: HNOH
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: NH2OH
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann * 1e-24 * SIG[24] *
            SIG[24] * SIG[24]) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * 1e-24 * SIG[24] * SIG[24] * SIG[24] / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: HONO
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: HNO2
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann * 1e-24 * SIG[26] *
            SIG[26] * SIG[26]) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * 1e-24 * SIG[26] * SIG[26] * SIG[26] / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: HON
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: NO3
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: HNO3
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: N2
  // Imported from NIST
  sqrtOneOverTc[0] = 8.9019282240563e-02;
  sqrtAsti[0] = 4.2022983929562e+04;
  Bi[0] = 9.5560052221563e-01;
  Fomega[0] = 5.4259343186608e-01;

  // species 1: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 7.2391579785311e-02;
  sqrtAsti[1] = 5.8451221185793e+05;
  Bi[1] = 4.4006634563410e+00;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: H2
  // Imported from NIST
  sqrtOneOverTc[2] = 1.7369646834812e-01;
  sqrtAsti[2] = 2.4824229305911e+05;
  Bi[2] = 9.1362254169923e+00;
  Fomega[2] = 1.3798618890700e-01;

  // species 3: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[3] = 9.7460146948181e-02;
  sqrtAsti[3] = 4.2500156012386e+04;
  Bi[3] = 6.6930234851885e-01;
  Fomega[3] = 4.8508000000000e-01;

  // species 4: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 3.9981183985545e+04;
  Bi[4] = 6.2963299076575e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: H2O
  // Imported from NIST
  sqrtOneOverTc[5] = 3.9311140369715e-02;
  sqrtAsti[5] = 1.3145468419592e+05;
  Bi[5] = 1.1727204136223e+00;
  Fomega[5] = 1.0013577274636e+00;

  // species 6: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 8.4114315417892e-02;
  sqrtAsti[6] = 3.3657825710980e+04;
  Bi[6] = 6.4505861132042e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 8.4114315417892e-02;
  sqrtAsti[7] = 3.2660380884830e+04;
  Bi[7] = 6.2594239211036e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: O2
  // Imported from NIST
  sqrtOneOverTc[8] = 8.0430717653241e-02;
  sqrtAsti[8] = 3.6980081924740e+04;
  Bi[8] = 6.9005216444999e-01;
  Fomega[8] = 5.1945301904908e-01;

  // species 9: N
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 1.0316275924140e-01;
  sqrtAsti[9] = 6.0230890290396e+04;
  Bi[9] = 1.3186329724611e+00;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: NH
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 9.7460146948181e-02;
  sqrtAsti[10] = 4.2837862875144e+04;
  Bi[10] = 6.3815972382091e-01;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: NH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 9.7460146948181e-02;
  sqrtAsti[11] = 4.0142951449185e+04;
  Bi[11] = 5.9801337160150e-01;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: NH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 3.9746557257596e-02;
  sqrtAsti[12] = 1.0711394012187e+05;
  Bi[12] = 7.5270623103672e-01;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: NNH
  // Computed from Lennard-Jones
  sqrtOneOverTc[13] = 1.0316275924140e-01;
  sqrtAsti[13] = 3.5924732016994e+04;
  Bi[13] = 9.7197400314873e-01;
  Fomega[13] = 4.8508000000000e-01;

  // species 14: N2H2
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 1.0316275924140e-01;
  sqrtAsti[14] = 3.4718866886354e+04;
  Bi[14] = 9.3934830234373e-01;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: N2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 6.1639209090192e-02;
  sqrtAsti[15] = 5.8500221172854e+04;
  Bi[15] = 9.8405007346676e-01;
  Fomega[15] = 4.8508000000000e-01;

  // species 16: N2H4
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 6.0882871132455e-02;
  sqrtAsti[16] = 6.4796713909941e+04;
  Bi[16] = 1.2160862543432e+00;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: H2NN
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 1.0316275924140e-01;
  sqrtAsti[17] = 3.4718866886354e+04;
  Bi[17] = 9.3934830234373e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: NO
  // Imported from NIST
  sqrtOneOverTc[18] = 7.4535599249993e-02;
  sqrtAsti[18] = 4.0510614916903e+04;
  Bi[18] = 6.6687106751983e-01;
  Fomega[18] = 1.3368144381880e+00;

  // species 19: N2O
  // Imported from NIST
  sqrtOneOverTc[19] = 5.6832861622539e-02;
  sqrtAsti[19] = 4.4894507333531e+04;
  Bi[19] = 6.9844955486412e-01;
  Fomega[19] = 7.3247646842800e-01;

  // species 20: NO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[20] = 6.1639209090192e-02;
  sqrtAsti[20] = 3.3554545279404e+04;
  Bi[20] = 4.7986182770822e-01;
  Fomega[20] = 4.8508000000000e-01;

  // species 21: HNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 8.0693142212399e-02;
  sqrtAsti[21] = 3.7890324657121e+04;
  Bi[21] = 7.0693914184172e-01;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: H2NO
  // Computed from Lennard-Jones
  sqrtOneOverTc[22] = 8.0693142212399e-02;
  sqrtAsti[22] = 3.6697599429016e+04;
  Bi[22] = 6.8468585800634e-01;
  Fomega[22] = 4.8508000000000e-01;

  // species 23: HNOH
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 8.0693142212399e-02;
  sqrtAsti[23] = 3.6697599429016e+04;
  Bi[23] = 6.8468585800634e-01;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: NH2OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[24] = 8.0693142212399e-02;
  sqrtAsti[24] = 3.5577672688948e+04;
  Bi[24] = 6.6379081274838e-01;
  Fomega[24] = 4.8508000000000e-01;

  // species 25: HONO
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 5.7181295893460e-02;
  sqrtAsti[25] = 4.0485295977318e+04;
  Bi[25] = 6.1434867762471e-01;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: HNO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[26] = 5.7181295893460e-02;
  sqrtAsti[26] = 4.0485295977318e+04;
  Bi[26] = 6.1434867762471e-01;
  Fomega[26] = 4.8508000000000e-01;

  // species 27: HON
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 8.0693142212399e-02;
  sqrtAsti[27] = 3.7890324657121e+04;
  Bi[27] = 7.0693914184172e-01;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: NO3
  // Computed from Lennard-Jones
  sqrtOneOverTc[28] = 4.4812223309742e-02;
  sqrtAsti[28] = 4.4614898002783e+04;
  Bi[28] = 6.0431981938140e-01;
  Fomega[28] = 4.8508000000000e-01;

  // species 29: HNO3
  // Computed from Lennard-Jones
  sqrtOneOverTc[29] = 4.4812223309742e-02;
  sqrtAsti[29] = 4.3901195578057e+04;
  Bi[29] = 5.9465254365715e-01;
  Fomega[29] = 4.8508000000000e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
